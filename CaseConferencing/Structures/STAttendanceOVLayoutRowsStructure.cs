/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STAttendanceOVLayoutRowsStructure</code> that represents the Service Studio
	///  structure <code>AttendanceOVLayoutRows</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAttendanceOVLayoutRowsStructure: ISerializable, ITypedRecord<STAttendanceOVLayoutRowsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdRowNumber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*H+QvbSAoZEGCVtAs8zxYcQ");
		private static readonly GlobalObjectKey IdRowHeader = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*rmCIseSLe0KMBfKcxt1ucw");
		private static readonly GlobalObjectKey IdEvent = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*CBf6KcWC3UuJv8VGXIovPA");
		private static readonly GlobalObjectKey IdRowHeaderTooltip = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*khbuoU6N0keICPPJCZEviw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RowNumber")]
		public int ssRowNumber;

		[System.Xml.Serialization.XmlElement("RowHeader")]
		public string ssRowHeader;

		[System.Xml.Serialization.XmlElement("Event")]
		public string ssEvent;

		[System.Xml.Serialization.XmlElement("RowHeaderTooltip")]
		public string ssRowHeaderTooltip;


		public BitArray OptimizedAttributes;

		public STAttendanceOVLayoutRowsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssRowNumber = 0;
			ssRowHeader = "";
			ssEvent = "";
			ssRowHeaderTooltip = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssRowNumber = r.ReadInteger(index++, "AttendanceOVLayoutRows.RowNumber", 0);
			ssRowHeader = r.ReadText(index++, "AttendanceOVLayoutRows.RowHeader", "");
			ssEvent = r.ReadText(index++, "AttendanceOVLayoutRows.Event", "");
			ssRowHeaderTooltip = r.ReadText(index++, "AttendanceOVLayoutRows.RowHeaderTooltip", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAttendanceOVLayoutRowsStructure r) {
			this = r;
		}


		public static bool operator == (STAttendanceOVLayoutRowsStructure a, STAttendanceOVLayoutRowsStructure b) {
			if (a.ssRowNumber != b.ssRowNumber) return false;
			if (a.ssRowHeader != b.ssRowHeader) return false;
			if (a.ssEvent != b.ssEvent) return false;
			if (a.ssRowHeaderTooltip != b.ssRowHeaderTooltip) return false;
			return true;
		}

		public static bool operator != (STAttendanceOVLayoutRowsStructure a, STAttendanceOVLayoutRowsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAttendanceOVLayoutRowsStructure)) return false;
			return (this == (STAttendanceOVLayoutRowsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssRowNumber.GetHashCode()
				^ ssRowHeader.GetHashCode()
				^ ssEvent.GetHashCode()
				^ ssRowHeaderTooltip.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAttendanceOVLayoutRowsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssRowNumber = 0;
			ssRowHeader = "";
			ssEvent = "";
			ssRowHeaderTooltip = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssRowNumber = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssRowHeader = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssEvent = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssRowHeaderTooltip = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STAttendanceOVLayoutRowsStructure Duplicate() {
			STAttendanceOVLayoutRowsStructure t;
			t.ssRowNumber = this.ssRowNumber;
			t.ssRowHeader = this.ssRowHeader;
			t.ssEvent = this.ssEvent;
			t.ssRowHeaderTooltip = this.ssRowHeaderTooltip;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RowNumber")) VarValue.AppendAttribute(recordElem, "RowNumber", ssRowNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "RowNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RowHeader")) VarValue.AppendAttribute(recordElem, "RowHeader", ssRowHeader, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RowHeader");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Event")) VarValue.AppendAttribute(recordElem, "Event", ssEvent, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Event");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RowHeaderTooltip")) VarValue.AppendAttribute(recordElem, "RowHeaderTooltip", ssRowHeaderTooltip, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RowHeaderTooltip");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "rownumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RowNumber")) variable.Value = ssRowNumber; else variable.Optimized = true;
			} else if (head == "rowheader") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RowHeader")) variable.Value = ssRowHeader; else variable.Optimized = true;
			} else if (head == "event") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Event")) variable.Value = ssEvent; else variable.Optimized = true;
			} else if (head == "rowheadertooltip") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RowHeaderTooltip")) variable.Value = ssRowHeaderTooltip; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRowNumber) {
				return ssRowNumber;
			} else if (key == IdRowHeader) {
				return ssRowHeader;
			} else if (key == IdEvent) {
				return ssEvent;
			} else if (key == IdRowHeaderTooltip) {
				return ssRowHeaderTooltip;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssRowNumber = (int) other.AttributeGet(IdRowNumber);
			ssRowHeader = (string) other.AttributeGet(IdRowHeader);
			ssEvent = (string) other.AttributeGet(IdEvent);
			ssRowHeaderTooltip = (string) other.AttributeGet(IdRowHeaderTooltip);
		}
	} // STAttendanceOVLayoutRowsStructure
	/// <summary>
	/// Structure <code>RCAttendanceOVLayoutRowsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAttendanceOVLayoutRowsRecord: ISerializable, ITypedRecord<RCAttendanceOVLayoutRowsRecord> {
		private static readonly GlobalObjectKey IdAttendanceOVLayoutRows = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*x5aWFjcDxpCPaCKR4Jbzjg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AttendanceOVLayoutRows")]
		public STAttendanceOVLayoutRowsStructure ssSTAttendanceOVLayoutRows;


		public static implicit operator STAttendanceOVLayoutRowsStructure(RCAttendanceOVLayoutRowsRecord r) {
			return r.ssSTAttendanceOVLayoutRows;
		}

		public static implicit operator RCAttendanceOVLayoutRowsRecord(STAttendanceOVLayoutRowsStructure r) {
			RCAttendanceOVLayoutRowsRecord res = new RCAttendanceOVLayoutRowsRecord(null);
			res.ssSTAttendanceOVLayoutRows = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCAttendanceOVLayoutRowsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTAttendanceOVLayoutRows = new STAttendanceOVLayoutRowsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTAttendanceOVLayoutRows.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTAttendanceOVLayoutRows.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAttendanceOVLayoutRowsRecord r) {
			this = r;
		}


		public static bool operator == (RCAttendanceOVLayoutRowsRecord a, RCAttendanceOVLayoutRowsRecord b) {
			if (a.ssSTAttendanceOVLayoutRows != b.ssSTAttendanceOVLayoutRows) return false;
			return true;
		}

		public static bool operator != (RCAttendanceOVLayoutRowsRecord a, RCAttendanceOVLayoutRowsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAttendanceOVLayoutRowsRecord)) return false;
			return (this == (RCAttendanceOVLayoutRowsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTAttendanceOVLayoutRows.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAttendanceOVLayoutRowsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTAttendanceOVLayoutRows = new STAttendanceOVLayoutRowsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTAttendanceOVLayoutRows = (STAttendanceOVLayoutRowsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTAttendanceOVLayoutRows.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTAttendanceOVLayoutRows.InternalRecursiveSave();
		}


		public RCAttendanceOVLayoutRowsRecord Duplicate() {
			RCAttendanceOVLayoutRowsRecord t;
			t.ssSTAttendanceOVLayoutRows = (STAttendanceOVLayoutRowsStructure) this.ssSTAttendanceOVLayoutRows.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTAttendanceOVLayoutRows.ToXml(this, recordElem, "AttendanceOVLayoutRows", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "attendanceovlayoutrows") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceOVLayoutRows")) variable.Value = ssSTAttendanceOVLayoutRows; else variable.Optimized = true;
				variable.SetFieldName("attendanceovlayoutrows");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAttendanceOVLayoutRows) {
				return ssSTAttendanceOVLayoutRows;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTAttendanceOVLayoutRows.FillFromOther((IRecord) other.AttributeGet(IdAttendanceOVLayoutRows));
		}
	} // RCAttendanceOVLayoutRowsRecord
	/// <summary>
	/// RecordList type <code>RLAttendanceOVLayoutRowsRecordList</code> that represents a record list of
	///  <code>AttendanceOVLayoutRows</code>
	/// </summary>
	[Serializable()]
	public partial class RLAttendanceOVLayoutRowsRecordList: GenericRecordList<RCAttendanceOVLayoutRowsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAttendanceOVLayoutRowsRecord GetElementDefaultValue() {
			return new RCAttendanceOVLayoutRowsRecord("");
		}

		public T[] ToArray<T>(Func<RCAttendanceOVLayoutRowsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAttendanceOVLayoutRowsRecordList recordlist, Func<RCAttendanceOVLayoutRowsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAttendanceOVLayoutRowsRecordList ToList<T>(T[] array, Func <T, RCAttendanceOVLayoutRowsRecord> converter) {
			RLAttendanceOVLayoutRowsRecordList result = new RLAttendanceOVLayoutRowsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAttendanceOVLayoutRowsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceOVLayoutRowsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceOVLayoutRowsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAttendanceOVLayoutRowsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAttendanceOVLayoutRowsRecord> NewList() {
			return new RLAttendanceOVLayoutRowsRecordList();
		}


	} // RLAttendanceOVLayoutRowsRecordList
	/// <summary>
	/// RecordList type <code>RLAttendanceOVLayoutRowsList</code> that represents a record list of
	///  <code>Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLAttendanceOVLayoutRowsList: GenericRecordList<STAttendanceOVLayoutRowsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STAttendanceOVLayoutRowsStructure GetElementDefaultValue() {
			return new STAttendanceOVLayoutRowsStructure("");
		}

		public T[] ToArray<T>(Func<STAttendanceOVLayoutRowsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAttendanceOVLayoutRowsList recordlist, Func<STAttendanceOVLayoutRowsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAttendanceOVLayoutRowsList ToList<T>(T[] array, Func <T, STAttendanceOVLayoutRowsStructure> converter) {
			RLAttendanceOVLayoutRowsList result = new RLAttendanceOVLayoutRowsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAttendanceOVLayoutRowsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceOVLayoutRowsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceOVLayoutRowsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAttendanceOVLayoutRowsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STAttendanceOVLayoutRowsStructure> NewList() {
			return new RLAttendanceOVLayoutRowsList();
		}


	} // RLAttendanceOVLayoutRowsList
}

namespace ssCaseConferencing {
	[XmlType("AttendanceOVLayoutRows")]
	public class WORCAttendanceOVLayoutRowsRecord {
		[System.Xml.Serialization.XmlElement("RowNumber")]
		public int varWSRowNumber;

		[System.Xml.Serialization.XmlElement("RowHeader")]
		public string varWSRowHeader;

		[System.Xml.Serialization.XmlElement("Event")]
		public string varWSEvent;

		[System.Xml.Serialization.XmlElement("RowHeaderTooltip")]
		public string varWSRowHeaderTooltip;

		public WORCAttendanceOVLayoutRowsRecord() {
			varWSRowNumber = (int) 0;
			varWSRowHeader = (string) "";
			varWSEvent = (string) "";
			varWSRowHeaderTooltip = (string) "";
		}

		public WORCAttendanceOVLayoutRowsRecord(STAttendanceOVLayoutRowsStructure r) {
			varWSRowNumber = (int) r.ssRowNumber;
			varWSRowHeader = BaseAppUtils.RemoveControlChars(r.ssRowHeader);
			varWSEvent = BaseAppUtils.RemoveControlChars(r.ssEvent);
			varWSRowHeaderTooltip = BaseAppUtils.RemoveControlChars(r.ssRowHeaderTooltip);
		}

		public static RLAttendanceOVLayoutRowsList ToRecordList(WORCAttendanceOVLayoutRowsRecord[] array) {
			RLAttendanceOVLayoutRowsList rl = new RLAttendanceOVLayoutRowsList();
			if (array != null) {
				foreach(WORCAttendanceOVLayoutRowsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAttendanceOVLayoutRowsRecord[] FromRecordList(RLAttendanceOVLayoutRowsList rl) {
			WORCAttendanceOVLayoutRowsRecord[] array = new WORCAttendanceOVLayoutRowsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAttendanceOVLayoutRowsRecord {
		public static implicit operator WORCAttendanceOVLayoutRowsRecord(RCAttendanceOVLayoutRowsRecord r) {
			return new WORCAttendanceOVLayoutRowsRecord(r.ssSTAttendanceOVLayoutRows);
		}

		public static implicit operator RCAttendanceOVLayoutRowsRecord(WORCAttendanceOVLayoutRowsRecord w) {
			RCAttendanceOVLayoutRowsRecord r = new RCAttendanceOVLayoutRowsRecord("");
			if (w != null) {
				r.ssSTAttendanceOVLayoutRows = w;
			}
			return r;
		}

	}

	partial struct STAttendanceOVLayoutRowsStructure {
		public static implicit operator WORCAttendanceOVLayoutRowsRecord(STAttendanceOVLayoutRowsStructure r) {
			return new WORCAttendanceOVLayoutRowsRecord(r);
		}

		public static implicit operator STAttendanceOVLayoutRowsStructure(WORCAttendanceOVLayoutRowsRecord w) {
			STAttendanceOVLayoutRowsStructure r = new STAttendanceOVLayoutRowsStructure("");
			if (w != null) {
				r.ssRowNumber = (int) w.varWSRowNumber;
				r.ssRowHeader = ((string) w.varWSRowHeader ?? "");
				r.ssEvent = ((string) w.varWSEvent ?? "");
				r.ssRowHeaderTooltip = ((string) w.varWSRowHeaderTooltip ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAttendanceOVLayoutRowsRecordList {
		public WORCAttendanceOVLayoutRowsRecord[] Array;


		public WORLAttendanceOVLayoutRowsRecordList(WORCAttendanceOVLayoutRowsRecord[] r) {
			if (r == null)
			Array = new WORCAttendanceOVLayoutRowsRecord[0];
			else
			Array = r;
		}
		public WORLAttendanceOVLayoutRowsRecordList() {
			Array = new WORCAttendanceOVLayoutRowsRecord[0];
		}

		public WORLAttendanceOVLayoutRowsRecordList(RLAttendanceOVLayoutRowsRecordList rl) {
			rl=(RLAttendanceOVLayoutRowsRecordList) rl.Duplicate();
			Array = new WORCAttendanceOVLayoutRowsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAttendanceOVLayoutRowsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAttendanceOVLayoutRowsRecordList {
		public static implicit operator RLAttendanceOVLayoutRowsRecordList(WORCAttendanceOVLayoutRowsRecord[] array) {
			RLAttendanceOVLayoutRowsRecordList rl = new RLAttendanceOVLayoutRowsRecordList();
			if (array != null) {
				foreach(WORCAttendanceOVLayoutRowsRecord val in array) {
					rl.Append((RCAttendanceOVLayoutRowsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAttendanceOVLayoutRowsRecord[](RLAttendanceOVLayoutRowsRecordList rl) {
			WORCAttendanceOVLayoutRowsRecord[] array = new WORCAttendanceOVLayoutRowsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAttendanceOVLayoutRowsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAttendanceOVLayoutRowsRecordList {
		public static implicit operator RLAttendanceOVLayoutRowsRecordList(WORLAttendanceOVLayoutRowsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAttendanceOVLayoutRowsRecordList(RLAttendanceOVLayoutRowsRecordList rl) {
			return new WORLAttendanceOVLayoutRowsRecordList(rl);
		}
		public static implicit operator WORCAttendanceOVLayoutRowsRecord[](WORLAttendanceOVLayoutRowsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAttendanceOVLayoutRowsRecordList(WORCAttendanceOVLayoutRowsRecord[] array) {
			return new WORLAttendanceOVLayoutRowsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAttendanceOVLayoutRowsList {
		public WORCAttendanceOVLayoutRowsRecord[] Array;


		public WORLAttendanceOVLayoutRowsList(WORCAttendanceOVLayoutRowsRecord[] r) {
			if (r == null)
			Array = new WORCAttendanceOVLayoutRowsRecord[0];
			else
			Array = r;
		}
		public WORLAttendanceOVLayoutRowsList() {
			Array = new WORCAttendanceOVLayoutRowsRecord[0];
		}

		public WORLAttendanceOVLayoutRowsList(RLAttendanceOVLayoutRowsList rl) {
			rl=(RLAttendanceOVLayoutRowsList) rl.Duplicate();
			Array = new WORCAttendanceOVLayoutRowsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAttendanceOVLayoutRowsList {
		public static implicit operator RLAttendanceOVLayoutRowsList(WORCAttendanceOVLayoutRowsRecord[] array) {
			RLAttendanceOVLayoutRowsList rl = new RLAttendanceOVLayoutRowsList();
			if (array != null) {
				foreach(WORCAttendanceOVLayoutRowsRecord val in array) {
					rl.Append((STAttendanceOVLayoutRowsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAttendanceOVLayoutRowsRecord[](RLAttendanceOVLayoutRowsList rl) {
			WORCAttendanceOVLayoutRowsRecord[] array = new WORCAttendanceOVLayoutRowsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STAttendanceOVLayoutRowsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAttendanceOVLayoutRowsList {
		public static implicit operator RLAttendanceOVLayoutRowsList(WORLAttendanceOVLayoutRowsList w) {
			return w.Array;
		}
		public static implicit operator WORLAttendanceOVLayoutRowsList(RLAttendanceOVLayoutRowsList rl) {
			return new WORLAttendanceOVLayoutRowsList(rl);
		}
		public static implicit operator WORCAttendanceOVLayoutRowsRecord[](WORLAttendanceOVLayoutRowsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAttendanceOVLayoutRowsList(WORCAttendanceOVLayoutRowsRecord[] array) {
			return new WORLAttendanceOVLayoutRowsList(array);
		}
	}
}

