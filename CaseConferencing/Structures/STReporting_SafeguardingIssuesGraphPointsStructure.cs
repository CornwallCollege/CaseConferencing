/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STReporting_SafeguardingIssuesGraphPointsStructure</code> that represents the
	///  Service Studio structure <code>Reporting_SafeguardingIssuesGraphPoints</code> <p> Description
	/// : </p>
	/// </summary>
	[Serializable()]
	public partial struct STReporting_SafeguardingIssuesGraphPointsStructure: ISerializable, ITypedRecord<STReporting_SafeguardingIssuesGraphPointsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdClusterName = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*qRtxASKts0apncM1_1tZpw");
		private static readonly GlobalObjectKey IdSafeguardingIssueType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*luy31TRDd0mLAPlX31TsUw");
		private static readonly GlobalObjectKey IdNumberOfLearners = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*S6AjHR3Qrk+6+O4EigLJmQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ClusterName")]
		public string ssClusterName;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public string ssSafeguardingIssueType;

		[System.Xml.Serialization.XmlElement("NumberOfLearners")]
		public int ssNumberOfLearners;


		public BitArray OptimizedAttributes;

		public STReporting_SafeguardingIssuesGraphPointsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssClusterName = "";
			ssSafeguardingIssueType = "";
			ssNumberOfLearners = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssClusterName = r.ReadText(index++, "Reporting_SafeguardingIssuesGraphPoints.ClusterName", "");
			ssSafeguardingIssueType = r.ReadText(index++, "Reporting_SafeguardingIssuesGraphPoints.SafeguardingIssueType", "");
			ssNumberOfLearners = r.ReadInteger(index++, "Reporting_SafeguardingIssuesGraphPoints.NumberOfLearners", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STReporting_SafeguardingIssuesGraphPointsStructure r) {
			this = r;
		}


		public static bool operator == (STReporting_SafeguardingIssuesGraphPointsStructure a, STReporting_SafeguardingIssuesGraphPointsStructure b) {
			if (a.ssClusterName != b.ssClusterName) return false;
			if (a.ssSafeguardingIssueType != b.ssSafeguardingIssueType) return false;
			if (a.ssNumberOfLearners != b.ssNumberOfLearners) return false;
			return true;
		}

		public static bool operator != (STReporting_SafeguardingIssuesGraphPointsStructure a, STReporting_SafeguardingIssuesGraphPointsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STReporting_SafeguardingIssuesGraphPointsStructure)) return false;
			return (this == (STReporting_SafeguardingIssuesGraphPointsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssClusterName.GetHashCode()
				^ ssSafeguardingIssueType.GetHashCode()
				^ ssNumberOfLearners.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STReporting_SafeguardingIssuesGraphPointsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssClusterName = "";
			ssSafeguardingIssueType = "";
			ssNumberOfLearners = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssClusterName = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSafeguardingIssueType = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssNumberOfLearners = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STReporting_SafeguardingIssuesGraphPointsStructure Duplicate() {
			STReporting_SafeguardingIssuesGraphPointsStructure t;
			t.ssClusterName = this.ssClusterName;
			t.ssSafeguardingIssueType = this.ssSafeguardingIssueType;
			t.ssNumberOfLearners = this.ssNumberOfLearners;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ClusterName")) VarValue.AppendAttribute(recordElem, "ClusterName", ssClusterName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ClusterName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingIssueType")) VarValue.AppendAttribute(recordElem, "SafeguardingIssueType", ssSafeguardingIssueType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingIssueType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumberOfLearners")) VarValue.AppendAttribute(recordElem, "NumberOfLearners", ssNumberOfLearners, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "NumberOfLearners");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "clustername") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ClusterName")) variable.Value = ssClusterName; else variable.Optimized = true;
			} else if (head == "safeguardingissuetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueType")) variable.Value = ssSafeguardingIssueType; else variable.Optimized = true;
			} else if (head == "numberoflearners") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumberOfLearners")) variable.Value = ssNumberOfLearners; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdClusterName) {
				return ssClusterName;
			} else if (key == IdSafeguardingIssueType) {
				return ssSafeguardingIssueType;
			} else if (key == IdNumberOfLearners) {
				return ssNumberOfLearners;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssClusterName = (string) other.AttributeGet(IdClusterName);
			ssSafeguardingIssueType = (string) other.AttributeGet(IdSafeguardingIssueType);
			ssNumberOfLearners = (int) other.AttributeGet(IdNumberOfLearners);
		}
	} // STReporting_SafeguardingIssuesGraphPointsStructure
	/// <summary>
	/// Structure <code>RCReporting_SafeguardingIssuesGraphPointsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCReporting_SafeguardingIssuesGraphPointsRecord: ISerializable, ITypedRecord<RCReporting_SafeguardingIssuesGraphPointsRecord> {
		private static readonly GlobalObjectKey IdReporting_SafeguardingIssuesGraphPoints = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+C7QjLbHnl7u7ycc6v5xBw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Reporting_SafeguardingIssuesGraphPoints")]
		public STReporting_SafeguardingIssuesGraphPointsStructure ssSTReporting_SafeguardingIssuesGraphPoints;


		public static implicit operator STReporting_SafeguardingIssuesGraphPointsStructure(RCReporting_SafeguardingIssuesGraphPointsRecord r) {
			return r.ssSTReporting_SafeguardingIssuesGraphPoints;
		}

		public static implicit operator RCReporting_SafeguardingIssuesGraphPointsRecord(STReporting_SafeguardingIssuesGraphPointsStructure r) {
			RCReporting_SafeguardingIssuesGraphPointsRecord res = new RCReporting_SafeguardingIssuesGraphPointsRecord(null);
			res.ssSTReporting_SafeguardingIssuesGraphPoints = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCReporting_SafeguardingIssuesGraphPointsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTReporting_SafeguardingIssuesGraphPoints = new STReporting_SafeguardingIssuesGraphPointsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTReporting_SafeguardingIssuesGraphPoints.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTReporting_SafeguardingIssuesGraphPoints.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCReporting_SafeguardingIssuesGraphPointsRecord r) {
			this = r;
		}


		public static bool operator == (RCReporting_SafeguardingIssuesGraphPointsRecord a, RCReporting_SafeguardingIssuesGraphPointsRecord b) {
			if (a.ssSTReporting_SafeguardingIssuesGraphPoints != b.ssSTReporting_SafeguardingIssuesGraphPoints) return false;
			return true;
		}

		public static bool operator != (RCReporting_SafeguardingIssuesGraphPointsRecord a, RCReporting_SafeguardingIssuesGraphPointsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCReporting_SafeguardingIssuesGraphPointsRecord)) return false;
			return (this == (RCReporting_SafeguardingIssuesGraphPointsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTReporting_SafeguardingIssuesGraphPoints.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCReporting_SafeguardingIssuesGraphPointsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTReporting_SafeguardingIssuesGraphPoints = new STReporting_SafeguardingIssuesGraphPointsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTReporting_SafeguardingIssuesGraphPoints = (STReporting_SafeguardingIssuesGraphPointsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTReporting_SafeguardingIssuesGraphPoints.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTReporting_SafeguardingIssuesGraphPoints.InternalRecursiveSave();
		}


		public RCReporting_SafeguardingIssuesGraphPointsRecord Duplicate() {
			RCReporting_SafeguardingIssuesGraphPointsRecord t;
			t.ssSTReporting_SafeguardingIssuesGraphPoints = (STReporting_SafeguardingIssuesGraphPointsStructure) this.ssSTReporting_SafeguardingIssuesGraphPoints.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTReporting_SafeguardingIssuesGraphPoints.ToXml(this, recordElem, "Reporting_SafeguardingIssuesGraphPoints", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "reporting_safeguardingissuesgraphpoints") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Reporting_SafeguardingIssuesGraphPoints")) variable.Value = ssSTReporting_SafeguardingIssuesGraphPoints; else variable.Optimized = true;
				variable.SetFieldName("reporting_safeguardingissuesgraphpoints");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdReporting_SafeguardingIssuesGraphPoints) {
				return ssSTReporting_SafeguardingIssuesGraphPoints;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTReporting_SafeguardingIssuesGraphPoints.FillFromOther((IRecord) other.AttributeGet(IdReporting_SafeguardingIssuesGraphPoints));
		}
	} // RCReporting_SafeguardingIssuesGraphPointsRecord
	/// <summary>
	/// RecordList type <code>RLReporting_SafeguardingIssuesGraphPointsRecordList</code> that represents a
	///  record list of <code>Reporting_SafeguardingIssuesGraphPoints</code>
	/// </summary>
	[Serializable()]
	public partial class RLReporting_SafeguardingIssuesGraphPointsRecordList: GenericRecordList<RCReporting_SafeguardingIssuesGraphPointsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCReporting_SafeguardingIssuesGraphPointsRecord GetElementDefaultValue() {
			return new RCReporting_SafeguardingIssuesGraphPointsRecord("");
		}

		public T[] ToArray<T>(Func<RCReporting_SafeguardingIssuesGraphPointsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLReporting_SafeguardingIssuesGraphPointsRecordList recordlist, Func<RCReporting_SafeguardingIssuesGraphPointsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLReporting_SafeguardingIssuesGraphPointsRecordList ToList<T>(T[] array, Func <T, RCReporting_SafeguardingIssuesGraphPointsRecord> converter) {
			RLReporting_SafeguardingIssuesGraphPointsRecordList result = new RLReporting_SafeguardingIssuesGraphPointsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLReporting_SafeguardingIssuesGraphPointsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesGraphPointsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesGraphPointsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLReporting_SafeguardingIssuesGraphPointsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCReporting_SafeguardingIssuesGraphPointsRecord> NewList() {
			return new RLReporting_SafeguardingIssuesGraphPointsRecordList();
		}


	} // RLReporting_SafeguardingIssuesGraphPointsRecordList
	/// <summary>
	/// RecordList type <code>RLReporting_SafeguardingIssuesGraphPointsList</code> that represents a record
	///  list of <code>Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLReporting_SafeguardingIssuesGraphPointsList: GenericRecordList<STReporting_SafeguardingIssuesGraphPointsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STReporting_SafeguardingIssuesGraphPointsStructure GetElementDefaultValue() {
			return new STReporting_SafeguardingIssuesGraphPointsStructure("");
		}

		public T[] ToArray<T>(Func<STReporting_SafeguardingIssuesGraphPointsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLReporting_SafeguardingIssuesGraphPointsList recordlist, Func<STReporting_SafeguardingIssuesGraphPointsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLReporting_SafeguardingIssuesGraphPointsList ToList<T>(T[] array, Func <T, STReporting_SafeguardingIssuesGraphPointsStructure> converter) {
			RLReporting_SafeguardingIssuesGraphPointsList result = new RLReporting_SafeguardingIssuesGraphPointsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLReporting_SafeguardingIssuesGraphPointsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesGraphPointsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesGraphPointsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLReporting_SafeguardingIssuesGraphPointsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STReporting_SafeguardingIssuesGraphPointsStructure> NewList() {
			return new RLReporting_SafeguardingIssuesGraphPointsList();
		}


	} // RLReporting_SafeguardingIssuesGraphPointsList
}

namespace ssCaseConferencing {
	[XmlType("Reporting_SafeguardingIssuesGraphPoints")]
	public class WORCReporting_SafeguardingIssuesGraphPointsRecord {
		[System.Xml.Serialization.XmlElement("ClusterName")]
		public string varWSClusterName;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public string varWSSafeguardingIssueType;

		[System.Xml.Serialization.XmlElement("NumberOfLearners")]
		public int varWSNumberOfLearners;

		public WORCReporting_SafeguardingIssuesGraphPointsRecord() {
			varWSClusterName = (string) "";
			varWSSafeguardingIssueType = (string) "";
			varWSNumberOfLearners = (int) 0;
		}

		public WORCReporting_SafeguardingIssuesGraphPointsRecord(STReporting_SafeguardingIssuesGraphPointsStructure r) {
			varWSClusterName = BaseAppUtils.RemoveControlChars(r.ssClusterName);
			varWSSafeguardingIssueType = BaseAppUtils.RemoveControlChars(r.ssSafeguardingIssueType);
			varWSNumberOfLearners = (int) r.ssNumberOfLearners;
		}

		public static RLReporting_SafeguardingIssuesGraphPointsList ToRecordList(WORCReporting_SafeguardingIssuesGraphPointsRecord[] array) {
			RLReporting_SafeguardingIssuesGraphPointsList rl = new RLReporting_SafeguardingIssuesGraphPointsList();
			if (array != null) {
				foreach(WORCReporting_SafeguardingIssuesGraphPointsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCReporting_SafeguardingIssuesGraphPointsRecord[] FromRecordList(RLReporting_SafeguardingIssuesGraphPointsList rl) {
			WORCReporting_SafeguardingIssuesGraphPointsRecord[] array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCReporting_SafeguardingIssuesGraphPointsRecord {
		public static implicit operator WORCReporting_SafeguardingIssuesGraphPointsRecord(RCReporting_SafeguardingIssuesGraphPointsRecord r) {
			return new WORCReporting_SafeguardingIssuesGraphPointsRecord(r.ssSTReporting_SafeguardingIssuesGraphPoints);
		}

		public static implicit operator RCReporting_SafeguardingIssuesGraphPointsRecord(WORCReporting_SafeguardingIssuesGraphPointsRecord w) {
			RCReporting_SafeguardingIssuesGraphPointsRecord r = new RCReporting_SafeguardingIssuesGraphPointsRecord("");
			if (w != null) {
				r.ssSTReporting_SafeguardingIssuesGraphPoints = w;
			}
			return r;
		}

	}

	partial struct STReporting_SafeguardingIssuesGraphPointsStructure {
		public static implicit operator WORCReporting_SafeguardingIssuesGraphPointsRecord(STReporting_SafeguardingIssuesGraphPointsStructure r) {
			return new WORCReporting_SafeguardingIssuesGraphPointsRecord(r);
		}

		public static implicit operator STReporting_SafeguardingIssuesGraphPointsStructure(WORCReporting_SafeguardingIssuesGraphPointsRecord w) {
			STReporting_SafeguardingIssuesGraphPointsStructure r = new STReporting_SafeguardingIssuesGraphPointsStructure("");
			if (w != null) {
				r.ssClusterName = ((string) w.varWSClusterName ?? "");
				r.ssSafeguardingIssueType = ((string) w.varWSSafeguardingIssueType ?? "");
				r.ssNumberOfLearners = (int) w.varWSNumberOfLearners;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLReporting_SafeguardingIssuesGraphPointsRecordList {
		public WORCReporting_SafeguardingIssuesGraphPointsRecord[] Array;


		public WORLReporting_SafeguardingIssuesGraphPointsRecordList(WORCReporting_SafeguardingIssuesGraphPointsRecord[] r) {
			if (r == null)
			Array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[0];
			else
			Array = r;
		}
		public WORLReporting_SafeguardingIssuesGraphPointsRecordList() {
			Array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[0];
		}

		public WORLReporting_SafeguardingIssuesGraphPointsRecordList(RLReporting_SafeguardingIssuesGraphPointsRecordList rl) {
			rl=(RLReporting_SafeguardingIssuesGraphPointsRecordList) rl.Duplicate();
			Array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCReporting_SafeguardingIssuesGraphPointsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLReporting_SafeguardingIssuesGraphPointsRecordList {
		public static implicit operator RLReporting_SafeguardingIssuesGraphPointsRecordList(WORCReporting_SafeguardingIssuesGraphPointsRecord[] array) {
			RLReporting_SafeguardingIssuesGraphPointsRecordList rl = new RLReporting_SafeguardingIssuesGraphPointsRecordList();
			if (array != null) {
				foreach(WORCReporting_SafeguardingIssuesGraphPointsRecord val in array) {
					rl.Append((RCReporting_SafeguardingIssuesGraphPointsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCReporting_SafeguardingIssuesGraphPointsRecord[](RLReporting_SafeguardingIssuesGraphPointsRecordList rl) {
			WORCReporting_SafeguardingIssuesGraphPointsRecord[] array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCReporting_SafeguardingIssuesGraphPointsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLReporting_SafeguardingIssuesGraphPointsRecordList {
		public static implicit operator RLReporting_SafeguardingIssuesGraphPointsRecordList(WORLReporting_SafeguardingIssuesGraphPointsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesGraphPointsRecordList(RLReporting_SafeguardingIssuesGraphPointsRecordList rl) {
			return new WORLReporting_SafeguardingIssuesGraphPointsRecordList(rl);
		}
		public static implicit operator WORCReporting_SafeguardingIssuesGraphPointsRecord[](WORLReporting_SafeguardingIssuesGraphPointsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesGraphPointsRecordList(WORCReporting_SafeguardingIssuesGraphPointsRecord[] array) {
			return new WORLReporting_SafeguardingIssuesGraphPointsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLReporting_SafeguardingIssuesGraphPointsList {
		public WORCReporting_SafeguardingIssuesGraphPointsRecord[] Array;


		public WORLReporting_SafeguardingIssuesGraphPointsList(WORCReporting_SafeguardingIssuesGraphPointsRecord[] r) {
			if (r == null)
			Array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[0];
			else
			Array = r;
		}
		public WORLReporting_SafeguardingIssuesGraphPointsList() {
			Array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[0];
		}

		public WORLReporting_SafeguardingIssuesGraphPointsList(RLReporting_SafeguardingIssuesGraphPointsList rl) {
			rl=(RLReporting_SafeguardingIssuesGraphPointsList) rl.Duplicate();
			Array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLReporting_SafeguardingIssuesGraphPointsList {
		public static implicit operator RLReporting_SafeguardingIssuesGraphPointsList(WORCReporting_SafeguardingIssuesGraphPointsRecord[] array) {
			RLReporting_SafeguardingIssuesGraphPointsList rl = new RLReporting_SafeguardingIssuesGraphPointsList();
			if (array != null) {
				foreach(WORCReporting_SafeguardingIssuesGraphPointsRecord val in array) {
					rl.Append((STReporting_SafeguardingIssuesGraphPointsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCReporting_SafeguardingIssuesGraphPointsRecord[](RLReporting_SafeguardingIssuesGraphPointsList rl) {
			WORCReporting_SafeguardingIssuesGraphPointsRecord[] array = new WORCReporting_SafeguardingIssuesGraphPointsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STReporting_SafeguardingIssuesGraphPointsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLReporting_SafeguardingIssuesGraphPointsList {
		public static implicit operator RLReporting_SafeguardingIssuesGraphPointsList(WORLReporting_SafeguardingIssuesGraphPointsList w) {
			return w.Array;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesGraphPointsList(RLReporting_SafeguardingIssuesGraphPointsList rl) {
			return new WORLReporting_SafeguardingIssuesGraphPointsList(rl);
		}
		public static implicit operator WORCReporting_SafeguardingIssuesGraphPointsRecord[](WORLReporting_SafeguardingIssuesGraphPointsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesGraphPointsList(WORCReporting_SafeguardingIssuesGraphPointsRecord[] array) {
			return new WORLReporting_SafeguardingIssuesGraphPointsList(array);
		}
	}
}

