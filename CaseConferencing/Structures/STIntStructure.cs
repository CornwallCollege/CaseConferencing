/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STIntStructure</code> that represents the Service Studio structure <code>Int</code>
	///  <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STIntStructure: ISerializable, ITypedRecord<STIntStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*vOMAB2TlJ0ezJQnZ3qTMcg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Value")]
		public int ssValue;


		public BitArray OptimizedAttributes;

		public STIntStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssValue = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssValue = r.ReadInteger(index++, "Int.Value", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STIntStructure r) {
			this = r;
		}


		public static bool operator == (STIntStructure a, STIntStructure b) {
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STIntStructure a, STIntStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STIntStructure)) return false;
			return (this == (STIntStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STIntStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssValue = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssValue = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STIntStructure Duplicate() {
			STIntStructure t;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssValue = (int) other.AttributeGet(IdValue);
		}
	} // STIntStructure
	/// <summary>
	/// Structure <code>RCIntRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCIntRecord: ISerializable, ITypedRecord<RCIntRecord> {
		private static readonly GlobalObjectKey IdInt = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ez7zMhrpK4l3myGw247q5g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Int")]
		public STIntStructure ssSTInt;


		public static implicit operator STIntStructure(RCIntRecord r) {
			return r.ssSTInt;
		}

		public static implicit operator RCIntRecord(STIntStructure r) {
			RCIntRecord res = new RCIntRecord(null);
			res.ssSTInt = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCIntRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTInt = new STIntStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTInt.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTInt.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCIntRecord r) {
			this = r;
		}


		public static bool operator == (RCIntRecord a, RCIntRecord b) {
			if (a.ssSTInt != b.ssSTInt) return false;
			return true;
		}

		public static bool operator != (RCIntRecord a, RCIntRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCIntRecord)) return false;
			return (this == (RCIntRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTInt.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCIntRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTInt = new STIntStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTInt = (STIntStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTInt.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTInt.InternalRecursiveSave();
		}


		public RCIntRecord Duplicate() {
			RCIntRecord t;
			t.ssSTInt = (STIntStructure) this.ssSTInt.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTInt.ToXml(this, recordElem, "Int", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "int") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Int")) variable.Value = ssSTInt; else variable.Optimized = true;
				variable.SetFieldName("int");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdInt) {
				return ssSTInt;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTInt.FillFromOther((IRecord) other.AttributeGet(IdInt));
		}
	} // RCIntRecord
	/// <summary>
	/// RecordList type <code>RLIntRecordList</code> that represents a record list of <code>Int</code>
	/// </summary>
	[Serializable()]
	public partial class RLIntRecordList: GenericRecordList<RCIntRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCIntRecord GetElementDefaultValue() {
			return new RCIntRecord("");
		}

		public T[] ToArray<T>(Func<RCIntRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIntRecordList recordlist, Func<RCIntRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIntRecordList ToList<T>(T[] array, Func <T, RCIntRecord> converter) {
			RLIntRecordList result = new RLIntRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIntRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIntRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCIntRecord> NewList() {
			return new RLIntRecordList();
		}


	} // RLIntRecordList
	/// <summary>
	/// RecordList type <code>RLIntList</code> that represents a record list of <code>Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLIntList: GenericRecordList<STIntStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STIntStructure GetElementDefaultValue() {
			return new STIntStructure("");
		}

		public T[] ToArray<T>(Func<STIntStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIntList recordlist, Func<STIntStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIntList ToList<T>(T[] array, Func <T, STIntStructure> converter) {
			RLIntList result = new RLIntList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIntList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIntList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STIntStructure> NewList() {
			return new RLIntList();
		}


	} // RLIntList
}

namespace ssCaseConferencing {
	[XmlType("Int")]
	public class WORCIntRecord {
		[System.Xml.Serialization.XmlElement("Value")]
		public int varWSValue;

		public WORCIntRecord() {
			varWSValue = (int) 0;
		}

		public WORCIntRecord(STIntStructure r) {
			varWSValue = (int) r.ssValue;
		}

		public static RLIntList ToRecordList(WORCIntRecord[] array) {
			RLIntList rl = new RLIntList();
			if (array != null) {
				foreach(WORCIntRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCIntRecord[] FromRecordList(RLIntList rl) {
			WORCIntRecord[] array = new WORCIntRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCIntRecord {
		public static implicit operator WORCIntRecord(RCIntRecord r) {
			return new WORCIntRecord(r.ssSTInt);
		}

		public static implicit operator RCIntRecord(WORCIntRecord w) {
			RCIntRecord r = new RCIntRecord("");
			if (w != null) {
				r.ssSTInt = w;
			}
			return r;
		}

	}

	partial struct STIntStructure {
		public static implicit operator WORCIntRecord(STIntStructure r) {
			return new WORCIntRecord(r);
		}

		public static implicit operator STIntStructure(WORCIntRecord w) {
			STIntStructure r = new STIntStructure("");
			if (w != null) {
				r.ssValue = (int) w.varWSValue;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLIntRecordList {
		public WORCIntRecord[] Array;


		public WORLIntRecordList(WORCIntRecord[] r) {
			if (r == null)
			Array = new WORCIntRecord[0];
			else
			Array = r;
		}
		public WORLIntRecordList() {
			Array = new WORCIntRecord[0];
		}

		public WORLIntRecordList(RLIntRecordList rl) {
			rl=(RLIntRecordList) rl.Duplicate();
			Array = new WORCIntRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCIntRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLIntRecordList {
		public static implicit operator RLIntRecordList(WORCIntRecord[] array) {
			RLIntRecordList rl = new RLIntRecordList();
			if (array != null) {
				foreach(WORCIntRecord val in array) {
					rl.Append((RCIntRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCIntRecord[](RLIntRecordList rl) {
			WORCIntRecord[] array = new WORCIntRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCIntRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLIntRecordList {
		public static implicit operator RLIntRecordList(WORLIntRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLIntRecordList(RLIntRecordList rl) {
			return new WORLIntRecordList(rl);
		}
		public static implicit operator WORCIntRecord[](WORLIntRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLIntRecordList(WORCIntRecord[] array) {
			return new WORLIntRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLIntList {
		public WORCIntRecord[] Array;


		public WORLIntList(WORCIntRecord[] r) {
			if (r == null)
			Array = new WORCIntRecord[0];
			else
			Array = r;
		}
		public WORLIntList() {
			Array = new WORCIntRecord[0];
		}

		public WORLIntList(RLIntList rl) {
			rl=(RLIntList) rl.Duplicate();
			Array = new WORCIntRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLIntList {
		public static implicit operator RLIntList(WORCIntRecord[] array) {
			RLIntList rl = new RLIntList();
			if (array != null) {
				foreach(WORCIntRecord val in array) {
					rl.Append((STIntStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCIntRecord[](RLIntList rl) {
			WORCIntRecord[] array = new WORCIntRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STIntStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLIntList {
		public static implicit operator RLIntList(WORLIntList w) {
			return w.Array;
		}
		public static implicit operator WORLIntList(RLIntList rl) {
			return new WORLIntList(rl);
		}
		public static implicit operator WORCIntRecord[](WORLIntList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLIntList(WORCIntRecord[] array) {
			return new WORLIntList(array);
		}
	}
}

