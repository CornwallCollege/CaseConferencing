/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STSupportTextsStructure</code> that represents the Service Studio structure
	///  <code>SupportTexts</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSupportTextsStructure: ISerializable, ITypedRecord<STSupportTextsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdFinancial = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*3huiWzoPqE6CvojVfwifdg");
		private static readonly GlobalObjectKey IdTransport = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*tEHN2Q7Q_0yH_yKB+Hk5Ug");
		private static readonly GlobalObjectKey IdAcademic = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*yQpVrTgA70SFnc4kHGxuUw");
		private static readonly GlobalObjectKey IdPersonal = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*F2l8EPqenEyDl9oTidcy7A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Financial")]
		public string ssFinancial;

		[System.Xml.Serialization.XmlElement("Transport")]
		public string ssTransport;

		[System.Xml.Serialization.XmlElement("Academic")]
		public string ssAcademic;

		[System.Xml.Serialization.XmlElement("Personal")]
		public string ssPersonal;


		public BitArray OptimizedAttributes;

		public STSupportTextsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssFinancial = "";
			ssTransport = "";
			ssAcademic = "";
			ssPersonal = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssFinancial = r.ReadText(index++, "SupportTexts.Financial", "");
			ssTransport = r.ReadText(index++, "SupportTexts.Transport", "");
			ssAcademic = r.ReadText(index++, "SupportTexts.Academic", "");
			ssPersonal = r.ReadText(index++, "SupportTexts.Personal", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSupportTextsStructure r) {
			this = r;
		}


		public static bool operator == (STSupportTextsStructure a, STSupportTextsStructure b) {
			if (a.ssFinancial != b.ssFinancial) return false;
			if (a.ssTransport != b.ssTransport) return false;
			if (a.ssAcademic != b.ssAcademic) return false;
			if (a.ssPersonal != b.ssPersonal) return false;
			return true;
		}

		public static bool operator != (STSupportTextsStructure a, STSupportTextsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSupportTextsStructure)) return false;
			return (this == (STSupportTextsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssFinancial.GetHashCode()
				^ ssTransport.GetHashCode()
				^ ssAcademic.GetHashCode()
				^ ssPersonal.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSupportTextsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssFinancial = "";
			ssTransport = "";
			ssAcademic = "";
			ssPersonal = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssFinancial = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssTransport = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssAcademic = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssPersonal = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSupportTextsStructure Duplicate() {
			STSupportTextsStructure t;
			t.ssFinancial = this.ssFinancial;
			t.ssTransport = this.ssTransport;
			t.ssAcademic = this.ssAcademic;
			t.ssPersonal = this.ssPersonal;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Financial")) VarValue.AppendAttribute(recordElem, "Financial", ssFinancial, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Financial");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Transport")) VarValue.AppendAttribute(recordElem, "Transport", ssTransport, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Transport");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Academic")) VarValue.AppendAttribute(recordElem, "Academic", ssAcademic, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Academic");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Personal")) VarValue.AppendAttribute(recordElem, "Personal", ssPersonal, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Personal");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "financial") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Financial")) variable.Value = ssFinancial; else variable.Optimized = true;
			} else if (head == "transport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Transport")) variable.Value = ssTransport; else variable.Optimized = true;
			} else if (head == "academic") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Academic")) variable.Value = ssAcademic; else variable.Optimized = true;
			} else if (head == "personal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Personal")) variable.Value = ssPersonal; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdFinancial) {
				return ssFinancial;
			} else if (key == IdTransport) {
				return ssTransport;
			} else if (key == IdAcademic) {
				return ssAcademic;
			} else if (key == IdPersonal) {
				return ssPersonal;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssFinancial = (string) other.AttributeGet(IdFinancial);
			ssTransport = (string) other.AttributeGet(IdTransport);
			ssAcademic = (string) other.AttributeGet(IdAcademic);
			ssPersonal = (string) other.AttributeGet(IdPersonal);
		}
	} // STSupportTextsStructure
	/// <summary>
	/// Structure <code>RCSupportTextsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSupportTextsRecord: ISerializable, ITypedRecord<RCSupportTextsRecord> {
		private static readonly GlobalObjectKey IdSupportTexts = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*9nwkQgA5Zqc_WZPfUJWT1A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SupportTexts")]
		public STSupportTextsStructure ssSTSupportTexts;


		public static implicit operator STSupportTextsStructure(RCSupportTextsRecord r) {
			return r.ssSTSupportTexts;
		}

		public static implicit operator RCSupportTextsRecord(STSupportTextsStructure r) {
			RCSupportTextsRecord res = new RCSupportTextsRecord(null);
			res.ssSTSupportTexts = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCSupportTextsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTSupportTexts = new STSupportTextsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTSupportTexts.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTSupportTexts.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSupportTextsRecord r) {
			this = r;
		}


		public static bool operator == (RCSupportTextsRecord a, RCSupportTextsRecord b) {
			if (a.ssSTSupportTexts != b.ssSTSupportTexts) return false;
			return true;
		}

		public static bool operator != (RCSupportTextsRecord a, RCSupportTextsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSupportTextsRecord)) return false;
			return (this == (RCSupportTextsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTSupportTexts.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSupportTextsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTSupportTexts = new STSupportTextsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTSupportTexts = (STSupportTextsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTSupportTexts.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTSupportTexts.InternalRecursiveSave();
		}


		public RCSupportTextsRecord Duplicate() {
			RCSupportTextsRecord t;
			t.ssSTSupportTexts = (STSupportTextsStructure) this.ssSTSupportTexts.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTSupportTexts.ToXml(this, recordElem, "SupportTexts", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "supporttexts") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportTexts")) variable.Value = ssSTSupportTexts; else variable.Optimized = true;
				variable.SetFieldName("supporttexts");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSupportTexts) {
				return ssSTSupportTexts;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTSupportTexts.FillFromOther((IRecord) other.AttributeGet(IdSupportTexts));
		}
	} // RCSupportTextsRecord
	/// <summary>
	/// RecordList type <code>RLSupportTextsRecordList</code> that represents a record list of
	///  <code>SupportTexts</code>
	/// </summary>
	[Serializable()]
	public partial class RLSupportTextsRecordList: GenericRecordList<RCSupportTextsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSupportTextsRecord GetElementDefaultValue() {
			return new RCSupportTextsRecord("");
		}

		public T[] ToArray<T>(Func<RCSupportTextsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSupportTextsRecordList recordlist, Func<RCSupportTextsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSupportTextsRecordList ToList<T>(T[] array, Func <T, RCSupportTextsRecord> converter) {
			RLSupportTextsRecordList result = new RLSupportTextsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSupportTextsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportTextsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportTextsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSupportTextsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSupportTextsRecord> NewList() {
			return new RLSupportTextsRecordList();
		}


	} // RLSupportTextsRecordList
	/// <summary>
	/// RecordList type <code>RLSupportTextsList</code> that represents a record list of <code>Text, Text,
	///  Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLSupportTextsList: GenericRecordList<STSupportTextsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STSupportTextsStructure GetElementDefaultValue() {
			return new STSupportTextsStructure("");
		}

		public T[] ToArray<T>(Func<STSupportTextsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSupportTextsList recordlist, Func<STSupportTextsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSupportTextsList ToList<T>(T[] array, Func <T, STSupportTextsStructure> converter) {
			RLSupportTextsList result = new RLSupportTextsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSupportTextsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportTextsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportTextsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSupportTextsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STSupportTextsStructure> NewList() {
			return new RLSupportTextsList();
		}


	} // RLSupportTextsList
}

namespace ssCaseConferencing {
	[XmlType("SupportTexts")]
	public class WORCSupportTextsRecord {
		[System.Xml.Serialization.XmlElement("Financial")]
		public string varWSFinancial;

		[System.Xml.Serialization.XmlElement("Transport")]
		public string varWSTransport;

		[System.Xml.Serialization.XmlElement("Academic")]
		public string varWSAcademic;

		[System.Xml.Serialization.XmlElement("Personal")]
		public string varWSPersonal;

		public WORCSupportTextsRecord() {
			varWSFinancial = (string) "";
			varWSTransport = (string) "";
			varWSAcademic = (string) "";
			varWSPersonal = (string) "";
		}

		public WORCSupportTextsRecord(STSupportTextsStructure r) {
			varWSFinancial = BaseAppUtils.RemoveControlChars(r.ssFinancial);
			varWSTransport = BaseAppUtils.RemoveControlChars(r.ssTransport);
			varWSAcademic = BaseAppUtils.RemoveControlChars(r.ssAcademic);
			varWSPersonal = BaseAppUtils.RemoveControlChars(r.ssPersonal);
		}

		public static RLSupportTextsList ToRecordList(WORCSupportTextsRecord[] array) {
			RLSupportTextsList rl = new RLSupportTextsList();
			if (array != null) {
				foreach(WORCSupportTextsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSupportTextsRecord[] FromRecordList(RLSupportTextsList rl) {
			WORCSupportTextsRecord[] array = new WORCSupportTextsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSupportTextsRecord {
		public static implicit operator WORCSupportTextsRecord(RCSupportTextsRecord r) {
			return new WORCSupportTextsRecord(r.ssSTSupportTexts);
		}

		public static implicit operator RCSupportTextsRecord(WORCSupportTextsRecord w) {
			RCSupportTextsRecord r = new RCSupportTextsRecord("");
			if (w != null) {
				r.ssSTSupportTexts = w;
			}
			return r;
		}

	}

	partial struct STSupportTextsStructure {
		public static implicit operator WORCSupportTextsRecord(STSupportTextsStructure r) {
			return new WORCSupportTextsRecord(r);
		}

		public static implicit operator STSupportTextsStructure(WORCSupportTextsRecord w) {
			STSupportTextsStructure r = new STSupportTextsStructure("");
			if (w != null) {
				r.ssFinancial = ((string) w.varWSFinancial ?? "");
				r.ssTransport = ((string) w.varWSTransport ?? "");
				r.ssAcademic = ((string) w.varWSAcademic ?? "");
				r.ssPersonal = ((string) w.varWSPersonal ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSupportTextsRecordList {
		public WORCSupportTextsRecord[] Array;


		public WORLSupportTextsRecordList(WORCSupportTextsRecord[] r) {
			if (r == null)
			Array = new WORCSupportTextsRecord[0];
			else
			Array = r;
		}
		public WORLSupportTextsRecordList() {
			Array = new WORCSupportTextsRecord[0];
		}

		public WORLSupportTextsRecordList(RLSupportTextsRecordList rl) {
			rl=(RLSupportTextsRecordList) rl.Duplicate();
			Array = new WORCSupportTextsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSupportTextsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSupportTextsRecordList {
		public static implicit operator RLSupportTextsRecordList(WORCSupportTextsRecord[] array) {
			RLSupportTextsRecordList rl = new RLSupportTextsRecordList();
			if (array != null) {
				foreach(WORCSupportTextsRecord val in array) {
					rl.Append((RCSupportTextsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSupportTextsRecord[](RLSupportTextsRecordList rl) {
			WORCSupportTextsRecord[] array = new WORCSupportTextsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSupportTextsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSupportTextsRecordList {
		public static implicit operator RLSupportTextsRecordList(WORLSupportTextsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSupportTextsRecordList(RLSupportTextsRecordList rl) {
			return new WORLSupportTextsRecordList(rl);
		}
		public static implicit operator WORCSupportTextsRecord[](WORLSupportTextsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSupportTextsRecordList(WORCSupportTextsRecord[] array) {
			return new WORLSupportTextsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSupportTextsList {
		public WORCSupportTextsRecord[] Array;


		public WORLSupportTextsList(WORCSupportTextsRecord[] r) {
			if (r == null)
			Array = new WORCSupportTextsRecord[0];
			else
			Array = r;
		}
		public WORLSupportTextsList() {
			Array = new WORCSupportTextsRecord[0];
		}

		public WORLSupportTextsList(RLSupportTextsList rl) {
			rl=(RLSupportTextsList) rl.Duplicate();
			Array = new WORCSupportTextsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSupportTextsList {
		public static implicit operator RLSupportTextsList(WORCSupportTextsRecord[] array) {
			RLSupportTextsList rl = new RLSupportTextsList();
			if (array != null) {
				foreach(WORCSupportTextsRecord val in array) {
					rl.Append((STSupportTextsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSupportTextsRecord[](RLSupportTextsList rl) {
			WORCSupportTextsRecord[] array = new WORCSupportTextsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STSupportTextsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSupportTextsList {
		public static implicit operator RLSupportTextsList(WORLSupportTextsList w) {
			return w.Array;
		}
		public static implicit operator WORLSupportTextsList(RLSupportTextsList rl) {
			return new WORLSupportTextsList(rl);
		}
		public static implicit operator WORCSupportTextsRecord[](WORLSupportTextsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSupportTextsList(WORCSupportTextsRecord[] array) {
			return new WORLSupportTextsList(array);
		}
	}
}

