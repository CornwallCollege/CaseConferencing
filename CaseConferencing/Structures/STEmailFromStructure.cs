/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STEmailFromStructure</code> that represents the Service Studio structure
	///  <code>EmailFrom</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEmailFromStructure: ISerializable, ITypedRecord<STEmailFromStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey Idname = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*iguuwQTURUSp1d4cbh9TQQ");
		private static readonly GlobalObjectKey IdEmailAddress = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*dxHCMq5aK0ur6+85e5TyVw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("name")]
		public string ssname;

		[System.Xml.Serialization.XmlElement("EmailAddress")]
		public string ssEmailAddress;


		public BitArray OptimizedAttributes;

		public STEmailFromStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssname = "";
			ssEmailAddress = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssname = r.ReadText(index++, "EmailFrom.name", "");
			ssEmailAddress = r.ReadEmail(index++, "EmailFrom.EmailAddress", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEmailFromStructure r) {
			this = r;
		}


		public static bool operator == (STEmailFromStructure a, STEmailFromStructure b) {
			if (a.ssname != b.ssname) return false;
			if (a.ssEmailAddress != b.ssEmailAddress) return false;
			return true;
		}

		public static bool operator != (STEmailFromStructure a, STEmailFromStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEmailFromStructure)) return false;
			return (this == (STEmailFromStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssname.GetHashCode()
				^ ssEmailAddress.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEmailFromStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssname = "";
			ssEmailAddress = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssname = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssEmailAddress = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEmailFromStructure Duplicate() {
			STEmailFromStructure t;
			t.ssname = this.ssname;
			t.ssEmailAddress = this.ssEmailAddress;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".name")) VarValue.AppendAttribute(recordElem, "name", ssname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EmailAddress")) VarValue.AppendAttribute(recordElem, "EmailAddress", ssEmailAddress, detailLevel, TypeKind.Email); else VarValue.AppendOptimizedAttribute(recordElem, "EmailAddress");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".name")) variable.Value = ssname; else variable.Optimized = true;
			} else if (head == "emailaddress") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EmailAddress")) variable.Value = ssEmailAddress; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == Idname) {
				return ssname;
			} else if (key == IdEmailAddress) {
				return ssEmailAddress;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssname = (string) other.AttributeGet(Idname);
			ssEmailAddress = (string) other.AttributeGet(IdEmailAddress);
		}
	} // STEmailFromStructure
	/// <summary>
	/// Structure <code>RCEmailFromRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCEmailFromRecord: ISerializable, ITypedRecord<RCEmailFromRecord> {
		private static readonly GlobalObjectKey IdEmailFrom = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ialIYD+xgruiFarnGm99xQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("EmailFrom")]
		public STEmailFromStructure ssSTEmailFrom;


		public static implicit operator STEmailFromStructure(RCEmailFromRecord r) {
			return r.ssSTEmailFrom;
		}

		public static implicit operator RCEmailFromRecord(STEmailFromStructure r) {
			RCEmailFromRecord res = new RCEmailFromRecord(null);
			res.ssSTEmailFrom = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCEmailFromRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTEmailFrom = new STEmailFromStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTEmailFrom.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTEmailFrom.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCEmailFromRecord r) {
			this = r;
		}


		public static bool operator == (RCEmailFromRecord a, RCEmailFromRecord b) {
			if (a.ssSTEmailFrom != b.ssSTEmailFrom) return false;
			return true;
		}

		public static bool operator != (RCEmailFromRecord a, RCEmailFromRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCEmailFromRecord)) return false;
			return (this == (RCEmailFromRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTEmailFrom.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCEmailFromRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTEmailFrom = new STEmailFromStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTEmailFrom = (STEmailFromStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTEmailFrom.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTEmailFrom.InternalRecursiveSave();
		}


		public RCEmailFromRecord Duplicate() {
			RCEmailFromRecord t;
			t.ssSTEmailFrom = (STEmailFromStructure) this.ssSTEmailFrom.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTEmailFrom.ToXml(this, recordElem, "EmailFrom", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "emailfrom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EmailFrom")) variable.Value = ssSTEmailFrom; else variable.Optimized = true;
				variable.SetFieldName("emailfrom");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdEmailFrom) {
				return ssSTEmailFrom;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTEmailFrom.FillFromOther((IRecord) other.AttributeGet(IdEmailFrom));
		}
	} // RCEmailFromRecord
	/// <summary>
	/// RecordList type <code>RLEmailFromRecordList</code> that represents a record list of
	///  <code>EmailFrom</code>
	/// </summary>
	[Serializable()]
	public partial class RLEmailFromRecordList: GenericRecordList<RCEmailFromRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCEmailFromRecord GetElementDefaultValue() {
			return new RCEmailFromRecord("");
		}

		public T[] ToArray<T>(Func<RCEmailFromRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLEmailFromRecordList recordlist, Func<RCEmailFromRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLEmailFromRecordList ToList<T>(T[] array, Func <T, RCEmailFromRecord> converter) {
			RLEmailFromRecordList result = new RLEmailFromRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLEmailFromRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEmailFromRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEmailFromRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLEmailFromRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCEmailFromRecord> NewList() {
			return new RLEmailFromRecordList();
		}


	} // RLEmailFromRecordList
	/// <summary>
	/// RecordList type <code>RLEmailFromList</code> that represents a record list of <code>Text,
	///  Email</code>
	/// </summary>
	[Serializable()]
	public partial class RLEmailFromList: GenericRecordList<STEmailFromStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STEmailFromStructure GetElementDefaultValue() {
			return new STEmailFromStructure("");
		}

		public T[] ToArray<T>(Func<STEmailFromStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLEmailFromList recordlist, Func<STEmailFromStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLEmailFromList ToList<T>(T[] array, Func <T, STEmailFromStructure> converter) {
			RLEmailFromList result = new RLEmailFromList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLEmailFromList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEmailFromList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEmailFromList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLEmailFromList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STEmailFromStructure> NewList() {
			return new RLEmailFromList();
		}


	} // RLEmailFromList
}

namespace ssCaseConferencing {
	[XmlType("EmailFrom")]
	public class WORCEmailFromRecord {
		[System.Xml.Serialization.XmlElement("name")]
		public string varWSname;

		[System.Xml.Serialization.XmlElement("EmailAddress")]
		public string varWSEmailAddress;

		public WORCEmailFromRecord() {
			varWSname = (string) "";
			varWSEmailAddress = (string) "";
		}

		public WORCEmailFromRecord(STEmailFromStructure r) {
			varWSname = BaseAppUtils.RemoveControlChars(r.ssname);
			varWSEmailAddress = BaseAppUtils.RemoveControlChars(r.ssEmailAddress);
		}

		public static RLEmailFromList ToRecordList(WORCEmailFromRecord[] array) {
			RLEmailFromList rl = new RLEmailFromList();
			if (array != null) {
				foreach(WORCEmailFromRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCEmailFromRecord[] FromRecordList(RLEmailFromList rl) {
			WORCEmailFromRecord[] array = new WORCEmailFromRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCEmailFromRecord {
		public static implicit operator WORCEmailFromRecord(RCEmailFromRecord r) {
			return new WORCEmailFromRecord(r.ssSTEmailFrom);
		}

		public static implicit operator RCEmailFromRecord(WORCEmailFromRecord w) {
			RCEmailFromRecord r = new RCEmailFromRecord("");
			if (w != null) {
				r.ssSTEmailFrom = w;
			}
			return r;
		}

	}

	partial struct STEmailFromStructure {
		public static implicit operator WORCEmailFromRecord(STEmailFromStructure r) {
			return new WORCEmailFromRecord(r);
		}

		public static implicit operator STEmailFromStructure(WORCEmailFromRecord w) {
			STEmailFromStructure r = new STEmailFromStructure("");
			if (w != null) {
				r.ssname = ((string) w.varWSname ?? "");
				r.ssEmailAddress = ((string) w.varWSEmailAddress ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLEmailFromRecordList {
		public WORCEmailFromRecord[] Array;


		public WORLEmailFromRecordList(WORCEmailFromRecord[] r) {
			if (r == null)
			Array = new WORCEmailFromRecord[0];
			else
			Array = r;
		}
		public WORLEmailFromRecordList() {
			Array = new WORCEmailFromRecord[0];
		}

		public WORLEmailFromRecordList(RLEmailFromRecordList rl) {
			rl=(RLEmailFromRecordList) rl.Duplicate();
			Array = new WORCEmailFromRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCEmailFromRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLEmailFromRecordList {
		public static implicit operator RLEmailFromRecordList(WORCEmailFromRecord[] array) {
			RLEmailFromRecordList rl = new RLEmailFromRecordList();
			if (array != null) {
				foreach(WORCEmailFromRecord val in array) {
					rl.Append((RCEmailFromRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCEmailFromRecord[](RLEmailFromRecordList rl) {
			WORCEmailFromRecord[] array = new WORCEmailFromRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCEmailFromRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLEmailFromRecordList {
		public static implicit operator RLEmailFromRecordList(WORLEmailFromRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLEmailFromRecordList(RLEmailFromRecordList rl) {
			return new WORLEmailFromRecordList(rl);
		}
		public static implicit operator WORCEmailFromRecord[](WORLEmailFromRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLEmailFromRecordList(WORCEmailFromRecord[] array) {
			return new WORLEmailFromRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLEmailFromList {
		public WORCEmailFromRecord[] Array;


		public WORLEmailFromList(WORCEmailFromRecord[] r) {
			if (r == null)
			Array = new WORCEmailFromRecord[0];
			else
			Array = r;
		}
		public WORLEmailFromList() {
			Array = new WORCEmailFromRecord[0];
		}

		public WORLEmailFromList(RLEmailFromList rl) {
			rl=(RLEmailFromList) rl.Duplicate();
			Array = new WORCEmailFromRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLEmailFromList {
		public static implicit operator RLEmailFromList(WORCEmailFromRecord[] array) {
			RLEmailFromList rl = new RLEmailFromList();
			if (array != null) {
				foreach(WORCEmailFromRecord val in array) {
					rl.Append((STEmailFromStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCEmailFromRecord[](RLEmailFromList rl) {
			WORCEmailFromRecord[] array = new WORCEmailFromRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STEmailFromStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLEmailFromList {
		public static implicit operator RLEmailFromList(WORLEmailFromList w) {
			return w.Array;
		}
		public static implicit operator WORLEmailFromList(RLEmailFromList rl) {
			return new WORLEmailFromList(rl);
		}
		public static implicit operator WORCEmailFromRecord[](WORLEmailFromList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLEmailFromList(WORCEmailFromRecord[] array) {
			return new WORLEmailFromList(array);
		}
	}
}

