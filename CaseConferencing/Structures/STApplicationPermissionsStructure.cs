/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STApplicationPermissionsStructure</code> that represents the Service Studio
	///  structure <code>ApplicationPermissions</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STApplicationPermissionsStructure: ISerializable, ITypedRecord<STApplicationPermissionsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdApplicationPermission = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Q_n0E9Ny1kOKUIdxWQ7uoA");
		private static readonly GlobalObjectKey IdApplicationPermissionDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*j048JufNlEStYcflx6RRfQ");
		private static readonly GlobalObjectKey IdRole = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*9rgKGwNh8U2hKzyp4D1pYw");
		private static readonly GlobalObjectKey IdPermissionType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*M3p6Rqr4gE2byVikqEr0fw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ApplicationPermission")]
		public string ssApplicationPermission;

		[System.Xml.Serialization.XmlElement("ApplicationPermissionDescription")]
		public string ssApplicationPermissionDescription;

		[System.Xml.Serialization.XmlElement("Role")]
		public string ssRole;

		[System.Xml.Serialization.XmlElement("PermissionType")]
		public int ssPermissionType;


		public BitArray OptimizedAttributes;

		public STApplicationPermissionsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssApplicationPermission = "";
			ssApplicationPermissionDescription = "";
			ssRole = "";
			ssPermissionType = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssApplicationPermission = r.ReadText(index++, "ApplicationPermissions.ApplicationPermission", "");
			ssApplicationPermissionDescription = r.ReadText(index++, "ApplicationPermissions.ApplicationPermissionDescription", "");
			ssRole = r.ReadText(index++, "ApplicationPermissions.Role", "");
			ssPermissionType = r.ReadInteger(index++, "ApplicationPermissions.PermissionType", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STApplicationPermissionsStructure r) {
			this = r;
		}


		public static bool operator == (STApplicationPermissionsStructure a, STApplicationPermissionsStructure b) {
			if (a.ssApplicationPermission != b.ssApplicationPermission) return false;
			if (a.ssApplicationPermissionDescription != b.ssApplicationPermissionDescription) return false;
			if (a.ssRole != b.ssRole) return false;
			if (a.ssPermissionType != b.ssPermissionType) return false;
			return true;
		}

		public static bool operator != (STApplicationPermissionsStructure a, STApplicationPermissionsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STApplicationPermissionsStructure)) return false;
			return (this == (STApplicationPermissionsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssApplicationPermission.GetHashCode()
				^ ssApplicationPermissionDescription.GetHashCode()
				^ ssRole.GetHashCode()
				^ ssPermissionType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STApplicationPermissionsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssApplicationPermission = "";
			ssApplicationPermissionDescription = "";
			ssRole = "";
			ssPermissionType = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssApplicationPermission = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssApplicationPermissionDescription = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssRole = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssPermissionType = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STApplicationPermissionsStructure Duplicate() {
			STApplicationPermissionsStructure t;
			t.ssApplicationPermission = this.ssApplicationPermission;
			t.ssApplicationPermissionDescription = this.ssApplicationPermissionDescription;
			t.ssRole = this.ssRole;
			t.ssPermissionType = this.ssPermissionType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationPermission")) VarValue.AppendAttribute(recordElem, "ApplicationPermission", ssApplicationPermission, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationPermission");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationPermissionDescription")) VarValue.AppendAttribute(recordElem, "ApplicationPermissionDescription", ssApplicationPermissionDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationPermissionDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Role")) VarValue.AppendAttribute(recordElem, "Role", ssRole, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Role");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PermissionType")) VarValue.AppendAttribute(recordElem, "PermissionType", ssPermissionType, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "PermissionType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "applicationpermission") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationPermission")) variable.Value = ssApplicationPermission; else variable.Optimized = true;
			} else if (head == "applicationpermissiondescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationPermissionDescription")) variable.Value = ssApplicationPermissionDescription; else variable.Optimized = true;
			} else if (head == "role") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Role")) variable.Value = ssRole; else variable.Optimized = true;
			} else if (head == "permissiontype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PermissionType")) variable.Value = ssPermissionType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdApplicationPermission) {
				return ssApplicationPermission;
			} else if (key == IdApplicationPermissionDescription) {
				return ssApplicationPermissionDescription;
			} else if (key == IdRole) {
				return ssRole;
			} else if (key == IdPermissionType) {
				return ssPermissionType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssApplicationPermission = (string) other.AttributeGet(IdApplicationPermission);
			ssApplicationPermissionDescription = (string) other.AttributeGet(IdApplicationPermissionDescription);
			ssRole = (string) other.AttributeGet(IdRole);
			ssPermissionType = (int) other.AttributeGet(IdPermissionType);
		}
	} // STApplicationPermissionsStructure
	/// <summary>
	/// Structure <code>RCApplicationPermissionsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCApplicationPermissionsRecord: ISerializable, ITypedRecord<RCApplicationPermissionsRecord> {
		private static readonly GlobalObjectKey IdApplicationPermissions = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*7uvSjJ9I1j3NovSJ_QpRow");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ApplicationPermissions")]
		public STApplicationPermissionsStructure ssSTApplicationPermissions;


		public static implicit operator STApplicationPermissionsStructure(RCApplicationPermissionsRecord r) {
			return r.ssSTApplicationPermissions;
		}

		public static implicit operator RCApplicationPermissionsRecord(STApplicationPermissionsStructure r) {
			RCApplicationPermissionsRecord res = new RCApplicationPermissionsRecord(null);
			res.ssSTApplicationPermissions = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCApplicationPermissionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTApplicationPermissions = new STApplicationPermissionsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTApplicationPermissions.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTApplicationPermissions.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCApplicationPermissionsRecord r) {
			this = r;
		}


		public static bool operator == (RCApplicationPermissionsRecord a, RCApplicationPermissionsRecord b) {
			if (a.ssSTApplicationPermissions != b.ssSTApplicationPermissions) return false;
			return true;
		}

		public static bool operator != (RCApplicationPermissionsRecord a, RCApplicationPermissionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCApplicationPermissionsRecord)) return false;
			return (this == (RCApplicationPermissionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTApplicationPermissions.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCApplicationPermissionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTApplicationPermissions = new STApplicationPermissionsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTApplicationPermissions = (STApplicationPermissionsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTApplicationPermissions.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTApplicationPermissions.InternalRecursiveSave();
		}


		public RCApplicationPermissionsRecord Duplicate() {
			RCApplicationPermissionsRecord t;
			t.ssSTApplicationPermissions = (STApplicationPermissionsStructure) this.ssSTApplicationPermissions.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTApplicationPermissions.ToXml(this, recordElem, "ApplicationPermissions", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "applicationpermissions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationPermissions")) variable.Value = ssSTApplicationPermissions; else variable.Optimized = true;
				variable.SetFieldName("applicationpermissions");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdApplicationPermissions) {
				return ssSTApplicationPermissions;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTApplicationPermissions.FillFromOther((IRecord) other.AttributeGet(IdApplicationPermissions));
		}
	} // RCApplicationPermissionsRecord
	/// <summary>
	/// RecordList type <code>RLApplicationPermissionsRecordList</code> that represents a record list of
	///  <code>ApplicationPermissions</code>
	/// </summary>
	[Serializable()]
	public partial class RLApplicationPermissionsRecordList: GenericRecordList<RCApplicationPermissionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCApplicationPermissionsRecord GetElementDefaultValue() {
			return new RCApplicationPermissionsRecord("");
		}

		public T[] ToArray<T>(Func<RCApplicationPermissionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLApplicationPermissionsRecordList recordlist, Func<RCApplicationPermissionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLApplicationPermissionsRecordList ToList<T>(T[] array, Func <T, RCApplicationPermissionsRecord> converter) {
			RLApplicationPermissionsRecordList result = new RLApplicationPermissionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLApplicationPermissionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationPermissionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationPermissionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLApplicationPermissionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCApplicationPermissionsRecord> NewList() {
			return new RLApplicationPermissionsRecordList();
		}


	} // RLApplicationPermissionsRecordList
	/// <summary>
	/// RecordList type <code>RLApplicationPermissionsList</code> that represents a record list of
	///  <code>Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLApplicationPermissionsList: GenericRecordList<STApplicationPermissionsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STApplicationPermissionsStructure GetElementDefaultValue() {
			return new STApplicationPermissionsStructure("");
		}

		public T[] ToArray<T>(Func<STApplicationPermissionsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLApplicationPermissionsList recordlist, Func<STApplicationPermissionsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLApplicationPermissionsList ToList<T>(T[] array, Func <T, STApplicationPermissionsStructure> converter) {
			RLApplicationPermissionsList result = new RLApplicationPermissionsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLApplicationPermissionsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationPermissionsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationPermissionsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLApplicationPermissionsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STApplicationPermissionsStructure> NewList() {
			return new RLApplicationPermissionsList();
		}


	} // RLApplicationPermissionsList
}

namespace ssCaseConferencing {
	[XmlType("ApplicationPermissions")]
	public class WORCApplicationPermissionsRecord {
		[System.Xml.Serialization.XmlElement("ApplicationPermission")]
		public string varWSApplicationPermission;

		[System.Xml.Serialization.XmlElement("ApplicationPermissionDescription")]
		public string varWSApplicationPermissionDescription;

		[System.Xml.Serialization.XmlElement("Role")]
		public string varWSRole;

		[System.Xml.Serialization.XmlElement("PermissionType")]
		public int varWSPermissionType;

		public WORCApplicationPermissionsRecord() {
			varWSApplicationPermission = (string) "";
			varWSApplicationPermissionDescription = (string) "";
			varWSRole = (string) "";
			varWSPermissionType = (int) 0;
		}

		public WORCApplicationPermissionsRecord(STApplicationPermissionsStructure r) {
			varWSApplicationPermission = BaseAppUtils.RemoveControlChars(r.ssApplicationPermission);
			varWSApplicationPermissionDescription = BaseAppUtils.RemoveControlChars(r.ssApplicationPermissionDescription);
			varWSRole = BaseAppUtils.RemoveControlChars(r.ssRole);
			varWSPermissionType = (int) r.ssPermissionType;
		}

		public static RLApplicationPermissionsList ToRecordList(WORCApplicationPermissionsRecord[] array) {
			RLApplicationPermissionsList rl = new RLApplicationPermissionsList();
			if (array != null) {
				foreach(WORCApplicationPermissionsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCApplicationPermissionsRecord[] FromRecordList(RLApplicationPermissionsList rl) {
			WORCApplicationPermissionsRecord[] array = new WORCApplicationPermissionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCApplicationPermissionsRecord {
		public static implicit operator WORCApplicationPermissionsRecord(RCApplicationPermissionsRecord r) {
			return new WORCApplicationPermissionsRecord(r.ssSTApplicationPermissions);
		}

		public static implicit operator RCApplicationPermissionsRecord(WORCApplicationPermissionsRecord w) {
			RCApplicationPermissionsRecord r = new RCApplicationPermissionsRecord("");
			if (w != null) {
				r.ssSTApplicationPermissions = w;
			}
			return r;
		}

	}

	partial struct STApplicationPermissionsStructure {
		public static implicit operator WORCApplicationPermissionsRecord(STApplicationPermissionsStructure r) {
			return new WORCApplicationPermissionsRecord(r);
		}

		public static implicit operator STApplicationPermissionsStructure(WORCApplicationPermissionsRecord w) {
			STApplicationPermissionsStructure r = new STApplicationPermissionsStructure("");
			if (w != null) {
				r.ssApplicationPermission = ((string) w.varWSApplicationPermission ?? "");
				r.ssApplicationPermissionDescription = ((string) w.varWSApplicationPermissionDescription ?? "");
				r.ssRole = ((string) w.varWSRole ?? "");
				r.ssPermissionType = (int) w.varWSPermissionType;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLApplicationPermissionsRecordList {
		public WORCApplicationPermissionsRecord[] Array;


		public WORLApplicationPermissionsRecordList(WORCApplicationPermissionsRecord[] r) {
			if (r == null)
			Array = new WORCApplicationPermissionsRecord[0];
			else
			Array = r;
		}
		public WORLApplicationPermissionsRecordList() {
			Array = new WORCApplicationPermissionsRecord[0];
		}

		public WORLApplicationPermissionsRecordList(RLApplicationPermissionsRecordList rl) {
			rl=(RLApplicationPermissionsRecordList) rl.Duplicate();
			Array = new WORCApplicationPermissionsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCApplicationPermissionsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLApplicationPermissionsRecordList {
		public static implicit operator RLApplicationPermissionsRecordList(WORCApplicationPermissionsRecord[] array) {
			RLApplicationPermissionsRecordList rl = new RLApplicationPermissionsRecordList();
			if (array != null) {
				foreach(WORCApplicationPermissionsRecord val in array) {
					rl.Append((RCApplicationPermissionsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCApplicationPermissionsRecord[](RLApplicationPermissionsRecordList rl) {
			WORCApplicationPermissionsRecord[] array = new WORCApplicationPermissionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCApplicationPermissionsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLApplicationPermissionsRecordList {
		public static implicit operator RLApplicationPermissionsRecordList(WORLApplicationPermissionsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLApplicationPermissionsRecordList(RLApplicationPermissionsRecordList rl) {
			return new WORLApplicationPermissionsRecordList(rl);
		}
		public static implicit operator WORCApplicationPermissionsRecord[](WORLApplicationPermissionsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLApplicationPermissionsRecordList(WORCApplicationPermissionsRecord[] array) {
			return new WORLApplicationPermissionsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLApplicationPermissionsList {
		public WORCApplicationPermissionsRecord[] Array;


		public WORLApplicationPermissionsList(WORCApplicationPermissionsRecord[] r) {
			if (r == null)
			Array = new WORCApplicationPermissionsRecord[0];
			else
			Array = r;
		}
		public WORLApplicationPermissionsList() {
			Array = new WORCApplicationPermissionsRecord[0];
		}

		public WORLApplicationPermissionsList(RLApplicationPermissionsList rl) {
			rl=(RLApplicationPermissionsList) rl.Duplicate();
			Array = new WORCApplicationPermissionsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLApplicationPermissionsList {
		public static implicit operator RLApplicationPermissionsList(WORCApplicationPermissionsRecord[] array) {
			RLApplicationPermissionsList rl = new RLApplicationPermissionsList();
			if (array != null) {
				foreach(WORCApplicationPermissionsRecord val in array) {
					rl.Append((STApplicationPermissionsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCApplicationPermissionsRecord[](RLApplicationPermissionsList rl) {
			WORCApplicationPermissionsRecord[] array = new WORCApplicationPermissionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STApplicationPermissionsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLApplicationPermissionsList {
		public static implicit operator RLApplicationPermissionsList(WORLApplicationPermissionsList w) {
			return w.Array;
		}
		public static implicit operator WORLApplicationPermissionsList(RLApplicationPermissionsList rl) {
			return new WORLApplicationPermissionsList(rl);
		}
		public static implicit operator WORCApplicationPermissionsRecord[](WORLApplicationPermissionsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLApplicationPermissionsList(WORCApplicationPermissionsRecord[] array) {
			return new WORLApplicationPermissionsList(array);
		}
	}
}

