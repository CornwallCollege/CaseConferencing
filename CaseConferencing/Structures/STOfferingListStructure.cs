/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STOfferingListStructure</code> that represents the Service Studio structure
	///  <code>OfferingList</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STOfferingListStructure: ISerializable, ITypedRecord<STOfferingListStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdGroupId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*m_pvay_lhEG7X85d9gwZJQ");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*hTZunMajQUSCyZLTFccsIw");
		private static readonly GlobalObjectKey IdOfferingDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*8lkW+h1h_EWcqlfyiT5+pQ");
		private static readonly GlobalObjectKey IdClusterDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*MTTpU4wmzUKY25EidRk8Qw");
		private static readonly GlobalObjectKey IdCurriculumLeadDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*99WoW32bhESZ+3Nnz9b_aw");
		private static readonly GlobalObjectKey IdTeamLeadDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*moAcURaGu0CPSgjiTUUwzw");
		private static readonly GlobalObjectKey IdClusterIcon = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*aqa6P2vuGk+5kW8sFtB+zg");
		private static readonly GlobalObjectKey IdSelectAction = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*+xiq4aXqokiO57WYYbKWmA");
		private static readonly GlobalObjectKey IdNumberOfActiveEnrolments = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*IwKbFEwsqE+mrUAtFk0SUA");
		private static readonly GlobalObjectKey IdIsGroupFavourite = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*U3WZygC8W0q2k56r2m1gdg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("GroupId")]
		public int ssGroupId;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string ssOfferingCode;

		[System.Xml.Serialization.XmlElement("OfferingDescription")]
		public string ssOfferingDescription;

		[System.Xml.Serialization.XmlElement("ClusterDescription")]
		public string ssClusterDescription;

		[System.Xml.Serialization.XmlElement("CurriculumLeadDescription")]
		public string ssCurriculumLeadDescription;

		[System.Xml.Serialization.XmlElement("TeamLeadDescription")]
		public string ssTeamLeadDescription;

		[System.Xml.Serialization.XmlElement("ClusterIcon")]
		public string ssClusterIcon;

		[System.Xml.Serialization.XmlElement("SelectAction")]
		public string ssSelectAction;

		[System.Xml.Serialization.XmlElement("NumberOfActiveEnrolments")]
		public string ssNumberOfActiveEnrolments;

		[System.Xml.Serialization.XmlElement("IsGroupFavourite")]
		public bool ssIsGroupFavourite;


		public BitArray OptimizedAttributes;

		public STOfferingListStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssGroupId = 0;
			ssOfferingCode = "";
			ssOfferingDescription = "";
			ssClusterDescription = "";
			ssCurriculumLeadDescription = "";
			ssTeamLeadDescription = "";
			ssClusterIcon = "";
			ssSelectAction = "";
			ssNumberOfActiveEnrolments = "";
			ssIsGroupFavourite = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssGroupId = r.ReadEntityReference(index++, "OfferingList.GroupId", 0);
			ssOfferingCode = r.ReadText(index++, "OfferingList.OfferingCode", "");
			ssOfferingDescription = r.ReadText(index++, "OfferingList.OfferingDescription", "");
			ssClusterDescription = r.ReadText(index++, "OfferingList.ClusterDescription", "");
			ssCurriculumLeadDescription = r.ReadText(index++, "OfferingList.CurriculumLeadDescription", "");
			ssTeamLeadDescription = r.ReadText(index++, "OfferingList.TeamLeadDescription", "");
			ssClusterIcon = r.ReadText(index++, "OfferingList.ClusterIcon", "");
			ssSelectAction = r.ReadText(index++, "OfferingList.SelectAction", "");
			ssNumberOfActiveEnrolments = r.ReadText(index++, "OfferingList.NumberOfActiveEnrolments", "");
			ssIsGroupFavourite = r.ReadBoolean(index++, "OfferingList.IsGroupFavourite", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STOfferingListStructure r) {
			this = r;
		}


		public static bool operator == (STOfferingListStructure a, STOfferingListStructure b) {
			if (a.ssGroupId != b.ssGroupId) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssOfferingDescription != b.ssOfferingDescription) return false;
			if (a.ssClusterDescription != b.ssClusterDescription) return false;
			if (a.ssCurriculumLeadDescription != b.ssCurriculumLeadDescription) return false;
			if (a.ssTeamLeadDescription != b.ssTeamLeadDescription) return false;
			if (a.ssClusterIcon != b.ssClusterIcon) return false;
			if (a.ssSelectAction != b.ssSelectAction) return false;
			if (a.ssNumberOfActiveEnrolments != b.ssNumberOfActiveEnrolments) return false;
			if (a.ssIsGroupFavourite != b.ssIsGroupFavourite) return false;
			return true;
		}

		public static bool operator != (STOfferingListStructure a, STOfferingListStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STOfferingListStructure)) return false;
			return (this == (STOfferingListStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssGroupId.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssOfferingDescription.GetHashCode()
				^ ssClusterDescription.GetHashCode()
				^ ssCurriculumLeadDescription.GetHashCode()
				^ ssTeamLeadDescription.GetHashCode()
				^ ssClusterIcon.GetHashCode()
				^ ssSelectAction.GetHashCode()
				^ ssNumberOfActiveEnrolments.GetHashCode()
				^ ssIsGroupFavourite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STOfferingListStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssGroupId = 0;
			ssOfferingCode = "";
			ssOfferingDescription = "";
			ssClusterDescription = "";
			ssCurriculumLeadDescription = "";
			ssTeamLeadDescription = "";
			ssClusterIcon = "";
			ssSelectAction = "";
			ssNumberOfActiveEnrolments = "";
			ssIsGroupFavourite = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssGroupId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssOfferingCode = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssOfferingDescription = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssClusterDescription = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssCurriculumLeadDescription = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssTeamLeadDescription = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssClusterIcon = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssSelectAction = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssNumberOfActiveEnrolments = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssIsGroupFavourite = (bool) info.GetValue(fields[9] .Name, fields[9] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STOfferingListStructure Duplicate() {
			STOfferingListStructure t;
			t.ssGroupId = this.ssGroupId;
			t.ssOfferingCode = this.ssOfferingCode;
			t.ssOfferingDescription = this.ssOfferingDescription;
			t.ssClusterDescription = this.ssClusterDescription;
			t.ssCurriculumLeadDescription = this.ssCurriculumLeadDescription;
			t.ssTeamLeadDescription = this.ssTeamLeadDescription;
			t.ssClusterIcon = this.ssClusterIcon;
			t.ssSelectAction = this.ssSelectAction;
			t.ssNumberOfActiveEnrolments = this.ssNumberOfActiveEnrolments;
			t.ssIsGroupFavourite = this.ssIsGroupFavourite;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupId")) VarValue.AppendAttribute(recordElem, "GroupId", ssGroupId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "GroupId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingDescription")) VarValue.AppendAttribute(recordElem, "OfferingDescription", ssOfferingDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ClusterDescription")) VarValue.AppendAttribute(recordElem, "ClusterDescription", ssClusterDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ClusterDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurriculumLeadDescription")) VarValue.AppendAttribute(recordElem, "CurriculumLeadDescription", ssCurriculumLeadDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CurriculumLeadDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TeamLeadDescription")) VarValue.AppendAttribute(recordElem, "TeamLeadDescription", ssTeamLeadDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TeamLeadDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ClusterIcon")) VarValue.AppendAttribute(recordElem, "ClusterIcon", ssClusterIcon, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ClusterIcon");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SelectAction")) VarValue.AppendAttribute(recordElem, "SelectAction", ssSelectAction, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SelectAction");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumberOfActiveEnrolments")) VarValue.AppendAttribute(recordElem, "NumberOfActiveEnrolments", ssNumberOfActiveEnrolments, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NumberOfActiveEnrolments");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsGroupFavourite")) VarValue.AppendAttribute(recordElem, "IsGroupFavourite", ssIsGroupFavourite, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsGroupFavourite");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "groupid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupId")) variable.Value = ssGroupId; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "offeringdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingDescription")) variable.Value = ssOfferingDescription; else variable.Optimized = true;
			} else if (head == "clusterdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ClusterDescription")) variable.Value = ssClusterDescription; else variable.Optimized = true;
			} else if (head == "curriculumleaddescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurriculumLeadDescription")) variable.Value = ssCurriculumLeadDescription; else variable.Optimized = true;
			} else if (head == "teamleaddescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TeamLeadDescription")) variable.Value = ssTeamLeadDescription; else variable.Optimized = true;
			} else if (head == "clustericon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ClusterIcon")) variable.Value = ssClusterIcon; else variable.Optimized = true;
			} else if (head == "selectaction") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SelectAction")) variable.Value = ssSelectAction; else variable.Optimized = true;
			} else if (head == "numberofactiveenrolments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumberOfActiveEnrolments")) variable.Value = ssNumberOfActiveEnrolments; else variable.Optimized = true;
			} else if (head == "isgroupfavourite") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsGroupFavourite")) variable.Value = ssIsGroupFavourite; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroupId) {
				return ssGroupId;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdOfferingDescription) {
				return ssOfferingDescription;
			} else if (key == IdClusterDescription) {
				return ssClusterDescription;
			} else if (key == IdCurriculumLeadDescription) {
				return ssCurriculumLeadDescription;
			} else if (key == IdTeamLeadDescription) {
				return ssTeamLeadDescription;
			} else if (key == IdClusterIcon) {
				return ssClusterIcon;
			} else if (key == IdSelectAction) {
				return ssSelectAction;
			} else if (key == IdNumberOfActiveEnrolments) {
				return ssNumberOfActiveEnrolments;
			} else if (key == IdIsGroupFavourite) {
				return ssIsGroupFavourite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssGroupId = (int) other.AttributeGet(IdGroupId);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ssOfferingDescription = (string) other.AttributeGet(IdOfferingDescription);
			ssClusterDescription = (string) other.AttributeGet(IdClusterDescription);
			ssCurriculumLeadDescription = (string) other.AttributeGet(IdCurriculumLeadDescription);
			ssTeamLeadDescription = (string) other.AttributeGet(IdTeamLeadDescription);
			ssClusterIcon = (string) other.AttributeGet(IdClusterIcon);
			ssSelectAction = (string) other.AttributeGet(IdSelectAction);
			ssNumberOfActiveEnrolments = (string) other.AttributeGet(IdNumberOfActiveEnrolments);
			ssIsGroupFavourite = (bool) other.AttributeGet(IdIsGroupFavourite);
		}
	} // STOfferingListStructure
	/// <summary>
	/// Structure <code>RCOfferingListRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCOfferingListRecord: ISerializable, ITypedRecord<RCOfferingListRecord> {
		private static readonly GlobalObjectKey IdOfferingList = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+WlK8kKcIuEkIleOoTNYQQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("OfferingList")]
		public STOfferingListStructure ssSTOfferingList;


		public static implicit operator STOfferingListStructure(RCOfferingListRecord r) {
			return r.ssSTOfferingList;
		}

		public static implicit operator RCOfferingListRecord(STOfferingListStructure r) {
			RCOfferingListRecord res = new RCOfferingListRecord(null);
			res.ssSTOfferingList = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCOfferingListRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTOfferingList = new STOfferingListStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTOfferingList.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTOfferingList.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCOfferingListRecord r) {
			this = r;
		}


		public static bool operator == (RCOfferingListRecord a, RCOfferingListRecord b) {
			if (a.ssSTOfferingList != b.ssSTOfferingList) return false;
			return true;
		}

		public static bool operator != (RCOfferingListRecord a, RCOfferingListRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCOfferingListRecord)) return false;
			return (this == (RCOfferingListRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTOfferingList.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCOfferingListRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTOfferingList = new STOfferingListStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTOfferingList = (STOfferingListStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTOfferingList.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTOfferingList.InternalRecursiveSave();
		}


		public RCOfferingListRecord Duplicate() {
			RCOfferingListRecord t;
			t.ssSTOfferingList = (STOfferingListStructure) this.ssSTOfferingList.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTOfferingList.ToXml(this, recordElem, "OfferingList", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "offeringlist") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingList")) variable.Value = ssSTOfferingList; else variable.Optimized = true;
				variable.SetFieldName("offeringlist");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdOfferingList) {
				return ssSTOfferingList;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTOfferingList.FillFromOther((IRecord) other.AttributeGet(IdOfferingList));
		}
	} // RCOfferingListRecord
	/// <summary>
	/// RecordList type <code>RLOfferingListRecordList</code> that represents a record list of
	///  <code>OfferingList</code>
	/// </summary>
	[Serializable()]
	public partial class RLOfferingListRecordList: GenericRecordList<RCOfferingListRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCOfferingListRecord GetElementDefaultValue() {
			return new RCOfferingListRecord("");
		}

		public T[] ToArray<T>(Func<RCOfferingListRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLOfferingListRecordList recordlist, Func<RCOfferingListRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLOfferingListRecordList ToList<T>(T[] array, Func <T, RCOfferingListRecord> converter) {
			RLOfferingListRecordList result = new RLOfferingListRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLOfferingListRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLOfferingListRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLOfferingListRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLOfferingListRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCOfferingListRecord> NewList() {
			return new RLOfferingListRecordList();
		}


	} // RLOfferingListRecordList
	/// <summary>
	/// RecordList type <code>RLOfferingListList</code> that represents a record list of
	///  <code>GroupIdentifier, Text, Text, Text, Text, Text, Text, Text, Text, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLOfferingListList: GenericRecordList<STOfferingListStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STOfferingListStructure GetElementDefaultValue() {
			return new STOfferingListStructure("");
		}

		public T[] ToArray<T>(Func<STOfferingListStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLOfferingListList recordlist, Func<STOfferingListStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLOfferingListList ToList<T>(T[] array, Func <T, STOfferingListStructure> converter) {
			RLOfferingListList result = new RLOfferingListList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLOfferingListList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLOfferingListList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLOfferingListList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLOfferingListList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STOfferingListStructure> NewList() {
			return new RLOfferingListList();
		}


	} // RLOfferingListList
}

namespace ssCaseConferencing {
	[XmlType("OfferingList")]
	public class WORCOfferingListRecord {
		[System.Xml.Serialization.XmlElement("GroupId")]
		public int varWSGroupId;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("OfferingDescription")]
		public string varWSOfferingDescription;

		[System.Xml.Serialization.XmlElement("ClusterDescription")]
		public string varWSClusterDescription;

		[System.Xml.Serialization.XmlElement("CurriculumLeadDescription")]
		public string varWSCurriculumLeadDescription;

		[System.Xml.Serialization.XmlElement("TeamLeadDescription")]
		public string varWSTeamLeadDescription;

		[System.Xml.Serialization.XmlElement("ClusterIcon")]
		public string varWSClusterIcon;

		[System.Xml.Serialization.XmlElement("SelectAction")]
		public string varWSSelectAction;

		[System.Xml.Serialization.XmlElement("NumberOfActiveEnrolments")]
		public string varWSNumberOfActiveEnrolments;

		[System.Xml.Serialization.XmlElement("IsGroupFavourite")]
		public bool varWSIsGroupFavourite;

		public WORCOfferingListRecord() {
			varWSGroupId = (int) 0;
			varWSOfferingCode = (string) "";
			varWSOfferingDescription = (string) "";
			varWSClusterDescription = (string) "";
			varWSCurriculumLeadDescription = (string) "";
			varWSTeamLeadDescription = (string) "";
			varWSClusterIcon = (string) "";
			varWSSelectAction = (string) "";
			varWSNumberOfActiveEnrolments = (string) "";
			varWSIsGroupFavourite = (bool) false;
		}

		public WORCOfferingListRecord(STOfferingListStructure r) {
			varWSGroupId = (int) r.ssGroupId;
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSOfferingDescription = BaseAppUtils.RemoveControlChars(r.ssOfferingDescription);
			varWSClusterDescription = BaseAppUtils.RemoveControlChars(r.ssClusterDescription);
			varWSCurriculumLeadDescription = BaseAppUtils.RemoveControlChars(r.ssCurriculumLeadDescription);
			varWSTeamLeadDescription = BaseAppUtils.RemoveControlChars(r.ssTeamLeadDescription);
			varWSClusterIcon = BaseAppUtils.RemoveControlChars(r.ssClusterIcon);
			varWSSelectAction = BaseAppUtils.RemoveControlChars(r.ssSelectAction);
			varWSNumberOfActiveEnrolments = BaseAppUtils.RemoveControlChars(r.ssNumberOfActiveEnrolments);
			varWSIsGroupFavourite = (bool) r.ssIsGroupFavourite;
		}

		public static RLOfferingListList ToRecordList(WORCOfferingListRecord[] array) {
			RLOfferingListList rl = new RLOfferingListList();
			if (array != null) {
				foreach(WORCOfferingListRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCOfferingListRecord[] FromRecordList(RLOfferingListList rl) {
			WORCOfferingListRecord[] array = new WORCOfferingListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCOfferingListRecord {
		public static implicit operator WORCOfferingListRecord(RCOfferingListRecord r) {
			return new WORCOfferingListRecord(r.ssSTOfferingList);
		}

		public static implicit operator RCOfferingListRecord(WORCOfferingListRecord w) {
			RCOfferingListRecord r = new RCOfferingListRecord("");
			if (w != null) {
				r.ssSTOfferingList = w;
			}
			return r;
		}

	}

	partial struct STOfferingListStructure {
		public static implicit operator WORCOfferingListRecord(STOfferingListStructure r) {
			return new WORCOfferingListRecord(r);
		}

		public static implicit operator STOfferingListStructure(WORCOfferingListRecord w) {
			STOfferingListStructure r = new STOfferingListStructure("");
			if (w != null) {
				r.ssGroupId = (int) w.varWSGroupId;
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssOfferingDescription = ((string) w.varWSOfferingDescription ?? "");
				r.ssClusterDescription = ((string) w.varWSClusterDescription ?? "");
				r.ssCurriculumLeadDescription = ((string) w.varWSCurriculumLeadDescription ?? "");
				r.ssTeamLeadDescription = ((string) w.varWSTeamLeadDescription ?? "");
				r.ssClusterIcon = ((string) w.varWSClusterIcon ?? "");
				r.ssSelectAction = ((string) w.varWSSelectAction ?? "");
				r.ssNumberOfActiveEnrolments = ((string) w.varWSNumberOfActiveEnrolments ?? "");
				r.ssIsGroupFavourite = (bool) w.varWSIsGroupFavourite;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLOfferingListRecordList {
		public WORCOfferingListRecord[] Array;


		public WORLOfferingListRecordList(WORCOfferingListRecord[] r) {
			if (r == null)
			Array = new WORCOfferingListRecord[0];
			else
			Array = r;
		}
		public WORLOfferingListRecordList() {
			Array = new WORCOfferingListRecord[0];
		}

		public WORLOfferingListRecordList(RLOfferingListRecordList rl) {
			rl=(RLOfferingListRecordList) rl.Duplicate();
			Array = new WORCOfferingListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCOfferingListRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLOfferingListRecordList {
		public static implicit operator RLOfferingListRecordList(WORCOfferingListRecord[] array) {
			RLOfferingListRecordList rl = new RLOfferingListRecordList();
			if (array != null) {
				foreach(WORCOfferingListRecord val in array) {
					rl.Append((RCOfferingListRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCOfferingListRecord[](RLOfferingListRecordList rl) {
			WORCOfferingListRecord[] array = new WORCOfferingListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCOfferingListRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLOfferingListRecordList {
		public static implicit operator RLOfferingListRecordList(WORLOfferingListRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLOfferingListRecordList(RLOfferingListRecordList rl) {
			return new WORLOfferingListRecordList(rl);
		}
		public static implicit operator WORCOfferingListRecord[](WORLOfferingListRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLOfferingListRecordList(WORCOfferingListRecord[] array) {
			return new WORLOfferingListRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLOfferingListList {
		public WORCOfferingListRecord[] Array;


		public WORLOfferingListList(WORCOfferingListRecord[] r) {
			if (r == null)
			Array = new WORCOfferingListRecord[0];
			else
			Array = r;
		}
		public WORLOfferingListList() {
			Array = new WORCOfferingListRecord[0];
		}

		public WORLOfferingListList(RLOfferingListList rl) {
			rl=(RLOfferingListList) rl.Duplicate();
			Array = new WORCOfferingListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLOfferingListList {
		public static implicit operator RLOfferingListList(WORCOfferingListRecord[] array) {
			RLOfferingListList rl = new RLOfferingListList();
			if (array != null) {
				foreach(WORCOfferingListRecord val in array) {
					rl.Append((STOfferingListStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCOfferingListRecord[](RLOfferingListList rl) {
			WORCOfferingListRecord[] array = new WORCOfferingListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STOfferingListStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLOfferingListList {
		public static implicit operator RLOfferingListList(WORLOfferingListList w) {
			return w.Array;
		}
		public static implicit operator WORLOfferingListList(RLOfferingListList rl) {
			return new WORLOfferingListList(rl);
		}
		public static implicit operator WORCOfferingListRecord[](WORLOfferingListList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLOfferingListList(WORCOfferingListRecord[] array) {
			return new WORLOfferingListList(array);
		}
	}
}

