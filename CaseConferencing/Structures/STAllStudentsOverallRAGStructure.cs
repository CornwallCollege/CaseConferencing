/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STAllStudentsOverallRAGStructure</code> that represents the Service Studio
	///  structure <code>AllStudentsOverallRAG</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAllStudentsOverallRAGStructure: ISerializable, ITypedRecord<STAllStudentsOverallRAGStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*9epoAsdjpUu9Ci2DjNemOA");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*B8U_lpn2pkWuP_+q1o1bXA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public string ssStudentRAG;


		public BitArray OptimizedAttributes;

		public STAllStudentsOverallRAGStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssStudentRAG = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadText(index++, "AllStudentsOverallRAG.StudentReference", "");
			ssStudentRAG = r.ReadTextEntityReference(index++, "AllStudentsOverallRAG.StudentRAG", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAllStudentsOverallRAGStructure r) {
			this = r;
		}


		public static bool operator == (STAllStudentsOverallRAGStructure a, STAllStudentsOverallRAGStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssStudentRAG != b.ssStudentRAG) return false;
			return true;
		}

		public static bool operator != (STAllStudentsOverallRAGStructure a, STAllStudentsOverallRAGStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAllStudentsOverallRAGStructure)) return false;
			return (this == (STAllStudentsOverallRAGStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssStudentRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAllStudentsOverallRAGStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssStudentRAG = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssStudentRAG = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STAllStudentsOverallRAGStructure Duplicate() {
			STAllStudentsOverallRAGStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssStudentRAG = this.ssStudentRAG;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentRAG")) VarValue.AppendAttribute(recordElem, "StudentRAG", ssStudentRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentRAG");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssStudentRAG; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdStudentRAG) {
				return ssStudentRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssStudentRAG = (string) other.AttributeGet(IdStudentRAG);
		}
	} // STAllStudentsOverallRAGStructure
	/// <summary>
	/// Structure <code>RCAllStudentsOverallRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAllStudentsOverallRAGRecord: ISerializable, ITypedRecord<RCAllStudentsOverallRAGRecord> {
		private static readonly GlobalObjectKey IdAllStudentsOverallRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*x0lf6xrx2IBzqd1JvCyohw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AllStudentsOverallRAG")]
		public STAllStudentsOverallRAGStructure ssSTAllStudentsOverallRAG;


		public static implicit operator STAllStudentsOverallRAGStructure(RCAllStudentsOverallRAGRecord r) {
			return r.ssSTAllStudentsOverallRAG;
		}

		public static implicit operator RCAllStudentsOverallRAGRecord(STAllStudentsOverallRAGStructure r) {
			RCAllStudentsOverallRAGRecord res = new RCAllStudentsOverallRAGRecord(null);
			res.ssSTAllStudentsOverallRAG = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCAllStudentsOverallRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTAllStudentsOverallRAG = new STAllStudentsOverallRAGStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTAllStudentsOverallRAG.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTAllStudentsOverallRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAllStudentsOverallRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCAllStudentsOverallRAGRecord a, RCAllStudentsOverallRAGRecord b) {
			if (a.ssSTAllStudentsOverallRAG != b.ssSTAllStudentsOverallRAG) return false;
			return true;
		}

		public static bool operator != (RCAllStudentsOverallRAGRecord a, RCAllStudentsOverallRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAllStudentsOverallRAGRecord)) return false;
			return (this == (RCAllStudentsOverallRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTAllStudentsOverallRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAllStudentsOverallRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTAllStudentsOverallRAG = new STAllStudentsOverallRAGStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTAllStudentsOverallRAG = (STAllStudentsOverallRAGStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTAllStudentsOverallRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTAllStudentsOverallRAG.InternalRecursiveSave();
		}


		public RCAllStudentsOverallRAGRecord Duplicate() {
			RCAllStudentsOverallRAGRecord t;
			t.ssSTAllStudentsOverallRAG = (STAllStudentsOverallRAGStructure) this.ssSTAllStudentsOverallRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTAllStudentsOverallRAG.ToXml(this, recordElem, "AllStudentsOverallRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "allstudentsoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllStudentsOverallRAG")) variable.Value = ssSTAllStudentsOverallRAG; else variable.Optimized = true;
				variable.SetFieldName("allstudentsoverallrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAllStudentsOverallRAG) {
				return ssSTAllStudentsOverallRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTAllStudentsOverallRAG.FillFromOther((IRecord) other.AttributeGet(IdAllStudentsOverallRAG));
		}
	} // RCAllStudentsOverallRAGRecord
	/// <summary>
	/// RecordList type <code>RLAllStudentsOverallRAGRecordList</code> that represents a record list of
	///  <code>AllStudentsOverallRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLAllStudentsOverallRAGRecordList: GenericRecordList<RCAllStudentsOverallRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAllStudentsOverallRAGRecord GetElementDefaultValue() {
			return new RCAllStudentsOverallRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCAllStudentsOverallRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAllStudentsOverallRAGRecordList recordlist, Func<RCAllStudentsOverallRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAllStudentsOverallRAGRecordList ToList<T>(T[] array, Func <T, RCAllStudentsOverallRAGRecord> converter) {
			RLAllStudentsOverallRAGRecordList result = new RLAllStudentsOverallRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAllStudentsOverallRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsOverallRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsOverallRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAllStudentsOverallRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAllStudentsOverallRAGRecord> NewList() {
			return new RLAllStudentsOverallRAGRecordList();
		}


	} // RLAllStudentsOverallRAGRecordList
	/// <summary>
	/// RecordList type <code>RLAllStudentsOverallRAGList</code> that represents a record list of
	///  <code>Text, RAGStatusIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLAllStudentsOverallRAGList: GenericRecordList<STAllStudentsOverallRAGStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STAllStudentsOverallRAGStructure GetElementDefaultValue() {
			return new STAllStudentsOverallRAGStructure("");
		}

		public T[] ToArray<T>(Func<STAllStudentsOverallRAGStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAllStudentsOverallRAGList recordlist, Func<STAllStudentsOverallRAGStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAllStudentsOverallRAGList ToList<T>(T[] array, Func <T, STAllStudentsOverallRAGStructure> converter) {
			RLAllStudentsOverallRAGList result = new RLAllStudentsOverallRAGList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAllStudentsOverallRAGList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsOverallRAGList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsOverallRAGList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAllStudentsOverallRAGList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STAllStudentsOverallRAGStructure> NewList() {
			return new RLAllStudentsOverallRAGList();
		}


	} // RLAllStudentsOverallRAGList
}

namespace ssCaseConferencing {
	[XmlType("AllStudentsOverallRAG")]
	public class WORCAllStudentsOverallRAGRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public string varWSStudentRAG;

		public WORCAllStudentsOverallRAGRecord() {
			varWSStudentReference = (string) "";
			varWSStudentRAG = (string) "";
		}

		public WORCAllStudentsOverallRAGRecord(STAllStudentsOverallRAGStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSStudentRAG = BaseAppUtils.RemoveControlChars(r.ssStudentRAG);
		}

		public static RLAllStudentsOverallRAGList ToRecordList(WORCAllStudentsOverallRAGRecord[] array) {
			RLAllStudentsOverallRAGList rl = new RLAllStudentsOverallRAGList();
			if (array != null) {
				foreach(WORCAllStudentsOverallRAGRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAllStudentsOverallRAGRecord[] FromRecordList(RLAllStudentsOverallRAGList rl) {
			WORCAllStudentsOverallRAGRecord[] array = new WORCAllStudentsOverallRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAllStudentsOverallRAGRecord {
		public static implicit operator WORCAllStudentsOverallRAGRecord(RCAllStudentsOverallRAGRecord r) {
			return new WORCAllStudentsOverallRAGRecord(r.ssSTAllStudentsOverallRAG);
		}

		public static implicit operator RCAllStudentsOverallRAGRecord(WORCAllStudentsOverallRAGRecord w) {
			RCAllStudentsOverallRAGRecord r = new RCAllStudentsOverallRAGRecord("");
			if (w != null) {
				r.ssSTAllStudentsOverallRAG = w;
			}
			return r;
		}

	}

	partial struct STAllStudentsOverallRAGStructure {
		public static implicit operator WORCAllStudentsOverallRAGRecord(STAllStudentsOverallRAGStructure r) {
			return new WORCAllStudentsOverallRAGRecord(r);
		}

		public static implicit operator STAllStudentsOverallRAGStructure(WORCAllStudentsOverallRAGRecord w) {
			STAllStudentsOverallRAGStructure r = new STAllStudentsOverallRAGStructure("");
			if (w != null) {
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
				r.ssStudentRAG = (string) w.varWSStudentRAG;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAllStudentsOverallRAGRecordList {
		public WORCAllStudentsOverallRAGRecord[] Array;


		public WORLAllStudentsOverallRAGRecordList(WORCAllStudentsOverallRAGRecord[] r) {
			if (r == null)
			Array = new WORCAllStudentsOverallRAGRecord[0];
			else
			Array = r;
		}
		public WORLAllStudentsOverallRAGRecordList() {
			Array = new WORCAllStudentsOverallRAGRecord[0];
		}

		public WORLAllStudentsOverallRAGRecordList(RLAllStudentsOverallRAGRecordList rl) {
			rl=(RLAllStudentsOverallRAGRecordList) rl.Duplicate();
			Array = new WORCAllStudentsOverallRAGRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAllStudentsOverallRAGRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAllStudentsOverallRAGRecordList {
		public static implicit operator RLAllStudentsOverallRAGRecordList(WORCAllStudentsOverallRAGRecord[] array) {
			RLAllStudentsOverallRAGRecordList rl = new RLAllStudentsOverallRAGRecordList();
			if (array != null) {
				foreach(WORCAllStudentsOverallRAGRecord val in array) {
					rl.Append((RCAllStudentsOverallRAGRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAllStudentsOverallRAGRecord[](RLAllStudentsOverallRAGRecordList rl) {
			WORCAllStudentsOverallRAGRecord[] array = new WORCAllStudentsOverallRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAllStudentsOverallRAGRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAllStudentsOverallRAGRecordList {
		public static implicit operator RLAllStudentsOverallRAGRecordList(WORLAllStudentsOverallRAGRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAllStudentsOverallRAGRecordList(RLAllStudentsOverallRAGRecordList rl) {
			return new WORLAllStudentsOverallRAGRecordList(rl);
		}
		public static implicit operator WORCAllStudentsOverallRAGRecord[](WORLAllStudentsOverallRAGRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAllStudentsOverallRAGRecordList(WORCAllStudentsOverallRAGRecord[] array) {
			return new WORLAllStudentsOverallRAGRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAllStudentsOverallRAGList {
		public WORCAllStudentsOverallRAGRecord[] Array;


		public WORLAllStudentsOverallRAGList(WORCAllStudentsOverallRAGRecord[] r) {
			if (r == null)
			Array = new WORCAllStudentsOverallRAGRecord[0];
			else
			Array = r;
		}
		public WORLAllStudentsOverallRAGList() {
			Array = new WORCAllStudentsOverallRAGRecord[0];
		}

		public WORLAllStudentsOverallRAGList(RLAllStudentsOverallRAGList rl) {
			rl=(RLAllStudentsOverallRAGList) rl.Duplicate();
			Array = new WORCAllStudentsOverallRAGRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAllStudentsOverallRAGList {
		public static implicit operator RLAllStudentsOverallRAGList(WORCAllStudentsOverallRAGRecord[] array) {
			RLAllStudentsOverallRAGList rl = new RLAllStudentsOverallRAGList();
			if (array != null) {
				foreach(WORCAllStudentsOverallRAGRecord val in array) {
					rl.Append((STAllStudentsOverallRAGStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAllStudentsOverallRAGRecord[](RLAllStudentsOverallRAGList rl) {
			WORCAllStudentsOverallRAGRecord[] array = new WORCAllStudentsOverallRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STAllStudentsOverallRAGStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAllStudentsOverallRAGList {
		public static implicit operator RLAllStudentsOverallRAGList(WORLAllStudentsOverallRAGList w) {
			return w.Array;
		}
		public static implicit operator WORLAllStudentsOverallRAGList(RLAllStudentsOverallRAGList rl) {
			return new WORLAllStudentsOverallRAGList(rl);
		}
		public static implicit operator WORCAllStudentsOverallRAGRecord[](WORLAllStudentsOverallRAGList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAllStudentsOverallRAGList(WORCAllStudentsOverallRAGRecord[] array) {
			return new WORLAllStudentsOverallRAGList(array);
		}
	}
}

