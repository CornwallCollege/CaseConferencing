/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStudentAttendanceTotalsStructure</code> that represents the Service Studio
	///  structure <code>StudentAttendanceTotals</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStudentAttendanceTotalsStructure: ISerializable, ITypedRecord<STStudentAttendanceTotalsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdAttendancePercentage = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*3qpW2Xu840yohmg6_BJ0jQ");
		private static readonly GlobalObjectKey IdListType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*E_J4+c8fQ0SprdcWsLIlqg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AttendancePercentage")]
		public int ssAttendancePercentage;

		[System.Xml.Serialization.XmlElement("ListType")]
		public string ssListType;


		public BitArray OptimizedAttributes;

		public STStudentAttendanceTotalsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssAttendancePercentage = 0;
			ssListType = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssAttendancePercentage = r.ReadInteger(index++, "StudentAttendanceTotals.AttendancePercentage", 0);
			ssListType = r.ReadText(index++, "StudentAttendanceTotals.ListType", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStudentAttendanceTotalsStructure r) {
			this = r;
		}


		public static bool operator == (STStudentAttendanceTotalsStructure a, STStudentAttendanceTotalsStructure b) {
			if (a.ssAttendancePercentage != b.ssAttendancePercentage) return false;
			if (a.ssListType != b.ssListType) return false;
			return true;
		}

		public static bool operator != (STStudentAttendanceTotalsStructure a, STStudentAttendanceTotalsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStudentAttendanceTotalsStructure)) return false;
			return (this == (STStudentAttendanceTotalsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssAttendancePercentage.GetHashCode()
				^ ssListType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStudentAttendanceTotalsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssAttendancePercentage = 0;
			ssListType = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssAttendancePercentage = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssListType = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStudentAttendanceTotalsStructure Duplicate() {
			STStudentAttendanceTotalsStructure t;
			t.ssAttendancePercentage = this.ssAttendancePercentage;
			t.ssListType = this.ssListType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AttendancePercentage")) VarValue.AppendAttribute(recordElem, "AttendancePercentage", ssAttendancePercentage, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "AttendancePercentage");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ListType")) VarValue.AppendAttribute(recordElem, "ListType", ssListType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ListType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "attendancepercentage") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendancePercentage")) variable.Value = ssAttendancePercentage; else variable.Optimized = true;
			} else if (head == "listtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ListType")) variable.Value = ssListType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAttendancePercentage) {
				return ssAttendancePercentage;
			} else if (key == IdListType) {
				return ssListType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssAttendancePercentage = (int) other.AttributeGet(IdAttendancePercentage);
			ssListType = (string) other.AttributeGet(IdListType);
		}
	} // STStudentAttendanceTotalsStructure
	/// <summary>
	/// Structure <code>RCStudentAttendanceTotalsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentAttendanceTotalsRecord: ISerializable, ITypedRecord<RCStudentAttendanceTotalsRecord> {
		private static readonly GlobalObjectKey IdStudentAttendanceTotals = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*RvfmGgp0vQpEKEP+crG8KA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentAttendanceTotals")]
		public STStudentAttendanceTotalsStructure ssSTStudentAttendanceTotals;


		public static implicit operator STStudentAttendanceTotalsStructure(RCStudentAttendanceTotalsRecord r) {
			return r.ssSTStudentAttendanceTotals;
		}

		public static implicit operator RCStudentAttendanceTotalsRecord(STStudentAttendanceTotalsStructure r) {
			RCStudentAttendanceTotalsRecord res = new RCStudentAttendanceTotalsRecord(null);
			res.ssSTStudentAttendanceTotals = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStudentAttendanceTotalsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStudentAttendanceTotals = new STStudentAttendanceTotalsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStudentAttendanceTotals.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStudentAttendanceTotals.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentAttendanceTotalsRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentAttendanceTotalsRecord a, RCStudentAttendanceTotalsRecord b) {
			if (a.ssSTStudentAttendanceTotals != b.ssSTStudentAttendanceTotals) return false;
			return true;
		}

		public static bool operator != (RCStudentAttendanceTotalsRecord a, RCStudentAttendanceTotalsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentAttendanceTotalsRecord)) return false;
			return (this == (RCStudentAttendanceTotalsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStudentAttendanceTotals.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentAttendanceTotalsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStudentAttendanceTotals = new STStudentAttendanceTotalsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStudentAttendanceTotals = (STStudentAttendanceTotalsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStudentAttendanceTotals.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStudentAttendanceTotals.InternalRecursiveSave();
		}


		public RCStudentAttendanceTotalsRecord Duplicate() {
			RCStudentAttendanceTotalsRecord t;
			t.ssSTStudentAttendanceTotals = (STStudentAttendanceTotalsStructure) this.ssSTStudentAttendanceTotals.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStudentAttendanceTotals.ToXml(this, recordElem, "StudentAttendanceTotals", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentattendancetotals") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentAttendanceTotals")) variable.Value = ssSTStudentAttendanceTotals; else variable.Optimized = true;
				variable.SetFieldName("studentattendancetotals");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentAttendanceTotals) {
				return ssSTStudentAttendanceTotals;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStudentAttendanceTotals.FillFromOther((IRecord) other.AttributeGet(IdStudentAttendanceTotals));
		}
	} // RCStudentAttendanceTotalsRecord
	/// <summary>
	/// RecordList type <code>RLStudentAttendanceTotalsRecordList</code> that represents a record list of
	///  <code>StudentAttendanceTotals</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttendanceTotalsRecordList: GenericRecordList<RCStudentAttendanceTotalsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentAttendanceTotalsRecord GetElementDefaultValue() {
			return new RCStudentAttendanceTotalsRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentAttendanceTotalsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttendanceTotalsRecordList recordlist, Func<RCStudentAttendanceTotalsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttendanceTotalsRecordList ToList<T>(T[] array, Func <T, RCStudentAttendanceTotalsRecord> converter) {
			RLStudentAttendanceTotalsRecordList result = new RLStudentAttendanceTotalsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttendanceTotalsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceTotalsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceTotalsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttendanceTotalsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentAttendanceTotalsRecord> NewList() {
			return new RLStudentAttendanceTotalsRecordList();
		}


	} // RLStudentAttendanceTotalsRecordList
	/// <summary>
	/// RecordList type <code>RLStudentAttendanceTotalsList</code> that represents a record list of
	///  <code>Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttendanceTotalsList: GenericRecordList<STStudentAttendanceTotalsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStudentAttendanceTotalsStructure GetElementDefaultValue() {
			return new STStudentAttendanceTotalsStructure("");
		}

		public T[] ToArray<T>(Func<STStudentAttendanceTotalsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttendanceTotalsList recordlist, Func<STStudentAttendanceTotalsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttendanceTotalsList ToList<T>(T[] array, Func <T, STStudentAttendanceTotalsStructure> converter) {
			RLStudentAttendanceTotalsList result = new RLStudentAttendanceTotalsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttendanceTotalsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceTotalsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceTotalsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttendanceTotalsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStudentAttendanceTotalsStructure> NewList() {
			return new RLStudentAttendanceTotalsList();
		}


	} // RLStudentAttendanceTotalsList
}

namespace ssCaseConferencing {
	[XmlType("StudentAttendanceTotals")]
	public class WORCStudentAttendanceTotalsRecord {
		[System.Xml.Serialization.XmlElement("AttendancePercentage")]
		public int varWSAttendancePercentage;

		[System.Xml.Serialization.XmlElement("ListType")]
		public string varWSListType;

		public WORCStudentAttendanceTotalsRecord() {
			varWSAttendancePercentage = (int) 0;
			varWSListType = (string) "";
		}

		public WORCStudentAttendanceTotalsRecord(STStudentAttendanceTotalsStructure r) {
			varWSAttendancePercentage = (int) r.ssAttendancePercentage;
			varWSListType = BaseAppUtils.RemoveControlChars(r.ssListType);
		}

		public static RLStudentAttendanceTotalsList ToRecordList(WORCStudentAttendanceTotalsRecord[] array) {
			RLStudentAttendanceTotalsList rl = new RLStudentAttendanceTotalsList();
			if (array != null) {
				foreach(WORCStudentAttendanceTotalsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentAttendanceTotalsRecord[] FromRecordList(RLStudentAttendanceTotalsList rl) {
			WORCStudentAttendanceTotalsRecord[] array = new WORCStudentAttendanceTotalsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentAttendanceTotalsRecord {
		public static implicit operator WORCStudentAttendanceTotalsRecord(RCStudentAttendanceTotalsRecord r) {
			return new WORCStudentAttendanceTotalsRecord(r.ssSTStudentAttendanceTotals);
		}

		public static implicit operator RCStudentAttendanceTotalsRecord(WORCStudentAttendanceTotalsRecord w) {
			RCStudentAttendanceTotalsRecord r = new RCStudentAttendanceTotalsRecord("");
			if (w != null) {
				r.ssSTStudentAttendanceTotals = w;
			}
			return r;
		}

	}

	partial struct STStudentAttendanceTotalsStructure {
		public static implicit operator WORCStudentAttendanceTotalsRecord(STStudentAttendanceTotalsStructure r) {
			return new WORCStudentAttendanceTotalsRecord(r);
		}

		public static implicit operator STStudentAttendanceTotalsStructure(WORCStudentAttendanceTotalsRecord w) {
			STStudentAttendanceTotalsStructure r = new STStudentAttendanceTotalsStructure("");
			if (w != null) {
				r.ssAttendancePercentage = (int) w.varWSAttendancePercentage;
				r.ssListType = ((string) w.varWSListType ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAttendanceTotalsRecordList {
		public WORCStudentAttendanceTotalsRecord[] Array;


		public WORLStudentAttendanceTotalsRecordList(WORCStudentAttendanceTotalsRecord[] r) {
			if (r == null)
			Array = new WORCStudentAttendanceTotalsRecord[0];
			else
			Array = r;
		}
		public WORLStudentAttendanceTotalsRecordList() {
			Array = new WORCStudentAttendanceTotalsRecord[0];
		}

		public WORLStudentAttendanceTotalsRecordList(RLStudentAttendanceTotalsRecordList rl) {
			rl=(RLStudentAttendanceTotalsRecordList) rl.Duplicate();
			Array = new WORCStudentAttendanceTotalsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentAttendanceTotalsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAttendanceTotalsRecordList {
		public static implicit operator RLStudentAttendanceTotalsRecordList(WORCStudentAttendanceTotalsRecord[] array) {
			RLStudentAttendanceTotalsRecordList rl = new RLStudentAttendanceTotalsRecordList();
			if (array != null) {
				foreach(WORCStudentAttendanceTotalsRecord val in array) {
					rl.Append((RCStudentAttendanceTotalsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAttendanceTotalsRecord[](RLStudentAttendanceTotalsRecordList rl) {
			WORCStudentAttendanceTotalsRecord[] array = new WORCStudentAttendanceTotalsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentAttendanceTotalsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAttendanceTotalsRecordList {
		public static implicit operator RLStudentAttendanceTotalsRecordList(WORLStudentAttendanceTotalsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAttendanceTotalsRecordList(RLStudentAttendanceTotalsRecordList rl) {
			return new WORLStudentAttendanceTotalsRecordList(rl);
		}
		public static implicit operator WORCStudentAttendanceTotalsRecord[](WORLStudentAttendanceTotalsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAttendanceTotalsRecordList(WORCStudentAttendanceTotalsRecord[] array) {
			return new WORLStudentAttendanceTotalsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAttendanceTotalsList {
		public WORCStudentAttendanceTotalsRecord[] Array;


		public WORLStudentAttendanceTotalsList(WORCStudentAttendanceTotalsRecord[] r) {
			if (r == null)
			Array = new WORCStudentAttendanceTotalsRecord[0];
			else
			Array = r;
		}
		public WORLStudentAttendanceTotalsList() {
			Array = new WORCStudentAttendanceTotalsRecord[0];
		}

		public WORLStudentAttendanceTotalsList(RLStudentAttendanceTotalsList rl) {
			rl=(RLStudentAttendanceTotalsList) rl.Duplicate();
			Array = new WORCStudentAttendanceTotalsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAttendanceTotalsList {
		public static implicit operator RLStudentAttendanceTotalsList(WORCStudentAttendanceTotalsRecord[] array) {
			RLStudentAttendanceTotalsList rl = new RLStudentAttendanceTotalsList();
			if (array != null) {
				foreach(WORCStudentAttendanceTotalsRecord val in array) {
					rl.Append((STStudentAttendanceTotalsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAttendanceTotalsRecord[](RLStudentAttendanceTotalsList rl) {
			WORCStudentAttendanceTotalsRecord[] array = new WORCStudentAttendanceTotalsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStudentAttendanceTotalsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAttendanceTotalsList {
		public static implicit operator RLStudentAttendanceTotalsList(WORLStudentAttendanceTotalsList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAttendanceTotalsList(RLStudentAttendanceTotalsList rl) {
			return new WORLStudentAttendanceTotalsList(rl);
		}
		public static implicit operator WORCStudentAttendanceTotalsRecord[](WORLStudentAttendanceTotalsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAttendanceTotalsList(WORCStudentAttendanceTotalsRecord[] array) {
			return new WORLStudentAttendanceTotalsList(array);
		}
	}
}

