/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STBulkProgressReportDownloadStructure</code> that represents the Service Studio
	///  structure <code>BulkProgressReportDownload</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STBulkProgressReportDownloadStructure: ISerializable, ITypedRecord<STBulkProgressReportDownloadStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdProgressReportID = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*TA9mfTZ7rU6lQ_sj_7LuSQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReportID")]
		public int ssProgressReportID;


		public BitArray OptimizedAttributes;

		public STBulkProgressReportDownloadStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssProgressReportID = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssProgressReportID = r.ReadEntityReference(index++, "BulkProgressReportDownload.ProgressReportID", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STBulkProgressReportDownloadStructure r) {
			this = r;
		}


		public static bool operator == (STBulkProgressReportDownloadStructure a, STBulkProgressReportDownloadStructure b) {
			if (a.ssProgressReportID != b.ssProgressReportID) return false;
			return true;
		}

		public static bool operator != (STBulkProgressReportDownloadStructure a, STBulkProgressReportDownloadStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STBulkProgressReportDownloadStructure)) return false;
			return (this == (STBulkProgressReportDownloadStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssProgressReportID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STBulkProgressReportDownloadStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssProgressReportID = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssProgressReportID = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STBulkProgressReportDownloadStructure Duplicate() {
			STBulkProgressReportDownloadStructure t;
			t.ssProgressReportID = this.ssProgressReportID;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProgressReportID")) VarValue.AppendAttribute(recordElem, "ProgressReportID", ssProgressReportID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProgressReportID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreportid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportID")) variable.Value = ssProgressReportID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReportID) {
				return ssProgressReportID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssProgressReportID = (int) other.AttributeGet(IdProgressReportID);
		}
	} // STBulkProgressReportDownloadStructure
	/// <summary>
	/// Structure <code>RCBulkProgressReportDownloadRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCBulkProgressReportDownloadRecord: ISerializable, ITypedRecord<RCBulkProgressReportDownloadRecord> {
		private static readonly GlobalObjectKey IdBulkProgressReportDownload = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*E0EknCSu7iuIMd+BThkk8A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("BulkProgressReportDownload")]
		public STBulkProgressReportDownloadStructure ssSTBulkProgressReportDownload;


		public static implicit operator STBulkProgressReportDownloadStructure(RCBulkProgressReportDownloadRecord r) {
			return r.ssSTBulkProgressReportDownload;
		}

		public static implicit operator RCBulkProgressReportDownloadRecord(STBulkProgressReportDownloadStructure r) {
			RCBulkProgressReportDownloadRecord res = new RCBulkProgressReportDownloadRecord(null);
			res.ssSTBulkProgressReportDownload = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCBulkProgressReportDownloadRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTBulkProgressReportDownload = new STBulkProgressReportDownloadStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTBulkProgressReportDownload.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTBulkProgressReportDownload.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCBulkProgressReportDownloadRecord r) {
			this = r;
		}


		public static bool operator == (RCBulkProgressReportDownloadRecord a, RCBulkProgressReportDownloadRecord b) {
			if (a.ssSTBulkProgressReportDownload != b.ssSTBulkProgressReportDownload) return false;
			return true;
		}

		public static bool operator != (RCBulkProgressReportDownloadRecord a, RCBulkProgressReportDownloadRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCBulkProgressReportDownloadRecord)) return false;
			return (this == (RCBulkProgressReportDownloadRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTBulkProgressReportDownload.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCBulkProgressReportDownloadRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTBulkProgressReportDownload = new STBulkProgressReportDownloadStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTBulkProgressReportDownload = (STBulkProgressReportDownloadStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTBulkProgressReportDownload.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTBulkProgressReportDownload.InternalRecursiveSave();
		}


		public RCBulkProgressReportDownloadRecord Duplicate() {
			RCBulkProgressReportDownloadRecord t;
			t.ssSTBulkProgressReportDownload = (STBulkProgressReportDownloadStructure) this.ssSTBulkProgressReportDownload.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTBulkProgressReportDownload.ToXml(this, recordElem, "BulkProgressReportDownload", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "bulkprogressreportdownload") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".BulkProgressReportDownload")) variable.Value = ssSTBulkProgressReportDownload; else variable.Optimized = true;
				variable.SetFieldName("bulkprogressreportdownload");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdBulkProgressReportDownload) {
				return ssSTBulkProgressReportDownload;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTBulkProgressReportDownload.FillFromOther((IRecord) other.AttributeGet(IdBulkProgressReportDownload));
		}
	} // RCBulkProgressReportDownloadRecord
	/// <summary>
	/// RecordList type <code>RLBulkProgressReportDownloadRecordList</code> that represents a record list
	///  of <code>BulkProgressReportDownload</code>
	/// </summary>
	[Serializable()]
	public partial class RLBulkProgressReportDownloadRecordList: GenericRecordList<RCBulkProgressReportDownloadRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCBulkProgressReportDownloadRecord GetElementDefaultValue() {
			return new RCBulkProgressReportDownloadRecord("");
		}

		public T[] ToArray<T>(Func<RCBulkProgressReportDownloadRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLBulkProgressReportDownloadRecordList recordlist, Func<RCBulkProgressReportDownloadRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLBulkProgressReportDownloadRecordList ToList<T>(T[] array, Func <T, RCBulkProgressReportDownloadRecord> converter) {
			RLBulkProgressReportDownloadRecordList result = new RLBulkProgressReportDownloadRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLBulkProgressReportDownloadRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBulkProgressReportDownloadRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBulkProgressReportDownloadRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLBulkProgressReportDownloadRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCBulkProgressReportDownloadRecord> NewList() {
			return new RLBulkProgressReportDownloadRecordList();
		}


	} // RLBulkProgressReportDownloadRecordList
	/// <summary>
	/// RecordList type <code>RLBulkProgressReportDownloadList</code> that represents a record list of
	///  <code>ProgressReportIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLBulkProgressReportDownloadList: GenericRecordList<STBulkProgressReportDownloadStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STBulkProgressReportDownloadStructure GetElementDefaultValue() {
			return new STBulkProgressReportDownloadStructure("");
		}

		public T[] ToArray<T>(Func<STBulkProgressReportDownloadStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLBulkProgressReportDownloadList recordlist, Func<STBulkProgressReportDownloadStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLBulkProgressReportDownloadList ToList<T>(T[] array, Func <T, STBulkProgressReportDownloadStructure> converter) {
			RLBulkProgressReportDownloadList result = new RLBulkProgressReportDownloadList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLBulkProgressReportDownloadList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBulkProgressReportDownloadList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBulkProgressReportDownloadList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLBulkProgressReportDownloadList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STBulkProgressReportDownloadStructure> NewList() {
			return new RLBulkProgressReportDownloadList();
		}


	} // RLBulkProgressReportDownloadList
}

namespace ssCaseConferencing {
	[XmlType("BulkProgressReportDownload")]
	public class WORCBulkProgressReportDownloadRecord {
		[System.Xml.Serialization.XmlElement("ProgressReportID")]
		public int varWSProgressReportID;

		public WORCBulkProgressReportDownloadRecord() {
			varWSProgressReportID = (int) 0;
		}

		public WORCBulkProgressReportDownloadRecord(STBulkProgressReportDownloadStructure r) {
			varWSProgressReportID = (int) r.ssProgressReportID;
		}

		public static RLBulkProgressReportDownloadList ToRecordList(WORCBulkProgressReportDownloadRecord[] array) {
			RLBulkProgressReportDownloadList rl = new RLBulkProgressReportDownloadList();
			if (array != null) {
				foreach(WORCBulkProgressReportDownloadRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCBulkProgressReportDownloadRecord[] FromRecordList(RLBulkProgressReportDownloadList rl) {
			WORCBulkProgressReportDownloadRecord[] array = new WORCBulkProgressReportDownloadRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCBulkProgressReportDownloadRecord {
		public static implicit operator WORCBulkProgressReportDownloadRecord(RCBulkProgressReportDownloadRecord r) {
			return new WORCBulkProgressReportDownloadRecord(r.ssSTBulkProgressReportDownload);
		}

		public static implicit operator RCBulkProgressReportDownloadRecord(WORCBulkProgressReportDownloadRecord w) {
			RCBulkProgressReportDownloadRecord r = new RCBulkProgressReportDownloadRecord("");
			if (w != null) {
				r.ssSTBulkProgressReportDownload = w;
			}
			return r;
		}

	}

	partial struct STBulkProgressReportDownloadStructure {
		public static implicit operator WORCBulkProgressReportDownloadRecord(STBulkProgressReportDownloadStructure r) {
			return new WORCBulkProgressReportDownloadRecord(r);
		}

		public static implicit operator STBulkProgressReportDownloadStructure(WORCBulkProgressReportDownloadRecord w) {
			STBulkProgressReportDownloadStructure r = new STBulkProgressReportDownloadStructure("");
			if (w != null) {
				r.ssProgressReportID = (int) w.varWSProgressReportID;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLBulkProgressReportDownloadRecordList {
		public WORCBulkProgressReportDownloadRecord[] Array;


		public WORLBulkProgressReportDownloadRecordList(WORCBulkProgressReportDownloadRecord[] r) {
			if (r == null)
			Array = new WORCBulkProgressReportDownloadRecord[0];
			else
			Array = r;
		}
		public WORLBulkProgressReportDownloadRecordList() {
			Array = new WORCBulkProgressReportDownloadRecord[0];
		}

		public WORLBulkProgressReportDownloadRecordList(RLBulkProgressReportDownloadRecordList rl) {
			rl=(RLBulkProgressReportDownloadRecordList) rl.Duplicate();
			Array = new WORCBulkProgressReportDownloadRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCBulkProgressReportDownloadRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLBulkProgressReportDownloadRecordList {
		public static implicit operator RLBulkProgressReportDownloadRecordList(WORCBulkProgressReportDownloadRecord[] array) {
			RLBulkProgressReportDownloadRecordList rl = new RLBulkProgressReportDownloadRecordList();
			if (array != null) {
				foreach(WORCBulkProgressReportDownloadRecord val in array) {
					rl.Append((RCBulkProgressReportDownloadRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCBulkProgressReportDownloadRecord[](RLBulkProgressReportDownloadRecordList rl) {
			WORCBulkProgressReportDownloadRecord[] array = new WORCBulkProgressReportDownloadRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCBulkProgressReportDownloadRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLBulkProgressReportDownloadRecordList {
		public static implicit operator RLBulkProgressReportDownloadRecordList(WORLBulkProgressReportDownloadRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLBulkProgressReportDownloadRecordList(RLBulkProgressReportDownloadRecordList rl) {
			return new WORLBulkProgressReportDownloadRecordList(rl);
		}
		public static implicit operator WORCBulkProgressReportDownloadRecord[](WORLBulkProgressReportDownloadRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLBulkProgressReportDownloadRecordList(WORCBulkProgressReportDownloadRecord[] array) {
			return new WORLBulkProgressReportDownloadRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLBulkProgressReportDownloadList {
		public WORCBulkProgressReportDownloadRecord[] Array;


		public WORLBulkProgressReportDownloadList(WORCBulkProgressReportDownloadRecord[] r) {
			if (r == null)
			Array = new WORCBulkProgressReportDownloadRecord[0];
			else
			Array = r;
		}
		public WORLBulkProgressReportDownloadList() {
			Array = new WORCBulkProgressReportDownloadRecord[0];
		}

		public WORLBulkProgressReportDownloadList(RLBulkProgressReportDownloadList rl) {
			rl=(RLBulkProgressReportDownloadList) rl.Duplicate();
			Array = new WORCBulkProgressReportDownloadRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLBulkProgressReportDownloadList {
		public static implicit operator RLBulkProgressReportDownloadList(WORCBulkProgressReportDownloadRecord[] array) {
			RLBulkProgressReportDownloadList rl = new RLBulkProgressReportDownloadList();
			if (array != null) {
				foreach(WORCBulkProgressReportDownloadRecord val in array) {
					rl.Append((STBulkProgressReportDownloadStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCBulkProgressReportDownloadRecord[](RLBulkProgressReportDownloadList rl) {
			WORCBulkProgressReportDownloadRecord[] array = new WORCBulkProgressReportDownloadRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STBulkProgressReportDownloadStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLBulkProgressReportDownloadList {
		public static implicit operator RLBulkProgressReportDownloadList(WORLBulkProgressReportDownloadList w) {
			return w.Array;
		}
		public static implicit operator WORLBulkProgressReportDownloadList(RLBulkProgressReportDownloadList rl) {
			return new WORLBulkProgressReportDownloadList(rl);
		}
		public static implicit operator WORCBulkProgressReportDownloadRecord[](WORLBulkProgressReportDownloadList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLBulkProgressReportDownloadList(WORCBulkProgressReportDownloadRecord[] array) {
			return new WORLBulkProgressReportDownloadList(array);
		}
	}
}

