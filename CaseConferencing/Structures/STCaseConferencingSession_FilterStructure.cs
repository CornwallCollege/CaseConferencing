/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STCaseConferencingSession_FilterStructure</code> that represents the Service Studio
	///  structure <code>CaseConferencingSession_Filter</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STCaseConferencingSession_FilterStructure: ISerializable, ITypedRecord<STCaseConferencingSession_FilterStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdCurriculumLeadId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*2wzFuiid9EmDHeh4YoUaSw");
		private static readonly GlobalObjectKey IdTeamId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*rNYXn9uOp0qtGnFSV3XPJg");
		private static readonly GlobalObjectKey IdSite = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*lTaPFUwc_E2QBY_0vrRVBQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CurriculumLeadId")]
		public int ssCurriculumLeadId;

		[System.Xml.Serialization.XmlElement("TeamId")]
		public int ssTeamId;

		[System.Xml.Serialization.XmlElement("Site")]
		public string ssSite;


		public BitArray OptimizedAttributes;

		public STCaseConferencingSession_FilterStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssCurriculumLeadId = 0;
			ssTeamId = 0;
			ssSite = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssCurriculumLeadId = r.ReadEntityReference(index++, "CaseConferencingSession_Filter.CurriculumLeadId", 0);
			ssTeamId = r.ReadEntityReference(index++, "CaseConferencingSession_Filter.TeamId", 0);
			ssSite = r.ReadText(index++, "CaseConferencingSession_Filter.Site", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STCaseConferencingSession_FilterStructure r) {
			this = r;
		}


		public static bool operator == (STCaseConferencingSession_FilterStructure a, STCaseConferencingSession_FilterStructure b) {
			if (a.ssCurriculumLeadId != b.ssCurriculumLeadId) return false;
			if (a.ssTeamId != b.ssTeamId) return false;
			if (a.ssSite != b.ssSite) return false;
			return true;
		}

		public static bool operator != (STCaseConferencingSession_FilterStructure a, STCaseConferencingSession_FilterStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STCaseConferencingSession_FilterStructure)) return false;
			return (this == (STCaseConferencingSession_FilterStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssCurriculumLeadId.GetHashCode()
				^ ssTeamId.GetHashCode()
				^ ssSite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STCaseConferencingSession_FilterStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssCurriculumLeadId = 0;
			ssTeamId = 0;
			ssSite = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssCurriculumLeadId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssTeamId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSite = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STCaseConferencingSession_FilterStructure Duplicate() {
			STCaseConferencingSession_FilterStructure t;
			t.ssCurriculumLeadId = this.ssCurriculumLeadId;
			t.ssTeamId = this.ssTeamId;
			t.ssSite = this.ssSite;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurriculumLeadId")) VarValue.AppendAttribute(recordElem, "CurriculumLeadId", ssCurriculumLeadId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CurriculumLeadId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TeamId")) VarValue.AppendAttribute(recordElem, "TeamId", ssTeamId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TeamId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Site")) VarValue.AppendAttribute(recordElem, "Site", ssSite, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Site");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "curriculumleadid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurriculumLeadId")) variable.Value = ssCurriculumLeadId; else variable.Optimized = true;
			} else if (head == "teamid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TeamId")) variable.Value = ssTeamId; else variable.Optimized = true;
			} else if (head == "site") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Site")) variable.Value = ssSite; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCurriculumLeadId) {
				return ssCurriculumLeadId;
			} else if (key == IdTeamId) {
				return ssTeamId;
			} else if (key == IdSite) {
				return ssSite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssCurriculumLeadId = (int) other.AttributeGet(IdCurriculumLeadId);
			ssTeamId = (int) other.AttributeGet(IdTeamId);
			ssSite = (string) other.AttributeGet(IdSite);
		}
	} // STCaseConferencingSession_FilterStructure
	/// <summary>
	/// Structure <code>RCCaseConferencingSession_FilterRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCaseConferencingSession_FilterRecord: ISerializable, ITypedRecord<RCCaseConferencingSession_FilterRecord> {
		private static readonly GlobalObjectKey IdCaseConferencingSession_Filter = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*gNnYMvH9a8i1LgHfJZeBPg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CaseConferencingSession_Filter")]
		public STCaseConferencingSession_FilterStructure ssSTCaseConferencingSession_Filter;


		public static implicit operator STCaseConferencingSession_FilterStructure(RCCaseConferencingSession_FilterRecord r) {
			return r.ssSTCaseConferencingSession_Filter;
		}

		public static implicit operator RCCaseConferencingSession_FilterRecord(STCaseConferencingSession_FilterStructure r) {
			RCCaseConferencingSession_FilterRecord res = new RCCaseConferencingSession_FilterRecord(null);
			res.ssSTCaseConferencingSession_Filter = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCCaseConferencingSession_FilterRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTCaseConferencingSession_Filter = new STCaseConferencingSession_FilterStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTCaseConferencingSession_Filter.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTCaseConferencingSession_Filter.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCaseConferencingSession_FilterRecord r) {
			this = r;
		}


		public static bool operator == (RCCaseConferencingSession_FilterRecord a, RCCaseConferencingSession_FilterRecord b) {
			if (a.ssSTCaseConferencingSession_Filter != b.ssSTCaseConferencingSession_Filter) return false;
			return true;
		}

		public static bool operator != (RCCaseConferencingSession_FilterRecord a, RCCaseConferencingSession_FilterRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCaseConferencingSession_FilterRecord)) return false;
			return (this == (RCCaseConferencingSession_FilterRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTCaseConferencingSession_Filter.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCaseConferencingSession_FilterRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTCaseConferencingSession_Filter = new STCaseConferencingSession_FilterStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTCaseConferencingSession_Filter = (STCaseConferencingSession_FilterStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTCaseConferencingSession_Filter.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTCaseConferencingSession_Filter.InternalRecursiveSave();
		}


		public RCCaseConferencingSession_FilterRecord Duplicate() {
			RCCaseConferencingSession_FilterRecord t;
			t.ssSTCaseConferencingSession_Filter = (STCaseConferencingSession_FilterStructure) this.ssSTCaseConferencingSession_Filter.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTCaseConferencingSession_Filter.ToXml(this, recordElem, "CaseConferencingSession_Filter", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "caseconferencingsession_filter") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CaseConferencingSession_Filter")) variable.Value = ssSTCaseConferencingSession_Filter; else variable.Optimized = true;
				variable.SetFieldName("caseconferencingsession_filter");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCaseConferencingSession_Filter) {
				return ssSTCaseConferencingSession_Filter;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTCaseConferencingSession_Filter.FillFromOther((IRecord) other.AttributeGet(IdCaseConferencingSession_Filter));
		}
	} // RCCaseConferencingSession_FilterRecord
	/// <summary>
	/// RecordList type <code>RLCaseConferencingSession_FilterRecordList</code> that represents a record
	///  list of <code>CaseConferencingSession_Filter</code>
	/// </summary>
	[Serializable()]
	public partial class RLCaseConferencingSession_FilterRecordList: GenericRecordList<RCCaseConferencingSession_FilterRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCaseConferencingSession_FilterRecord GetElementDefaultValue() {
			return new RCCaseConferencingSession_FilterRecord("");
		}

		public T[] ToArray<T>(Func<RCCaseConferencingSession_FilterRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCaseConferencingSession_FilterRecordList recordlist, Func<RCCaseConferencingSession_FilterRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCaseConferencingSession_FilterRecordList ToList<T>(T[] array, Func <T, RCCaseConferencingSession_FilterRecord> converter) {
			RLCaseConferencingSession_FilterRecordList result = new RLCaseConferencingSession_FilterRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCaseConferencingSession_FilterRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCaseConferencingSession_FilterRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCaseConferencingSession_FilterRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCaseConferencingSession_FilterRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCaseConferencingSession_FilterRecord> NewList() {
			return new RLCaseConferencingSession_FilterRecordList();
		}


	} // RLCaseConferencingSession_FilterRecordList
	/// <summary>
	/// RecordList type <code>RLCaseConferencingSession_FilterList</code> that represents a record list of
	///  <code>CurriculumLeadIdentifier, TeamIdentifier, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLCaseConferencingSession_FilterList: GenericRecordList<STCaseConferencingSession_FilterStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STCaseConferencingSession_FilterStructure GetElementDefaultValue() {
			return new STCaseConferencingSession_FilterStructure("");
		}

		public T[] ToArray<T>(Func<STCaseConferencingSession_FilterStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCaseConferencingSession_FilterList recordlist, Func<STCaseConferencingSession_FilterStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCaseConferencingSession_FilterList ToList<T>(T[] array, Func <T, STCaseConferencingSession_FilterStructure> converter) {
			RLCaseConferencingSession_FilterList result = new RLCaseConferencingSession_FilterList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCaseConferencingSession_FilterList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCaseConferencingSession_FilterList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCaseConferencingSession_FilterList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCaseConferencingSession_FilterList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STCaseConferencingSession_FilterStructure> NewList() {
			return new RLCaseConferencingSession_FilterList();
		}


	} // RLCaseConferencingSession_FilterList
}

namespace ssCaseConferencing {
	[XmlType("CaseConferencingSession_Filter")]
	public class WORCCaseConferencingSession_FilterRecord {
		[System.Xml.Serialization.XmlElement("CurriculumLeadId")]
		public int varWSCurriculumLeadId;

		[System.Xml.Serialization.XmlElement("TeamId")]
		public int varWSTeamId;

		[System.Xml.Serialization.XmlElement("Site")]
		public string varWSSite;

		public WORCCaseConferencingSession_FilterRecord() {
			varWSCurriculumLeadId = (int) 0;
			varWSTeamId = (int) 0;
			varWSSite = (string) "";
		}

		public WORCCaseConferencingSession_FilterRecord(STCaseConferencingSession_FilterStructure r) {
			varWSCurriculumLeadId = (int) r.ssCurriculumLeadId;
			varWSTeamId = (int) r.ssTeamId;
			varWSSite = BaseAppUtils.RemoveControlChars(r.ssSite);
		}

		public static RLCaseConferencingSession_FilterList ToRecordList(WORCCaseConferencingSession_FilterRecord[] array) {
			RLCaseConferencingSession_FilterList rl = new RLCaseConferencingSession_FilterList();
			if (array != null) {
				foreach(WORCCaseConferencingSession_FilterRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCaseConferencingSession_FilterRecord[] FromRecordList(RLCaseConferencingSession_FilterList rl) {
			WORCCaseConferencingSession_FilterRecord[] array = new WORCCaseConferencingSession_FilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCaseConferencingSession_FilterRecord {
		public static implicit operator WORCCaseConferencingSession_FilterRecord(RCCaseConferencingSession_FilterRecord r) {
			return new WORCCaseConferencingSession_FilterRecord(r.ssSTCaseConferencingSession_Filter);
		}

		public static implicit operator RCCaseConferencingSession_FilterRecord(WORCCaseConferencingSession_FilterRecord w) {
			RCCaseConferencingSession_FilterRecord r = new RCCaseConferencingSession_FilterRecord("");
			if (w != null) {
				r.ssSTCaseConferencingSession_Filter = w;
			}
			return r;
		}

	}

	partial struct STCaseConferencingSession_FilterStructure {
		public static implicit operator WORCCaseConferencingSession_FilterRecord(STCaseConferencingSession_FilterStructure r) {
			return new WORCCaseConferencingSession_FilterRecord(r);
		}

		public static implicit operator STCaseConferencingSession_FilterStructure(WORCCaseConferencingSession_FilterRecord w) {
			STCaseConferencingSession_FilterStructure r = new STCaseConferencingSession_FilterStructure("");
			if (w != null) {
				r.ssCurriculumLeadId = (int) w.varWSCurriculumLeadId;
				r.ssTeamId = (int) w.varWSTeamId;
				r.ssSite = ((string) w.varWSSite ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCaseConferencingSession_FilterRecordList {
		public WORCCaseConferencingSession_FilterRecord[] Array;


		public WORLCaseConferencingSession_FilterRecordList(WORCCaseConferencingSession_FilterRecord[] r) {
			if (r == null)
			Array = new WORCCaseConferencingSession_FilterRecord[0];
			else
			Array = r;
		}
		public WORLCaseConferencingSession_FilterRecordList() {
			Array = new WORCCaseConferencingSession_FilterRecord[0];
		}

		public WORLCaseConferencingSession_FilterRecordList(RLCaseConferencingSession_FilterRecordList rl) {
			rl=(RLCaseConferencingSession_FilterRecordList) rl.Duplicate();
			Array = new WORCCaseConferencingSession_FilterRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCaseConferencingSession_FilterRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCaseConferencingSession_FilterRecordList {
		public static implicit operator RLCaseConferencingSession_FilterRecordList(WORCCaseConferencingSession_FilterRecord[] array) {
			RLCaseConferencingSession_FilterRecordList rl = new RLCaseConferencingSession_FilterRecordList();
			if (array != null) {
				foreach(WORCCaseConferencingSession_FilterRecord val in array) {
					rl.Append((RCCaseConferencingSession_FilterRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCaseConferencingSession_FilterRecord[](RLCaseConferencingSession_FilterRecordList rl) {
			WORCCaseConferencingSession_FilterRecord[] array = new WORCCaseConferencingSession_FilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCaseConferencingSession_FilterRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCaseConferencingSession_FilterRecordList {
		public static implicit operator RLCaseConferencingSession_FilterRecordList(WORLCaseConferencingSession_FilterRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCaseConferencingSession_FilterRecordList(RLCaseConferencingSession_FilterRecordList rl) {
			return new WORLCaseConferencingSession_FilterRecordList(rl);
		}
		public static implicit operator WORCCaseConferencingSession_FilterRecord[](WORLCaseConferencingSession_FilterRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCaseConferencingSession_FilterRecordList(WORCCaseConferencingSession_FilterRecord[] array) {
			return new WORLCaseConferencingSession_FilterRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCaseConferencingSession_FilterList {
		public WORCCaseConferencingSession_FilterRecord[] Array;


		public WORLCaseConferencingSession_FilterList(WORCCaseConferencingSession_FilterRecord[] r) {
			if (r == null)
			Array = new WORCCaseConferencingSession_FilterRecord[0];
			else
			Array = r;
		}
		public WORLCaseConferencingSession_FilterList() {
			Array = new WORCCaseConferencingSession_FilterRecord[0];
		}

		public WORLCaseConferencingSession_FilterList(RLCaseConferencingSession_FilterList rl) {
			rl=(RLCaseConferencingSession_FilterList) rl.Duplicate();
			Array = new WORCCaseConferencingSession_FilterRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCaseConferencingSession_FilterList {
		public static implicit operator RLCaseConferencingSession_FilterList(WORCCaseConferencingSession_FilterRecord[] array) {
			RLCaseConferencingSession_FilterList rl = new RLCaseConferencingSession_FilterList();
			if (array != null) {
				foreach(WORCCaseConferencingSession_FilterRecord val in array) {
					rl.Append((STCaseConferencingSession_FilterStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCaseConferencingSession_FilterRecord[](RLCaseConferencingSession_FilterList rl) {
			WORCCaseConferencingSession_FilterRecord[] array = new WORCCaseConferencingSession_FilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STCaseConferencingSession_FilterStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCaseConferencingSession_FilterList {
		public static implicit operator RLCaseConferencingSession_FilterList(WORLCaseConferencingSession_FilterList w) {
			return w.Array;
		}
		public static implicit operator WORLCaseConferencingSession_FilterList(RLCaseConferencingSession_FilterList rl) {
			return new WORLCaseConferencingSession_FilterList(rl);
		}
		public static implicit operator WORCCaseConferencingSession_FilterRecord[](WORLCaseConferencingSession_FilterList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCaseConferencingSession_FilterList(WORCCaseConferencingSession_FilterRecord[] array) {
			return new WORLCaseConferencingSession_FilterList(array);
		}
	}
}

