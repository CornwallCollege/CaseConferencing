/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STCourseListProgressReportListStructure</code> that represents the Service Studio
	///  structure <code>CourseListProgressReportList</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STCourseListProgressReportListStructure: ISerializable, ITypedRecord<STCourseListProgressReportListStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*h2qVNo+mzEK3nAiAukBeWg");
		private static readonly GlobalObjectKey IdSurname = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*VU8VUfz9REGmQrTCCvXLnQ");
		private static readonly GlobalObjectKey IdForenames = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*SYeh4FLO1U6NofQYxJmR5w");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Aild02XlpEipZvz_7fOQng");
		private static readonly GlobalObjectKey IdProgressReportID = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*MxamOJesqESnN+DHj1SXhQ");
		private static readonly GlobalObjectKey IdCheckedForDownload = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*4rqPv1oeJk+CrOUZtgbQ6w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("Surname")]
		public string ssSurname;

		[System.Xml.Serialization.XmlElement("Forenames")]
		public string ssForenames;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string ssOfferingCode;

		[System.Xml.Serialization.XmlElement("ProgressReportID")]
		public int ssProgressReportID;

		[System.Xml.Serialization.XmlElement("CheckedForDownload")]
		public bool ssCheckedForDownload;


		public BitArray OptimizedAttributes;

		public STCourseListProgressReportListStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssSurname = "";
			ssForenames = "";
			ssOfferingCode = "";
			ssProgressReportID = 0;
			ssCheckedForDownload = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadText(index++, "CourseListProgressReportList.StudentReference", "");
			ssSurname = r.ReadText(index++, "CourseListProgressReportList.Surname", "");
			ssForenames = r.ReadText(index++, "CourseListProgressReportList.Forenames", "");
			ssOfferingCode = r.ReadText(index++, "CourseListProgressReportList.OfferingCode", "");
			ssProgressReportID = r.ReadEntityReference(index++, "CourseListProgressReportList.ProgressReportID", 0);
			ssCheckedForDownload = r.ReadBoolean(index++, "CourseListProgressReportList.CheckedForDownload", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STCourseListProgressReportListStructure r) {
			this = r;
		}


		public static bool operator == (STCourseListProgressReportListStructure a, STCourseListProgressReportListStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssSurname != b.ssSurname) return false;
			if (a.ssForenames != b.ssForenames) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssProgressReportID != b.ssProgressReportID) return false;
			if (a.ssCheckedForDownload != b.ssCheckedForDownload) return false;
			return true;
		}

		public static bool operator != (STCourseListProgressReportListStructure a, STCourseListProgressReportListStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STCourseListProgressReportListStructure)) return false;
			return (this == (STCourseListProgressReportListStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssSurname.GetHashCode()
				^ ssForenames.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssProgressReportID.GetHashCode()
				^ ssCheckedForDownload.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STCourseListProgressReportListStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssSurname = "";
			ssForenames = "";
			ssOfferingCode = "";
			ssProgressReportID = 0;
			ssCheckedForDownload = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSurname = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssForenames = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssOfferingCode = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssProgressReportID = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssCheckedForDownload = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STCourseListProgressReportListStructure Duplicate() {
			STCourseListProgressReportListStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssSurname = this.ssSurname;
			t.ssForenames = this.ssForenames;
			t.ssOfferingCode = this.ssOfferingCode;
			t.ssProgressReportID = this.ssProgressReportID;
			t.ssCheckedForDownload = this.ssCheckedForDownload;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Surname")) VarValue.AppendAttribute(recordElem, "Surname", ssSurname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Surname");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Forenames")) VarValue.AppendAttribute(recordElem, "Forenames", ssForenames, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Forenames");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProgressReportID")) VarValue.AppendAttribute(recordElem, "ProgressReportID", ssProgressReportID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProgressReportID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CheckedForDownload")) VarValue.AppendAttribute(recordElem, "CheckedForDownload", ssCheckedForDownload, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CheckedForDownload");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "surname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Surname")) variable.Value = ssSurname; else variable.Optimized = true;
			} else if (head == "forenames") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Forenames")) variable.Value = ssForenames; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "progressreportid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportID")) variable.Value = ssProgressReportID; else variable.Optimized = true;
			} else if (head == "checkedfordownload") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CheckedForDownload")) variable.Value = ssCheckedForDownload; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdSurname) {
				return ssSurname;
			} else if (key == IdForenames) {
				return ssForenames;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdProgressReportID) {
				return ssProgressReportID;
			} else if (key == IdCheckedForDownload) {
				return ssCheckedForDownload;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssSurname = (string) other.AttributeGet(IdSurname);
			ssForenames = (string) other.AttributeGet(IdForenames);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ssProgressReportID = (int) other.AttributeGet(IdProgressReportID);
			ssCheckedForDownload = (bool) other.AttributeGet(IdCheckedForDownload);
		}
	} // STCourseListProgressReportListStructure
	/// <summary>
	/// Structure <code>RCCourseListProgressReportListRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCourseListProgressReportListRecord: ISerializable, ITypedRecord<RCCourseListProgressReportListRecord> {
		private static readonly GlobalObjectKey IdCourseListProgressReportList = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AQQgUvJL7pq7KiWU+x2cSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CourseListProgressReportList")]
		public STCourseListProgressReportListStructure ssSTCourseListProgressReportList;


		public static implicit operator STCourseListProgressReportListStructure(RCCourseListProgressReportListRecord r) {
			return r.ssSTCourseListProgressReportList;
		}

		public static implicit operator RCCourseListProgressReportListRecord(STCourseListProgressReportListStructure r) {
			RCCourseListProgressReportListRecord res = new RCCourseListProgressReportListRecord(null);
			res.ssSTCourseListProgressReportList = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCCourseListProgressReportListRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTCourseListProgressReportList = new STCourseListProgressReportListStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTCourseListProgressReportList.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTCourseListProgressReportList.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCourseListProgressReportListRecord r) {
			this = r;
		}


		public static bool operator == (RCCourseListProgressReportListRecord a, RCCourseListProgressReportListRecord b) {
			if (a.ssSTCourseListProgressReportList != b.ssSTCourseListProgressReportList) return false;
			return true;
		}

		public static bool operator != (RCCourseListProgressReportListRecord a, RCCourseListProgressReportListRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCourseListProgressReportListRecord)) return false;
			return (this == (RCCourseListProgressReportListRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTCourseListProgressReportList.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCourseListProgressReportListRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTCourseListProgressReportList = new STCourseListProgressReportListStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTCourseListProgressReportList = (STCourseListProgressReportListStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTCourseListProgressReportList.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTCourseListProgressReportList.InternalRecursiveSave();
		}


		public RCCourseListProgressReportListRecord Duplicate() {
			RCCourseListProgressReportListRecord t;
			t.ssSTCourseListProgressReportList = (STCourseListProgressReportListStructure) this.ssSTCourseListProgressReportList.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTCourseListProgressReportList.ToXml(this, recordElem, "CourseListProgressReportList", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "courselistprogressreportlist") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseListProgressReportList")) variable.Value = ssSTCourseListProgressReportList; else variable.Optimized = true;
				variable.SetFieldName("courselistprogressreportlist");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCourseListProgressReportList) {
				return ssSTCourseListProgressReportList;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTCourseListProgressReportList.FillFromOther((IRecord) other.AttributeGet(IdCourseListProgressReportList));
		}
	} // RCCourseListProgressReportListRecord
	/// <summary>
	/// RecordList type <code>RLCourseListProgressReportListRecordList</code> that represents a record list
	///  of <code>CourseListProgressReportList</code>
	/// </summary>
	[Serializable()]
	public partial class RLCourseListProgressReportListRecordList: GenericRecordList<RCCourseListProgressReportListRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCourseListProgressReportListRecord GetElementDefaultValue() {
			return new RCCourseListProgressReportListRecord("");
		}

		public T[] ToArray<T>(Func<RCCourseListProgressReportListRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCourseListProgressReportListRecordList recordlist, Func<RCCourseListProgressReportListRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCourseListProgressReportListRecordList ToList<T>(T[] array, Func <T, RCCourseListProgressReportListRecord> converter) {
			RLCourseListProgressReportListRecordList result = new RLCourseListProgressReportListRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCourseListProgressReportListRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListProgressReportListRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListProgressReportListRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCourseListProgressReportListRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCourseListProgressReportListRecord> NewList() {
			return new RLCourseListProgressReportListRecordList();
		}


	} // RLCourseListProgressReportListRecordList
	/// <summary>
	/// RecordList type <code>RLCourseListProgressReportListList</code> that represents a record list of
	///  <code>Text, Text, Text, Text, Boolean, ProgressReportIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCourseListProgressReportListList: GenericRecordList<STCourseListProgressReportListStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STCourseListProgressReportListStructure GetElementDefaultValue() {
			return new STCourseListProgressReportListStructure("");
		}

		public T[] ToArray<T>(Func<STCourseListProgressReportListStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCourseListProgressReportListList recordlist, Func<STCourseListProgressReportListStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCourseListProgressReportListList ToList<T>(T[] array, Func <T, STCourseListProgressReportListStructure> converter) {
			RLCourseListProgressReportListList result = new RLCourseListProgressReportListList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCourseListProgressReportListList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListProgressReportListList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListProgressReportListList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCourseListProgressReportListList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STCourseListProgressReportListStructure> NewList() {
			return new RLCourseListProgressReportListList();
		}


	} // RLCourseListProgressReportListList
}

namespace ssCaseConferencing {
	[XmlType("CourseListProgressReportList")]
	public class WORCCourseListProgressReportListRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("Surname")]
		public string varWSSurname;

		[System.Xml.Serialization.XmlElement("Forenames")]
		public string varWSForenames;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("ProgressReportID")]
		public int varWSProgressReportID;

		[System.Xml.Serialization.XmlElement("CheckedForDownload")]
		public bool varWSCheckedForDownload;

		public WORCCourseListProgressReportListRecord() {
			varWSStudentReference = (string) "";
			varWSSurname = (string) "";
			varWSForenames = (string) "";
			varWSOfferingCode = (string) "";
			varWSProgressReportID = (int) 0;
			varWSCheckedForDownload = (bool) false;
		}

		public WORCCourseListProgressReportListRecord(STCourseListProgressReportListStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSSurname = BaseAppUtils.RemoveControlChars(r.ssSurname);
			varWSForenames = BaseAppUtils.RemoveControlChars(r.ssForenames);
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSProgressReportID = (int) r.ssProgressReportID;
			varWSCheckedForDownload = (bool) r.ssCheckedForDownload;
		}

		public static RLCourseListProgressReportListList ToRecordList(WORCCourseListProgressReportListRecord[] array) {
			RLCourseListProgressReportListList rl = new RLCourseListProgressReportListList();
			if (array != null) {
				foreach(WORCCourseListProgressReportListRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCourseListProgressReportListRecord[] FromRecordList(RLCourseListProgressReportListList rl) {
			WORCCourseListProgressReportListRecord[] array = new WORCCourseListProgressReportListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCourseListProgressReportListRecord {
		public static implicit operator WORCCourseListProgressReportListRecord(RCCourseListProgressReportListRecord r) {
			return new WORCCourseListProgressReportListRecord(r.ssSTCourseListProgressReportList);
		}

		public static implicit operator RCCourseListProgressReportListRecord(WORCCourseListProgressReportListRecord w) {
			RCCourseListProgressReportListRecord r = new RCCourseListProgressReportListRecord("");
			if (w != null) {
				r.ssSTCourseListProgressReportList = w;
			}
			return r;
		}

	}

	partial struct STCourseListProgressReportListStructure {
		public static implicit operator WORCCourseListProgressReportListRecord(STCourseListProgressReportListStructure r) {
			return new WORCCourseListProgressReportListRecord(r);
		}

		public static implicit operator STCourseListProgressReportListStructure(WORCCourseListProgressReportListRecord w) {
			STCourseListProgressReportListStructure r = new STCourseListProgressReportListStructure("");
			if (w != null) {
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
				r.ssSurname = ((string) w.varWSSurname ?? "");
				r.ssForenames = ((string) w.varWSForenames ?? "");
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssProgressReportID = (int) w.varWSProgressReportID;
				r.ssCheckedForDownload = (bool) w.varWSCheckedForDownload;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCourseListProgressReportListRecordList {
		public WORCCourseListProgressReportListRecord[] Array;


		public WORLCourseListProgressReportListRecordList(WORCCourseListProgressReportListRecord[] r) {
			if (r == null)
			Array = new WORCCourseListProgressReportListRecord[0];
			else
			Array = r;
		}
		public WORLCourseListProgressReportListRecordList() {
			Array = new WORCCourseListProgressReportListRecord[0];
		}

		public WORLCourseListProgressReportListRecordList(RLCourseListProgressReportListRecordList rl) {
			rl=(RLCourseListProgressReportListRecordList) rl.Duplicate();
			Array = new WORCCourseListProgressReportListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCourseListProgressReportListRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCourseListProgressReportListRecordList {
		public static implicit operator RLCourseListProgressReportListRecordList(WORCCourseListProgressReportListRecord[] array) {
			RLCourseListProgressReportListRecordList rl = new RLCourseListProgressReportListRecordList();
			if (array != null) {
				foreach(WORCCourseListProgressReportListRecord val in array) {
					rl.Append((RCCourseListProgressReportListRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCourseListProgressReportListRecord[](RLCourseListProgressReportListRecordList rl) {
			WORCCourseListProgressReportListRecord[] array = new WORCCourseListProgressReportListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCourseListProgressReportListRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCourseListProgressReportListRecordList {
		public static implicit operator RLCourseListProgressReportListRecordList(WORLCourseListProgressReportListRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCourseListProgressReportListRecordList(RLCourseListProgressReportListRecordList rl) {
			return new WORLCourseListProgressReportListRecordList(rl);
		}
		public static implicit operator WORCCourseListProgressReportListRecord[](WORLCourseListProgressReportListRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCourseListProgressReportListRecordList(WORCCourseListProgressReportListRecord[] array) {
			return new WORLCourseListProgressReportListRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCourseListProgressReportListList {
		public WORCCourseListProgressReportListRecord[] Array;


		public WORLCourseListProgressReportListList(WORCCourseListProgressReportListRecord[] r) {
			if (r == null)
			Array = new WORCCourseListProgressReportListRecord[0];
			else
			Array = r;
		}
		public WORLCourseListProgressReportListList() {
			Array = new WORCCourseListProgressReportListRecord[0];
		}

		public WORLCourseListProgressReportListList(RLCourseListProgressReportListList rl) {
			rl=(RLCourseListProgressReportListList) rl.Duplicate();
			Array = new WORCCourseListProgressReportListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCourseListProgressReportListList {
		public static implicit operator RLCourseListProgressReportListList(WORCCourseListProgressReportListRecord[] array) {
			RLCourseListProgressReportListList rl = new RLCourseListProgressReportListList();
			if (array != null) {
				foreach(WORCCourseListProgressReportListRecord val in array) {
					rl.Append((STCourseListProgressReportListStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCourseListProgressReportListRecord[](RLCourseListProgressReportListList rl) {
			WORCCourseListProgressReportListRecord[] array = new WORCCourseListProgressReportListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STCourseListProgressReportListStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCourseListProgressReportListList {
		public static implicit operator RLCourseListProgressReportListList(WORLCourseListProgressReportListList w) {
			return w.Array;
		}
		public static implicit operator WORLCourseListProgressReportListList(RLCourseListProgressReportListList rl) {
			return new WORLCourseListProgressReportListList(rl);
		}
		public static implicit operator WORCCourseListProgressReportListRecord[](WORLCourseListProgressReportListList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCourseListProgressReportListList(WORCCourseListProgressReportListRecord[] array) {
			return new WORLCourseListProgressReportListList(array);
		}
	}
}

