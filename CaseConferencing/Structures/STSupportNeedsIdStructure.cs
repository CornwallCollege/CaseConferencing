/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STSupportNeedsIdStructure</code> that represents the Service Studio structure
	///  <code>SupportNeedsId</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSupportNeedsIdStructure: ISerializable, ITypedRecord<STSupportNeedsIdStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdSupportNeedsId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*OTQr7mWtSk+OsdafZiWcPg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SupportNeedsId")]
		public string ssSupportNeedsId;


		public BitArray OptimizedAttributes;

		public STSupportNeedsIdStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSupportNeedsId = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSupportNeedsId = r.ReadTextEntityReference(index++, "SupportNeedsId.SupportNeedsId", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSupportNeedsIdStructure r) {
			this = r;
		}


		public static bool operator == (STSupportNeedsIdStructure a, STSupportNeedsIdStructure b) {
			if (a.ssSupportNeedsId != b.ssSupportNeedsId) return false;
			return true;
		}

		public static bool operator != (STSupportNeedsIdStructure a, STSupportNeedsIdStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSupportNeedsIdStructure)) return false;
			return (this == (STSupportNeedsIdStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSupportNeedsId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSupportNeedsIdStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSupportNeedsId = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSupportNeedsId = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSupportNeedsIdStructure Duplicate() {
			STSupportNeedsIdStructure t;
			t.ssSupportNeedsId = this.ssSupportNeedsId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportNeedsId")) VarValue.AppendAttribute(recordElem, "SupportNeedsId", ssSupportNeedsId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SupportNeedsId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "supportneedsid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportNeedsId")) variable.Value = ssSupportNeedsId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSupportNeedsId) {
				return ssSupportNeedsId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSupportNeedsId = (string) other.AttributeGet(IdSupportNeedsId);
		}
	} // STSupportNeedsIdStructure
	/// <summary>
	/// Structure <code>RCSupportNeedsIdRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSupportNeedsIdRecord: ISerializable, ITypedRecord<RCSupportNeedsIdRecord> {
		private static readonly GlobalObjectKey IdSupportNeedsId = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*U5VjMqyr8aJ+lEx7MBdqDw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SupportNeedsId")]
		public STSupportNeedsIdStructure ssSTSupportNeedsId;


		public static implicit operator STSupportNeedsIdStructure(RCSupportNeedsIdRecord r) {
			return r.ssSTSupportNeedsId;
		}

		public static implicit operator RCSupportNeedsIdRecord(STSupportNeedsIdStructure r) {
			RCSupportNeedsIdRecord res = new RCSupportNeedsIdRecord(null);
			res.ssSTSupportNeedsId = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCSupportNeedsIdRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTSupportNeedsId = new STSupportNeedsIdStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTSupportNeedsId.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTSupportNeedsId.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSupportNeedsIdRecord r) {
			this = r;
		}


		public static bool operator == (RCSupportNeedsIdRecord a, RCSupportNeedsIdRecord b) {
			if (a.ssSTSupportNeedsId != b.ssSTSupportNeedsId) return false;
			return true;
		}

		public static bool operator != (RCSupportNeedsIdRecord a, RCSupportNeedsIdRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSupportNeedsIdRecord)) return false;
			return (this == (RCSupportNeedsIdRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTSupportNeedsId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSupportNeedsIdRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTSupportNeedsId = new STSupportNeedsIdStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTSupportNeedsId = (STSupportNeedsIdStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTSupportNeedsId.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTSupportNeedsId.InternalRecursiveSave();
		}


		public RCSupportNeedsIdRecord Duplicate() {
			RCSupportNeedsIdRecord t;
			t.ssSTSupportNeedsId = (STSupportNeedsIdStructure) this.ssSTSupportNeedsId.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTSupportNeedsId.ToXml(this, recordElem, "SupportNeedsId", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "supportneedsid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportNeedsId")) variable.Value = ssSTSupportNeedsId; else variable.Optimized = true;
				variable.SetFieldName("supportneedsid");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSupportNeedsId) {
				return ssSTSupportNeedsId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTSupportNeedsId.FillFromOther((IRecord) other.AttributeGet(IdSupportNeedsId));
		}
	} // RCSupportNeedsIdRecord
	/// <summary>
	/// RecordList type <code>RLSupportNeedsIdRecordList</code> that represents a record list of
	///  <code>SupportNeedsId</code>
	/// </summary>
	[Serializable()]
	public partial class RLSupportNeedsIdRecordList: GenericRecordList<RCSupportNeedsIdRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSupportNeedsIdRecord GetElementDefaultValue() {
			return new RCSupportNeedsIdRecord("");
		}

		public T[] ToArray<T>(Func<RCSupportNeedsIdRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSupportNeedsIdRecordList recordlist, Func<RCSupportNeedsIdRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSupportNeedsIdRecordList ToList<T>(T[] array, Func <T, RCSupportNeedsIdRecord> converter) {
			RLSupportNeedsIdRecordList result = new RLSupportNeedsIdRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSupportNeedsIdRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportNeedsIdRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportNeedsIdRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSupportNeedsIdRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSupportNeedsIdRecord> NewList() {
			return new RLSupportNeedsIdRecordList();
		}


	} // RLSupportNeedsIdRecordList
	/// <summary>
	/// RecordList type <code>RLSupportNeedsIdList</code> that represents a record list of
	///  <code>SupportNeedsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLSupportNeedsIdList: GenericRecordList<STSupportNeedsIdStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STSupportNeedsIdStructure GetElementDefaultValue() {
			return new STSupportNeedsIdStructure("");
		}

		public T[] ToArray<T>(Func<STSupportNeedsIdStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSupportNeedsIdList recordlist, Func<STSupportNeedsIdStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSupportNeedsIdList ToList<T>(T[] array, Func <T, STSupportNeedsIdStructure> converter) {
			RLSupportNeedsIdList result = new RLSupportNeedsIdList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSupportNeedsIdList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportNeedsIdList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportNeedsIdList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSupportNeedsIdList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STSupportNeedsIdStructure> NewList() {
			return new RLSupportNeedsIdList();
		}


	} // RLSupportNeedsIdList
}

namespace ssCaseConferencing {
	[XmlType("SupportNeedsId")]
	public class WORCSupportNeedsIdRecord {
		[System.Xml.Serialization.XmlElement("SupportNeedsId")]
		public string varWSSupportNeedsId;

		public WORCSupportNeedsIdRecord() {
			varWSSupportNeedsId = (string) "";
		}

		public WORCSupportNeedsIdRecord(STSupportNeedsIdStructure r) {
			varWSSupportNeedsId = BaseAppUtils.RemoveControlChars(r.ssSupportNeedsId);
		}

		public static RLSupportNeedsIdList ToRecordList(WORCSupportNeedsIdRecord[] array) {
			RLSupportNeedsIdList rl = new RLSupportNeedsIdList();
			if (array != null) {
				foreach(WORCSupportNeedsIdRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSupportNeedsIdRecord[] FromRecordList(RLSupportNeedsIdList rl) {
			WORCSupportNeedsIdRecord[] array = new WORCSupportNeedsIdRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSupportNeedsIdRecord {
		public static implicit operator WORCSupportNeedsIdRecord(RCSupportNeedsIdRecord r) {
			return new WORCSupportNeedsIdRecord(r.ssSTSupportNeedsId);
		}

		public static implicit operator RCSupportNeedsIdRecord(WORCSupportNeedsIdRecord w) {
			RCSupportNeedsIdRecord r = new RCSupportNeedsIdRecord("");
			if (w != null) {
				r.ssSTSupportNeedsId = w;
			}
			return r;
		}

	}

	partial struct STSupportNeedsIdStructure {
		public static implicit operator WORCSupportNeedsIdRecord(STSupportNeedsIdStructure r) {
			return new WORCSupportNeedsIdRecord(r);
		}

		public static implicit operator STSupportNeedsIdStructure(WORCSupportNeedsIdRecord w) {
			STSupportNeedsIdStructure r = new STSupportNeedsIdStructure("");
			if (w != null) {
				r.ssSupportNeedsId = (string) w.varWSSupportNeedsId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSupportNeedsIdRecordList {
		public WORCSupportNeedsIdRecord[] Array;


		public WORLSupportNeedsIdRecordList(WORCSupportNeedsIdRecord[] r) {
			if (r == null)
			Array = new WORCSupportNeedsIdRecord[0];
			else
			Array = r;
		}
		public WORLSupportNeedsIdRecordList() {
			Array = new WORCSupportNeedsIdRecord[0];
		}

		public WORLSupportNeedsIdRecordList(RLSupportNeedsIdRecordList rl) {
			rl=(RLSupportNeedsIdRecordList) rl.Duplicate();
			Array = new WORCSupportNeedsIdRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSupportNeedsIdRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSupportNeedsIdRecordList {
		public static implicit operator RLSupportNeedsIdRecordList(WORCSupportNeedsIdRecord[] array) {
			RLSupportNeedsIdRecordList rl = new RLSupportNeedsIdRecordList();
			if (array != null) {
				foreach(WORCSupportNeedsIdRecord val in array) {
					rl.Append((RCSupportNeedsIdRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSupportNeedsIdRecord[](RLSupportNeedsIdRecordList rl) {
			WORCSupportNeedsIdRecord[] array = new WORCSupportNeedsIdRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSupportNeedsIdRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSupportNeedsIdRecordList {
		public static implicit operator RLSupportNeedsIdRecordList(WORLSupportNeedsIdRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSupportNeedsIdRecordList(RLSupportNeedsIdRecordList rl) {
			return new WORLSupportNeedsIdRecordList(rl);
		}
		public static implicit operator WORCSupportNeedsIdRecord[](WORLSupportNeedsIdRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSupportNeedsIdRecordList(WORCSupportNeedsIdRecord[] array) {
			return new WORLSupportNeedsIdRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSupportNeedsIdList {
		public WORCSupportNeedsIdRecord[] Array;


		public WORLSupportNeedsIdList(WORCSupportNeedsIdRecord[] r) {
			if (r == null)
			Array = new WORCSupportNeedsIdRecord[0];
			else
			Array = r;
		}
		public WORLSupportNeedsIdList() {
			Array = new WORCSupportNeedsIdRecord[0];
		}

		public WORLSupportNeedsIdList(RLSupportNeedsIdList rl) {
			rl=(RLSupportNeedsIdList) rl.Duplicate();
			Array = new WORCSupportNeedsIdRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSupportNeedsIdList {
		public static implicit operator RLSupportNeedsIdList(WORCSupportNeedsIdRecord[] array) {
			RLSupportNeedsIdList rl = new RLSupportNeedsIdList();
			if (array != null) {
				foreach(WORCSupportNeedsIdRecord val in array) {
					rl.Append((STSupportNeedsIdStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSupportNeedsIdRecord[](RLSupportNeedsIdList rl) {
			WORCSupportNeedsIdRecord[] array = new WORCSupportNeedsIdRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STSupportNeedsIdStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSupportNeedsIdList {
		public static implicit operator RLSupportNeedsIdList(WORLSupportNeedsIdList w) {
			return w.Array;
		}
		public static implicit operator WORLSupportNeedsIdList(RLSupportNeedsIdList rl) {
			return new WORLSupportNeedsIdList(rl);
		}
		public static implicit operator WORCSupportNeedsIdRecord[](WORLSupportNeedsIdList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSupportNeedsIdList(WORCSupportNeedsIdRecord[] array) {
			return new WORLSupportNeedsIdList(array);
		}
	}
}

