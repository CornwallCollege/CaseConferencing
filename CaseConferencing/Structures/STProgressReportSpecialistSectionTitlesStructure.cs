/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STProgressReportSpecialistSectionTitlesStructure</code> that represents the Service
	///  Studio structure <code>ProgressReportSpecialistSectionTitles</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STProgressReportSpecialistSectionTitlesStructure: ISerializable, ITypedRecord<STProgressReportSpecialistSectionTitlesStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdGroupName = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*CDwiT0f1TkuuDZT9LvQX6A");
		private static readonly GlobalObjectKey IdGroupDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*pVGnjSMHTUCGdqwafYFzrQ");
		private static readonly GlobalObjectKey IdGroupID = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*1esGGsMo9UCtlU4khMsHmg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("GroupName")]
		public string ssGroupName;

		[System.Xml.Serialization.XmlElement("GroupDescription")]
		public string ssGroupDescription;

		[System.Xml.Serialization.XmlElement("GroupID")]
		public int ssGroupID;


		public BitArray OptimizedAttributes;

		public STProgressReportSpecialistSectionTitlesStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssGroupName = "";
			ssGroupDescription = "";
			ssGroupID = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssGroupName = r.ReadText(index++, "ProgressReportSpecialistSectionTitles.GroupName", "");
			ssGroupDescription = r.ReadText(index++, "ProgressReportSpecialistSectionTitles.GroupDescription", "");
			ssGroupID = r.ReadEntityReference(index++, "ProgressReportSpecialistSectionTitles.GroupID", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STProgressReportSpecialistSectionTitlesStructure r) {
			this = r;
		}


		public static bool operator == (STProgressReportSpecialistSectionTitlesStructure a, STProgressReportSpecialistSectionTitlesStructure b) {
			if (a.ssGroupName != b.ssGroupName) return false;
			if (a.ssGroupDescription != b.ssGroupDescription) return false;
			if (a.ssGroupID != b.ssGroupID) return false;
			return true;
		}

		public static bool operator != (STProgressReportSpecialistSectionTitlesStructure a, STProgressReportSpecialistSectionTitlesStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STProgressReportSpecialistSectionTitlesStructure)) return false;
			return (this == (STProgressReportSpecialistSectionTitlesStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssGroupName.GetHashCode()
				^ ssGroupDescription.GetHashCode()
				^ ssGroupID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STProgressReportSpecialistSectionTitlesStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssGroupName = "";
			ssGroupDescription = "";
			ssGroupID = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssGroupName = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssGroupDescription = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssGroupID = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STProgressReportSpecialistSectionTitlesStructure Duplicate() {
			STProgressReportSpecialistSectionTitlesStructure t;
			t.ssGroupName = this.ssGroupName;
			t.ssGroupDescription = this.ssGroupDescription;
			t.ssGroupID = this.ssGroupID;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupName")) VarValue.AppendAttribute(recordElem, "GroupName", ssGroupName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "GroupName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupDescription")) VarValue.AppendAttribute(recordElem, "GroupDescription", ssGroupDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "GroupDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupID")) VarValue.AppendAttribute(recordElem, "GroupID", ssGroupID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "GroupID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "groupname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupName")) variable.Value = ssGroupName; else variable.Optimized = true;
			} else if (head == "groupdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupDescription")) variable.Value = ssGroupDescription; else variable.Optimized = true;
			} else if (head == "groupid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupID")) variable.Value = ssGroupID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroupName) {
				return ssGroupName;
			} else if (key == IdGroupDescription) {
				return ssGroupDescription;
			} else if (key == IdGroupID) {
				return ssGroupID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssGroupName = (string) other.AttributeGet(IdGroupName);
			ssGroupDescription = (string) other.AttributeGet(IdGroupDescription);
			ssGroupID = (int) other.AttributeGet(IdGroupID);
		}
	} // STProgressReportSpecialistSectionTitlesStructure
	/// <summary>
	/// Structure <code>RCProgressReportSpecialistSectionTitlesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCProgressReportSpecialistSectionTitlesRecord: ISerializable, ITypedRecord<RCProgressReportSpecialistSectionTitlesRecord> {
		private static readonly GlobalObjectKey IdProgressReportSpecialistSectionTitles = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*L2w_9+GSYE4sjjsMvuT7pQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReportSpecialistSectionTitles")]
		public STProgressReportSpecialistSectionTitlesStructure ssSTProgressReportSpecialistSectionTitles;


		public static implicit operator STProgressReportSpecialistSectionTitlesStructure(RCProgressReportSpecialistSectionTitlesRecord r) {
			return r.ssSTProgressReportSpecialistSectionTitles;
		}

		public static implicit operator RCProgressReportSpecialistSectionTitlesRecord(STProgressReportSpecialistSectionTitlesStructure r) {
			RCProgressReportSpecialistSectionTitlesRecord res = new RCProgressReportSpecialistSectionTitlesRecord(null);
			res.ssSTProgressReportSpecialistSectionTitles = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCProgressReportSpecialistSectionTitlesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTProgressReportSpecialistSectionTitles = new STProgressReportSpecialistSectionTitlesStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTProgressReportSpecialistSectionTitles.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTProgressReportSpecialistSectionTitles.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCProgressReportSpecialistSectionTitlesRecord r) {
			this = r;
		}


		public static bool operator == (RCProgressReportSpecialistSectionTitlesRecord a, RCProgressReportSpecialistSectionTitlesRecord b) {
			if (a.ssSTProgressReportSpecialistSectionTitles != b.ssSTProgressReportSpecialistSectionTitles) return false;
			return true;
		}

		public static bool operator != (RCProgressReportSpecialistSectionTitlesRecord a, RCProgressReportSpecialistSectionTitlesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCProgressReportSpecialistSectionTitlesRecord)) return false;
			return (this == (RCProgressReportSpecialistSectionTitlesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTProgressReportSpecialistSectionTitles.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCProgressReportSpecialistSectionTitlesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTProgressReportSpecialistSectionTitles = new STProgressReportSpecialistSectionTitlesStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTProgressReportSpecialistSectionTitles = (STProgressReportSpecialistSectionTitlesStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTProgressReportSpecialistSectionTitles.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTProgressReportSpecialistSectionTitles.InternalRecursiveSave();
		}


		public RCProgressReportSpecialistSectionTitlesRecord Duplicate() {
			RCProgressReportSpecialistSectionTitlesRecord t;
			t.ssSTProgressReportSpecialistSectionTitles = (STProgressReportSpecialistSectionTitlesStructure) this.ssSTProgressReportSpecialistSectionTitles.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTProgressReportSpecialistSectionTitles.ToXml(this, recordElem, "ProgressReportSpecialistSectionTitles", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreportspecialistsectiontitles") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSpecialistSectionTitles")) variable.Value = ssSTProgressReportSpecialistSectionTitles; else variable.Optimized = true;
				variable.SetFieldName("progressreportspecialistsectiontitles");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReportSpecialistSectionTitles) {
				return ssSTProgressReportSpecialistSectionTitles;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTProgressReportSpecialistSectionTitles.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSpecialistSectionTitles));
		}
	} // RCProgressReportSpecialistSectionTitlesRecord
	/// <summary>
	/// RecordList type <code>RLProgressReportSpecialistSectionTitlesRecordList</code> that represents a
	///  record list of <code>ProgressReportSpecialistSectionTitles</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportSpecialistSectionTitlesRecordList: GenericRecordList<RCProgressReportSpecialistSectionTitlesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCProgressReportSpecialistSectionTitlesRecord GetElementDefaultValue() {
			return new RCProgressReportSpecialistSectionTitlesRecord("");
		}

		public T[] ToArray<T>(Func<RCProgressReportSpecialistSectionTitlesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportSpecialistSectionTitlesRecordList recordlist, Func<RCProgressReportSpecialistSectionTitlesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportSpecialistSectionTitlesRecordList ToList<T>(T[] array, Func <T, RCProgressReportSpecialistSectionTitlesRecord> converter) {
			RLProgressReportSpecialistSectionTitlesRecordList result = new RLProgressReportSpecialistSectionTitlesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportSpecialistSectionTitlesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSpecialistSectionTitlesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSpecialistSectionTitlesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportSpecialistSectionTitlesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCProgressReportSpecialistSectionTitlesRecord> NewList() {
			return new RLProgressReportSpecialistSectionTitlesRecordList();
		}


	} // RLProgressReportSpecialistSectionTitlesRecordList
	/// <summary>
	/// RecordList type <code>RLProgressReportSpecialistSectionTitlesList</code> that represents a record
	///  list of <code>GroupIdentifier, Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportSpecialistSectionTitlesList: GenericRecordList<STProgressReportSpecialistSectionTitlesStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STProgressReportSpecialistSectionTitlesStructure GetElementDefaultValue() {
			return new STProgressReportSpecialistSectionTitlesStructure("");
		}

		public T[] ToArray<T>(Func<STProgressReportSpecialistSectionTitlesStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportSpecialistSectionTitlesList recordlist, Func<STProgressReportSpecialistSectionTitlesStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportSpecialistSectionTitlesList ToList<T>(T[] array, Func <T, STProgressReportSpecialistSectionTitlesStructure> converter) {
			RLProgressReportSpecialistSectionTitlesList result = new RLProgressReportSpecialistSectionTitlesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportSpecialistSectionTitlesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSpecialistSectionTitlesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSpecialistSectionTitlesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportSpecialistSectionTitlesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STProgressReportSpecialistSectionTitlesStructure> NewList() {
			return new RLProgressReportSpecialistSectionTitlesList();
		}


	} // RLProgressReportSpecialistSectionTitlesList
}

namespace ssCaseConferencing {
	[XmlType("ProgressReportSpecialistSectionTitles")]
	public class WORCProgressReportSpecialistSectionTitlesRecord {
		[System.Xml.Serialization.XmlElement("GroupName")]
		public string varWSGroupName;

		[System.Xml.Serialization.XmlElement("GroupDescription")]
		public string varWSGroupDescription;

		[System.Xml.Serialization.XmlElement("GroupID")]
		public int varWSGroupID;

		public WORCProgressReportSpecialistSectionTitlesRecord() {
			varWSGroupName = (string) "";
			varWSGroupDescription = (string) "";
			varWSGroupID = (int) 0;
		}

		public WORCProgressReportSpecialistSectionTitlesRecord(STProgressReportSpecialistSectionTitlesStructure r) {
			varWSGroupName = BaseAppUtils.RemoveControlChars(r.ssGroupName);
			varWSGroupDescription = BaseAppUtils.RemoveControlChars(r.ssGroupDescription);
			varWSGroupID = (int) r.ssGroupID;
		}

		public static RLProgressReportSpecialistSectionTitlesList ToRecordList(WORCProgressReportSpecialistSectionTitlesRecord[] array) {
			RLProgressReportSpecialistSectionTitlesList rl = new RLProgressReportSpecialistSectionTitlesList();
			if (array != null) {
				foreach(WORCProgressReportSpecialistSectionTitlesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCProgressReportSpecialistSectionTitlesRecord[] FromRecordList(RLProgressReportSpecialistSectionTitlesList rl) {
			WORCProgressReportSpecialistSectionTitlesRecord[] array = new WORCProgressReportSpecialistSectionTitlesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCProgressReportSpecialistSectionTitlesRecord {
		public static implicit operator WORCProgressReportSpecialistSectionTitlesRecord(RCProgressReportSpecialistSectionTitlesRecord r) {
			return new WORCProgressReportSpecialistSectionTitlesRecord(r.ssSTProgressReportSpecialistSectionTitles);
		}

		public static implicit operator RCProgressReportSpecialistSectionTitlesRecord(WORCProgressReportSpecialistSectionTitlesRecord w) {
			RCProgressReportSpecialistSectionTitlesRecord r = new RCProgressReportSpecialistSectionTitlesRecord("");
			if (w != null) {
				r.ssSTProgressReportSpecialistSectionTitles = w;
			}
			return r;
		}

	}

	partial struct STProgressReportSpecialistSectionTitlesStructure {
		public static implicit operator WORCProgressReportSpecialistSectionTitlesRecord(STProgressReportSpecialistSectionTitlesStructure r) {
			return new WORCProgressReportSpecialistSectionTitlesRecord(r);
		}

		public static implicit operator STProgressReportSpecialistSectionTitlesStructure(WORCProgressReportSpecialistSectionTitlesRecord w) {
			STProgressReportSpecialistSectionTitlesStructure r = new STProgressReportSpecialistSectionTitlesStructure("");
			if (w != null) {
				r.ssGroupName = ((string) w.varWSGroupName ?? "");
				r.ssGroupDescription = ((string) w.varWSGroupDescription ?? "");
				r.ssGroupID = (int) w.varWSGroupID;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLProgressReportSpecialistSectionTitlesRecordList {
		public WORCProgressReportSpecialistSectionTitlesRecord[] Array;


		public WORLProgressReportSpecialistSectionTitlesRecordList(WORCProgressReportSpecialistSectionTitlesRecord[] r) {
			if (r == null)
			Array = new WORCProgressReportSpecialistSectionTitlesRecord[0];
			else
			Array = r;
		}
		public WORLProgressReportSpecialistSectionTitlesRecordList() {
			Array = new WORCProgressReportSpecialistSectionTitlesRecord[0];
		}

		public WORLProgressReportSpecialistSectionTitlesRecordList(RLProgressReportSpecialistSectionTitlesRecordList rl) {
			rl=(RLProgressReportSpecialistSectionTitlesRecordList) rl.Duplicate();
			Array = new WORCProgressReportSpecialistSectionTitlesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCProgressReportSpecialistSectionTitlesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLProgressReportSpecialistSectionTitlesRecordList {
		public static implicit operator RLProgressReportSpecialistSectionTitlesRecordList(WORCProgressReportSpecialistSectionTitlesRecord[] array) {
			RLProgressReportSpecialistSectionTitlesRecordList rl = new RLProgressReportSpecialistSectionTitlesRecordList();
			if (array != null) {
				foreach(WORCProgressReportSpecialistSectionTitlesRecord val in array) {
					rl.Append((RCProgressReportSpecialistSectionTitlesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCProgressReportSpecialistSectionTitlesRecord[](RLProgressReportSpecialistSectionTitlesRecordList rl) {
			WORCProgressReportSpecialistSectionTitlesRecord[] array = new WORCProgressReportSpecialistSectionTitlesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCProgressReportSpecialistSectionTitlesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLProgressReportSpecialistSectionTitlesRecordList {
		public static implicit operator RLProgressReportSpecialistSectionTitlesRecordList(WORLProgressReportSpecialistSectionTitlesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLProgressReportSpecialistSectionTitlesRecordList(RLProgressReportSpecialistSectionTitlesRecordList rl) {
			return new WORLProgressReportSpecialistSectionTitlesRecordList(rl);
		}
		public static implicit operator WORCProgressReportSpecialistSectionTitlesRecord[](WORLProgressReportSpecialistSectionTitlesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLProgressReportSpecialistSectionTitlesRecordList(WORCProgressReportSpecialistSectionTitlesRecord[] array) {
			return new WORLProgressReportSpecialistSectionTitlesRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLProgressReportSpecialistSectionTitlesList {
		public WORCProgressReportSpecialistSectionTitlesRecord[] Array;


		public WORLProgressReportSpecialistSectionTitlesList(WORCProgressReportSpecialistSectionTitlesRecord[] r) {
			if (r == null)
			Array = new WORCProgressReportSpecialistSectionTitlesRecord[0];
			else
			Array = r;
		}
		public WORLProgressReportSpecialistSectionTitlesList() {
			Array = new WORCProgressReportSpecialistSectionTitlesRecord[0];
		}

		public WORLProgressReportSpecialistSectionTitlesList(RLProgressReportSpecialistSectionTitlesList rl) {
			rl=(RLProgressReportSpecialistSectionTitlesList) rl.Duplicate();
			Array = new WORCProgressReportSpecialistSectionTitlesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLProgressReportSpecialistSectionTitlesList {
		public static implicit operator RLProgressReportSpecialistSectionTitlesList(WORCProgressReportSpecialistSectionTitlesRecord[] array) {
			RLProgressReportSpecialistSectionTitlesList rl = new RLProgressReportSpecialistSectionTitlesList();
			if (array != null) {
				foreach(WORCProgressReportSpecialistSectionTitlesRecord val in array) {
					rl.Append((STProgressReportSpecialistSectionTitlesStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCProgressReportSpecialistSectionTitlesRecord[](RLProgressReportSpecialistSectionTitlesList rl) {
			WORCProgressReportSpecialistSectionTitlesRecord[] array = new WORCProgressReportSpecialistSectionTitlesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STProgressReportSpecialistSectionTitlesStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLProgressReportSpecialistSectionTitlesList {
		public static implicit operator RLProgressReportSpecialistSectionTitlesList(WORLProgressReportSpecialistSectionTitlesList w) {
			return w.Array;
		}
		public static implicit operator WORLProgressReportSpecialistSectionTitlesList(RLProgressReportSpecialistSectionTitlesList rl) {
			return new WORLProgressReportSpecialistSectionTitlesList(rl);
		}
		public static implicit operator WORCProgressReportSpecialistSectionTitlesRecord[](WORLProgressReportSpecialistSectionTitlesList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLProgressReportSpecialistSectionTitlesList(WORCProgressReportSpecialistSectionTitlesRecord[] array) {
			return new WORLProgressReportSpecialistSectionTitlesList(array);
		}
	}
}

