/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STAttendancePeriodDropDownStructure</code> that represents the Service Studio
	///  structure <code>AttendancePeriodDropDown</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAttendancePeriodDropDownStructure: ISerializable, ITypedRecord<STAttendancePeriodDropDownStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdDateRange = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*IWE8b9fwZUKrcKRqAsGhOg");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ga7xgaKbwkmSjNciBgRxMg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("DateRange")]
		public string ssDateRange;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;


		public BitArray OptimizedAttributes;

		public STAttendancePeriodDropDownStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDateRange = "";
			ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssDateRange = r.ReadText(index++, "AttendancePeriodDropDown.DateRange", "");
			ssDescription = r.ReadText(index++, "AttendancePeriodDropDown.Description", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAttendancePeriodDropDownStructure r) {
			this = r;
		}


		public static bool operator == (STAttendancePeriodDropDownStructure a, STAttendancePeriodDropDownStructure b) {
			if (a.ssDateRange != b.ssDateRange) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (STAttendancePeriodDropDownStructure a, STAttendancePeriodDropDownStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAttendancePeriodDropDownStructure)) return false;
			return (this == (STAttendancePeriodDropDownStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDateRange.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAttendancePeriodDropDownStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDateRange = "";
			ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssDateRange = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssDescription = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STAttendancePeriodDropDownStructure Duplicate() {
			STAttendancePeriodDropDownStructure t;
			t.ssDateRange = this.ssDateRange;
			t.ssDescription = this.ssDescription;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DateRange")) VarValue.AppendAttribute(recordElem, "DateRange", ssDateRange, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DateRange");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "daterange") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DateRange")) variable.Value = ssDateRange; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDateRange) {
				return ssDateRange;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDateRange = (string) other.AttributeGet(IdDateRange);
			ssDescription = (string) other.AttributeGet(IdDescription);
		}
	} // STAttendancePeriodDropDownStructure
	/// <summary>
	/// Structure <code>RCAttendancePeriodDropDownRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAttendancePeriodDropDownRecord: ISerializable, ITypedRecord<RCAttendancePeriodDropDownRecord> {
		private static readonly GlobalObjectKey IdAttendancePeriodDropDown = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NgdsesyTC6o2eOKnHlQkfg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AttendancePeriodDropDown")]
		public STAttendancePeriodDropDownStructure ssSTAttendancePeriodDropDown;


		public static implicit operator STAttendancePeriodDropDownStructure(RCAttendancePeriodDropDownRecord r) {
			return r.ssSTAttendancePeriodDropDown;
		}

		public static implicit operator RCAttendancePeriodDropDownRecord(STAttendancePeriodDropDownStructure r) {
			RCAttendancePeriodDropDownRecord res = new RCAttendancePeriodDropDownRecord(null);
			res.ssSTAttendancePeriodDropDown = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCAttendancePeriodDropDownRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTAttendancePeriodDropDown = new STAttendancePeriodDropDownStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTAttendancePeriodDropDown.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTAttendancePeriodDropDown.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAttendancePeriodDropDownRecord r) {
			this = r;
		}


		public static bool operator == (RCAttendancePeriodDropDownRecord a, RCAttendancePeriodDropDownRecord b) {
			if (a.ssSTAttendancePeriodDropDown != b.ssSTAttendancePeriodDropDown) return false;
			return true;
		}

		public static bool operator != (RCAttendancePeriodDropDownRecord a, RCAttendancePeriodDropDownRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAttendancePeriodDropDownRecord)) return false;
			return (this == (RCAttendancePeriodDropDownRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTAttendancePeriodDropDown.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAttendancePeriodDropDownRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTAttendancePeriodDropDown = new STAttendancePeriodDropDownStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTAttendancePeriodDropDown = (STAttendancePeriodDropDownStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTAttendancePeriodDropDown.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTAttendancePeriodDropDown.InternalRecursiveSave();
		}


		public RCAttendancePeriodDropDownRecord Duplicate() {
			RCAttendancePeriodDropDownRecord t;
			t.ssSTAttendancePeriodDropDown = (STAttendancePeriodDropDownStructure) this.ssSTAttendancePeriodDropDown.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTAttendancePeriodDropDown.ToXml(this, recordElem, "AttendancePeriodDropDown", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "attendanceperioddropdown") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendancePeriodDropDown")) variable.Value = ssSTAttendancePeriodDropDown; else variable.Optimized = true;
				variable.SetFieldName("attendanceperioddropdown");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAttendancePeriodDropDown) {
				return ssSTAttendancePeriodDropDown;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTAttendancePeriodDropDown.FillFromOther((IRecord) other.AttributeGet(IdAttendancePeriodDropDown));
		}
	} // RCAttendancePeriodDropDownRecord
	/// <summary>
	/// RecordList type <code>RLAttendancePeriodDropDownRecordList</code> that represents a record list of
	///  <code>AttendancePeriodDropDown</code>
	/// </summary>
	[Serializable()]
	public partial class RLAttendancePeriodDropDownRecordList: GenericRecordList<RCAttendancePeriodDropDownRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAttendancePeriodDropDownRecord GetElementDefaultValue() {
			return new RCAttendancePeriodDropDownRecord("");
		}

		public T[] ToArray<T>(Func<RCAttendancePeriodDropDownRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAttendancePeriodDropDownRecordList recordlist, Func<RCAttendancePeriodDropDownRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAttendancePeriodDropDownRecordList ToList<T>(T[] array, Func <T, RCAttendancePeriodDropDownRecord> converter) {
			RLAttendancePeriodDropDownRecordList result = new RLAttendancePeriodDropDownRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAttendancePeriodDropDownRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendancePeriodDropDownRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendancePeriodDropDownRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAttendancePeriodDropDownRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAttendancePeriodDropDownRecord> NewList() {
			return new RLAttendancePeriodDropDownRecordList();
		}


	} // RLAttendancePeriodDropDownRecordList
	/// <summary>
	/// RecordList type <code>RLAttendancePeriodDropDownList</code> that represents a record list of
	///  <code>Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLAttendancePeriodDropDownList: GenericRecordList<STAttendancePeriodDropDownStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STAttendancePeriodDropDownStructure GetElementDefaultValue() {
			return new STAttendancePeriodDropDownStructure("");
		}

		public T[] ToArray<T>(Func<STAttendancePeriodDropDownStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAttendancePeriodDropDownList recordlist, Func<STAttendancePeriodDropDownStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAttendancePeriodDropDownList ToList<T>(T[] array, Func <T, STAttendancePeriodDropDownStructure> converter) {
			RLAttendancePeriodDropDownList result = new RLAttendancePeriodDropDownList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAttendancePeriodDropDownList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendancePeriodDropDownList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendancePeriodDropDownList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAttendancePeriodDropDownList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STAttendancePeriodDropDownStructure> NewList() {
			return new RLAttendancePeriodDropDownList();
		}


	} // RLAttendancePeriodDropDownList
}

namespace ssCaseConferencing {
	[XmlType("AttendancePeriodDropDown")]
	public class WORCAttendancePeriodDropDownRecord {
		[System.Xml.Serialization.XmlElement("DateRange")]
		public string varWSDateRange;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		public WORCAttendancePeriodDropDownRecord() {
			varWSDateRange = (string) "";
			varWSDescription = (string) "";
		}

		public WORCAttendancePeriodDropDownRecord(STAttendancePeriodDropDownStructure r) {
			varWSDateRange = BaseAppUtils.RemoveControlChars(r.ssDateRange);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
		}

		public static RLAttendancePeriodDropDownList ToRecordList(WORCAttendancePeriodDropDownRecord[] array) {
			RLAttendancePeriodDropDownList rl = new RLAttendancePeriodDropDownList();
			if (array != null) {
				foreach(WORCAttendancePeriodDropDownRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAttendancePeriodDropDownRecord[] FromRecordList(RLAttendancePeriodDropDownList rl) {
			WORCAttendancePeriodDropDownRecord[] array = new WORCAttendancePeriodDropDownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAttendancePeriodDropDownRecord {
		public static implicit operator WORCAttendancePeriodDropDownRecord(RCAttendancePeriodDropDownRecord r) {
			return new WORCAttendancePeriodDropDownRecord(r.ssSTAttendancePeriodDropDown);
		}

		public static implicit operator RCAttendancePeriodDropDownRecord(WORCAttendancePeriodDropDownRecord w) {
			RCAttendancePeriodDropDownRecord r = new RCAttendancePeriodDropDownRecord("");
			if (w != null) {
				r.ssSTAttendancePeriodDropDown = w;
			}
			return r;
		}

	}

	partial struct STAttendancePeriodDropDownStructure {
		public static implicit operator WORCAttendancePeriodDropDownRecord(STAttendancePeriodDropDownStructure r) {
			return new WORCAttendancePeriodDropDownRecord(r);
		}

		public static implicit operator STAttendancePeriodDropDownStructure(WORCAttendancePeriodDropDownRecord w) {
			STAttendancePeriodDropDownStructure r = new STAttendancePeriodDropDownStructure("");
			if (w != null) {
				r.ssDateRange = ((string) w.varWSDateRange ?? "");
				r.ssDescription = ((string) w.varWSDescription ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAttendancePeriodDropDownRecordList {
		public WORCAttendancePeriodDropDownRecord[] Array;


		public WORLAttendancePeriodDropDownRecordList(WORCAttendancePeriodDropDownRecord[] r) {
			if (r == null)
			Array = new WORCAttendancePeriodDropDownRecord[0];
			else
			Array = r;
		}
		public WORLAttendancePeriodDropDownRecordList() {
			Array = new WORCAttendancePeriodDropDownRecord[0];
		}

		public WORLAttendancePeriodDropDownRecordList(RLAttendancePeriodDropDownRecordList rl) {
			rl=(RLAttendancePeriodDropDownRecordList) rl.Duplicate();
			Array = new WORCAttendancePeriodDropDownRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAttendancePeriodDropDownRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAttendancePeriodDropDownRecordList {
		public static implicit operator RLAttendancePeriodDropDownRecordList(WORCAttendancePeriodDropDownRecord[] array) {
			RLAttendancePeriodDropDownRecordList rl = new RLAttendancePeriodDropDownRecordList();
			if (array != null) {
				foreach(WORCAttendancePeriodDropDownRecord val in array) {
					rl.Append((RCAttendancePeriodDropDownRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAttendancePeriodDropDownRecord[](RLAttendancePeriodDropDownRecordList rl) {
			WORCAttendancePeriodDropDownRecord[] array = new WORCAttendancePeriodDropDownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAttendancePeriodDropDownRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAttendancePeriodDropDownRecordList {
		public static implicit operator RLAttendancePeriodDropDownRecordList(WORLAttendancePeriodDropDownRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAttendancePeriodDropDownRecordList(RLAttendancePeriodDropDownRecordList rl) {
			return new WORLAttendancePeriodDropDownRecordList(rl);
		}
		public static implicit operator WORCAttendancePeriodDropDownRecord[](WORLAttendancePeriodDropDownRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAttendancePeriodDropDownRecordList(WORCAttendancePeriodDropDownRecord[] array) {
			return new WORLAttendancePeriodDropDownRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAttendancePeriodDropDownList {
		public WORCAttendancePeriodDropDownRecord[] Array;


		public WORLAttendancePeriodDropDownList(WORCAttendancePeriodDropDownRecord[] r) {
			if (r == null)
			Array = new WORCAttendancePeriodDropDownRecord[0];
			else
			Array = r;
		}
		public WORLAttendancePeriodDropDownList() {
			Array = new WORCAttendancePeriodDropDownRecord[0];
		}

		public WORLAttendancePeriodDropDownList(RLAttendancePeriodDropDownList rl) {
			rl=(RLAttendancePeriodDropDownList) rl.Duplicate();
			Array = new WORCAttendancePeriodDropDownRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAttendancePeriodDropDownList {
		public static implicit operator RLAttendancePeriodDropDownList(WORCAttendancePeriodDropDownRecord[] array) {
			RLAttendancePeriodDropDownList rl = new RLAttendancePeriodDropDownList();
			if (array != null) {
				foreach(WORCAttendancePeriodDropDownRecord val in array) {
					rl.Append((STAttendancePeriodDropDownStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAttendancePeriodDropDownRecord[](RLAttendancePeriodDropDownList rl) {
			WORCAttendancePeriodDropDownRecord[] array = new WORCAttendancePeriodDropDownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STAttendancePeriodDropDownStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAttendancePeriodDropDownList {
		public static implicit operator RLAttendancePeriodDropDownList(WORLAttendancePeriodDropDownList w) {
			return w.Array;
		}
		public static implicit operator WORLAttendancePeriodDropDownList(RLAttendancePeriodDropDownList rl) {
			return new WORLAttendancePeriodDropDownList(rl);
		}
		public static implicit operator WORCAttendancePeriodDropDownRecord[](WORLAttendancePeriodDropDownList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAttendancePeriodDropDownList(WORCAttendancePeriodDropDownRecord[] array) {
			return new WORLAttendancePeriodDropDownList(array);
		}
	}
}

