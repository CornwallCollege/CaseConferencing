/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STTextStructure</code> that represents the Service Studio structure
	///  <code>Text</code> <p> Description: Structure with single Text attribute</p>
	/// </summary>
	[Serializable()]
	public partial struct STTextStructure: ISerializable, ITypedRecord<STTextStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("d6CatvSs3Eu81Z3vgdfdzQ*+TDTYw6kyLici78NoFRKPQ");

		public static void EnsureInitialized() {}

		static STTextStructure() {
			ssCaseConferencing.STTextStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Value")]
		public string ssValue;


		public BitArray OptimizedAttributes;

		public STTextStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssValue = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssValue = r.ReadText(index++, "Text.Value", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STTextStructure r) {
			this = r;
		}


		public static bool operator == (STTextStructure a, STTextStructure b) {
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STTextStructure a, STTextStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STTextStructure)) return false;
			return (this == (STTextStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STTextStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssValue = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssValue = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STTextStructure Duplicate() {
			STTextStructure t;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssValue = (string) other.AttributeGet(IdValue);
		}
	} // STTextStructure
	/// <summary>
	/// Structure <code>RCTextRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTextRecord: ISerializable, ITypedRecord<RCTextRecord> {
		private static readonly GlobalObjectKey IdText = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*nrWEDYn_xIdxrrSd+p8sOQ");

		public static void EnsureInitialized() {}

		static RCTextRecord() {
			ssCaseConferencing.RCTextRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Text")]
		public STTextStructure ssSTText;


		public static implicit operator STTextStructure(RCTextRecord r) {
			return r.ssSTText;
		}

		public static implicit operator RCTextRecord(STTextStructure r) {
			RCTextRecord res = new RCTextRecord(null);
			res.ssSTText = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCTextRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTText = new STTextStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTText.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTText.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTextRecord r) {
			this = r;
		}


		public static bool operator == (RCTextRecord a, RCTextRecord b) {
			if (a.ssSTText != b.ssSTText) return false;
			return true;
		}

		public static bool operator != (RCTextRecord a, RCTextRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTextRecord)) return false;
			return (this == (RCTextRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTText.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTextRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTText = new STTextStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTText = (STTextStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTText.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTText.InternalRecursiveSave();
		}


		public RCTextRecord Duplicate() {
			RCTextRecord t;
			t.ssSTText = (STTextStructure) this.ssSTText.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTText.ToXml(this, recordElem, "Text", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "text") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Text")) variable.Value = ssSTText; else variable.Optimized = true;
				variable.SetFieldName("text");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdText) {
				return ssSTText;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTText.FillFromOther((IRecord) other.AttributeGet(IdText));
		}
	} // RCTextRecord
	/// <summary>
	/// RecordList type <code>RLTextRecordList</code> that represents a record list of <code>Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLTextRecordList: GenericRecordList<RCTextRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLTextRecordList() {
			ssCaseConferencing.RLTextRecordListTypeFactoryImpl.InitializeFactory();
		}

		protected override RCTextRecord GetElementDefaultValue() {
			return new RCTextRecord("");
		}

		public T[] ToArray<T>(Func<RCTextRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTextRecordList recordlist, Func<RCTextRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTextRecordList ToList<T>(T[] array, Func <T, RCTextRecord> converter) {
			RLTextRecordList result = new RLTextRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTextRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTextRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTextRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTextRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTextRecord> NewList() {
			return new RLTextRecordList();
		}


	} // RLTextRecordList
	/// <summary>
	/// RecordList type <code>RLTextList</code> that represents a record list of <code>Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLTextList: GenericRecordList<STTextStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STTextStructure GetElementDefaultValue() {
			return new STTextStructure("");
		}

		public T[] ToArray<T>(Func<STTextStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTextList recordlist, Func<STTextStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTextList ToList<T>(T[] array, Func <T, STTextStructure> converter) {
			RLTextList result = new RLTextList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTextList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTextList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTextList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTextList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STTextStructure> NewList() {
			return new RLTextList();
		}


	} // RLTextList
}

namespace ssCaseConferencing {
	[XmlType("Text")]
	public class WORCTextRecord {
		[System.Xml.Serialization.XmlElement("Value")]
		public string varWSValue;

		public WORCTextRecord() {
			varWSValue = (string) "";
		}

		public WORCTextRecord(STTextStructure r) {
			varWSValue = BaseAppUtils.RemoveControlChars(r.ssValue);
		}

		public static RLTextList ToRecordList(WORCTextRecord[] array) {
			RLTextList rl = new RLTextList();
			if (array != null) {
				foreach(WORCTextRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTextRecord[] FromRecordList(RLTextList rl) {
			WORCTextRecord[] array = new WORCTextRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTextRecord {
		public static implicit operator WORCTextRecord(RCTextRecord r) {
			return new WORCTextRecord(r.ssSTText);
		}

		public static implicit operator RCTextRecord(WORCTextRecord w) {
			RCTextRecord r = new RCTextRecord("");
			if (w != null) {
				r.ssSTText = w;
			}
			return r;
		}

	}

	partial struct STTextStructure {
		public static implicit operator WORCTextRecord(STTextStructure r) {
			return new WORCTextRecord(r);
		}

		public static implicit operator STTextStructure(WORCTextRecord w) {
			STTextStructure r = new STTextStructure("");
			if (w != null) {
				r.ssValue = ((string) w.varWSValue ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTextRecordList {
		public WORCTextRecord[] Array;


		public WORLTextRecordList(WORCTextRecord[] r) {
			if (r == null)
			Array = new WORCTextRecord[0];
			else
			Array = r;
		}
		public WORLTextRecordList() {
			Array = new WORCTextRecord[0];
		}

		public WORLTextRecordList(RLTextRecordList rl) {
			rl=(RLTextRecordList) rl.Duplicate();
			Array = new WORCTextRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTextRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTextRecordList {
		public static implicit operator RLTextRecordList(WORCTextRecord[] array) {
			RLTextRecordList rl = new RLTextRecordList();
			if (array != null) {
				foreach(WORCTextRecord val in array) {
					rl.Append((RCTextRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTextRecord[](RLTextRecordList rl) {
			WORCTextRecord[] array = new WORCTextRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTextRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTextRecordList {
		public static implicit operator RLTextRecordList(WORLTextRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTextRecordList(RLTextRecordList rl) {
			return new WORLTextRecordList(rl);
		}
		public static implicit operator WORCTextRecord[](WORLTextRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTextRecordList(WORCTextRecord[] array) {
			return new WORLTextRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTextList {
		public WORCTextRecord[] Array;


		public WORLTextList(WORCTextRecord[] r) {
			if (r == null)
			Array = new WORCTextRecord[0];
			else
			Array = r;
		}
		public WORLTextList() {
			Array = new WORCTextRecord[0];
		}

		public WORLTextList(RLTextList rl) {
			rl=(RLTextList) rl.Duplicate();
			Array = new WORCTextRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTextList {
		public static implicit operator RLTextList(WORCTextRecord[] array) {
			RLTextList rl = new RLTextList();
			if (array != null) {
				foreach(WORCTextRecord val in array) {
					rl.Append((STTextStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTextRecord[](RLTextList rl) {
			WORCTextRecord[] array = new WORCTextRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STTextStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTextList {
		public static implicit operator RLTextList(WORLTextList w) {
			return w.Array;
		}
		public static implicit operator WORLTextList(RLTextList rl) {
			return new WORLTextList(rl);
		}
		public static implicit operator WORCTextRecord[](WORLTextList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTextList(WORCTextRecord[] array) {
			return new WORLTextList(array);
		}
	}
}

