/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearners {

	public class ScrnPopup_Targets: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_Targets(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcOutputMessage</code> that represents the Service Studio local variable
		///  <code>OutputMessage</code> <p>Description: </p>
		/// </summary>
		string varLcOutputMessage = "";

		/// <summary>
		/// Variable wt_WebBlockInstance8
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance8;
		protected OutSystems.HubEdition.WebWidgets.Container wtTargetTable_Wrapper;
		private RLTargetTypeTargetBooleanRecordList _ssTargetTableList = new RLTargetTypeTargetBooleanRecordList();
		public RLTargetTypeTargetBooleanRecordList ssTargetTableList {
			get {
				return _ssTargetTableList; 
			}
			set {
				_ssTargetTableList = value;
				wtTargetTable.DataSource = value;
				ssTargetTableListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtTargetTable;
		public ArrayList wtTargetTable_storage = new ArrayList();
		protected bool ssTargetTableList_notUsedYet = true;
		protected bool ssTargetTableListDoDataBind;
		protected bool ssTargetTableListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		/// <summary>
		/// Variable (wt_Button24) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button24;
		/// <summary>
		/// Variable (wt_Button3) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button3;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("XFGq6gbSlE254PPs1uS5ZA", "Popup_Targets");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "XFGq6gbSlE254PPs1uS5ZA", "Popup_Targets");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "XFGq6gbSlE254PPs1uS5ZA", "Popup_Targets");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "XFGq6gbSlE254PPs1uS5ZA", "Popup_Targets");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "XFGq6gbSlE254PPs1uS5ZA", "Popup_Targets");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_Targets() {
		}


		RLTargetTypeTargetBooleanRecordList queryResGetTargets2_outParamList = new RLTargetTypeTargetBooleanRecordList();
		int queryResGetTargets2_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetTargets2
			int datasetGetTargets2_maxRecords = Math.Max(wtTargetTable.StartIndex + wtTargetTable.LineCount + 1, 0);
			queryResGetTargets2_outParamList = FuncssPreparation.datasetGetTargets2(heContext, datasetGetTargets2_maxRecords, IterationMultiplicity.Single, out queryResGetTargets2_outParamCount, inParamStudentReference
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentReference!= "")) {
				parameters.Add(new Pair<string, string>("StudentReference", HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_Targets", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_Targets", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance8 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance8");
			wtTargetTable_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTargetTable_Wrapper");
			wtTargetTable = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtTargetTable");
			wtTargetTable.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtTargetTable.ClientID, true, -1);
			wtTargetTable.LineCountExpression = () => 50;
			wtTargetTable.EmptyMessageExpression = () => "No targets to show...";
			wt_Container14 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container14");
			wt_Button24 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button24");
			if (this.wt_Button24 != null) {
				this.wt_Button24.Click += new System.EventHandler(this.wt_Button24_Click);
			}
			wt_Button3 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button3");
			if (this.wt_Button3 != null) {
				this.wt_Button3.Click += new System.EventHandler(this.wt_Button3_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_Text20") {
				return wt_WebBlockInstance8.wtTitle.FindControl("wt_Text20");
			}
			if (id == "wtTargetTable_Wrapper") {
				return wt_WebBlockInstance8.wtContent.FindControl("wtTargetTable_Wrapper");
			}
			if (id == "wtTargetTable") {
				return wt_WebBlockInstance8.wtContent.FindControl("wtTargetTable");
			}
			if (id == "wt_TableRecordsHeaderRow30") {
				return wt_WebBlockInstance8.wtContent.FindControl("wt_TableRecordsHeaderRow30");
			}
			if (id == "wt_Container14") {
				return wt_WebBlockInstance8.wtContent.FindControl("wt_Container14");
			}
			if (id == "wt_Button24") {
				return wt_WebBlockInstance8.wtContent.FindControl("wt_Button24");
			}
			if (id == "wt_Button3") {
				return wt_WebBlockInstance8.wtContent.FindControl("wt_Button3");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_Targets"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentReference = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_Targets"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentReference"] != null) {
						inParamStudentReference = Request.QueryString["StudentReference"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentReference"] != null) {
						inParamStudentReference = Request.Form["StudentReference"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssTargetTableListDoDataBind = true;
				Title = "Popup Targets"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Targets", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button24 = wt_Button24 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button24");
			} catch {}
			string jsString = (wt_Button24 != null) ? "return OsEnterKey('" +wt_Button24.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearners.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSafeGuardingLead("SafeGuardingLead role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("XFGq6gbSlE254PPs1uS5ZA"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandOk</code> that represents the Service Studio screen action <code>Ok</code> <p>
		///  Description: </p>
		/// </summary>
		private bool CommandOk(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Foreach TargetTable.List
				getWtTargetTableList().StartIteration();
				try {
					while (! getWtTargetTableList().Eof) {
						if ((getWtTargetTableList().CurrentRec.ssSTBoolean.ssValue==true)) {
							varLcOutputMessage = ((varLcOutputMessage+getWtTargetTableList().CurrentRec.ssENTarget.ssTargetDescription) + "|"); // OutputMessage = OutputMessage + TargetTable.List.Current.Target.TargetDescription + "|"

						}
						getWtTargetTableList().Advance();
					}
				} finally {
					getWtTargetTableList().EndIteration();
				}
				varLcOutputMessage = BuiltInFunction.Substr(varLcOutputMessage, 0, (BuiltInFunction.Length(varLcOutputMessage) -1)); // OutputMessage = Substr
				// Popup_Editor_Notify
				Actions.ActionPopup_Editor_Notify(heContext, varLcOutputMessage);
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvRefreshTargetTable: VarsBag {
			public bool inParamResetFilters;
			public bool inParamResetPagination;
			public lcvRefreshTargetTable(bool inParamResetFilters, bool inParamResetPagination) {
				this.inParamResetFilters = inParamResetFilters;
				this.inParamResetPagination = inParamResetPagination;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshTargetTable</code> that represents the Service Studio screen action
		///  <code>RefreshTargetTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshTargetTable(HeContext heContext, bool inParamResetFilters, bool inParamResetPagination) {
			CheckPermissions(heContext);
			lcvRefreshTargetTable localVars = new lcvRefreshTargetTable(inParamResetFilters, inParamResetPagination);
			try {
				if (localVars.inParamResetPagination) {
					// ResetStartIndex
					Actions.ActionList_Navigation_ResetStartIndex(heContext, wtTargetTable.ClientID);

				}
				// Query datasetGetTargets2
				{
					int datasetGetTargets2_maxRecords = Math.Max(wtTargetTable.StartIndex + wtTargetTable.LineCount + 1, 0);
					queryResGetTargets2_outParamList = FuncssPreparation.datasetGetTargets2(heContext, datasetGetTargets2_maxRecords, IterationMultiplicity.Single, out queryResGetTargets2_outParamCount, inParamStudentReference
					);
				}
				// Refresh Widget (wtTargetTable_Wrapper)
				ssTargetTableListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtTargetTable_Wrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance8 Functions
		/// </summary>
		public void webBlck_WebBlockInstance8_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 550;
		}
		/// <summary>
		/// wtTargetTable_Wrapper Functions
		/// </summary>
		public void cntTargetTable_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntTargetTable_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntTargetTable_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntTargetTable_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtTargetTable_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtTargetTable_Wrapper</returns>
		public bool cntTargetTable_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtTargetTable Functions
		/// </summary>
		public void recTableTargetTable_onDataBinding(object sender, System.EventArgs e) {
			// widget wtTargetTable
			ssTargetTableList = queryResGetTargets2_outParamList;
			ssTargetTableListDoDataBind = false;
			ssTargetTableListDataBound = true;
			wtTargetTable.ShowHeader = true;
		}
		public void recTableTargetTable_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssTargetTableList.Length > 0) {
					ssTargetTableList.CurrentRec = ssTargetTableList[ssTargetTableList.CurrentRowNumber];
				}
				if (ssTargetTableList.Length > e.Item.DataSetIndex) {
					ssTargetTableList.CurrentRec = ssTargetTableList[e.Item.DataSetIndex];
					ssTargetTableList.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableTargetTable_Store(object dataItem, int index) {
			RCTargetTypeTargetBooleanRecord tmprec = (RCTargetTypeTargetBooleanRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENTarget.ssTargetDescription == "" ?(object) null: tmprec.ssENTarget.ssTargetDescription);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENTarget.ChangedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENTarget.OptimizedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssSTBoolean.ssValue == false?(object) null: tmprec.ssSTBoolean.ssValue);
			if (index < wtTargetTable_storage.Count) {
				wtTargetTable_storage[index] = tmpFields;
			} else {
				wtTargetTable_storage.Add(tmpFields);
			}
			return "";
		}
		public void recTableTargetTable_Restore() {

			#region fetch ssTargetTableList.

			// Read the needed fields of ssTargetTableList from storewtTargetTable_list
			ssTargetTableList = new RLTargetTypeTargetBooleanRecordList();
			ArrayList storewtTargetTable_list;
			storewtTargetTable_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtTargetTable_list", null);
			if (storewtTargetTable_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtTargetTable_list in storewtTargetTable_list) {
					if (tmpFieldswtTargetTable_list != null) {
						// Aux current record variable
						RCTargetTypeTargetBooleanRecord tmpAuxCurrentRecordwtTargetTable_list = new RCTargetTypeTargetBooleanRecord(null);
						tmpAuxCurrentRecordwtTargetTable_list.ssENTarget.ssTargetDescription = (string) (tmpFieldswtTargetTable_list[0] == null ? "": tmpFieldswtTargetTable_list[0]);

						tmpAuxCurrentRecordwtTargetTable_list.ssENTarget.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtTargetTable_list[1]);

						tmpAuxCurrentRecordwtTargetTable_list.ssENTarget.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtTargetTable_list[2]);

						tmpAuxCurrentRecordwtTargetTable_list.ssSTBoolean.ssValue = (bool) (tmpFieldswtTargetTable_list[3] == null ? false: tmpFieldswtTargetTable_list[3]);

						ssTargetTableList.Append(tmpAuxCurrentRecordwtTargetTable_list);
					}
				}
			}
			ssTargetTableList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssTargetTableList runtime properties state.


			if (storewtTargetTable_list.Count > 0) {
				ssTargetTableList.RestoreRecordListState(storewtTargetTable_list.Count - 1, false);
			} else {
				ssTargetTableList.CurrentRowNumber = 0;
			}

			#endregion

			wtTargetTable_storage = storewtTargetTable_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableTargetTable_Clear(object sender, EventArgs e) {
			wtTargetTable_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableTargetTable_Rebuild(int startIndex, int lineCount) {
			if (ssTargetTableList.Length != -1) {
				wtTargetTable_storage.Clear();
				for (int i=startIndex; i<ssTargetTableList.Data.Count && i<startIndex+lineCount; i++) {
					recTableTargetTable_Store(ssTargetTableList.Data[i], wtTargetTable_storage.Count);
				}
			}
		}
		public void recTableTargetTable_ListRefreshDataBind(object sender, EventArgs e) {
			wtTargetTable.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtTargetTable widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLTargetTypeTargetBooleanRecordList getWtTargetTableList() {
			if (ssTargetTableListDoDataBind) {
				recTableTargetTable_onDataBinding(this, null);
			}

			return ssTargetTableList;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance19 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{TargetType}.[Label]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance19
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance19_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshTargetTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance6 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance6_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Target}.[TargetDescription]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance6
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance6_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshTargetTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container10 Functions
		/// </summary>
		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container10_setInlineAttributes(sender, e);
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container10_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance1 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Target}.[TargetDate]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance1
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance1_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshTargetTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_CheckBox5 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box DPVYJGWECEGHD9PcxCVLPw
		/// </summary>
		/// <returns>The Value of the Check Box DPVYJGWECEGHD9PcxCVLPw</returns>
		public bool chk_CheckBox5_checked_value() {
			return getWtTargetTableList().CurrentRec.ssSTBoolean.ssValue;
		}
		public void chk_CheckBox5_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssTargetTableList.Length > parentControlIndex && parentControlIndex > -1) {
					ssTargetTableList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtTargetTableList().CurrentRec.ssSTBoolean.ssValue = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox5)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox5</returns>
		public bool chk_CheckBox5_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox5)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox5</returns>
		public bool chk_CheckBox5_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression16 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Cv_3l2NWX0qx+KA79zo4ng) Expression:
		///  TargetTable.List.Current.TargetType.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression16() {
			return getWtTargetTableList().CurrentRec.ssENTargetType.ssLabel;
		}
		/// <summary>
		/// wt_InlineExpression22 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 6BlqvrnOR0C4hJ+vDNLDTg) Expression:
		///  TargetTable.List.Current.Target.TargetDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression22() {
			return getWtTargetTableList().CurrentRec.ssENTarget.ssTargetDescription;
		}
		/// <summary>
		/// wt_Container12 Functions
		/// </summary>
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container12_setInlineAttributes(sender, e);
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container12_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression4 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Y4uPGk13a0aeo_zkwMgbgw) Expression:
		///  Date_PrettyFormat(TargetTable.List.Current.Target.TargetDate)
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return Functions.rssespacerichwidgets_ActionDate_PrettyFormat(heContext, getWtTargetTableList().CurrentRec.ssENTarget.ssTargetDate);
		}
		/// <summary>
		/// wt_Container14 Functions
		/// </summary>
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container14_setInlineAttributes(sender, e);
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container14_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Button24 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button24_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandOk(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button24)
		/// </summary>
		/// <returns>Label of the Button (wt_Button24)</returns>
		public string
		btn_Button24_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button24)
		/// </summary>
		/// <returns>The Visible State of wt_Button24</returns>
		public bool btn_Button24_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button24)
		/// </summary>
		/// <returns>The Enabled State of wt_Button24</returns>
		public bool btn_Button24_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button3 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button3_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandCancel(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button3)
		/// </summary>
		/// <returns>Label of the Button (wt_Button3)</returns>
		public string
		btn_Button3_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button3)
		/// </summary>
		/// <returns>The Visible State of wt_Button3</returns>
		public bool btn_Button3_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button3)
		/// </summary>
		/// <returns>The Enabled State of wt_Button3</returns>
		public bool btn_Button3_isEnabled() {
			return true; 
		}


		public static class FuncCommandOk {
		}
		public static class FuncCommandRefreshTargetTable {
		}
		public static class FuncCommandCancel {
		}
		public static class FuncssPreparation {

			private static void datasetGetTargets2ReadDB(ref RCTargetTypeTargetBooleanRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENTarget.Read(r, ref index);
				rec.ssENTargetType.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetTargets2" of Action "Preparation"
			/// </summary>
			public static RLTargetTypeTargetBooleanRecordList datasetGetTargets2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Single {TargetTable}
				// Refresh Query 46M5ezDIwk6ixJnNRIMtgA Iterations: Single {TargetTable}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, ENTarget.[TARGETDESCRIPTION] o8, NULL o9, NULL o10, ENTarget.[TARGETDATE] o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, ENTargetType.[LABEL] o20, NULL o21, NULL o22");
				fromBuilder.Append(" FROM ({TargetType} ENTargetType Inner JOIN {Target} ENTarget ON (ENTarget.[TARGETTYPEID] = ENTargetType.[ID])) ");
				whereBuilder.Append(" WHERE (ENTarget.[STUDENTREFERENCE] = (@qpstP))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLTargetTypeTargetBooleanRecordList outParamList = new RLTargetTypeTargetBooleanRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetTargets2ReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLTargetTypeTargetBooleanRecordList _tmp = new RLTargetTypeTargetBooleanRecordList();
					_tmp.AlternateReadDBMethod = datasetGetTargets2ReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learners.Popup_Targets.Preparation.GetTargets2.List");
						outParamList = (RLTargetTypeTargetBooleanRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learners.Popup_Targets.Preparation.GetTargets2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLTargetTypeTargetBooleanRecordList _tmp = new RLTargetTypeTargetBooleanRecordList();
						_tmp.AlternateReadDBMethod = datasetGetTargets2ReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learners.Popup_Targets.Preparation.GetTargets2.List");
							outParamList = (RLTargetTypeTargetBooleanRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learners.Popup_Targets.Preparation.GetTargets2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Popup Targets"; ssTargetTableListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Targets", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Targets", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcOutputMessage", varLcOutputMessage, "");
			if (IsAjaxRequest) {
				recTableTargetTable_Rebuild((ssTargetTableListDataBound ? wtTargetTable.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtTargetTable.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtTargetTable_list", wtTargetTable_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcOutputMessage = (string) ViewStateAttributes.GetFromViewState("varLcOutputMessage", "");
				recTableTargetTable_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
