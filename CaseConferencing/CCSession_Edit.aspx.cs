/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCaseConference {

	public class ScrnCCSession_Edit: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnCCSession_Edit(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCCSessionId. Description:
		/// </summary>
		public int inParamCCSessionId = 0;
		/// <summary>
		/// Screen Input Parameter inParamClusterId. Description:
		/// </summary>
		public string inParamClusterId = "";
		/// <summary>
		/// Variable <code>varLcGetClusterById_ClusterId</code> that represents the Service Studio local
		///  variable <code>GetClusterById_ClusterId</code> <p>Description: Created by the upgrade o
		/// f 'GetClusterById' to an Aggregate. Corresponds to the old query parameter 'ClusterId'.</p>
		/// </summary>
		string varLcGetClusterById_ClusterId = "";

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance80
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance80;
		/// <summary>
		/// Variable "True" if the Widget wt_If73
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If73T;

		/// <summary>
		/// Variable "True" if the Widget wt_If73
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If73F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container100;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCCCSessionRecord ssCCSessionEditRecord = new RCCCSessionRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtCCSessionEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtCCSession_StartDate") &&
			ValidationUtils.IsValid(this, "wtCCSession_EndDate") &&
			ValidationUtils.IsValid(this, "wtCCSession_Description") &&
			ValidationUtils.IsValid(this, "wtCCSession_Notes");
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container46;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtCCSession_StartDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtCCSession_StartDateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtCCSession_EndDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtCCSession_EndDateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtCCSession_DescriptionValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtCCSession_DescriptionValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtCCSession_NotesValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtCCSession_NotesValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container67;
		/// <summary>
		/// Variable (wtEndSession) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEndSession;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container68;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container104;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container102;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container89;
		protected OutSystems.HubEdition.WebWidgets.Container wtCurriculumLead;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container79;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container75;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container76;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container82;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		/// <summary>
		/// Variable (wt_Link83) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link83;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container48;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container63;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container91;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container66;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container64;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container38;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container90;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkCCSessionAttachedDocuments.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("jHNbl_Td0ki81a3x3GKPSQ", "CCSession_Edit");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "jHNbl_Td0ki81a3x3GKPSQ", "CCSession_Edit");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "jHNbl_Td0ki81a3x3GKPSQ", "CCSession_Edit");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "jHNbl_Td0ki81a3x3GKPSQ", "CCSession_Edit");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "jHNbl_Td0ki81a3x3GKPSQ", "CCSession_Edit");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnCCSession_Edit() {
			htTabIndexGroups["wt_Text29"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Image7"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container24"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container46"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_InlineExpression85"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text21"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wtCCSession_StartDate"] = "wtCCSessionEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance39"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text70"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wtCCSession_EndDate"] = "wtCCSessionEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance42"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text58"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wtCCSession_Description"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text47"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wtCCSession_Notes"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text9"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container4"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_WebBlockInstance27"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container67"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wtEndSession"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container50"] = "wtCCSessionEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance56"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text37"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container68"] = "wtCCSessionEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance71"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text55"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container104"] = "wtCCSessionEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance34"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text61"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container11"] = "wtCCSessionEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance28"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text10"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Container102"] = "wtCCSessionEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance19"] = "wtCCSessionEdit-1";
			htTabIndexGroups["wt_Text98"] = "wtCCSessionEdit-1";
		}


		RLStringStringRecordList queryResGetTotalCourses_outParamList = new RLStringStringRecordList();
		int queryResGetTotalCourses_outParamCount = 0;
		RLCCSessionRecordList queryResGetCCSessionById_outParamList = new RLCCSessionRecordList();
		int queryResGetCCSessionById_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		RLClusterRecordList queryResGetClusterById_outParamList = new RLClusterRecordList();
		int queryResGetClusterById_outParamCount = 0;
		RLStringStringRecordList queryResGetAllCurriculumLeads_outParamList = new RLStringStringRecordList();
		int queryResGetAllCurriculumLeads_outParamCount = 0;
		RLStringStringRecordList queryResGetStudents_outParamList = new RLStringStringRecordList();
		int queryResGetStudents_outParamCount = 0;
		RLStringStringRecordList queryResGetAllTeamsTotal_outParamList = new RLStringStringRecordList();
		int queryResGetAllTeamsTotal_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("tAo+Eq5dL0aZHIgxzvoqww")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType!=ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId)) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				}

			} else {
				if (((inParamCCSessionId==BuiltInFunction.NullIdentifier()) && (inParamClusterId==BuiltInFunction.NullTextIdentifier()))) {
					// Destination = CCSession_List

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CCSession_List.aspx");
							}
							return;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CCSession_List.aspx");
							}
							return;

						}
					}

				} else {
					RCCaseConferencingSession_FilterRecord CompID_Aux_0 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_0.ssSTCaseConferencingSession_Filter.ssCurriculumLeadId = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_0; // CaseConferecingSession.CaseConferencingSession_Filter.CurriculumLeadId = NullIdentifier
					RCCaseConferencingSession_FilterRecord CompID_Aux_1 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_1.ssSTCaseConferencingSession_Filter.ssTeamId = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_1; // CaseConferecingSession.CaseConferencingSession_Filter.TeamId = NullIdentifier
					// Query datasetGetCCSessionById
					int datasetGetCCSessionById_maxRecords = 1;
					if (datasetGetCCSessionById_maxRecords < 1) datasetGetCCSessionById_maxRecords = 1;
					queryResGetCCSessionById_outParamList = FuncssPreparation.datasetGetCCSessionById(heContext, datasetGetCCSessionById_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionById_outParamCount, inParamCCSessionId
					);
					// Created by the upgrade of 'GetClusterById' to an Aggregate.
					varLcGetClusterById_ClusterId = (((inParamCCSessionId==BuiltInFunction.NullIdentifier())) ?(inParamClusterId):(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId)); // GetClusterById_ClusterId = internalIf
					// Query datasetGetClusterById
					int datasetGetClusterById_maxRecords = 0;
					queryResGetClusterById_outParamList = FuncssPreparation.datasetGetClusterById(heContext, datasetGetClusterById_maxRecords, IterationMultiplicity.Never, out queryResGetClusterById_outParamCount, varLcGetClusterById_ClusterId
					);
					// Query QueryGetAllCurriculumLeads
					int QueryGetAllCurriculumLeads_maxRecords = 0;
					queryResGetAllCurriculumLeads_outParamList = FuncssPreparation.QueryGetAllCurriculumLeads(heContext, QueryGetAllCurriculumLeads_maxRecords, IterationMultiplicity.Never, out queryResGetAllCurriculumLeads_outParamCount, queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					);
					// Query QueryGetAllTeamsTotal
					int QueryGetAllTeamsTotal_maxRecords = 0;
					queryResGetAllTeamsTotal_outParamList = FuncssPreparation.QueryGetAllTeamsTotal(heContext, QueryGetAllTeamsTotal_maxRecords, IterationMultiplicity.Never, out queryResGetAllTeamsTotal_outParamCount, queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
					// Query QueryGetTotalCourses
					int QueryGetTotalCourses_maxRecords = 0;
					queryResGetTotalCourses_outParamList = FuncssPreparation.QueryGetTotalCourses(heContext, QueryGetTotalCourses_maxRecords, IterationMultiplicity.Never, out queryResGetTotalCourses_outParamCount, queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, "Active"
					);
					// Query QueryGetStudents
					int QueryGetStudents_maxRecords = 0;
					queryResGetStudents_outParamList = FuncssPreparation.QueryGetStudents(heContext, QueryGetStudents_maxRecords, IterationMultiplicity.Never, out queryResGetStudents_outParamCount, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssId
					, "Active"
					, ((int) Global.SiteProperties["RAG_Session_MaxDays_Alert"])
					, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType
					);

				}

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "CCSession_Edit.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "CCSession_Edit.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCCSessionId!=0)) {
				parameters.Add(new Pair<string, string>("CCSessionId", HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId), Request.ContentEncoding)));
			}
			if ((inParamClusterId!= "")) {
				parameters.Add(new Pair<string, string>("ClusterId", HttpUtility.UrlEncode(inParamClusterId, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CCSession_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CCSession_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance80 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance80");
			wt_Container14 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container14");
			wt_Container100 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container100");
			wt_Container20 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container20");
			wt_Container24 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container24");
			wt_Container46 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container46");
			wt_Container4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container4");
			wt_Container67 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container67");
			wtEndSession = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wtEndSession");
			if (this.wtEndSession != null) {
				this.wtEndSession.Click += new System.EventHandler(this.wtEndSession_Click);
			}
			wt_Container50 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container50");
			wt_Container68 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container68");
			wt_Container104 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container104");
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			wt_Container102 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container102");
			wt_Container89 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container89");
			wtCurriculumLead = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtCurriculumLead");
			wt_Container79 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container79");
			wt_Container75 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container75");
			wt_Container45 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container45");
			wt_Container76 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container76");
			wt_Container82 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container82");
			wt_Container31 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container31");
			wt_Link83 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link83");
			if (this.wt_Link83 != null) {
				this.wt_Link83.Click += new System.EventHandler(this.wt_Link83_Click);
			}
			wt_Container48 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container48");
			wt_Container2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container2");
			wt_Container63 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container63");
			wt_Container91 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container91");
			wt_Container66 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container66");
			wt_Container26 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container26");
			wt_Container64 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container64");
			wt_Container38 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container38");
			wt_Container90 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container90");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance53") {
				return ThemeProvider_wt_WebBlockInstance80.wtHelpUpdate.FindControl("wt_WebBlockInstance53");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance57") {
				return ThemeProvider_wt_WebBlockInstance80.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance57");
			}
			if (id == "wt_If73") {
				return ThemeProvider_wt_WebBlockInstance80.wtTitle.FindControl("wt_If73");
			}
			if (id == "wt_If73T") {
				return ThemeProvider_wt_WebBlockInstance80.wtTitle.FindControl("wt_If73T");
			}
			if (id == "RichWidgets_wt_WebBlockInstance95") {
				return ThemeProvider_wt_WebBlockInstance80.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance95");
			}
			if (id == "wt_InlineExpression88") {
				return ThemeProvider_wt_WebBlockInstance80.wtTitle.FindControl("wt_InlineExpression88");
			}
			if (id == "wt_If73F") {
				return ThemeProvider_wt_WebBlockInstance80.wtTitle.FindControl("wt_If73F");
			}
			if (id == "RichWidgets_wt_WebBlockInstance59") {
				return ThemeProvider_wt_WebBlockInstance80.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance59");
			}
			if (id == "wt_InlineExpression78") {
				return ThemeProvider_wt_WebBlockInstance80.wtTitle.FindControl("wt_InlineExpression78");
			}
			if (id == "wt_Container14") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container14");
			}
			if (id == "wt_Container100") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container100");
			}
			if (id == "wt_Container20") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container20");
			}
			if (id == "wt_Text40") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text40");
			}
			if (id == "wtCCSessionEdit") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wtCCSessionEdit");
			}
			if (id == "wt_EditRecordRow93") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordRow93");
			}
			if (id == "wt_EditRecordCell96") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell96");
			}
			if (id == "wt_Text29") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text29");
			}
			if (id == "wt_EditRecordCell81") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell81");
			}
			if (id == "wt_Image7") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Image7");
			}
			if (id == "wt_Container24") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container24");
			}
			if (id == "wt_Container46") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container46");
			}
			if (id == "wt_InlineExpression85") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_InlineExpression85");
			}
			if (id == "wt_EditRecordRow51") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordRow51");
			}
			if (id == "wt_EditRecordCell74") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell74");
			}
			if (id == "wt_Text21") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text21");
			}
			if (id == "wt_EditRecordCell92") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell92");
			}
			if (id == "wtCCSession_StartDate") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wtCCSession_StartDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance39") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance39");
			}
			if (id == "wt_EditRecordRow17") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordRow17");
			}
			if (id == "wt_EditRecordCell25") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell25");
			}
			if (id == "wt_Text70") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text70");
			}
			if (id == "wt_EditRecordCell54") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell54");
			}
			if (id == "wtCCSession_EndDate") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wtCCSession_EndDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance42") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance42");
			}
			if (id == "wt_EditRecordRow32") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordRow32");
			}
			if (id == "wt_EditRecordCell5") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell5");
			}
			if (id == "wt_Text58") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text58");
			}
			if (id == "wt_EditRecordCell103") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell103");
			}
			if (id == "wtCCSession_Description") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wtCCSession_Description");
			}
			if (id == "wt_EditRecordRow97") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordRow97");
			}
			if (id == "wt_EditRecordCell6") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell6");
			}
			if (id == "wt_Text47") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text47");
			}
			if (id == "wt_EditRecordCell16") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell16");
			}
			if (id == "wtCCSession_Notes") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wtCCSession_Notes");
			}
			if (id == "wt_EditRecordRow1") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordRow1");
			}
			if (id == "wt_EditRecordCell33") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell33");
			}
			if (id == "wt_Text9") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text9");
			}
			if (id == "wt_EditRecordCell62") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell62");
			}
			if (id == "wt_Container4") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container4");
			}
			if (id == "wt_WebBlockInstance27") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_WebBlockInstance27");
			}
			if (id == "wt_EditRecordRow35") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordRow35");
			}
			if (id == "wt_EditRecordCell13") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell13");
			}
			if (id == "wt_EditRecordCell87") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_EditRecordCell87");
			}
			if (id == "wt_Container67") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container67");
			}
			if (id == "wtEndSession") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wtEndSession");
			}
			if (id == "wt_Container50") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container50");
			}
			if (id == "RichWidgets_wt_WebBlockInstance56") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance56");
			}
			if (id == "wt_Text37") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text37");
			}
			if (id == "wt_Container68") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container68");
			}
			if (id == "RichWidgets_wt_WebBlockInstance71") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance71");
			}
			if (id == "wt_Text55") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text55");
			}
			if (id == "wt_Container104") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container104");
			}
			if (id == "RichWidgets_wt_WebBlockInstance34") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance34");
			}
			if (id == "wt_Text61") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text61");
			}
			if (id == "wt_Container11") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container11");
			}
			if (id == "RichWidgets_wt_WebBlockInstance28") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance28");
			}
			if (id == "wt_Text10") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text10");
			}
			if (id == "wt_Container102") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container102");
			}
			if (id == "RichWidgets_wt_WebBlockInstance19") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance19");
			}
			if (id == "wt_Text98") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text98");
			}
			if (id == "wt_Container89") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container89");
			}
			if (id == "wtCurriculumLead") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wtCurriculumLead");
			}
			if (id == "wt_Container79") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container79");
			}
			if (id == "RichWidgets_wt_WebBlockInstance3") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance3");
			}
			if (id == "wt_Container75") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container75");
			}
			if (id == "wt_Text49") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Text49");
			}
			if (id == "wt_Container45") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container45");
			}
			if (id == "wt_Container76") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container76");
			}
			if (id == "wt_Container82") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container82");
			}
			if (id == "wt_InlineExpression43") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_InlineExpression43");
			}
			if (id == "wt_Container31") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container31");
			}
			if (id == "wt_Link83") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Link83");
			}
			if (id == "wt_WebBlockInstance94") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_WebBlockInstance94");
			}
			if (id == "wt_Container48") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container48");
			}
			if (id == "wt_Container2") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container2");
			}
			if (id == "wt_InlineExpression84") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_InlineExpression84");
			}
			if (id == "wt_Container63") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container63");
			}
			if (id == "wt_WebBlockInstance44") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_WebBlockInstance44");
			}
			if (id == "wt_Container91") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container91");
			}
			if (id == "wt_Container66") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container66");
			}
			if (id == "wt_InlineExpression77") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_InlineExpression77");
			}
			if (id == "wt_Container26") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container26");
			}
			if (id == "wt_WebBlockInstance30") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_WebBlockInstance30");
			}
			if (id == "wt_Container64") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container64");
			}
			if (id == "wt_Container38") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container38");
			}
			if (id == "wt_InlineExpression18") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_InlineExpression18");
			}
			if (id == "wt_Container90") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_Container90");
			}
			if (id == "wt_WebBlockInstance86") {
				return ThemeProvider_wt_WebBlockInstance80.wtMainContent.FindControl("wt_WebBlockInstance86");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_Edit"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCCSessionId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamClusterId = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_Edit"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CCSessionId"] != null) {
						inParamCCSessionId = Convert.ToInt32(Request.QueryString["CCSessionId"]);
					}
					if (Request.QueryString["ClusterId"] != null) {
						inParamClusterId = Request.QueryString["ClusterId"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CCSessionId"] != null) {
						inParamCCSessionId = Convert.ToInt32(Request.Form["CCSessionId"]);
					}
					if (Request.Form["ClusterId"] != null) {
						inParamClusterId = Request.Form["ClusterId"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtCCSessionEdit_onDataBindingDataSource(this.FindControl("wtCCSessionEdit"), null);
				}
				Title = (((queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssId==BuiltInFunction.NullIdentifier())) ?("New CCSession"):("Edit CCSession")); Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSession_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCaseConference.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotLearningSupportPractitioner("LearningSupportPractitioner role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("jHNbl_Td0ki81a3x3GKPSQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvEndSession: VarsBag {
			public int resCreateOrUpdateCCSession_outParamId = 0;

			public lcvEndSession() {
			}
		}
		/// <summary>
		/// Action <code>CommandEndSession</code> that represents the Service Studio screen action
		///  <code>EndSession</code> <p> Description: </p>
		/// </summary>
		private bool CommandEndSession(HeContext heContext) {
			CheckPermissions(heContext);
			lcvEndSession localVars = new lcvEndSession();
			try {
				ssCCSessionEditRecord.ssENCCSession.ssEndDate = BuiltInFunction.CurrDateTime(); // CCSessionEdit.Record.CCSession.EndDate = CurrDateTime
				// CreateOrUpdateCCSession
				ExtendedActions.CreateOrUpdateCCSession(heContext, ssCCSessionEditRecord.ChangedAttributes, ssCCSessionEditRecord, out localVars.resCreateOrUpdateCCSession_outParamId);
				// ExceptionFeedbackMessage2
				Actions.ActionFeedback_Message(heContext, "Session ended", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
				// Destination = CCSession_List

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
						string sURLQuery = null;
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
						Server.Transfer("CCSession_List.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandContinueSession</code> that represents the Service Studio screen action
		///  <code>ContinueSession</code> <p> Description: </p>
		/// </summary>
		private bool CommandContinueSession(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// UpdateCCSession
				ExtendedActions.UpdateCCSession(heContext, ssCCSessionEditRecord.ChangedAttributes, ssCCSessionEditRecord);
				// Destination = CCSessionStep2_Edit

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "IcOz76lGiUaF70zBiTnCVw";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(inParamCCSessionId);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = screenParameters;
						string sURLQuery = "CCSessionId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSessionStep2_Edit.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "IcOz76lGiUaF70zBiTnCVw";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(inParamCCSessionId);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = screenParameters;
						Server.Transfer("CCSessionStep2_Edit.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvReOpenSession: VarsBag {
			public int resCreateOrUpdateCCSession_outParamId = 0;

			public lcvReOpenSession() {
			}
		}
		/// <summary>
		/// Action <code>CommandReOpenSession</code> that represents the Service Studio screen action
		///  <code>ReOpenSession</code> <p> Description: </p>
		/// </summary>
		private bool CommandReOpenSession(HeContext heContext) {
			CheckPermissions(heContext);
			lcvReOpenSession localVars = new lcvReOpenSession();
			try {
				ssCCSessionEditRecord.ssENCCSession.ssEndDate = BuiltInFunction.NullDate(); // CCSessionEdit.Record.CCSession.EndDate = NullDate
				// CreateOrUpdateCCSession
				ExtendedActions.CreateOrUpdateCCSession(heContext, ssCCSessionEditRecord.ChangedAttributes, ssCCSessionEditRecord, out localVars.resCreateOrUpdateCCSession_outParamId);
				// Query datasetGetCCSessionById
				{
					int datasetGetCCSessionById_maxRecords = 1;
					if (datasetGetCCSessionById_maxRecords < 1) datasetGetCCSessionById_maxRecords = 1;
					queryResGetCCSessionById_outParamList = FuncssPreparation.datasetGetCCSessionById(heContext, datasetGetCCSessionById_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionById_outParamCount, inParamCCSessionId
					);
				}
				// Refresh Widget (wtCCSessionEdit)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtCCSessionEdit"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDummy</code> that represents the Service Studio screen action
		///  <code>Dummy</code> <p> Description: </p>
		/// </summary>
		private bool CommandDummy(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvNewSession: VarsBag {
			public int resCreateOrUpdateCCSession_outParamId = 0;

			public lcvNewSession() {
			}
		}
		/// <summary>
		/// Action <code>CommandNewSession</code> that represents the Service Studio screen action
		///  <code>NewSession</code> <p> Description: </p>
		/// </summary>
		private bool CommandNewSession(HeContext heContext) {
			CheckPermissions(heContext);
			lcvNewSession localVars = new lcvNewSession();
			try {
				// New
				if ((inParamCCSessionId==BuiltInFunction.NullIdentifier())) {
					ssCCSessionEditRecord.ssENCCSession.ssClusterId = inParamClusterId; // CCSessionEdit.Record.CCSession.ClusterId = ClusterId
					ssCCSessionEditRecord.ssENCCSession.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // CCSessionEdit.Record.CCSession.CreatedBy = UserID
					ssCCSessionEditRecord.ssENCCSession.ssStartDate = BuiltInFunction.CurrDateTime(); // CCSessionEdit.Record.CCSession.StartDate = CurrDateTime

				}
				// CreateOrUpdateCCSession
				ExtendedActions.CreateOrUpdateCCSession(heContext, ssCCSessionEditRecord.ChangedAttributes, ssCCSessionEditRecord, out localVars.resCreateOrUpdateCCSession_outParamId);
				if ((inParamCCSessionId==BuiltInFunction.NullIdentifier())) {
					// Destination = CCSessionStep2_Edit

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "IcOz76lGiUaF70zBiTnCVw";
							ArrayList screenParameters = new ArrayList();
							screenParameters.Add(localVars.resCreateOrUpdateCCSession_outParamId);
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = screenParameters;
							string sURLQuery = "CCSessionId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(localVars.resCreateOrUpdateCCSession_outParamId));
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSessionStep2_Edit.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "IcOz76lGiUaF70zBiTnCVw";
							ArrayList screenParameters = new ArrayList();
							screenParameters.Add(localVars.resCreateOrUpdateCCSession_outParamId);
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = screenParameters;
							Server.Transfer("CCSessionStep2_Edit.aspx");
							return false;

						}
					}

				} else {
					// Query datasetGetCCSessionById
					{
						int datasetGetCCSessionById_maxRecords = 1;
						if (datasetGetCCSessionById_maxRecords < 1) datasetGetCCSessionById_maxRecords = 1;
						queryResGetCCSessionById_outParamList = FuncssPreparation.datasetGetCCSessionById(heContext, datasetGetCCSessionById_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionById_outParamCount, inParamCCSessionId
						);
					}
					// ExceptionFeedbackMessage2
					Actions.ActionFeedback_Message(heContext, "Session Info updated.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance80 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance80_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance53 Functions
		/// </summary>
		public void webBlck_WebBlockInstance53_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance57 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance57_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("KpCO1xHYc0eEHPpZk6Mmlg")).ssId;
		}
		/// <summary>
		/// wt_If73 Functions
		/// </summary>
		bool if_wt_If73_hasRun=false;
		bool if_wt_If73_evalResult;
		public bool if_wt_If73() {
			if (if_wt_If73_hasRun) {
				if_wt_If73_hasRun = false;
				return if_wt_If73_evalResult;
			}
			if_wt_If73_hasRun = true;
			if_wt_If73_evalResult = (inParamCCSessionId==BuiltInFunction.NullIdentifier());
			return if_wt_If73_evalResult;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance95 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance95_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Iqs32xXjXE+ICbLVRQVIzg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression88 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = DkzL09bgZkSD+9_MTZ1s+g) Expression: "New Case Conferencing
		///  Session for cluster " + GetClusterById.List.Current.Cluster.ClusterDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression88() {
			return ("New Case Conferencing Session for cluster " +queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssClusterDescription);
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance59 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance59_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Iqs32xXjXE+ICbLVRQVIzg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression78 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = xwdcsq7lSkStlNInjXop0w) Expression: "Case Conferencing Session
		///  for cluster " + GetClusterById.List.Current.Cluster.ClusterDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression78() {
			return ("Case Conferencing Session for cluster " +queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssClusterDescription);
		}
		/// <summary>
		/// wt_Container14 Functions
		/// </summary>
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container14_setInlineAttributes(sender, e);
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container14_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container100 Functions
		/// </summary>
		public void cnt_Container100_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container100_setInlineAttributes(sender, e);
		}
		public string cnt_Container100_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container100_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container100)
		/// </summary>
		/// <returns>The Visible State of wt_Container100</returns>
		public bool cnt_Container100_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container20 Functions
		/// </summary>
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container20_setInlineAttributes(sender, e);
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container20_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCCSessionEdit Functions
		/// </summary>
		public void wtCCSessionEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssCCSessionEditRecord = queryResGetCCSessionById_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wt_Image7 Functions
		/// </summary>

		/// <summary>
		/// Gets the URL of the image (wt_Image7)
		/// </summary>
		/// <returns>URL of the Image (wt_Image7)</returns>
		public string img_Image7_getURL() {
			string url = ("img/" +queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssIconFileName);
			url = url.Replace("&amp;", "&");
			return url; 
		}
		/// <summary>
		/// Gets the Height of the image (wt_Image7)
		/// </summary>
		/// <returns>Height of the Image (wt_Image7)</returns>
		public string img_Image7_actualHeight() {
			return HttpUtility.HtmlEncode("80");
		}
		/// <summary>
		/// wt_Container24 Functions
		/// </summary>
		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container24_setInlineAttributes(sender, e);
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container24_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container46 Functions
		/// </summary>
		public void cnt_Container46_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container46_setInlineAttributes(sender, e);
		}
		public string cnt_Container46_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "line-height:80px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container46_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container46)
		/// </summary>
		/// <returns>The Visible State of wt_Container46</returns>
		public bool cnt_Container46_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression85 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = LAbXzK4Aw0ieKercW1M1hQ) Expression:
		///  GetClusterById.List.Current.Cluster.ClusterDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression85() {
			return queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssClusterDescription;
		}
		/// <summary>
		/// wt_EditRecordRow51 Functions
		/// </summary>
		public void wt_EditRecordRow51_onDataBinding(object sender, System.EventArgs e) {
			wt_EditRecordRow51_setInlineAttributes(sender, e);
		}
		public string wt_EditRecordRow51_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((inParamCCSessionId==BuiltInFunction.NullIdentifier())) ?("display:none"):(""));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wtCCSession_StartDate Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtCCSession_StartDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssCCSessionEditRecord.ssENCCSession.ssStartDate)) {
				return ssCCSessionEditRecord.ssENCCSession.ssStartDate.ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtCCSession_StartDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateTimeValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssCCSessionEditRecord.ssENCCSession.ssStartDate)) {
						return "";
					}
					return ssCCSessionEditRecord.ssENCCSession.ssStartDate.ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtCCSession_StartDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssCCSessionEditRecord.ssENCCSession.ssStartDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssCCSessionEditRecord.ssENCCSession.ssStartDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateTime(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssCCSessionEditRecord.ssENCCSession.ssStartDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtCCSession_StartDate)
		/// </summary>
		/// <returns>The Visible State of wtCCSession_StartDate</returns>
		public bool inputwtCCSession_StartDate_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtCCSession_StartDate)
		/// </summary>
		/// <returns>The Enabled State of wtCCSession_StartDate</returns>
		public bool inputwtCCSession_StartDate_isEnabled() {
			return false; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtCCSession_StartDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtCCSession_StartDate</returns>
		public bool inputwtCCSession_StartDate_isMandatory() {
			return false;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance39 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance39_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
			widget.inParamInputWidgetId = this.FindControl("wtCCSession_StartDate").ClientID;
			widget.inParamMinYear = -1;
			widget.inParamMaxYear = -1;
			widget.inParamAlign = "Bl";
			widget.inParamSingleClick = true;
			widget.inParamShowWeekNumbers = false;
			widget.inParamUpdateOnCloseOnly = false;
			widget.inParamShowOthers = false;
			widget.inParamFirstDay = 0;
			widget.inParamShowTime = false;
			widget.inParamShow24HourFormat = true;
			widget.inParamReuseCalendarObject = false;
			widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
			widget.inParamDateFormat = "";
			widget.inParamSpecialDays = "";
			widget.inParamOnUpdate = "";
			widget.inParamFlatStyle = false;
			widget.inParamButtonWidgetId = "";
			widget.inParamYearStep = 2;
		}
		/// <summary>
		/// wt_EditRecordRow17 Functions
		/// </summary>
		public void wt_EditRecordRow17_onDataBinding(object sender, System.EventArgs e) {
			wt_EditRecordRow17_setInlineAttributes(sender, e);
		}
		public string wt_EditRecordRow17_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((ssCCSessionEditRecord.ssENCCSession.ssEndDate==BuiltInFunction.NullDate())) ?("display:none"):(""));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wtCCSession_EndDate Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtCCSession_EndDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssCCSessionEditRecord.ssENCCSession.ssEndDate)) {
				return ssCCSessionEditRecord.ssENCCSession.ssEndDate.ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtCCSession_EndDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateTimeValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssCCSessionEditRecord.ssENCCSession.ssEndDate)) {
						return "";
					}
					return ssCCSessionEditRecord.ssENCCSession.ssEndDate.ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtCCSession_EndDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssCCSessionEditRecord.ssENCCSession.ssEndDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssCCSessionEditRecord.ssENCCSession.ssEndDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateTime(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssCCSessionEditRecord.ssENCCSession.ssEndDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtCCSession_EndDate)
		/// </summary>
		/// <returns>The Visible State of wtCCSession_EndDate</returns>
		public bool inputwtCCSession_EndDate_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtCCSession_EndDate)
		/// </summary>
		/// <returns>The Enabled State of wtCCSession_EndDate</returns>
		public bool inputwtCCSession_EndDate_isEnabled() {
			return false; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtCCSession_EndDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtCCSession_EndDate</returns>
		public bool inputwtCCSession_EndDate_isMandatory() {
			return false;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance42 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance42_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
			widget.inParamInputWidgetId = this.FindControl("wtCCSession_EndDate").ClientID;
			widget.inParamMinYear = -1;
			widget.inParamMaxYear = -1;
			widget.inParamAlign = "Bl";
			widget.inParamSingleClick = true;
			widget.inParamShowWeekNumbers = false;
			widget.inParamUpdateOnCloseOnly = false;
			widget.inParamShowOthers = false;
			widget.inParamFirstDay = 0;
			widget.inParamShowTime = false;
			widget.inParamShow24HourFormat = true;
			widget.inParamReuseCalendarObject = false;
			widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
			widget.inParamDateFormat = "";
			widget.inParamSpecialDays = "";
			widget.inParamOnUpdate = "";
			widget.inParamFlatStyle = false;
			widget.inParamButtonWidgetId = "";
			widget.inParamYearStep = 2;
		}
		/// <summary>
		/// wtCCSession_Description Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtCCSession_Description_input_value() {
			if (("" !=ssCCSessionEditRecord.ssENCCSession.ssDescription)) {
				return ssCCSessionEditRecord.ssENCCSession.ssDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtCCSession_Description");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssCCSessionEditRecord.ssENCCSession.ssDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtCCSession_Description_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssCCSessionEditRecord.ssENCCSession.ssDescription = ""; 
				} else {
					ssCCSessionEditRecord.ssENCCSession.ssDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssCCSessionEditRecord.ssENCCSession.ssDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtCCSession_Description)
		/// </summary>
		/// <returns>The Visible State of wtCCSession_Description</returns>
		public bool inputwtCCSession_Description_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtCCSession_Description)
		/// </summary>
		/// <returns>The Enabled State of wtCCSession_Description</returns>
		public bool inputwtCCSession_Description_isEnabled() {
			return (ssCCSessionEditRecord.ssENCCSession.ssEndDate==BuiltInFunction.NullDate()); 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtCCSession_Description)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtCCSession_Description</returns>
		public bool inputwtCCSession_Description_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtCCSession_Notes Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtCCSession_Notes_input_value() {
			if (("" !=ssCCSessionEditRecord.ssENCCSession.ssNotes)) {
				return ssCCSessionEditRecord.ssENCCSession.ssNotes;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtCCSession_Notes");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssCCSessionEditRecord.ssENCCSession.ssNotes;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtCCSession_Notes_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssCCSessionEditRecord.ssENCCSession.ssNotes = ""; 
				} else {
					ssCCSessionEditRecord.ssENCCSession.ssNotes = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssCCSessionEditRecord.ssENCCSession.ssNotes = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtCCSession_Notes)
		/// </summary>
		/// <returns>The Visible State of wtCCSession_Notes</returns>
		public bool inputwtCCSession_Notes_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtCCSession_Notes)
		/// </summary>
		/// <returns>The Enabled State of wtCCSession_Notes</returns>
		public bool inputwtCCSession_Notes_isEnabled() {
			return (ssCCSessionEditRecord.ssENCCSession.ssEndDate==BuiltInFunction.NullDate()); 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtCCSession_Notes)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtCCSession_Notes</returns>
		public bool inputwtCCSession_Notes_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance27 Functions
		/// </summary>
		public void webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCaseConference.WBlkCCSessionAttachedDocuments widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkCCSessionAttachedDocuments) sender;
			widget.inParamCCSessionId = ssCCSessionEditRecord.ssENCCSession.ssId;
		}
		/// <summary>
		/// wt_Container67 Functions
		/// </summary>
		public void cnt_Container67_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container67_setInlineAttributes(sender, e);
		}
		public string cnt_Container67_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container67_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container67)
		/// </summary>
		/// <returns>The Visible State of wt_Container67</returns>
		public bool cnt_Container67_isVisible() {
			return true;
		}

		/// <summary>
		/// wtEndSession Functions
		/// </summary>
		public void lnkEndSession_onDataBinding(object sender, System.EventArgs e) {
			string msg = OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.JavaScriptEscString("This will end the Case Conferencing session, do you want to continue?");
			((OutSystems.HubEdition.WebWidgets.LinkButton) sender).ConfirmationMessage = msg;
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEndSession_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandEndSession(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEndSession)
		/// </summary>
		/// <returns>title of the Link (wtEndSession)</returns>
		public string
		lnkEndSession_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEndSession)
		/// </summary>
		/// <returns>The Visible State of wtEndSession</returns>
		public bool lnkEndSession_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtEndSession)
		/// </summary>
		/// <returns>The Enabled State of wtEndSession</returns>
		public bool lnkEndSession_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container50 Functions
		/// </summary>
		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container50_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container50_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container50
		/// </summary>
		public void cnt_Container50_AjaxClick(object sender, System.EventArgs e) {
			if (CommandContinueSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			return ((inParamCCSessionId!=BuiltInFunction.NullIdentifier()) && (ssCCSessionEditRecord.ssENCCSession.ssEndDate==BuiltInFunction.NullDate()));
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance56 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance56_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cmAzrjaBh0qFvctSMz9ufw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container68 Functions
		/// </summary>
		public void cnt_Container68_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container68_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container68_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container68_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container68
		/// </summary>
		public void cnt_Container68_AjaxClick(object sender, System.EventArgs e) {
			if (CommandNewSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container68)
		/// </summary>
		/// <returns>The Visible State of wt_Container68</returns>
		public bool cnt_Container68_isVisible() {
			return ((inParamCCSessionId!=BuiltInFunction.NullIdentifier()) && (ssCCSessionEditRecord.ssENCCSession.ssEndDate==BuiltInFunction.NullDate()));
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance71 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance71_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("KWHNbVoiY0i7rCt0vNrlbA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container104 Functions
		/// </summary>
		public void cnt_Container104_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container104_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container104_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container104_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container104
		/// </summary>
		public void cnt_Container104_AjaxClick(object sender, System.EventArgs e) {
			if (CommandNewSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container104)
		/// </summary>
		/// <returns>The Visible State of wt_Container104</returns>
		public bool cnt_Container104_isVisible() {
			return ((inParamCCSessionId==BuiltInFunction.NullIdentifier()) && (ssCCSessionEditRecord.ssENCCSession.ssEndDate==BuiltInFunction.NullDate()));
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance34 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance34_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cmAzrjaBh0qFvctSMz9ufw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onclick", (("document.getElementById(\'" +wtEndSession.ClientID) + "\').click();").ToString());
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return ((inParamCCSessionId!=BuiltInFunction.NullIdentifier()) && (ssCCSessionEditRecord.ssENCCSession.ssEndDate==BuiltInFunction.NullDate()));
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance28 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance28_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container102 Functions
		/// </summary>
		public void cnt_Container102_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container102_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container102_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container102_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container102
		/// </summary>
		public void cnt_Container102_AjaxClick(object sender, System.EventArgs e) {
			if (CommandReOpenSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container102)
		/// </summary>
		/// <returns>The Visible State of wt_Container102</returns>
		public bool cnt_Container102_isVisible() {
			return (ssCCSessionEditRecord.ssENCCSession.ssEndDate!=BuiltInFunction.NullDate());
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance19 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cmAzrjaBh0qFvctSMz9ufw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container89 Functions
		/// </summary>
		public void cnt_Container89_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container89_setInlineAttributes(sender, e);
		}
		public string cnt_Container89_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container89_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container89)
		/// </summary>
		/// <returns>The Visible State of wt_Container89</returns>
		public bool cnt_Container89_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCurriculumLead Functions
		/// </summary>
		public void cntCurriculumLead_onDataBinding(object sender, System.EventArgs e) {
			cntCurriculumLead_setInlineAttributes(sender, e);
		}
		public string cntCurriculumLead_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntCurriculumLead_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCurriculumLead)
		/// </summary>
		/// <returns>The Visible State of wtCurriculumLead</returns>
		public bool cntCurriculumLead_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container79 Functions
		/// </summary>
		public void cnt_Container79_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container79_setInlineAttributes(sender, e);
		}
		public string cnt_Container79_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container79_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container79)
		/// </summary>
		/// <returns>The Visible State of wt_Container79</returns>
		public bool cnt_Container79_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance3 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("SHGWXTeBF0KBH+qqjgz5eA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container75 Functions
		/// </summary>
		public void cnt_Container75_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container75_setInlineAttributes(sender, e);
		}
		public string cnt_Container75_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container75_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container75)
		/// </summary>
		/// <returns>The Visible State of wt_Container75</returns>
		public bool cnt_Container75_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container45 Functions
		/// </summary>
		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container45_setInlineAttributes(sender, e);
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container45_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container76 Functions
		/// </summary>
		public void cnt_Container76_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container76_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container76_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container76_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container76
		/// </summary>
		public void cnt_Container76_AjaxClick(object sender, System.EventArgs e) {
			if (CommandContinueSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container76)
		/// </summary>
		/// <returns>The Visible State of wt_Container76</returns>
		public bool cnt_Container76_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container82 Functions
		/// </summary>
		public void cnt_Container82_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container82_setInlineAttributes(sender, e);
		}
		public string cnt_Container82_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container82_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container82)
		/// </summary>
		/// <returns>The Visible State of wt_Container82</returns>
		public bool cnt_Container82_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression43 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 9HjGY6WKMEmbpy7wOb+CAQ) Expression: "Curriculum Leads"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression43() {
			return "Curriculum Leads";
		}
		/// <summary>
		/// wt_Container31 Functions
		/// </summary>
		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container31_setInlineAttributes(sender, e);
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container31_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link83 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link83_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandDummy(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link83)
		/// </summary>
		/// <returns>title of the Link (wt_Link83)</returns>
		public string
		lnk_Link83_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link83)
		/// </summary>
		/// <returns>The Visible State of wt_Link83</returns>
		public bool lnk_Link83_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link83)
		/// </summary>
		/// <returns>The Enabled State of wt_Link83</returns>
		public bool lnk_Link83_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_WebBlockInstance94 Functions
		/// </summary>
		public void webBlck_WebBlockInstance94_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
			widget.inParamIsSelected = false;
			widget.inParamPercentage = ((((queryResGetAllCurriculumLeads_outParamList.CurrentRec.ssSTString_2.ssValue== "0") || (queryResGetAllCurriculumLeads_outParamList.CurrentRec.ssSTString_2.ssValue== ""))) ?(0M):((((decimal) BuiltInFunction.TextToDecimal(queryResGetAllCurriculumLeads_outParamList.CurrentRec.ssSTString.ssValue) /
			(decimal) BuiltInFunction.TextToDecimal(queryResGetAllCurriculumLeads_outParamList.CurrentRec.ssSTString_2.ssValue)) *100M)));
			widget.inParamText = (((queryResGetAllCurriculumLeads_outParamList.CurrentRec.ssSTString.ssValue+ " of ") +queryResGetAllCurriculumLeads_outParamList.CurrentRec.ssSTString_2.ssValue) + " Curriculum Leads completed");
			widget.inParamVisibleCheckbox = false;
			widget.inParamEnabledCheckbox = true;
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance94
		/// </summary>
		public void webBlck_WebBlockInstance94_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandDummy(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container48 Functions
		/// </summary>
		public void cnt_Container48_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container48_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container48_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container48_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container48
		/// </summary>
		public void cnt_Container48_AjaxClick(object sender, System.EventArgs e) {
			if (CommandContinueSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container48)
		/// </summary>
		/// <returns>The Visible State of wt_Container48</returns>
		public bool cnt_Container48_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression84 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = SKLUxX2eXUCeCrpMBm9_Iw) Expression: "Team Leads"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression84() {
			return "Team Leads";
		}
		/// <summary>
		/// wt_Container63 Functions
		/// </summary>
		public void cnt_Container63_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container63_setInlineAttributes(sender, e);
		}
		public string cnt_Container63_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container63_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container63)
		/// </summary>
		/// <returns>The Visible State of wt_Container63</returns>
		public bool cnt_Container63_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance44 Functions
		/// </summary>
		public void webBlck_WebBlockInstance44_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
			widget.inParamIsSelected = false;
			widget.inParamPercentage = ((((queryResGetAllTeamsTotal_outParamList.CurrentRec.ssSTString_2.ssValue== "0") || (queryResGetAllTeamsTotal_outParamList.CurrentRec.ssSTString_2.ssValue== ""))) ?(0M):((((decimal) BuiltInFunction.TextToDecimal(queryResGetAllTeamsTotal_outParamList.CurrentRec.ssSTString.ssValue) /
			(decimal) BuiltInFunction.TextToDecimal(queryResGetAllTeamsTotal_outParamList.CurrentRec.ssSTString_2.ssValue)) *100M)));
			widget.inParamText = (((queryResGetAllTeamsTotal_outParamList.CurrentRec.ssSTString.ssValue+ " of ") +queryResGetAllTeamsTotal_outParamList.CurrentRec.ssSTString_2.ssValue) + " Team Leads completed");
			widget.inParamVisibleCheckbox = false;
			widget.inParamEnabledCheckbox = true;
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance44
		/// </summary>
		public void webBlck_WebBlockInstance44_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandDummy(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container91 Functions
		/// </summary>
		public void cnt_Container91_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container91_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container91_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container91_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container91
		/// </summary>
		public void cnt_Container91_AjaxClick(object sender, System.EventArgs e) {
			if (CommandContinueSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container91)
		/// </summary>
		/// <returns>The Visible State of wt_Container91</returns>
		public bool cnt_Container91_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container66 Functions
		/// </summary>
		public void cnt_Container66_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container66_setInlineAttributes(sender, e);
		}
		public string cnt_Container66_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container66_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container66)
		/// </summary>
		/// <returns>The Visible State of wt_Container66</returns>
		public bool cnt_Container66_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression77 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = e1kxsexqMUCOLLKqkcFKow) Expression: "Courses"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression77() {
			return "Courses";
		}
		/// <summary>
		/// wt_Container26 Functions
		/// </summary>
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container26_setInlineAttributes(sender, e);
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container26_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance30 Functions
		/// </summary>
		public void webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
			widget.inParamIsSelected = false;
			widget.inParamPercentage = ((((queryResGetTotalCourses_outParamList.CurrentRec.ssSTString_2.ssValue== "0") || (queryResGetTotalCourses_outParamList.CurrentRec.ssSTString_2.ssValue== ""))) ?(0M):((((decimal) BuiltInFunction.TextToDecimal(queryResGetTotalCourses_outParamList.CurrentRec.ssSTString.ssValue) /
			(decimal) BuiltInFunction.TextToDecimal(queryResGetTotalCourses_outParamList.CurrentRec.ssSTString_2.ssValue)) *100M)));
			widget.inParamText = (((queryResGetTotalCourses_outParamList.CurrentRec.ssSTString.ssValue+ " of ") +queryResGetTotalCourses_outParamList.CurrentRec.ssSTString_2.ssValue) + " Courses completed");
			widget.inParamVisibleCheckbox = false;
			widget.inParamEnabledCheckbox = true;
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance30
		/// </summary>
		public void webBlck_WebBlockInstance30_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandDummy(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container64 Functions
		/// </summary>
		public void cnt_Container64_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container64_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container64_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container64_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container64
		/// </summary>
		public void cnt_Container64_AjaxClick(object sender, System.EventArgs e) {
			if (CommandContinueSession(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container64)
		/// </summary>
		/// <returns>The Visible State of wt_Container64</returns>
		public bool cnt_Container64_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container38 Functions
		/// </summary>
		public void cnt_Container38_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container38_setInlineAttributes(sender, e);
		}
		public string cnt_Container38_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container38_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container38)
		/// </summary>
		/// <returns>The Visible State of wt_Container38</returns>
		public bool cnt_Container38_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression18 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = a4vEL8DjaUitKqSDkMrAGg) Expression: "Students"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression18() {
			return "Students";
		}
		/// <summary>
		/// wt_Container90 Functions
		/// </summary>
		public void cnt_Container90_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container90_setInlineAttributes(sender, e);
		}
		public string cnt_Container90_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container90_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container90)
		/// </summary>
		/// <returns>The Visible State of wt_Container90</returns>
		public bool cnt_Container90_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance86 Functions
		/// </summary>
		public void webBlck_WebBlockInstance86_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
			widget.inParamIsSelected = false;
			widget.inParamPercentage = ((((queryResGetStudents_outParamList.CurrentRec.ssSTString_2.ssValue== "0") || (queryResGetStudents_outParamList.CurrentRec.ssSTString_2.ssValue== ""))) ?(0M):((((decimal) BuiltInFunction.TextToDecimal(queryResGetStudents_outParamList.CurrentRec.ssSTString.ssValue) /
			(decimal) BuiltInFunction.TextToDecimal(queryResGetStudents_outParamList.CurrentRec.ssSTString_2.ssValue)) *100M)));
			widget.inParamText = (((queryResGetStudents_outParamList.CurrentRec.ssSTString.ssValue+ " out of ") +queryResGetStudents_outParamList.CurrentRec.ssSTString_2.ssValue) + " learners recently updated");
			widget.inParamVisibleCheckbox = false;
			widget.inParamEnabledCheckbox = true;
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance86
		/// </summary>
		public void webBlck_WebBlockInstance86_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandDummy(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandEndSession {
		}
		public static class FuncCommandContinueSession {
		}
		public static class FuncCommandReOpenSession {
		}
		public static class FuncCommandDummy {
		}
		public static class FuncCommandNewSession {
		}
		public static class FuncssPreparation {

			private static void QueryGetTotalCoursesReadDB(ref RCStringStringRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetTotalCourses" of Action "Preparation"
			/// </summary>
			public static RLStringStringRecordList QueryGetTotalCourses(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinSessionId, DateTime qpdaNulldate, int qpinGroupTypeId, string qpstEnrolementStatus) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinSessionId", DbType.Int32, qpinSessionId);
				sqlCmd.CreateParameter("@qpdaNulldate", DbType.DateTime, qpdaNulldate);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinGroupTypeId", DbType.Int32, qpinGroupTypeId);
				sqlCmd.CreateParameter("@qpstEnrolementStatus", DbType.String, qpstEnrolementStatus);
				string advSql = "SELECT    " +
				 "        (SELECT COUNT(*) FROM  {CCSessionCourse} WHERE  {CCSessionCourse}.[SESSIONID] = @qpinSessionId AND  {CCSessionCourse}.[ENDDATE] <> @qpdaNulldate ) as SessionTotal ,  " +
				 "        COUNT( {Group}.[ID]) as TOTAL  " +
				 "FROM  {Group}   " +
				 "WHERE  EXISTS (   " +
				 "                    SELECT  {Team}.[ID] FROM  {Team}  " +
				 "                    INNER JOIN  {CurriculumLead} ON  {CurriculumLead}.[ID] =  {Team}.[CURRICULUMLEAD] AND  {CurriculumLead}.[CLUSTER] = @qpstClusterId  " +
				 "                    WHERE  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "                )  " +
				 "AND  {Group}.[GROUPTYPEID] = @qpinGroupTypeId   " +
				 "AND EXISTS  " +
				 "(  " +
				 "    SELECT  {Student_Group}.[ID] FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus   " +
				 ")";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringStringRecordList outParamList = new RLStringStringRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetTotalCoursesReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[2];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringStringRecordList _tmp = new RLStringStringRecordList();
						_tmp.AlternateReadDBMethod = QueryGetTotalCoursesReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetTotalCourses.List");
							outParamList = (RLStringStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetTotalCourses.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetTotalCourses.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetTotalCourses in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT            (SELECT COUNT(*) FROM {CCSessionCourse} WHERE {CCSessionCourse}.[SessionId] = @SessionId AND {CCSessionCourse}.[EndDate] <> @Nulldate ) as SessionTotal ,          COUNT({Group}.[Id]) as TOTAL  FROM {Group}   WHERE  EXISTS (                       SELECT {Team}.[Id] FROM {Team}                      INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND {CurriculumLead}.[Cluster] = @ClusterId                      WHERE {Group}.[Team] = {Team}.[Id]                  )  AND {Group}.[GroupTypeId] = @GroupTypeId   AND EXISTS  (      SELECT {Student_Group}.[Id] FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus   )    ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetTotalCourses in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT            (SELECT COUNT(*) FROM {CCSessionCourse} WHERE {CCSessionCourse}.[SessionId] = @SessionId AND {CCSessionCourse}.[EndDate] <> @Nulldate ) as SessionTotal ,          COUNT({Group}.[Id]) as TOTAL  FROM {Group}   WHERE  EXISTS (                       SELECT {Team}.[Id] FROM {Team}                      INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND {CurriculumLead}.[Cluster] = @ClusterId                      WHERE {Group}.[Team] = {Team}.[Id]                  )  AND {Group}.[GroupTypeId] = @GroupTypeId   AND EXISTS  (      SELECT {Student_Group}.[Id] FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus   )    ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetTotalCourses in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT            (SELECT COUNT(*) FROM {CCSessionCourse} WHERE {CCSessionCourse}.[SessionId] = @SessionId AND {CCSessionCourse}.[EndDate] <> @Nulldate ) as SessionTotal ,          COUNT({Group}.[Id]) as TOTAL  FROM {Group}   WHERE  EXISTS (                       SELECT {Team}.[Id] FROM {Team}                      INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND {CurriculumLead}.[Cluster] = @ClusterId                      WHERE {Group}.[Team] = {Team}.[Id]                  )  AND {Group}.[GroupTypeId] = @GroupTypeId   AND EXISTS  (      SELECT {Student_Group}.[Id] FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus   )    ): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCCSessionById" of Action "Preparation"
			/// </summary>
			public static RLCCSessionRecordList datasetGetCCSessionById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query _IfVqxTjFUWi1XXWNo_vBQ Iterations: Never {-unbound-}
				// Refresh Query fYnEyt9feEe6QIzHESH9wQ Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSession.[ID] o1, ENCCSession.[DESCRIPTION] o2, ENCCSession.[NOTES] o3, ENCCSession.[CLUSTERID] o4, ENCCSession.[STARTDATE] o5, ENCCSession.[ENDDATE] o6, ENCCSession.[CREATEDBY] o7, NULL o8");
				fromBuilder.Append(" FROM {CCSession} ENCCSession");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSession.[ID] = @qpinP) AND (ENCCSession.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSession.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionRecordList outParamList = new RLCCSessionRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionRecordList _tmp = new RLCCSessionRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetCCSessionById.List");
						outParamList = (RLCCSessionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetCCSessionById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionRecordList _tmp = new RLCCSessionRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetCCSessionById.List");
							outParamList = (RLCCSessionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetCCSessionById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetClusterById" of Action "Preparation"
			/// </summary>
			public static RLClusterRecordList datasetGetClusterById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCluster.[ID] o1, NULL o2, ENCluster.[CLUSTERDESCRIPTION] o3, ENCluster.[ICONFILENAME] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {Cluster} ENCluster");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENCluster.[ID] = @qpstP) AND (ENCluster.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENCluster.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENCluster.[CLUSTERCODE] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLClusterRecordList outParamList = new RLClusterRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLClusterRecordList _tmp = new RLClusterRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetClusterById.List");
						outParamList = (RLClusterRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetClusterById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLClusterRecordList _tmp = new RLClusterRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetClusterById.List");
							outParamList = (RLClusterRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetClusterById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void QueryGetAllCurriculumLeadsReadDB(ref RCStringStringRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetAllCurriculumLeads" of Action "Preparation"
			/// </summary>
			public static RLStringStringRecordList QueryGetAllCurriculumLeads(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinSessionId, DateTime qpdaNullDate) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinSessionId", DbType.Int32, qpinSessionId);
				sqlCmd.CreateParameter("@qpdaNullDate", DbType.DateTime, qpdaNullDate);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				string advSql = "SELECT  " +
				 "    (SELECT COUNT(*) FROM  {CCSessionCurriculumLead} WHERE  {CCSessionCurriculumLead}.[SESSIONID] = @qpinSessionId AND  {CCSessionCurriculumLead}.[ENDDATE] <> @qpdaNullDate   ),  " +
				 "    COUNT( {CurriculumLead}.[ID]) AS Total  " +
				 "FROM  {CurriculumLead} WHERE  {CurriculumLead}.[CLUSTER] = @qpstClusterId";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringStringRecordList outParamList = new RLStringStringRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetAllCurriculumLeadsReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[2];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringStringRecordList _tmp = new RLStringStringRecordList();
						_tmp.AlternateReadDBMethod = QueryGetAllCurriculumLeadsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetAllCurriculumLeads.List");
							outParamList = (RLStringStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetAllCurriculumLeads.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetAllCurriculumLeads.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetAllCurriculumLeads in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT      (SELECT COUNT(*) FROM {CCSessionCurriculumLead} WHERE {CCSessionCurriculumLead}.[SessionId] = @SessionId AND {CCSessionCurriculumLead}.[EndDate] <> @NullDate   ),      COUNT({CurriculumLead}.[Id]) AS Total  FROM {CurriculumLead} WHERE {CurriculumLead}.[Cluster] = @ClusterId ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetAllCurriculumLeads in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT      (SELECT COUNT(*) FROM {CCSessionCurriculumLead} WHERE {CCSessionCurriculumLead}.[SessionId] = @SessionId AND {CCSessionCurriculumLead}.[EndDate] <> @NullDate   ),      COUNT({CurriculumLead}.[Id]) AS Total  FROM {CurriculumLead} WHERE {CurriculumLead}.[Cluster] = @ClusterId ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetAllCurriculumLeads in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT      (SELECT COUNT(*) FROM {CCSessionCurriculumLead} WHERE {CCSessionCurriculumLead}.[SessionId] = @SessionId AND {CCSessionCurriculumLead}.[EndDate] <> @NullDate   ),      COUNT({CurriculumLead}.[Id]) AS Total  FROM {CurriculumLead} WHERE {CurriculumLead}.[Cluster] = @ClusterId ): " + aqExcep.Message);
				}
			}

			private static void QueryGetStudentsReadDB(ref RCStringStringRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudents" of Action "Preparation"
			/// </summary>
			public static RLStringStringRecordList QueryGetStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinGroupTypeId, string qpstClusterId, string qpstEnrolementStatus, int qpinSession_MAX_RAG_Days, string qpstLogTypeId) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstLogTypeId", DbType.String, qpstLogTypeId);
				sqlCmd.CreateParameter("@qpinSession_MAX_RAG_Days", DbType.Int32, qpinSession_MAX_RAG_Days);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinGroupTypeId", DbType.Int32, qpinGroupTypeId);
				sqlCmd.CreateParameter("@qpstEnrolementStatus", DbType.String, qpstEnrolementStatus);
				string advSql = "SELECT   " +
				 "    (SELECT   " +
				 "            COUNT(distinct( {StudentLog}.[STUDENTREFERENCE]))   " +
				 "            FROM  {StudentLog}  " +
				 "            WHERE   " +
				 "                 {StudentLog}.[STUDENTLOGTYPE] = @qpstLogTypeId   " +
				 "                AND  {StudentLog}.[DATETIME] > dateadd(day,-@qpinSession_MAX_RAG_Days, getdate() )  " +
				 "                AND EXISTS (  SELECT         " +
				 "                                 {Team}.[ID] FROM  {Team}  " +
				 "                                INNER JOIN  {CurriculumLead} ON  {CurriculumLead}.[ID] =  {Team}.[CURRICULUMLEAD] AND  {CurriculumLead}.[CLUSTER] = @qpstClusterId   " +
				 "                                INNER JOIN  {Group} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "                                INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID]  " +
				 "                                WHERE  {Group}.[ID] =  {Student_Group}.[GROUPID] AND  {Group}.[GROUPTYPEID] = @qpinGroupTypeId AND  {Student_Group}.[STUDENTREFERENCE] =  {StudentLog}.[STUDENTREFERENCE] )  " +
				 "            ) as SessionTotal,  " +
				 "    COUNT(distinct( {Student_Group}.[STUDENTREFERENCE])) TOTAL  " +
				 "FROM  {Student_Group}  " +
				 "WHERE EXISTS   " +
				 "(  " +
				 "       SELECT         " +
				 "             {Team}.[ID] FROM  {Team}  " +
				 "            INNER JOIN  {CurriculumLead} ON  {CurriculumLead}.[ID] =  {Team}.[CURRICULUMLEAD] AND  {CurriculumLead}.[CLUSTER] = @qpstClusterId   " +
				 "            INNER JOIN  {Group} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "            WHERE  {Group}.[ID] =  {Student_Group}.[GROUPID] AND  {Group}.[GROUPTYPEID] = @qpinGroupTypeId   " +
				 ") AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringStringRecordList outParamList = new RLStringStringRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetStudentsReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[2];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringStringRecordList _tmp = new RLStringStringRecordList();
						_tmp.AlternateReadDBMethod = QueryGetStudentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetStudents.List");
							outParamList = (RLStringStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudents in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT       (SELECT               COUNT(distinct({StudentLog}.[StudentReference]))               FROM {StudentLog}              WHERE                   {StudentLog}.[StudentLogType] = @LogTypeId                   AND {StudentLog}.[DateTime] > dateadd(day,-@Session_MAX_RAG_Days, getdate() )                  AND EXISTS (  SELECT                                         {Team}.[Id] FROM {Team}                                  INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND {CurriculumLead}.[Cluster] = @ClusterId                                   INNER JOIN {Group} ON {Group}.[Team] = {Team}.[Id]                                  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id]                                  WHERE {Group}.[Id] = {Student_Group}.[GroupId] AND {Group}.[GroupTypeId] = @GroupTypeId AND {Student_Group}.[StudentReference] = {StudentLog}.[StudentReference] )              ) as SessionTotal,      COUNT(distinct({Student_Grou ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT       (SELECT               COUNT(distinct({StudentLog}.[StudentReference]))               FROM {StudentLog}              WHERE                   {StudentLog}.[StudentLogType] = @LogTypeId                   AND {StudentLog}.[DateTime] > dateadd(day,-@Session_MAX_RAG_Days, getdate() )                  AND EXISTS (  SELECT                                         {Team}.[Id] FROM {Team}                                  INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND {CurriculumLead}.[Cluster] = @ClusterId                                   INNER JOIN {Group} ON {Group}.[Team] = {Team}.[Id]                                  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id]                                  WHERE {Group}.[Id] = {Student_Group}.[GroupId] AND {Group}.[GroupTypeId] = @GroupTypeId AND {Student_Group}.[StudentReference] = {StudentLog}.[StudentReference] )              ) as SessionTotal,      COUNT(distinct({Student_Grou ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT       (SELECT               COUNT(distinct({StudentLog}.[StudentReference]))               FROM {StudentLog}              WHERE                   {StudentLog}.[StudentLogType] = @LogTypeId                   AND {StudentLog}.[DateTime] > dateadd(day,-@Session_MAX_RAG_Days, getdate() )                  AND EXISTS (  SELECT                                         {Team}.[Id] FROM {Team}                                  INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND {CurriculumLead}.[Cluster] = @ClusterId                                   INNER JOIN {Group} ON {Group}.[Team] = {Team}.[Id]                                  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id]                                  WHERE {Group}.[Id] = {Student_Group}.[GroupId] AND {Group}.[GroupTypeId] = @GroupTypeId AND {Student_Group}.[StudentReference] = {StudentLog}.[StudentReference] )              ) as SessionTotal,      COUNT(distinct({Student_Grou ...): " + aqExcep.Message);
				}
			}

			private static void QueryGetAllTeamsTotalReadDB(ref RCStringStringRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetAllTeamsTotal" of Action "Preparation"
			/// </summary>
			public static RLStringStringRecordList QueryGetAllTeamsTotal(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinSessionId, DateTime qpdaNullDate, string qpstEnrolementStatus) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinSessionId", DbType.Int32, qpinSessionId);
				sqlCmd.CreateParameter("@qpdaNullDate", DbType.DateTime, qpdaNullDate);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpstEnrolementStatus", DbType.String, qpstEnrolementStatus);
				string advSql = "SELECT   " +
				 "      (SELECT COUNT(*) FROM  {CCSessionTeam} WHERE  {CCSessionTeam}.[SESSIONID] = @qpinSessionId AND  {CCSessionTeam}.[ENDDATE] <> @qpdaNullDate ) ,  " +
				 "      COUNT( {Team}.[ID]) AS TOTAL  " +
				 "FROM   {Team}   " +
				 "INNER JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "WHERE  {CurriculumLead}.[CLUSTER] = @qpstClusterId  " +
				 "AND EXISTS (  " +
				 "        SELECT  {Student_Group}.[ID] FROM  {Student_Group} INNER JOIN  {Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID]  " +
				 "        WHERE  {Group}.[TEAM] =  {Team}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus    " +
				 ")";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringStringRecordList outParamList = new RLStringStringRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetAllTeamsTotalReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[2];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringStringRecordList _tmp = new RLStringStringRecordList();
						_tmp.AlternateReadDBMethod = QueryGetAllTeamsTotalReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_Edit.Preparation.GetAllTeamsTotal.List");
							outParamList = (RLStringStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetAllTeamsTotal.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_Edit.Preparation.GetAllTeamsTotal.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetAllTeamsTotal in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT         (SELECT COUNT(*) FROM {CCSessionTeam} WHERE {CCSessionTeam}.[SessionId] = @SessionId AND {CCSessionTeam}.[EndDate] <> @NullDate ) ,        COUNT({Team}.[Id]) AS TOTAL  FROM  {Team}   INNER JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE {CurriculumLead}.[Cluster] = @ClusterId  AND EXISTS (          SELECT {Student_Group}.[Id] FROM {Student_Group} INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]          WHERE {Group}.[Team] = {Team}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus    )): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetAllTeamsTotal in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT         (SELECT COUNT(*) FROM {CCSessionTeam} WHERE {CCSessionTeam}.[SessionId] = @SessionId AND {CCSessionTeam}.[EndDate] <> @NullDate ) ,        COUNT({Team}.[Id]) AS TOTAL  FROM  {Team}   INNER JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE {CurriculumLead}.[Cluster] = @ClusterId  AND EXISTS (          SELECT {Student_Group}.[Id] FROM {Student_Group} INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]          WHERE {Group}.[Team] = {Team}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus    )): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetAllTeamsTotal in Preparation in CCSession_Edit in CaseConference in CaseConferencing (SELECT         (SELECT COUNT(*) FROM {CCSessionTeam} WHERE {CCSessionTeam}.[SessionId] = @SessionId AND {CCSessionTeam}.[EndDate] <> @NullDate ) ,        COUNT({Team}.[Id]) AS TOTAL  FROM  {Team}   INNER JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE {CurriculumLead}.[Cluster] = @ClusterId  AND EXISTS (          SELECT {Student_Group}.[Id] FROM {Student_Group} INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]          WHERE {Group}.[Team] = {Team}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus    )): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = (((queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssId==BuiltInFunction.NullIdentifier())) ?("New CCSession"):("Edit CCSession")); Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSession_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSession_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetClusterById_outParamList.

			int tmpcurrentrownumberqueryResGetClusterById_outParamList = queryResGetClusterById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetClusterById_outParamList = queryResGetClusterById_outParamList.Eof;
			ArrayList storequeryResGetClusterById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetClusterById_outParamList to the storequeryResGetClusterById_outParamList
			if (!queryResGetClusterById_outParamList.Empty) {
				try {
					queryResGetClusterById_outParamList.StartIteration();

					while (!queryResGetClusterById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetClusterById_outParamList = new ArrayList();
						tmpFieldsqueryResGetClusterById_outParamList.Add(queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssClusterDescription == "" ?(object) null: queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssClusterDescription);
						tmpFieldsqueryResGetClusterById_outParamList.Add(queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssIconFileName == "" ?(object) null: queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ssIconFileName);
						tmpFieldsqueryResGetClusterById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetClusterById_outParamList.CurrentRec.ssENCluster.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, true, false, false, false
						}
						))));
						tmpFieldsqueryResGetClusterById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetClusterById_outParamList.CurrentRec.ssENCluster.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, false, true, true, true
						}
						))));
						storequeryResGetClusterById_outParamList.Add(tmpFieldsqueryResGetClusterById_outParamList);
						queryResGetClusterById_outParamList.Advance();
					}
				} finally {
					queryResGetClusterById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetClusterById_outParamList", storequeryResGetClusterById_outParamList, null);

			#endregion


			#region store queryResGetClusterById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetClusterById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetClusterById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetClusterById_outParamList_eof", tmpeofqueryResGetClusterById_outParamList, false);
			queryResGetClusterById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetClusterById_outParamList, tmpeofqueryResGetClusterById_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamCCSessionId", inParamCCSessionId, 0);
			ViewStateAttributes.SetInViewState("inParamClusterId", inParamClusterId, "");
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ssId", ssCCSessionEditRecord.ssENCCSession.ssId, 0);
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ssDescription", ssCCSessionEditRecord.ssENCCSession.ssDescription, "");
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ssNotes", ssCCSessionEditRecord.ssENCCSession.ssNotes, "");
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ssClusterId", ssCCSessionEditRecord.ssENCCSession.ssClusterId, "");
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ssStartDate", ssCCSessionEditRecord.ssENCCSession.ssStartDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ssEndDate", ssCCSessionEditRecord.ssENCCSession.ssEndDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ssCreatedBy", ssCCSessionEditRecord.ssENCCSession.ssCreatedBy, 0);
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssCCSessionEditRecord.ssENCCSession.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtCCSessionEdit_record_ssENCCSession_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssCCSessionEditRecord.ssENCCSession.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtCCSession_StartDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtCCSession_StartDate")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtCCSession_EndDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtCCSession_EndDate")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtCCSession_Description_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtCCSession_Description")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtCCSession_Notes_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtCCSession_Notes")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetClusterById_outParamList.

				// Read the needed fields of queryResGetClusterById_outParamList from storequeryResGetClusterById_outParamList
				queryResGetClusterById_outParamList = new RLClusterRecordList();
				ArrayList storequeryResGetClusterById_outParamList;
				storequeryResGetClusterById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetClusterById_outParamList", null);
				if (storequeryResGetClusterById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetClusterById_outParamList in storequeryResGetClusterById_outParamList) {
						if (tmpFieldsqueryResGetClusterById_outParamList != null) {
							// Aux current record variable
							RCClusterRecord tmpAuxCurrentRecordqueryResGetClusterById_outParamList = new RCClusterRecord(null);
							tmpAuxCurrentRecordqueryResGetClusterById_outParamList.ssENCluster.ssClusterDescription = (string) (tmpFieldsqueryResGetClusterById_outParamList[0] == null ? "": tmpFieldsqueryResGetClusterById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetClusterById_outParamList.ssENCluster.ssIconFileName = (string) (tmpFieldsqueryResGetClusterById_outParamList[1] == null ? "": tmpFieldsqueryResGetClusterById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetClusterById_outParamList.ssENCluster.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetClusterById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetClusterById_outParamList.ssENCluster.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetClusterById_outParamList[3]);

							queryResGetClusterById_outParamList.Append(tmpAuxCurrentRecordqueryResGetClusterById_outParamList);
						}
					}
				}
				queryResGetClusterById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetClusterById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetClusterById_outParamList;
				tmpcurrentrownumberqueryResGetClusterById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetClusterById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetClusterById_outParamList;
				tmpeofqueryResGetClusterById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetClusterById_outParamList_eof", false);
				queryResGetClusterById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetClusterById_outParamList, tmpeofqueryResGetClusterById_outParamList);

				#endregion

				inParamCCSessionId = (int) ViewStateAttributes.GetFromViewState("inParamCCSessionId", 0);
				inParamClusterId = (string) ViewStateAttributes.GetFromViewState("inParamClusterId", "");
				ssCCSessionEditRecord.ssENCCSession.ssId = (int) ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ssId", 0);
				ssCCSessionEditRecord.ssENCCSession.ssDescription = (string) ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ssDescription", "");
				ssCCSessionEditRecord.ssENCCSession.ssNotes = (string) ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ssNotes", "");
				ssCCSessionEditRecord.ssENCCSession.ssClusterId = (string) ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ssClusterId", "");
				ssCCSessionEditRecord.ssENCCSession.ssStartDate = (DateTime) ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ssStartDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssCCSessionEditRecord.ssENCCSession.ssEndDate = (DateTime) ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ssEndDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssCCSessionEditRecord.ssENCCSession.ssCreatedBy = (int) ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ssCreatedBy", 0);
				ssCCSessionEditRecord.ssENCCSession.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_ChangedAttributes", null));
				ssCCSessionEditRecord.ssENCCSession.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtCCSessionEdit_record_ssENCCSession_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtCCSession_StartDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtCCSession_StartDate_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtCCSession_EndDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtCCSession_EndDate_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtCCSession_Description")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtCCSession_Description_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtCCSession_Notes")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtCCSession_Notes_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtCCSession_StartDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateTimeValidate, validate);
			ValidationUtils.ValidateInput(this, "wtCCSession_EndDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateTimeValidate, validate);
			ValidationUtils.ValidateInput(this, "wtCCSession_Description", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtCCSession_Notes", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
