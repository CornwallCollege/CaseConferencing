/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCommon {

	public class ScrnPopup_AttachDocument: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_AttachDocument(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamDocumentType. Description:
		/// </summary>
		public int inParamDocumentType = 0;
		/// <summary>
		/// Screen Input Parameter inParamEnableDocumentViewingRestrictions. Description:
		/// </summary>
		public bool inParamEnableDocumentViewingRestrictions = false;
		/// <summary>
		/// Screen Input Parameter inParamDocumentViewingRestrictionType. Description: "User" by individual
		///  users, "Role" by user role membership
		/// </summary>
		public string inParamDocumentViewingRestrictionType = "";
		/// <summary>
		/// Variable <code>varLcDocument</code> that represents the Service Studio local variable
		///  <code>Document</code> <p>Description: </p>
		/// </summary>
		RCDocumentsRecord varLcDocument = new RCDocumentsRecord(null);

		/// <summary>
		/// Variable <code>varLcSelectedUserID</code> that represents the Service Studio local variable
		///  <code>SelectedUserID</code> <p>Description: </p>
		/// </summary>
		int varLcSelectedUserID = 0;

		/// <summary>
		/// Variable <code>varLcUserList</code> that represents the Service Studio local variable
		///  <code>UserList</code> <p>Description: </p>
		/// </summary>
		RLUserRecordList varLcUserList = new RLUserRecordList();

		/// <summary>
		/// Variable <code>varLcUserDocumentPermissions</code> that represents the Service Studio local
		///  variable <code>UserDocumentPermissions</code> <p>Description: </p>
		/// </summary>
		RCUserDocumentPermissionsRecord varLcUserDocumentPermissions = new RCUserDocumentPermissionsRecord(null);

		/// <summary>
		/// Variable <code>varLcSelectedRoleID</code> that represents the Service Studio local variable
		///  <code>SelectedRoleID</code> <p>Description: </p>
		/// </summary>
		int varLcSelectedRoleID = 0;

		/// <summary>
		/// Variable <code>varLcRoleList</code> that represents the Service Studio local variable
		///  <code>RoleList</code> <p>Description: </p>
		/// </summary>
		RLRoleRecordList varLcRoleList = new RLRoleRecordList();

		/// <summary>
		/// Variable <code>varLcRoleDocumentPermissions</code> that represents the Service Studio local
		///  variable <code>RoleDocumentPermissions</code> <p>Description: </p>
		/// </summary>
		RCRoleDocumentPermissionsRecord varLcRoleDocumentPermissions = new RCRoleDocumentPermissionsRecord(null);

		/// <summary>
		/// Variable <code>varLcHasSelectedCaseConferencingUser</code> that represents the Service Studio local
		///  variable <code>HasSelectedCaseConferencingUser</code> <p>Description: </p>
		/// </summary>
		bool varLcHasSelectedCaseConferencingUser = false;

		/// <summary>
		/// Variable wt_WebBlockInstance2
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		/// <summary>
		/// Input File name widget (wtFileToUpload)
		/// </summary>
		protected HtmlInputFile wtFileToUpload;
		/// <summary>
		/// Input File name Runtime Properties (wtFileToUpload)
		/// </summary>
		private InputFilenameRtWidget _Rt_wtFileToUpload;
		protected InputFilenameRtWidget Rt_wtFileToUpload {
			get {
				if (_Rt_wtFileToUpload == null) {
					_Rt_wtFileToUpload = new InputFilenameRtWidget(wtFileToUpload); 
				}
				return _Rt_wtFileToUpload; 
			}
		}
		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17T;

		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17F;
		/// <summary>
		/// Variable "True" if the Widget wt_If32
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If32T;

		/// <summary>
		/// Variable "True" if the Widget wt_If32
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If32F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSelectedUserValidatorRequired;
		protected SelectRtWidget Rt_wtSelectedUser = new SelectRtWidget();
		RLUser_RoleUserRoleRecordList Rt_wtSelectedUser_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtSelectedUsers;
		private RLUserRecordList _ssUserList2List = new RLUserRecordList();
		public RLUserRecordList ssUserList2List {
			get {
				return _ssUserList2List; 
			}
			set {
				_ssUserList2List = value;
				wtUserList2.DataSource = value;
				ssUserList2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtUserList2;
		public ArrayList wtUserList2_storage = new ArrayList();
		protected bool ssUserList2List_notUsedYet = true;
		protected bool ssUserList2ListDoDataBind;
		protected bool ssUserList2ListDataBound;
		/// <summary>
		/// Variable (wt_Link7) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSelectedRoleValidatorRequired;
		protected SelectRtWidget Rt_wtSelectedRole = new SelectRtWidget();
		RLRoleEspaceRecordList Rt_wtSelectedRole_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtSelectedRoles;
		private RLRoleRecordList _ssRoleList2List = new RLRoleRecordList();
		public RLRoleRecordList ssRoleList2List {
			get {
				return _ssRoleList2List; 
			}
			set {
				_ssRoleList2List = value;
				wtRoleList2.DataSource = value;
				ssRoleList2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtRoleList2;
		public ArrayList wtRoleList2_storage = new ArrayList();
		protected bool ssRoleList2List_notUsedYet = true;
		protected bool ssRoleList2ListDoDataBind;
		protected bool ssRoleList2ListDataBound;
		/// <summary>
		/// Variable (wt_Link18) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link18;
		protected OutSystems.HubEdition.WebWidgets.Container wtAllUsersWarning;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container40;
		/// <summary>
		/// Variable (wt_Button22) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button22;
		/// <summary>
		/// Variable (wt_Button30) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button30;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("KPsYVW0oKEWVmn6bUHCROA", "Popup_AttachDocument");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "KPsYVW0oKEWVmn6bUHCROA", "Popup_AttachDocument");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "KPsYVW0oKEWVmn6bUHCROA", "Popup_AttachDocument");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "KPsYVW0oKEWVmn6bUHCROA", "Popup_AttachDocument");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "KPsYVW0oKEWVmn6bUHCROA", "Popup_AttachDocument");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_AttachDocument() {
		}


		RLRoleEspaceRecordList queryResGetRoles_outParamList = new RLRoleEspaceRecordList();
		int queryResGetRoles_outParamCount = 0;
		RLUserRecordList queryResGetUserById_outParamList = new RLUserRecordList();
		int queryResGetUserById_outParamCount = 0;
		RLUser_RoleUserRoleRecordList queryResGetUsers_outParamList = new RLUser_RoleUserRoleRecordList();
		int queryResGetUsers_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			if (inParamEnableDocumentViewingRestrictions) {
				// Query datasetGetUsers
				int datasetGetUsers_maxRecords = 0;
				queryResGetUsers_outParamList = FuncssPreparation.datasetGetUsers(heContext, datasetGetUsers_maxRecords, IterationMultiplicity.Multiple, out queryResGetUsers_outParamCount);
				// Query datasetGetUserById
				int datasetGetUserById_maxRecords = 0;
				queryResGetUserById_outParamList = FuncssPreparation.datasetGetUserById(heContext, datasetGetUserById_maxRecords, IterationMultiplicity.Never, out queryResGetUserById_outParamCount, ((int) Global.App.OsContext.Session["UserID"])
				);
				// ListAppend2
				ExtendedActions.ListAppend(heContext, varLcUserList, queryResGetUserById_outParamList.CurrentRec);
				// Query datasetGetRoles
				int datasetGetRoles_maxRecords = 0;
				queryResGetRoles_outParamList = FuncssPreparation.datasetGetRoles(heContext, datasetGetRoles_maxRecords, IterationMultiplicity.Multiple, out queryResGetRoles_outParamCount);

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamDocumentType!=0)) {
				parameters.Add(new Pair<string, string>("DocumentType", HttpUtility.UrlEncode(Convert.ToString(inParamDocumentType), Request.ContentEncoding)));
			}
			if ((inParamEnableDocumentViewingRestrictions!=false)) {
				parameters.Add(new Pair<string, string>("EnableDocumentViewingRestrictions", HttpUtility.UrlEncode(Convert.ToString(inParamEnableDocumentViewingRestrictions), Request.ContentEncoding)));
			}
			if ((inParamDocumentViewingRestrictionType!= "")) {
				parameters.Add(new Pair<string, string>("DocumentViewingRestrictionType", HttpUtility.UrlEncode(inParamDocumentViewingRestrictionType, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_AttachDocument", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_AttachDocument", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance2 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance2");
			wt_Container24 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container24");
			wt_Container20 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container20");
			wtFileToUpload = (OutSystems.HubEdition.WebWidgets.InputFile) FindControl("wtFileToUpload");
			wt_Container36 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container36");
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			wt_Container31 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container31");
			wtSelectedUsers = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtSelectedUsers");
			wtUserList2 = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtUserList2");
			wtUserList2.StartIndexExpression = () => 0;
			wtUserList2.LineCountExpression = () => 50;
			wtUserList2.EmptyMessageExpression = () => "No items to show...";
			if (this.wt_Link7 != null) {
				this.wt_Link7.Click += new System.EventHandler(this.wt_Link7_Click);
			}
			wt_Container19 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container19");
			wt_Container27 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container27");
			wt_Container1 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container1");
			wtSelectedRoles = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtSelectedRoles");
			wtRoleList2 = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtRoleList2");
			wtRoleList2.StartIndexExpression = () => 0;
			wtRoleList2.LineCountExpression = () => 50;
			wtRoleList2.EmptyMessageExpression = () => "No items to show...";
			if (this.wt_Link18 != null) {
				this.wt_Link18.Click += new System.EventHandler(this.wt_Link18_Click);
			}
			wtAllUsersWarning = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAllUsersWarning");
			wt_Container33 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container33");
			wt_Container40 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container40");
			wt_Button22 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button22");
			if (this.wt_Button22 != null) {
				this.wt_Button22.Click += new System.EventHandler(this.wt_Button22_Click);
			}
			wt_Button30 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button30");
			if (this.wt_Button30 != null) {
				this.wt_Button30.Click += new System.EventHandler(this.wt_Button30_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "RichWidgets_wt_WebBlockInstance12") {
				return wt_WebBlockInstance2.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance12");
			}
			if (id == "wt_Text39") {
				return wt_WebBlockInstance2.wtTitle.FindControl("wt_Text39");
			}
			if (id == "wt_Container24") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container24");
			}
			if (id == "wt_Container20") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container20");
			}
			if (id == "wtFileToUpload") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtFileToUpload");
			}
			if (id == "wt_If17") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_If17");
			}
			if (id == "wt_If17T") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_If17T");
			}
			if (id == "wt_If32") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_If32");
			}
			if (id == "wt_If32T") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_If32T");
			}
			if (id == "wt_Container36") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container36");
			}
			if (id == "wt_Container11") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container11");
			}
			if (id == "wt_Text6") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Text6");
			}
			if (id == "wt_Container31") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container31");
			}
			if (id == "wtSelectedUser") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtSelectedUser");
			}
			if (id == "wtSelectedUsers") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtSelectedUsers");
			}
			if (id == "wtUserList2") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtUserList2");
			}
			if (id == "wt_If32F") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_If32F");
			}
			if (id == "wt_Container19") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container19");
			}
			if (id == "wt_Container27") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container27");
			}
			if (id == "wt_Text28") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Text28");
			}
			if (id == "wt_Container1") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container1");
			}
			if (id == "wtSelectedRole") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtSelectedRole");
			}
			if (id == "wtSelectedRoles") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtSelectedRoles");
			}
			if (id == "wtRoleList2") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtRoleList2");
			}
			if (id == "wtAllUsersWarning") {
				return wt_WebBlockInstance2.wtContent.FindControl("wtAllUsersWarning");
			}
			if (id == "wt_Text4") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Text4");
			}
			if (id == "wt_If17F") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_If17F");
			}
			if (id == "wt_Container33") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container33");
			}
			if (id == "wt_InlineExpression3") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_InlineExpression3");
			}
			if (id == "wt_Container40") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Container40");
			}
			if (id == "wt_Button22") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Button22");
			}
			if (id == "wt_Button30") {
				return wt_WebBlockInstance2.wtContent.FindControl("wt_Button30");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_AttachDocument"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamDocumentType = (int) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamEnableDocumentViewingRestrictions = (bool) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamDocumentViewingRestrictionType = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_AttachDocument"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["DocumentType"] != null) {
						inParamDocumentType = Convert.ToInt32(Request.QueryString["DocumentType"]);
					}
					if (Request.QueryString["EnableDocumentViewingRestrictions"] != null) {
						inParamEnableDocumentViewingRestrictions = (Request.QueryString["EnableDocumentViewingRestrictions"]).ToLowerInvariant() == "true";
					}
					if (Request.QueryString["DocumentViewingRestrictionType"] != null) {
						inParamDocumentViewingRestrictionType = Request.QueryString["DocumentViewingRestrictionType"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["DocumentType"] != null) {
						inParamDocumentType = Convert.ToInt32(Request.Form["DocumentType"]);
					}
					if (Request.Form["EnableDocumentViewingRestrictions"] != null) {
						inParamEnableDocumentViewingRestrictions = (Request.Form["EnableDocumentViewingRestrictions"]).ToLowerInvariant() == "true";
					}
					if (Request.Form["DocumentViewingRestrictionType"] != null) {
						inParamDocumentViewingRestrictionType = Request.Form["DocumentViewingRestrictionType"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssUserList2ListDoDataBind = true;
				ssRoleList2ListDoDataBind = true;
				Title = "Popup AttachDocument"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_AttachDocument", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button22 = wt_Button22 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button22");
			} catch {}
			string jsString = (wt_Button22 != null) ? "return OsEnterKey('" +wt_Button22.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCommon.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotPLA("PLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("KPsYVW0oKEWVmn6bUHCROA"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvOk: VarsBag {
			public int resCreateOrUpdateDocuments_outParamId = 0;

			public int resCreateRoleDocumentPermissions_outParamId = 0;

			public int resCreateUserDocumentPermissions_outParamId = 0;

			public lcvOk() {
			}
		}
		/// <summary>
		/// Action <code>CommandOk</code> that represents the Service Studio screen action <code>Ok</code> <p>
		///  Description: </p>
		/// </summary>
		private bool CommandOk(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOk localVars = new lcvOk();
			try {
				varLcDocument.ssENDocuments.ssType = Rt_wtFileToUpload.Type; // Document.Documents.Type = FileToUpload.Type
				varLcDocument.ssENDocuments.ssDocumentName = Rt_wtFileToUpload.Filename; // Document.Documents.DocumentName = FileToUpload.Filename
				varLcDocument.ssENDocuments.ssDocumentData = Rt_wtFileToUpload.Content; // Document.Documents.DocumentData = FileToUpload.Content
				varLcDocument.ssENDocuments.ssDocumentType = inParamDocumentType; // Document.Documents.DocumentType = DocumentType
				varLcDocument.ssENDocuments.ssDocViewingRestrictedByUser = inParamEnableDocumentViewingRestrictions; // Document.Documents.DocViewingRestrictedByUser = EnableDocumentViewingRestrictions
				// CreateOrUpdateDocuments
				ExtendedActions.CreateOrUpdateDocuments(heContext, varLcDocument.ChangedAttributes, varLcDocument, out localVars.resCreateOrUpdateDocuments_outParamId);
				if (inParamEnableDocumentViewingRestrictions) {
					if ((inParamDocumentViewingRestrictionType== "User")) {
						// Foreach UserList
						varLcUserList.StartIteration();
						try {
							while (!varLcUserList.Eof) {
								varLcUserDocumentPermissions.ssENUserDocumentPermissions.ssDocumentId = localVars.resCreateOrUpdateDocuments_outParamId; // UserDocumentPermissions.UserDocumentPermissions.DocumentId = CreateOrUpdateDocuments.Id
								varLcUserDocumentPermissions.ssENUserDocumentPermissions.ssUserId = varLcUserList.CurrentRec.ssENUser.ssId; // UserDocumentPermissions.UserDocumentPermissions.UserId = UserList.Current.User.Id
								// CreateUserDocumentPermissions
								ExtendedActions.CreateUserDocumentPermissions(heContext, varLcUserDocumentPermissions, out localVars.resCreateUserDocumentPermissions_outParamId);
								varLcUserList.Advance();
							}
						} finally {
							varLcUserList.EndIteration();
						}

					} else {
						// Foreach RoleList
						varLcRoleList.StartIteration();
						try {
							while (!varLcRoleList.Eof) {
								varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.ssDocumentID = localVars.resCreateOrUpdateDocuments_outParamId; // RoleDocumentPermissions.RoleDocumentPermissions.DocumentID = CreateOrUpdateDocuments.Id
								varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.ssRoleID = varLcRoleList.CurrentRec.ssENRole.ssId; // RoleDocumentPermissions.RoleDocumentPermissions.RoleID = RoleList.Current.Role.Id
								// CreateRoleDocumentPermissions
								ExtendedActions.CreateRoleDocumentPermissions(heContext, varLcRoleDocumentPermissions, out localVars.resCreateRoleDocumentPermissions_outParamId);
								varLcRoleList.Advance();
							}
						} finally {
							varLcRoleList.EndIteration();
						}

					}

				}
				// Popup_Editor_Notify
				Actions.ActionPopup_Editor_Notify(heContext, Convert.ToString(localVars.resCreateOrUpdateDocuments_outParamId));
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandRemoveUser</code> that represents the Service Studio screen action
		///  <code>RemoveUser</code> <p> Description: </p>
		/// </summary>
		private bool CommandRemoveUser(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// ListRemove
				ExtendedActions.ListRemove(heContext, varLcRoleList, varLcRoleList.CurrentRowNumber);
				// Refresh Widget (wtSelectedRoles)
				ssRoleList2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtSelectedRoles, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandRemoveRole</code> that represents the Service Studio screen action
		///  <code>RemoveRole</code> <p> Description: </p>
		/// </summary>
		private bool CommandRemoveRole(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((varLcRoleList.CurrentRec.ssENRole.ssName== "CaseConferencingUser")) {
					varLcHasSelectedCaseConferencingUser = false; // HasSelectedCaseConferencingUser = False
					// Refresh Widget (wtAllUsersWarning)
					((OSPageViewState) Page).AjaxRefresh(wtAllUsersWarning, "None", StoreViewState);

				}
				// ListRemove
				ExtendedActions.ListRemove(heContext, varLcRoleList, varLcRoleList.CurrentRowNumber);
				// Refresh Widget (wtSelectedRoles)
				ssRoleList2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtSelectedRoles, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnRoleChange: VarsBag {
			public RLRoleRecordList queryResGetRoleByID_outParamList = new RLRoleRecordList();
			public int queryResGetRoleByID_outParamCount = 0;

			public lcvOnRoleChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnRoleChange</code> that represents the Service Studio screen action
		///  <code>OnRoleChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnRoleChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnRoleChange localVars = new lcvOnRoleChange();
			try {
				if ((varLcSelectedRoleID!=BuiltInFunction.NullIdentifier())) {
					// Query datasetGetRoleByID
					int datasetGetRoleByID_maxRecords = 0;
					localVars.queryResGetRoleByID_outParamList = FuncCommandOnRoleChange.datasetGetRoleByID(heContext, datasetGetRoleByID_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetRoleByID_outParamCount, varLcSelectedRoleID
					);
					if ((localVars.queryResGetRoleByID_outParamList.CurrentRec.ssENRole.ssName== "CaseConferencingUser")) {
						varLcHasSelectedCaseConferencingUser = true; // HasSelectedCaseConferencingUser = True
						// Refresh Widget (wtAllUsersWarning)
						((OSPageViewState) Page).AjaxRefresh(wtAllUsersWarning, "None", StoreViewState);

					}
					// ListAppend
					ExtendedActions.ListAppend(heContext, varLcRoleList, localVars.queryResGetRoleByID_outParamList.CurrentRec);
					// Refresh Widget (wtSelectedRoles)
					ssRoleList2ListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtSelectedRoles, "None", StoreViewState);
					// Update Screen
					return true;

				} else {
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnUserChange: VarsBag {
			public RLUserRecordList queryResGetUsersByID_outParamList = new RLUserRecordList();
			public int queryResGetUsersByID_outParamCount = 0;

			public lcvOnUserChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnUserChange</code> that represents the Service Studio screen action
		///  <code>OnUserChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnUserChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnUserChange localVars = new lcvOnUserChange();
			try {
				if ((varLcSelectedUserID!=BuiltInFunction.NullIdentifier())) {
					// Query datasetGetUsersByID
					int datasetGetUsersByID_maxRecords = 0;
					localVars.queryResGetUsersByID_outParamList = FuncCommandOnUserChange.datasetGetUsersByID(heContext, datasetGetUsersByID_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetUsersByID_outParamCount, varLcSelectedUserID
					);
					// ListAppend
					ExtendedActions.ListAppend(heContext, varLcUserList, localVars.queryResGetUsersByID_outParamList.CurrentRec);
					// Refresh Widget (wtSelectedUsers)
					ssUserList2ListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtSelectedUsers, "None", StoreViewState);
					// Update Screen
					return true;

				} else {
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance2 Functions
		/// </summary>
		public void webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 320;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance12 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance12_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("mTZbXFLt4E+ZjpUMIGn0wQ")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container24 Functions
		/// </summary>
		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container24_setInlineAttributes(sender, e);
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container24_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container20 Functions
		/// </summary>
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container20_setInlineAttributes(sender, e);
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-width: 1px;border-style: solid;border-radius: 4px;padding: 10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container20_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		/// <summary>
		/// wtFileToUpload Functions
		/// </summary>
		/// <summary>
		/// Gets the visible state of component (wtFileToUpload)
		/// </summary>
		/// <returns>The Visible State of wtFileToUpload</returns>
		public bool inputFileFileToUpload_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtFileToUpload)
		/// </summary>
		/// <returns>The Enabled State of wtFileToUpload</returns>
		public bool inputFileFileToUpload_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_If17 Functions
		/// </summary>
		bool if_wt_If17_hasRun=false;
		bool if_wt_If17_evalResult;
		public bool if_wt_If17() {
			if (if_wt_If17_hasRun) {
				if_wt_If17_hasRun = false;
				return if_wt_If17_evalResult;
			}
			if_wt_If17_hasRun = true;
			if_wt_If17_evalResult = inParamEnableDocumentViewingRestrictions;
			return if_wt_If17_evalResult;
		}

		/// <summary>
		/// wt_If32 Functions
		/// </summary>
		bool if_wt_If32_hasRun=false;
		bool if_wt_If32_evalResult;
		public bool if_wt_If32() {
			if (if_wt_If32_hasRun) {
				if_wt_If32_hasRun = false;
				return if_wt_If32_evalResult;
			}
			if_wt_If32_hasRun = true;
			if_wt_If32_evalResult = (inParamDocumentViewingRestrictionType== "User");
			return if_wt_If32_evalResult;
		}

		/// <summary>
		/// wt_Container36 Functions
		/// </summary>
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container36_setInlineAttributes(sender, e);
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-top: 15px;border-width: 1px;border-style: solid;border-radius: 4px;padding:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container36_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container31 Functions
		/// </summary>
		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container31_setInlineAttributes(sender, e);
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container31_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSelectedUser Functions
		/// </summary>
		public void selSelectedUser_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("Select Staff Member", "__ossli_0"));
			if (Rt_wtSelectedUser.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			RLUser_RoleUserRoleRecordList Rt_wtSelectedUser_reclist = queryResGetUsers_outParamList;
			Rt_wtSelectedUser_reclist.StartIteration();
			try {
				while (!Rt_wtSelectedUser_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtSelectedUser_reclist.CurrentRec.ssENUser.ssName, Convert.ToString(Rt_wtSelectedUser_reclist.CurrentRec.ssENUser.ssId)));
					if (varLcSelectedUserID == Convert.ToInt32(Convert.ToString(Rt_wtSelectedUser_reclist.CurrentRec.ssENUser.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtSelectedUser_reclist.Advance();
				}
			} finally {
				Rt_wtSelectedUser_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtSelectedUser
		/// </summary>
		public void selSelectedUser_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnUserChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void selSelectedUser_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtSelectedUser.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcSelectedUserID = 0;
			}
			else {
				Rt_wtSelectedUser.SpecialListVal = "";
				try {
					varLcSelectedUserID = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSelectedUser)
		/// </summary>
		/// <returns>The Visible State of wtSelectedUser</returns>
		public bool selSelectedUser_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtSelectedUser)
		/// </summary>
		/// <returns>The Enabled State of wtSelectedUser</returns>
		public bool selSelectedUser_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selSelectedUser)
		/// </summary>
		/// <returns>The Mandatory Value of selSelectedUser</returns>
		public bool selSelectedUser_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtSelectedUsers Functions
		/// </summary>
		public void cntSelectedUsers_onDataBinding(object sender, System.EventArgs e) {
			cntSelectedUsers_setInlineAttributes(sender, e);
		}
		public string cntSelectedUsers_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSelectedUsers_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSelectedUsers)
		/// </summary>
		/// <returns>The Visible State of wtSelectedUsers</returns>
		public bool cntSelectedUsers_isVisible() {
			return true;
		}

		/// <summary>
		/// wtUserList2 Functions
		/// </summary>
		public void recListUserList2_onDataBinding(object sender, System.EventArgs e) {
			// widget wtUserList2
			ssUserList2List = varLcUserList;
			ssUserList2ListDoDataBind = false;
			ssUserList2ListDataBound = true;
		}
		public void recListUserList2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssUserList2List.Length > 0) {
					ssUserList2List.CurrentRec = ssUserList2List[ssUserList2List.CurrentRowNumber];
				}
				if (ssUserList2List.Length > e.SelectedIndex) {
					ssUserList2List.CurrentRec = ssUserList2List[e.SelectedIndex];
					ssUserList2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListUserList2_Store(object dataItem, int index) {
			return "";
		}
		public void recListUserList2_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListUserList2_Clear(object sender, EventArgs e) {
			wtUserList2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListUserList2_Rebuild(int startIndex, int lineCount) {
			if (ssUserList2List.Length != -1) {
				wtUserList2_storage.Clear();
				for (int i=startIndex; i<ssUserList2List.Data.Count && i<startIndex+lineCount; i++) {
					recListUserList2_Store(ssUserList2List.Data[i], wtUserList2_storage.Count);
				}
			}
		}
		public void recListUserList2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtUserList2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLUserRecordList getWtUserList2List() {
			if (ssUserList2ListDoDataBind) {
				recListUserList2_onDataBinding(this, null);
			}

			return ssUserList2List;
		}
		/// <summary>
		/// wt_InlineExpression8 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Tzq8RcDs90qEBjRukwFZPQ) Expression: UserList.Current.User.Name +
		///  " will be able to view this file.  "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression8() {
			return (varLcUserList.CurrentRec.ssENUser.ssName+ " will be able to view this file.  ");
		}
		/// <summary>
		/// wt_Link7 Functions
		/// </summary>
		public void lnk_Link7_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link7_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandRemoveUser(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link7)
		/// </summary>
		/// <returns>title of the Link (wt_Link7)</returns>
		public string
		lnk_Link7_getTitle() {
			return "Remove";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link7)
		/// </summary>
		/// <returns>The Visible State of wt_Link7</returns>
		public bool lnk_Link7_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link7)
		/// </summary>
		/// <returns>The Enabled State of wt_Link7</returns>
		public bool lnk_Link7_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container19 Functions
		/// </summary>
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container19_setInlineAttributes(sender, e);
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-top: 15px;border-width: 1px;border-style: solid;border-radius: 4px;padding:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container19_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container27 Functions
		/// </summary>
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container27_setInlineAttributes(sender, e);
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container27_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container1 Functions
		/// </summary>
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container1_setInlineAttributes(sender, e);
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container1_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSelectedRole Functions
		/// </summary>
		public void selSelectedRole_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("Select Role", "__ossli_0"));
			if (Rt_wtSelectedRole.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			RLRoleEspaceRecordList Rt_wtSelectedRole_reclist = queryResGetRoles_outParamList;
			Rt_wtSelectedRole_reclist.StartIteration();
			try {
				while (!Rt_wtSelectedRole_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtSelectedRole_reclist.CurrentRec.ssENRole.ssName, Convert.ToString(Rt_wtSelectedRole_reclist.CurrentRec.ssENRole.ssId)));
					if (varLcSelectedRoleID == Convert.ToInt32(Convert.ToString(Rt_wtSelectedRole_reclist.CurrentRec.ssENRole.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtSelectedRole_reclist.Advance();
				}
			} finally {
				Rt_wtSelectedRole_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtSelectedRole
		/// </summary>
		public void selSelectedRole_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnRoleChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void selSelectedRole_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtSelectedRole.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcSelectedRoleID = 0;
			}
			else {
				Rt_wtSelectedRole.SpecialListVal = "";
				try {
					varLcSelectedRoleID = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSelectedRole)
		/// </summary>
		/// <returns>The Visible State of wtSelectedRole</returns>
		public bool selSelectedRole_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtSelectedRole)
		/// </summary>
		/// <returns>The Enabled State of wtSelectedRole</returns>
		public bool selSelectedRole_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selSelectedRole)
		/// </summary>
		/// <returns>The Mandatory Value of selSelectedRole</returns>
		public bool selSelectedRole_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtSelectedRoles Functions
		/// </summary>
		public void cntSelectedRoles_onDataBinding(object sender, System.EventArgs e) {
			cntSelectedRoles_setInlineAttributes(sender, e);
		}
		public string cntSelectedRoles_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSelectedRoles_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSelectedRoles)
		/// </summary>
		/// <returns>The Visible State of wtSelectedRoles</returns>
		public bool cntSelectedRoles_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRoleList2 Functions
		/// </summary>
		public void recListRoleList2_onDataBinding(object sender, System.EventArgs e) {
			// widget wtRoleList2
			ssRoleList2List = varLcRoleList;
			ssRoleList2ListDoDataBind = false;
			ssRoleList2ListDataBound = true;
		}
		public void recListRoleList2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssRoleList2List.Length > 0) {
					ssRoleList2List.CurrentRec = ssRoleList2List[ssRoleList2List.CurrentRowNumber];
				}
				if (ssRoleList2List.Length > e.SelectedIndex) {
					ssRoleList2List.CurrentRec = ssRoleList2List[e.SelectedIndex];
					ssRoleList2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListRoleList2_Store(object dataItem, int index) {
			return "";
		}
		public void recListRoleList2_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListRoleList2_Clear(object sender, EventArgs e) {
			wtRoleList2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListRoleList2_Rebuild(int startIndex, int lineCount) {
			if (ssRoleList2List.Length != -1) {
				wtRoleList2_storage.Clear();
				for (int i=startIndex; i<ssRoleList2List.Data.Count && i<startIndex+lineCount; i++) {
					recListRoleList2_Store(ssRoleList2List.Data[i], wtRoleList2_storage.Count);
				}
			}
		}
		public void recListRoleList2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtRoleList2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRoleRecordList getWtRoleList2List() {
			if (ssRoleList2ListDoDataBind) {
				recListRoleList2_onDataBinding(this, null);
			}

			return ssRoleList2List;
		}
		/// <summary>
		/// wt_InlineExpression15 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = pbibWKY4vkyjHhhZfVw5kQ) Expression: RoleList.Current.Role.Name +
		///  " will be able to view this file.  "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression15() {
			return (varLcRoleList.CurrentRec.ssENRole.ssName+ " will be able to view this file.  ");
		}
		/// <summary>
		/// wt_Link18 Functions
		/// </summary>
		public void lnk_Link18_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link18_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandRemoveRole(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link18)
		/// </summary>
		/// <returns>title of the Link (wt_Link18)</returns>
		public string
		lnk_Link18_getTitle() {
			return "Remove";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link18)
		/// </summary>
		/// <returns>The Visible State of wt_Link18</returns>
		public bool lnk_Link18_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link18)
		/// </summary>
		/// <returns>The Enabled State of wt_Link18</returns>
		public bool lnk_Link18_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtAllUsersWarning Functions
		/// </summary>
		public void cntAllUsersWarning_onDataBinding(object sender, System.EventArgs e) {
			cntAllUsersWarning_setInlineAttributes(sender, e);
		}
		public string cntAllUsersWarning_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "color:red;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntAllUsersWarning_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAllUsersWarning)
		/// </summary>
		/// <returns>The Visible State of wtAllUsersWarning</returns>
		public bool cntAllUsersWarning_isVisible() {
			return varLcHasSelectedCaseConferencingUser;
		}

		/// <summary>
		/// wt_Container33 Functions
		/// </summary>
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container33_setInlineAttributes(sender, e);
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-top: 15px;border-width: 1px;border-style: solid;border-radius: 4px;font-size: 14px;font-weight: bolder;align: center;padding: 10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container33_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression3 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = IW9LFH6YfkmzNGqO2kCuAg) Expression: "Please ensure that no
		///  confidential learner information is included in the selected document. " + internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression3() {
			return ("Please ensure that no confidential learner information is included in the selected document. " + (((inParamDocumentType==ENDocumentTypeEntity.GetRecordByKey(ObjectKey.Parse("BCjdAILcjU2AfZmngarlFA")).ssId)) ?("All recipents of this e-mail will be able to view the document contents."):("All members of staff using this system will be able to view the document contents.")));
		}
		/// <summary>
		/// wt_Container40 Functions
		/// </summary>
		public void cnt_Container40_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container40_setInlineAttributes(sender, e);
		}
		public string cnt_Container40_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container40_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container40)
		/// </summary>
		/// <returns>The Visible State of wt_Container40</returns>
		public bool cnt_Container40_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Button22 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button22_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandOk(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button22)
		/// </summary>
		/// <returns>Label of the Button (wt_Button22)</returns>
		public string
		btn_Button22_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button22)
		/// </summary>
		/// <returns>The Visible State of wt_Button22</returns>
		public bool btn_Button22_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button22)
		/// </summary>
		/// <returns>The Enabled State of wt_Button22</returns>
		public bool btn_Button22_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button30 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button30_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandCancel(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button30)
		/// </summary>
		/// <returns>Label of the Button (wt_Button30)</returns>
		public string
		btn_Button30_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button30)
		/// </summary>
		/// <returns>The Visible State of wt_Button30</returns>
		public bool btn_Button30_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button30)
		/// </summary>
		/// <returns>The Enabled State of wt_Button30</returns>
		public bool btn_Button30_isEnabled() {
			return true; 
		}


		public static class FuncCommandOk {
		}
		public static class FuncCommandRemoveUser {
		}
		public static class FuncCommandCancel {
		}
		public static class FuncCommandRemoveRole {
		}
		public static class FuncCommandOnRoleChange {

			/// <summary>
			/// Query Function "GetRoleByID" of Action "OnRoleChange"
			/// </summary>
			public static RLRoleRecordList datasetGetRoleByID(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRole.[ID] o1, ENRole.[NAME] o2, ENRole.[PERSISTENT] o3, ENRole.[SS_KEY] o4, ENRole.[ESPACE_ID] o5, ENRole.[IS_ACTIVE] o6, ENRole.[DESCRIPTION] o7");
				fromBuilder.Append(" FROM {Role} ENRole");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRole.[ID] = @qpinP) AND (ENRole.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRole.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRoleRecordList outParamList = new RLRoleRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRoleRecordList _tmp = new RLRoleRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.OnRoleChange.GetRoleByID.List");
						outParamList = (RLRoleRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.OnRoleChange.GetRoleByID.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRoleRecordList _tmp = new RLRoleRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.OnRoleChange.GetRoleByID.List");
							outParamList = (RLRoleRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.OnRoleChange.GetRoleByID.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnUserChange {

			/// <summary>
			/// Query Function "GetUsersByID" of Action "OnUserChange"
			/// </summary>
			public static RLUserRecordList datasetGetUsersByID(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENUser.[ID] o1, ENUser.[NAME] o2, ENUser.[USERNAME] o3, ENUser.[PASSWORD] o4, ENUser.[EMAIL] o5, ENUser.[MOBILEPHONE] o6, ENUser.[EXTERNAL_ID] o7, ENUser.[CREATION_DATE] o8, ENUser.[LAST_LOGIN] o9, ENUser.[IS_ACTIVE] o10");
				fromBuilder.Append(" FROM {User} ENUser");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENUser.[ID] = @qpinP) AND (ENUser.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENUser.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRecordList outParamList = new RLUserRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRecordList _tmp = new RLUserRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.OnUserChange.GetUsersByID.List");
						outParamList = (RLUserRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.OnUserChange.GetUsersByID.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRecordList _tmp = new RLUserRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.OnUserChange.GetUsersByID.List");
							outParamList = (RLUserRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.OnUserChange.GetUsersByID.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncssPreparation {

			private static void datasetGetRolesReadDB(ref RCRoleEspaceRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENEspace.Read(r, ref index);
				rec.ssENRole.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRoles" of Action "Preparation"
			/// </summary>
			public static RLRoleEspaceRecordList datasetGetRoles(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, ENRole.[ID] o19, ENRole.[NAME] o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25");
				fromBuilder.Append(" FROM ({Espace} ENEspace Inner JOIN {Role} ENRole ON (ENRole.[ESPACE_ID] = ENEspace.[ID])) ");
				whereBuilder.Append(" WHERE (ENRole.[IS_ACTIVE] = 1) AND (ENEspace.[NAME] LIKE N'UserPermissions')");
				orderByBuilder.Append(" ORDER BY ENRole.[NAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRoleEspaceRecordList outParamList = new RLRoleEspaceRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRolesReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRoleEspaceRecordList _tmp = new RLRoleEspaceRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRolesReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.Preparation.GetRoles.List");
						outParamList = (RLRoleEspaceRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.Preparation.GetRoles.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRoleEspaceRecordList _tmp = new RLRoleEspaceRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRolesReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.Preparation.GetRoles.List");
							outParamList = (RLRoleEspaceRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.Preparation.GetRoles.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetUserById" of Action "Preparation"
			/// </summary>
			public static RLUserRecordList datasetGetUserById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENUser.[ID] o1, ENUser.[NAME] o2, ENUser.[USERNAME] o3, ENUser.[PASSWORD] o4, ENUser.[EMAIL] o5, ENUser.[MOBILEPHONE] o6, ENUser.[EXTERNAL_ID] o7, ENUser.[CREATION_DATE] o8, ENUser.[LAST_LOGIN] o9, ENUser.[IS_ACTIVE] o10");
				fromBuilder.Append(" FROM {User} ENUser");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENUser.[ID] = @qpinP) AND (ENUser.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENUser.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRecordList outParamList = new RLUserRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRecordList _tmp = new RLUserRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.Preparation.GetUserById.List");
						outParamList = (RLUserRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.Preparation.GetUserById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRecordList _tmp = new RLUserRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.Preparation.GetUserById.List");
							outParamList = (RLUserRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.Preparation.GetUserById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetUsersReadDB(ref RCUser_RoleUserRoleRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRole.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
				rec.ssENUser_Role.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetUsers" of Action "Preparation"
			/// </summary>
			public static RLUser_RoleUserRoleRecordList datasetGetUsers(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, ENUser.[ID] o8, ENUser.[NAME] o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20");
				fromBuilder.Append(" FROM (({User} ENUser Inner JOIN {User_Role} ENUser_Role ON (ENUser_Role.[USER_ID] = ENUser.[ID]))  Inner JOIN {Role} ENRole ON (ENUser_Role.[ROLE_ID] = ENRole.[ID])) ");
				whereBuilder.Append(" WHERE (ENUser.[IS_ACTIVE] = 1) AND (ENRole.[NAME] = N'CaseConferencingUser') AND (ENRole.[IS_ACTIVE] = 1) AND (ENUser.[EMAIL] <> N'')");
				orderByBuilder.Append(" ORDER BY ENUser.[NAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUser_RoleUserRoleRecordList outParamList = new RLUser_RoleUserRoleRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetUsersReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, false, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUser_RoleUserRoleRecordList _tmp = new RLUser_RoleUserRoleRecordList();
					_tmp.AlternateReadDBMethod = datasetGetUsersReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.Preparation.GetUsers.List");
						outParamList = (RLUser_RoleUserRoleRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.Preparation.GetUsers.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUser_RoleUserRoleRecordList _tmp = new RLUser_RoleUserRoleRecordList();
						_tmp.AlternateReadDBMethod = datasetGetUsersReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Popup_AttachDocument.Preparation.GetUsers.List");
							outParamList = (RLUser_RoleUserRoleRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Popup_AttachDocument.Preparation.GetUsers.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Popup AttachDocument"; ssUserList2ListDoDataBind = true;
				ssRoleList2ListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_AttachDocument", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_AttachDocument", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetRoles_outParamList.

			int tmpcurrentrownumberqueryResGetRoles_outParamList = queryResGetRoles_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRoles_outParamList = queryResGetRoles_outParamList.Eof;
			ArrayList storequeryResGetRoles_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRoles_outParamList to the storequeryResGetRoles_outParamList
			if (!queryResGetRoles_outParamList.Empty) {
				try {
					queryResGetRoles_outParamList.StartIteration();

					while (!queryResGetRoles_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRoles_outParamList = new ArrayList();
						tmpFieldsqueryResGetRoles_outParamList.Add(queryResGetRoles_outParamList.CurrentRec.ssENRole.ssId == 0?(object) null: queryResGetRoles_outParamList.CurrentRec.ssENRole.ssId);
						tmpFieldsqueryResGetRoles_outParamList.Add(queryResGetRoles_outParamList.CurrentRec.ssENRole.ssName == "" ?(object) null: queryResGetRoles_outParamList.CurrentRec.ssENRole.ssName);
						tmpFieldsqueryResGetRoles_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRoles_outParamList.CurrentRec.ssENRole.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetRoles_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRoles_outParamList.CurrentRec.ssENRole.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, true, true
						}
						))));
						storequeryResGetRoles_outParamList.Add(tmpFieldsqueryResGetRoles_outParamList);
						queryResGetRoles_outParamList.Advance();
					}
				} finally {
					queryResGetRoles_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRoles_outParamList", storequeryResGetRoles_outParamList, null);

			#endregion


			#region store queryResGetRoles_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRoles_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRoles_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRoles_outParamList_eof", tmpeofqueryResGetRoles_outParamList, false);
			queryResGetRoles_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRoles_outParamList, tmpeofqueryResGetRoles_outParamList);

			#endregion


			#region store queryResGetUsers_outParamList.

			int tmpcurrentrownumberqueryResGetUsers_outParamList = queryResGetUsers_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetUsers_outParamList = queryResGetUsers_outParamList.Eof;
			ArrayList storequeryResGetUsers_outParamList = new ArrayList();

			// Write the needed fields of queryResGetUsers_outParamList to the storequeryResGetUsers_outParamList
			if (!queryResGetUsers_outParamList.Empty) {
				try {
					queryResGetUsers_outParamList.StartIteration();

					while (!queryResGetUsers_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetUsers_outParamList = new ArrayList();
						tmpFieldsqueryResGetUsers_outParamList.Add(queryResGetUsers_outParamList.CurrentRec.ssENUser.ssId == 0?(object) null: queryResGetUsers_outParamList.CurrentRec.ssENUser.ssId);
						tmpFieldsqueryResGetUsers_outParamList.Add(queryResGetUsers_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetUsers_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetUsers_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetUsers_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, true, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetUsers_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetUsers_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, false, false, true, true, true, true, true, true, true, true
						}
						))));
						storequeryResGetUsers_outParamList.Add(tmpFieldsqueryResGetUsers_outParamList);
						queryResGetUsers_outParamList.Advance();
					}
				} finally {
					queryResGetUsers_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetUsers_outParamList", storequeryResGetUsers_outParamList, null);

			#endregion


			#region store queryResGetUsers_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetUsers_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetUsers_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetUsers_outParamList_eof", tmpeofqueryResGetUsers_outParamList, false);
			queryResGetUsers_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetUsers_outParamList, tmpeofqueryResGetUsers_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamDocumentType", inParamDocumentType, 0);
			ViewStateAttributes.SetInViewState("inParamEnableDocumentViewingRestrictions", inParamEnableDocumentViewingRestrictions, false);
			ViewStateAttributes.SetInViewState("inParamDocumentViewingRestrictionType", inParamDocumentViewingRestrictionType, "");
			ViewStateAttributes.SetInViewState("varLcDocument_ssENDocuments_ssId", varLcDocument.ssENDocuments.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcDocument_ssENDocuments_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcDocument.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcDocument_ssENDocuments_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcDocument.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcSelectedUserID", varLcSelectedUserID, 0);

			#region store varLcUserList.

			int tmpcurrentrownumbervarLcUserList = varLcUserList.CurrentRowNumber;
			bool tmpeofvarLcUserList = varLcUserList.Eof;
			ArrayList storevarLcUserList = new ArrayList();

			// Write the needed fields of varLcUserList to the storevarLcUserList
			if (!varLcUserList.Empty) {
				try {
					varLcUserList.StartIteration();

					while (!varLcUserList.Eof) {
						ArrayList tmpFieldsvarLcUserList = new ArrayList();
						tmpFieldsvarLcUserList.Add(varLcUserList.CurrentRec.ssENUser.ssId == 0?(object) null: varLcUserList.CurrentRec.ssENUser.ssId);
						tmpFieldsvarLcUserList.Add(varLcUserList.CurrentRec.ssENUser.ssName == "" ?(object) null: varLcUserList.CurrentRec.ssENUser.ssName);
						tmpFieldsvarLcUserList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcUserList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, true, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsvarLcUserList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcUserList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, false, false, true, true, true, true, true, true, true, true
						}
						))));
						storevarLcUserList.Add(tmpFieldsvarLcUserList);
						varLcUserList.Advance();
					}
				} finally {
					varLcUserList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcUserList", storevarLcUserList, null);

			#endregion


			#region store varLcUserList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcUserList_currentrownumber", tmpcurrentrownumbervarLcUserList, 0);
			ViewStateAttributes.SetInViewState("varLcUserList_eof", tmpeofvarLcUserList, false);
			varLcUserList.RestoreRecordListState(tmpcurrentrownumbervarLcUserList, tmpeofvarLcUserList);

			#endregion

			ViewStateAttributes.SetInViewState("varLcUserDocumentPermissions_ssENUserDocumentPermissions_ssId", varLcUserDocumentPermissions.ssENUserDocumentPermissions.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcUserDocumentPermissions_ssENUserDocumentPermissions_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcUserDocumentPermissions.ssENUserDocumentPermissions.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcUserDocumentPermissions_ssENUserDocumentPermissions_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcUserDocumentPermissions.ssENUserDocumentPermissions.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcSelectedRoleID", varLcSelectedRoleID, 0);

			#region store varLcRoleList.

			int tmpcurrentrownumbervarLcRoleList = varLcRoleList.CurrentRowNumber;
			bool tmpeofvarLcRoleList = varLcRoleList.Eof;
			ArrayList storevarLcRoleList = new ArrayList();

			// Write the needed fields of varLcRoleList to the storevarLcRoleList
			if (!varLcRoleList.Empty) {
				try {
					varLcRoleList.StartIteration();

					while (!varLcRoleList.Eof) {
						ArrayList tmpFieldsvarLcRoleList = new ArrayList();
						tmpFieldsvarLcRoleList.Add(varLcRoleList.CurrentRec.ssENRole.ssId == 0?(object) null: varLcRoleList.CurrentRec.ssENRole.ssId);
						tmpFieldsvarLcRoleList.Add(varLcRoleList.CurrentRec.ssENRole.ssName == "" ?(object) null: varLcRoleList.CurrentRec.ssENRole.ssName);
						tmpFieldsvarLcRoleList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcRoleList.CurrentRec.ssENRole.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, false, false
						}
						))));
						tmpFieldsvarLcRoleList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcRoleList.CurrentRec.ssENRole.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, true, true
						}
						))));
						storevarLcRoleList.Add(tmpFieldsvarLcRoleList);
						varLcRoleList.Advance();
					}
				} finally {
					varLcRoleList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcRoleList", storevarLcRoleList, null);

			#endregion


			#region store varLcRoleList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcRoleList_currentrownumber", tmpcurrentrownumbervarLcRoleList, 0);
			ViewStateAttributes.SetInViewState("varLcRoleList_eof", tmpeofvarLcRoleList, false);
			varLcRoleList.RestoreRecordListState(tmpcurrentrownumbervarLcRoleList, tmpeofvarLcRoleList);

			#endregion

			ViewStateAttributes.SetInViewState("varLcRoleDocumentPermissions_ssENRoleDocumentPermissions_ssId", varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcRoleDocumentPermissions_ssENRoleDocumentPermissions_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcRoleDocumentPermissions_ssENRoleDocumentPermissions_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcHasSelectedCaseConferencingUser", varLcHasSelectedCaseConferencingUser, false);
			ViewStateAttributes.SetInViewState("wtSelectedUser_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSelectedUser")).Mandatory, false);
			if (IsAjaxRequest) {
				recListUserList2_Rebuild((ssUserList2ListDataBound ? wtUserList2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtUserList2.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtSelectedRole_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSelectedRole")).Mandatory, false);
			if (IsAjaxRequest) {
				recListRoleList2_Rebuild((ssRoleList2ListDataBound ? wtRoleList2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRoleList2.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetRoles_outParamList.

				// Read the needed fields of queryResGetRoles_outParamList from storequeryResGetRoles_outParamList
				queryResGetRoles_outParamList = new RLRoleEspaceRecordList();
				ArrayList storequeryResGetRoles_outParamList;
				storequeryResGetRoles_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRoles_outParamList", null);
				if (storequeryResGetRoles_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRoles_outParamList in storequeryResGetRoles_outParamList) {
						if (tmpFieldsqueryResGetRoles_outParamList != null) {
							// Aux current record variable
							RCRoleEspaceRecord tmpAuxCurrentRecordqueryResGetRoles_outParamList = new RCRoleEspaceRecord(null);
							tmpAuxCurrentRecordqueryResGetRoles_outParamList.ssENRole.ssId = (int) (tmpFieldsqueryResGetRoles_outParamList[0] == null ? 0: tmpFieldsqueryResGetRoles_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRoles_outParamList.ssENRole.ssName = (string) (tmpFieldsqueryResGetRoles_outParamList[1] == null ? "": tmpFieldsqueryResGetRoles_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRoles_outParamList.ssENRole.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRoles_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRoles_outParamList.ssENRole.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRoles_outParamList[3]);

							queryResGetRoles_outParamList.Append(tmpAuxCurrentRecordqueryResGetRoles_outParamList);
						}
					}
				}
				queryResGetRoles_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRoles_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRoles_outParamList;
				tmpcurrentrownumberqueryResGetRoles_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRoles_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRoles_outParamList;
				tmpeofqueryResGetRoles_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRoles_outParamList_eof", false);
				queryResGetRoles_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRoles_outParamList, tmpeofqueryResGetRoles_outParamList);

				#endregion


				#region fetch queryResGetUsers_outParamList.

				// Read the needed fields of queryResGetUsers_outParamList from storequeryResGetUsers_outParamList
				queryResGetUsers_outParamList = new RLUser_RoleUserRoleRecordList();
				ArrayList storequeryResGetUsers_outParamList;
				storequeryResGetUsers_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetUsers_outParamList", null);
				if (storequeryResGetUsers_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetUsers_outParamList in storequeryResGetUsers_outParamList) {
						if (tmpFieldsqueryResGetUsers_outParamList != null) {
							// Aux current record variable
							RCUser_RoleUserRoleRecord tmpAuxCurrentRecordqueryResGetUsers_outParamList = new RCUser_RoleUserRoleRecord(null);
							tmpAuxCurrentRecordqueryResGetUsers_outParamList.ssENUser.ssId = (int) (tmpFieldsqueryResGetUsers_outParamList[0] == null ? 0: tmpFieldsqueryResGetUsers_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetUsers_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetUsers_outParamList[1] == null ? "": tmpFieldsqueryResGetUsers_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetUsers_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetUsers_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetUsers_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetUsers_outParamList[3]);

							queryResGetUsers_outParamList.Append(tmpAuxCurrentRecordqueryResGetUsers_outParamList);
						}
					}
				}
				queryResGetUsers_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetUsers_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetUsers_outParamList;
				tmpcurrentrownumberqueryResGetUsers_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetUsers_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetUsers_outParamList;
				tmpeofqueryResGetUsers_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetUsers_outParamList_eof", false);
				queryResGetUsers_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetUsers_outParamList, tmpeofqueryResGetUsers_outParamList);

				#endregion

				inParamDocumentType = (int) ViewStateAttributes.GetFromViewState("inParamDocumentType", 0);
				inParamEnableDocumentViewingRestrictions = (bool) ViewStateAttributes.GetFromViewState("inParamEnableDocumentViewingRestrictions", false);
				inParamDocumentViewingRestrictionType = (string) ViewStateAttributes.GetFromViewState("inParamDocumentViewingRestrictionType", "");
				varLcDocument.ssENDocuments.ssId = (int) ViewStateAttributes.GetFromViewState("varLcDocument_ssENDocuments_ssId", 0);
				varLcDocument.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcDocument_ssENDocuments_ChangedAttributes", null));
				varLcDocument.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcDocument_ssENDocuments_OptimizedAttributes", null));
				varLcSelectedUserID = (int) ViewStateAttributes.GetFromViewState("varLcSelectedUserID", 0);

				#region fetch varLcUserList.

				// Read the needed fields of varLcUserList from storevarLcUserList
				varLcUserList = new RLUserRecordList();
				ArrayList storevarLcUserList;
				storevarLcUserList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcUserList", null);
				if (storevarLcUserList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcUserList in storevarLcUserList) {
						if (tmpFieldsvarLcUserList != null) {
							// Aux current record variable
							RCUserRecord tmpAuxCurrentRecordvarLcUserList = new RCUserRecord(null);
							tmpAuxCurrentRecordvarLcUserList.ssENUser.ssId = (int) (tmpFieldsvarLcUserList[0] == null ? 0: tmpFieldsvarLcUserList[0]);

							tmpAuxCurrentRecordvarLcUserList.ssENUser.ssName = (string) (tmpFieldsvarLcUserList[1] == null ? "": tmpFieldsvarLcUserList[1]);

							tmpAuxCurrentRecordvarLcUserList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcUserList[2]);

							tmpAuxCurrentRecordvarLcUserList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcUserList[3]);

							varLcUserList.Append(tmpAuxCurrentRecordvarLcUserList);
						}
					}
				}
				varLcUserList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcUserList runtime properties state.

				int tmpcurrentrownumbervarLcUserList;
				tmpcurrentrownumbervarLcUserList = (int) ViewStateAttributes.GetFromViewState("varLcUserList_currentrownumber", 0);
				bool tmpeofvarLcUserList;
				tmpeofvarLcUserList = (bool) ViewStateAttributes.GetFromViewState("varLcUserList_eof", false);
				varLcUserList.RestoreRecordListState(tmpcurrentrownumbervarLcUserList, tmpeofvarLcUserList);

				#endregion

				varLcUserDocumentPermissions.ssENUserDocumentPermissions.ssId = (int) ViewStateAttributes.GetFromViewState("varLcUserDocumentPermissions_ssENUserDocumentPermissions_ssId", 0);
				varLcUserDocumentPermissions.ssENUserDocumentPermissions.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcUserDocumentPermissions_ssENUserDocumentPermissions_ChangedAttributes", null));
				varLcUserDocumentPermissions.ssENUserDocumentPermissions.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcUserDocumentPermissions_ssENUserDocumentPermissions_OptimizedAttributes", null));
				varLcSelectedRoleID = (int) ViewStateAttributes.GetFromViewState("varLcSelectedRoleID", 0);

				#region fetch varLcRoleList.

				// Read the needed fields of varLcRoleList from storevarLcRoleList
				varLcRoleList = new RLRoleRecordList();
				ArrayList storevarLcRoleList;
				storevarLcRoleList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcRoleList", null);
				if (storevarLcRoleList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcRoleList in storevarLcRoleList) {
						if (tmpFieldsvarLcRoleList != null) {
							// Aux current record variable
							RCRoleRecord tmpAuxCurrentRecordvarLcRoleList = new RCRoleRecord(null);
							tmpAuxCurrentRecordvarLcRoleList.ssENRole.ssId = (int) (tmpFieldsvarLcRoleList[0] == null ? 0: tmpFieldsvarLcRoleList[0]);

							tmpAuxCurrentRecordvarLcRoleList.ssENRole.ssName = (string) (tmpFieldsvarLcRoleList[1] == null ? "": tmpFieldsvarLcRoleList[1]);

							tmpAuxCurrentRecordvarLcRoleList.ssENRole.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcRoleList[2]);

							tmpAuxCurrentRecordvarLcRoleList.ssENRole.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcRoleList[3]);

							varLcRoleList.Append(tmpAuxCurrentRecordvarLcRoleList);
						}
					}
				}
				varLcRoleList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcRoleList runtime properties state.

				int tmpcurrentrownumbervarLcRoleList;
				tmpcurrentrownumbervarLcRoleList = (int) ViewStateAttributes.GetFromViewState("varLcRoleList_currentrownumber", 0);
				bool tmpeofvarLcRoleList;
				tmpeofvarLcRoleList = (bool) ViewStateAttributes.GetFromViewState("varLcRoleList_eof", false);
				varLcRoleList.RestoreRecordListState(tmpcurrentrownumbervarLcRoleList, tmpeofvarLcRoleList);

				#endregion

				varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.ssId = (int) ViewStateAttributes.GetFromViewState("varLcRoleDocumentPermissions_ssENRoleDocumentPermissions_ssId", 0);
				varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcRoleDocumentPermissions_ssENRoleDocumentPermissions_ChangedAttributes", null));
				varLcRoleDocumentPermissions.ssENRoleDocumentPermissions.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcRoleDocumentPermissions_ssENRoleDocumentPermissions_OptimizedAttributes", null));
				varLcHasSelectedCaseConferencingUser = (bool) ViewStateAttributes.GetFromViewState("varLcHasSelectedCaseConferencingUser", false);
				((IWidgetRuntimeProperties) this.FindControl("wtSelectedUser")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSelectedUser_Mandatory", false);
				recListUserList2_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wtSelectedRole")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSelectedRole_Mandatory", false);
				recListRoleList2_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtSelectedUser", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtSelectedRole", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
