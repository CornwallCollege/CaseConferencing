/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowDashboard {

	public class ScrnDashboard: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnDashboard(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcGetUpdatesFromDate</code> that represents the Service Studio local variable
		///  <code>GetUpdatesFromDate</code> <p>Description: </p>
		/// </summary>
		DateTime varLcGetUpdatesFromDate = new DateTime(1900, 1, 1, 0, 0, 0);

		/// <summary>
		/// Variable <code>varLcNotSetTotal</code> that represents the Service Studio local variable
		///  <code>NotSetTotal</code> <p>Description: </p>
		/// </summary>
		int varLcNotSetTotal = 0;

		/// <summary>
		/// Variable <code>varLcNotSetTotalFavourites</code> that represents the Service Studio local variable
		///  <code>NotSetTotalFavourites</code> <p>Description: </p>
		/// </summary>
		int varLcNotSetTotalFavourites = 0;

		/// <summary>
		/// Variable <code>varLcDashboardFilter</code> that represents the Service Studio local variable
		///  <code>DashboardFilter</code> <p>Description: </p>
		/// </summary>
		STDashboardFilterStructure varLcDashboardFilter = new STDashboardFilterStructure(null);

		/// <summary>
		/// Variable <code>varLcOnlyActive</code> that represents the Service Studio local variable
		///  <code>OnlyActive</code> <p>Description: </p>
		/// </summary>
		bool varLcOnlyActive = true;

		/// <summary>
		/// Variable <code>varLcMyFavouritesList</code> that represents the Service Studio local variable
		///  <code>MyFavouritesList</code> <p>Description: </p>
		/// </summary>
		string varLcMyFavouritesList = "";

		/// <summary>
		/// Variable <code>varLcMyLearnersList</code> that represents the Service Studio local variable
		///  <code>MyLearnersList</code> <p>Description: </p>
		/// </summary>
		string varLcMyLearnersList = "";

		/// <summary>
		/// Variable <code>varLcMyLearnersCount</code> that represents the Service Studio local variable
		///  <code>MyLearnersCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyLearnersCount = 0;

		/// <summary>
		/// Variable <code>varLcMyFavouritesCount</code> that represents the Service Studio local variable
		///  <code>MyFavouritesCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyFavouritesCount = 0;

		/// <summary>
		/// Variable <code>varLcMyLearnersAttendanceGreenCount</code> that represents the Service Studio local
		///  variable <code>MyLearnersAttendanceGreenCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyLearnersAttendanceGreenCount = 0;

		/// <summary>
		/// Variable <code>varLcMyLearnersAttendanceAmberCount</code> that represents the Service Studio local
		///  variable <code>MyLearnersAttendanceAmberCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyLearnersAttendanceAmberCount = 0;

		/// <summary>
		/// Variable <code>varLcMyLearnersAttendanceRedCount</code> that represents the Service Studio local
		///  variable <code>MyLearnersAttendanceRedCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyLearnersAttendanceRedCount = 0;

		/// <summary>
		/// Variable <code>varLcMyFavouritesAttendanceGreenCount</code> that represents the Service Studio
		///  local variable <code>MyFavouritesAttendanceGreenCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyFavouritesAttendanceGreenCount = 0;

		/// <summary>
		/// Variable <code>varLcMyFavouritesAttendanceAmberCount</code> that represents the Service Studio
		///  local variable <code>MyFavouritesAttendanceAmberCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyFavouritesAttendanceAmberCount = 0;

		/// <summary>
		/// Variable <code>varLcMyFavouritesAttendanceRedCount</code> that represents the Service Studio local
		///  variable <code>MyFavouritesAttendanceRedCount</code> <p>Description: </p>
		/// </summary>
		int varLcMyFavouritesAttendanceRedCount = 0;

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance79
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance79;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container85;
		protected OutSystems.HubEdition.WebWidgets.Container wtOverallFigures;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		protected OutSystems.HubEdition.WebWidgets.Container wtMyLearners;
		protected OutSystems.HubEdition.WebWidgets.Container wtMyLearnersTiltle;
		protected OutSystems.HubEdition.WebWidgets.Container wtMyLearnersNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtMyFavourites;
		protected OutSystems.HubEdition.WebWidgets.Container wtMyFavouritesNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtMyFavouritesTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtRAGTotals;
		protected OutSystems.HubEdition.WebWidgets.Container wtRAGTotalsTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtRed;
		protected OutSystems.HubEdition.WebWidgets.Container wtRedNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveRedFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtAmber;
		protected OutSystems.HubEdition.WebWidgets.Container wtAmberNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveAmberFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtGreen;
		protected OutSystems.HubEdition.WebWidgets.Container wtGreenNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveGreenFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container78;
		protected OutSystems.HubEdition.WebWidgets.Container wtNotSetNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveNotSetFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtUpdatesSinceLastViewed;
		protected OutSystems.HubEdition.WebWidgets.Container wtNumberOfUpdates;
		protected OutSystems.HubEdition.WebWidgets.Container wtNumberOfUpdatesLabel;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveNumberOfUpdatesFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtNumberOfCausesOfConcern;
		protected OutSystems.HubEdition.WebWidgets.Container wtNumberOfCauses;
		protected OutSystems.HubEdition.WebWidgets.Container wtNumberOfCausesLabel;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveCauseOfConcernFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wtRAGTotalsTitle2;
		protected OutSystems.HubEdition.WebWidgets.Container wtRedAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wtRedAttendanceNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveRedAttendanceFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtAmberAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wtAmberAttendanceNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveAmberAttendanceFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtGreenAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wtGreenAttendanceNumber;
		protected OutSystems.HubEdition.WebWidgets.Container wtRemoveGreenAttendanceFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtLearners;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container97;
		private RLStudentDecimalStringStudentRAGRecordList _ssLearnersListList = new RLStudentDecimalStringStudentRAGRecordList();
		public RLStudentDecimalStringStudentRAGRecordList ssLearnersListList {
			get {
				return _ssLearnersListList; 
			}
			set {
				_ssLearnersListList = value;
				wtLearnersList.DataSource = value;
				ssLearnersListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtLearnersList;
		public ArrayList wtLearnersList_storage = new ArrayList();
		protected bool ssLearnersListList_notUsedYet = true;
		protected bool ssLearnersListListDoDataBind;
		protected bool ssLearnersListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		/// <summary>
		/// Variable (wtLearnerViewLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtLearnerViewLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container71;
		protected OutSystems.HubEdition.WebWidgets.Container wtRAGStudentWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container66;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container59;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container65;
		/// <summary>
		/// Variable (wtInfoLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtInfoLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container72;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("AZtDaeK_4kynBO8g6_nO9Q", "Dashboard");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "AZtDaeK_4kynBO8g6_nO9Q", "Dashboard");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "AZtDaeK_4kynBO8g6_nO9Q", "Dashboard");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "AZtDaeK_4kynBO8g6_nO9Q", "Dashboard");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "AZtDaeK_4kynBO8g6_nO9Q", "Dashboard");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnDashboard() {
		}


		RLIntRecordList queryResGetUpdatesCount_outParamList = new RLIntRecordList();
		int queryResGetUpdatesCount_outParamCount = 0;
		RLStudentDecimalStringStudentRAGRecordList queryResGetLearnerList_outParamList = new RLStudentDecimalStringStudentRAGRecordList();
		int queryResGetLearnerList_outParamCount = 0;
		Actions.lcoGetLearnerListString resGetMyLearners = new Actions.lcoGetLearnerListString(); RLIntRecordList queryResGetRAGTotals_outParamList = new RLIntRecordList();
		int queryResGetRAGTotals_outParamCount = 0;
		RLStudentAttendanceTotalsRecordList queryResGetAttendanceCount_outParamList = new RLStudentAttendanceTotalsRecordList();
		int queryResGetAttendanceCount_outParamCount = 0;
		Actions.lcoCalculcateAttendanceFigures resCalculcateAttendanceFigures2 = new Actions.lcoCalculcateAttendanceFigures(); RLIntRecordList queryResGetConcernNotesCount_outParamList = new RLIntRecordList();
		int queryResGetConcernNotesCount_outParamCount = 0;
		Actions.lcoGetLearnerListString resGetFavouriteLearners = new Actions.lcoGetLearnerListString(); /// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// AddMetaTags
			Actions.ActionAddMetaTags(heContext);
			// GetFavouriteLearners
			Actions.ActionGetLearnerListString(heContext, true, varLcOnlyActive, out resGetFavouriteLearners.outParamStudentListString, out resGetFavouriteLearners.outParamStudentCount);
			// GetMyLearners
			Actions.ActionGetLearnerListString(heContext, false, varLcOnlyActive, out resGetMyLearners.outParamStudentListString, out resGetMyLearners.outParamStudentCount);
			varLcGetUpdatesFromDate = Functions.ActionGetLastViewedDate(heContext); // GetUpdatesFromDate = GetLastViewedDate()
			varLcMyFavouritesList = (((resGetFavouriteLearners.outParamStudentListString== "()")) ?("(\'\')"):(resGetFavouriteLearners.outParamStudentListString)); // MyFavouritesList = internalIf
			varLcMyLearnersList = (((resGetMyLearners.outParamStudentListString== "()")) ?("(\'\')"):(resGetMyLearners.outParamStudentListString)); // MyLearnersList = internalIf
			varLcMyLearnersCount = resGetMyLearners.outParamStudentCount; // MyLearnersCount = GetMyLearners.StudentCount
			varLcMyFavouritesCount = resGetFavouriteLearners.outParamStudentCount; // MyFavouritesCount = GetFavouriteLearners.StudentCount
			// Query QueryGetRAGTotals
			int QueryGetRAGTotals_maxRecords = 0;
			queryResGetRAGTotals_outParamList = FuncssPreparation.QueryGetRAGTotals(heContext, QueryGetRAGTotals_maxRecords, IterationMultiplicity.Multiple, out queryResGetRAGTotals_outParamCount, varLcMyLearnersList
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
			, varLcMyFavouritesList
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
			, varLcOnlyActive
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
			);
			// Query QueryGetUpdatesCount
			int QueryGetUpdatesCount_maxRecords = 0;
			queryResGetUpdatesCount_outParamList = FuncssPreparation.QueryGetUpdatesCount(heContext, QueryGetUpdatesCount_maxRecords, IterationMultiplicity.Multiple, out queryResGetUpdatesCount_outParamCount, varLcGetUpdatesFromDate
			, varLcMyLearnersList
			, varLcMyFavouritesList
			);
			// Query QueryGetConcernNotesCount
			int QueryGetConcernNotesCount_maxRecords = 0;
			queryResGetConcernNotesCount_outParamList = FuncssPreparation.QueryGetConcernNotesCount(heContext, QueryGetConcernNotesCount_maxRecords, IterationMultiplicity.Multiple, out queryResGetConcernNotesCount_outParamCount, varLcMyLearnersList
			, varLcMyFavouritesList
			);
			varLcNotSetTotal = (varLcMyLearnersCount-((queryResGetRAGTotals_outParamList[0] .ssSTInt.ssValue+queryResGetRAGTotals_outParamList[2] .ssSTInt.ssValue) +queryResGetRAGTotals_outParamList[4] .ssSTInt.ssValue)); // NotSetTotal = MyLearnersCount - GetRAGTotals.List[0].Int.Value + GetRAGTotals.List[2].Int.Value +
			// GetRAGTotals.List[4].Int.Value
			varLcNotSetTotalFavourites = (varLcMyFavouritesCount-((queryResGetRAGTotals_outParamList[1] .ssSTInt.ssValue+queryResGetRAGTotals_outParamList[3] .ssSTInt.ssValue) +queryResGetRAGTotals_outParamList[5] .ssSTInt.ssValue)); // NotSetTotalFavourites = MyFavouritesCount - GetRAGTotals.List[1].Int.Value + GetRAGTotals.List[3].Int.Value +
			// GetRAGTotals.List[5].Int.Value
			// Query QueryGetLearnerList
			int QueryGetLearnerList_maxRecords = Math.Max(wtLearnersList.StartIndex + wtLearnersList.LineCount + 1, 0);
			queryResGetLearnerList_outParamList = FuncssPreparation.QueryGetLearnerList(heContext, QueryGetLearnerList_maxRecords, IterationMultiplicity.Single, out queryResGetLearnerList_outParamCount, varLcDashboardFilter.ssIsFavourites
			, varLcMyLearnersList
			, varLcMyFavouritesList
			, varLcDashboardFilter.ssRedRAGFilterOn
			, varLcDashboardFilter.ssAmberRAGFilterOn
			, varLcDashboardFilter.ssGreenRAGFilterOn
			, varLcDashboardFilter.ssLatestUpdatesFilterOn
			, varLcDashboardFilter.ssCauseForConcernFilterOn
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
			, varLcGetUpdatesFromDate
			, Functions.ActionGetMyStaffListOrder(heContext, "Name")
			, varLcDashboardFilter.ssRedAttendanceFilterOn
			, varLcDashboardFilter.ssAmberAttendanceFilterOn
			, varLcDashboardFilter.ssGreenAttendanceFilterOn
			, varLcDashboardFilter.ssNotSetRAGFilterOn
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
			);
			// Query QueryGetAttendanceCount
			int QueryGetAttendanceCount_maxRecords = 0;
			queryResGetAttendanceCount_outParamList = FuncssPreparation.QueryGetAttendanceCount(heContext, QueryGetAttendanceCount_maxRecords, IterationMultiplicity.Multiple, out queryResGetAttendanceCount_outParamCount, varLcMyLearnersList
			, varLcMyFavouritesList
			);
			// CalculcateAttendanceFigures2
			Actions.ActionCalculcateAttendanceFigures(heContext, RLStudentAttendanceTotalsList.Convert(queryResGetAttendanceCount_outParamList, new RLStudentAttendanceTotalsList(), (ref RCStudentAttendanceTotalsRecord source, ref STStudentAttendanceTotalsStructure target) => {
				target = source;
			}
			), out resCalculcateAttendanceFigures2.outParamMyLearnersGreenAttendanceCount, out resCalculcateAttendanceFigures2.outParamMyLearnersAmberAttendanceCount, out resCalculcateAttendanceFigures2.outParamMyLearnersRedAttendanceCount, out resCalculcateAttendanceFigures2.outParamMyFavouritesGreenAttendanceCount, out resCalculcateAttendanceFigures2.outParamMyFavouritesAmberAttendanceCount, out resCalculcateAttendanceFigures2.outParamMyFavouritesRedAttendanceCount);
			varLcMyLearnersAttendanceGreenCount = resCalculcateAttendanceFigures2.outParamMyLearnersGreenAttendanceCount; // MyLearnersAttendanceGreenCount = CalculcateAttendanceFigures2.MyLearnersGreenAttendanceCount
			varLcMyLearnersAttendanceAmberCount = resCalculcateAttendanceFigures2.outParamMyLearnersAmberAttendanceCount; // MyLearnersAttendanceAmberCount = CalculcateAttendanceFigures2.MyLearnersAmberAttendanceCount
			varLcMyLearnersAttendanceRedCount = resCalculcateAttendanceFigures2.outParamMyLearnersRedAttendanceCount; // MyLearnersAttendanceRedCount = CalculcateAttendanceFigures2.MyLearnersRedAttendanceCount
			varLcMyFavouritesAttendanceGreenCount = resCalculcateAttendanceFigures2.outParamMyFavouritesGreenAttendanceCount; // MyFavouritesAttendanceGreenCount = CalculcateAttendanceFigures2.MyFavouritesGreenAttendanceCount
			varLcMyFavouritesAttendanceAmberCount = resCalculcateAttendanceFigures2.outParamMyFavouritesAmberAttendanceCount; // MyFavouritesAttendanceAmberCount = CalculcateAttendanceFigures2.MyFavouritesAmberAttendanceCount
			varLcMyFavouritesAttendanceRedCount = resCalculcateAttendanceFigures2.outParamMyFavouritesRedAttendanceCount; // MyFavouritesAttendanceRedCount = CalculcateAttendanceFigures2.MyFavouritesRedAttendanceCount
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Dashboard", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Dashboard", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance79 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance79");
			wt_Container85 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container85");
			wtOverallFigures = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtOverallFigures");
			wt_Container3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container3");
			wtMyLearners = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtMyLearners");
			wtMyLearnersTiltle = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtMyLearnersTiltle");
			wtMyLearnersNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtMyLearnersNumber");
			wtMyFavourites = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtMyFavourites");
			wtMyFavouritesNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtMyFavouritesNumber");
			wtMyFavouritesTitle = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtMyFavouritesTitle");
			wtRAGTotals = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRAGTotals");
			wtRAGTotalsTitle = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRAGTotalsTitle");
			wtRed = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRed");
			wtRedNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRedNumber");
			wtRemoveRedFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveRedFilter");
			wtAmber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAmber");
			wtAmberNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAmberNumber");
			wtRemoveAmberFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveAmberFilter");
			wtGreen = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtGreen");
			wtGreenNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtGreenNumber");
			wtRemoveGreenFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveGreenFilter");
			wt_Container78 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container78");
			wtNotSetNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNotSetNumber");
			wtRemoveNotSetFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveNotSetFilter");
			wtUpdatesSinceLastViewed = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtUpdatesSinceLastViewed");
			wtNumberOfUpdates = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNumberOfUpdates");
			wtNumberOfUpdatesLabel = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNumberOfUpdatesLabel");
			wtRemoveNumberOfUpdatesFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveNumberOfUpdatesFilter");
			wtNumberOfCausesOfConcern = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNumberOfCausesOfConcern");
			wtNumberOfCauses = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNumberOfCauses");
			wtNumberOfCausesLabel = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNumberOfCausesLabel");
			wtRemoveCauseOfConcernFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveCauseOfConcernFilter");
			wtAttendance = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAttendance");
			wtRAGTotalsTitle2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRAGTotalsTitle2");
			wtRedAttendance = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRedAttendance");
			wtRedAttendanceNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRedAttendanceNumber");
			wtRemoveRedAttendanceFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveRedAttendanceFilter");
			wtAmberAttendance = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAmberAttendance");
			wtAmberAttendanceNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAmberAttendanceNumber");
			wtRemoveAmberAttendanceFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveAmberAttendanceFilter");
			wtGreenAttendance = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtGreenAttendance");
			wtGreenAttendanceNumber = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtGreenAttendanceNumber");
			wtRemoveGreenAttendanceFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRemoveGreenAttendanceFilter");
			wtLearners = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtLearners");
			wt_Container97 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container97");
			wtLearnersList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtLearnersList");
			wtLearnersList.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtLearnersList.ClientID, true, -1);
			wtLearnersList.LineCountExpression = () => 8;
			wtLearnersList.EmptyMessageExpression = () => "No learners to show...";
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "ThemeProvider_wt_WebBlockInstance67") {
				return ThemeProvider_wt_WebBlockInstance79.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance67");
			}
			if (id == "wt_Text45") {
				return ThemeProvider_wt_WebBlockInstance79.wtTitle.FindControl("wt_Text45");
			}
			if (id == "wt_Container85") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Container85");
			}
			if (id == "wtOverallFigures") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtOverallFigures");
			}
			if (id == "wt_CheckBox6") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_CheckBox6");
			}
			if (id == "wt_Text69") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Text69");
			}
			if (id == "wt_Container3") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Container3");
			}
			if (id == "wtMyLearners") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtMyLearners");
			}
			if (id == "wtMyLearnersTiltle") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtMyLearnersTiltle");
			}
			if (id == "wt_Text76") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Text76");
			}
			if (id == "wtMyLearnersNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtMyLearnersNumber");
			}
			if (id == "wt_InlineExpression53") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression53");
			}
			if (id == "wtMyFavourites") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtMyFavourites");
			}
			if (id == "wtMyFavouritesNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtMyFavouritesNumber");
			}
			if (id == "wt_InlineExpression14") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression14");
			}
			if (id == "wtMyFavouritesTitle") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtMyFavouritesTitle");
			}
			if (id == "wt_Text41") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Text41");
			}
			if (id == "wtRAGTotals") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRAGTotals");
			}
			if (id == "wtRAGTotalsTitle") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRAGTotalsTitle");
			}
			if (id == "wt_Text52") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Text52");
			}
			if (id == "wtRed") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRed");
			}
			if (id == "wtRedNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRedNumber");
			}
			if (id == "wt_InlineExpression70") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression70");
			}
			if (id == "wtRemoveRedFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveRedFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance74") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance74");
			}
			if (id == "wtAmber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtAmber");
			}
			if (id == "wtAmberNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtAmberNumber");
			}
			if (id == "wt_InlineExpression13") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression13");
			}
			if (id == "wtRemoveAmberFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveAmberFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance86") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance86");
			}
			if (id == "wtGreen") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtGreen");
			}
			if (id == "wtGreenNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtGreenNumber");
			}
			if (id == "wt_InlineExpression10") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression10");
			}
			if (id == "wtRemoveGreenFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveGreenFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance37") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance37");
			}
			if (id == "wt_Container78") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Container78");
			}
			if (id == "wtNotSetNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtNotSetNumber");
			}
			if (id == "wt_InlineExpression21") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression21");
			}
			if (id == "wtRemoveNotSetFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveNotSetFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance30") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance30");
			}
			if (id == "wtUpdatesSinceLastViewed") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtUpdatesSinceLastViewed");
			}
			if (id == "wtNumberOfUpdates") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtNumberOfUpdates");
			}
			if (id == "wt_InlineExpression40") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression40");
			}
			if (id == "wtNumberOfUpdatesLabel") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtNumberOfUpdatesLabel");
			}
			if (id == "wt_InlineExpression48") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression48");
			}
			if (id == "wtRemoveNumberOfUpdatesFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveNumberOfUpdatesFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance92") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance92");
			}
			if (id == "wtNumberOfCausesOfConcern") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtNumberOfCausesOfConcern");
			}
			if (id == "wtNumberOfCauses") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtNumberOfCauses");
			}
			if (id == "wt_InlineExpression16") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression16");
			}
			if (id == "wtNumberOfCausesLabel") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtNumberOfCausesLabel");
			}
			if (id == "wt_Text98") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Text98");
			}
			if (id == "wtRemoveCauseOfConcernFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveCauseOfConcernFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance82") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance82");
			}
			if (id == "wtAttendance") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtAttendance");
			}
			if (id == "wtRAGTotalsTitle2") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRAGTotalsTitle2");
			}
			if (id == "wt_Text42") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Text42");
			}
			if (id == "wtRedAttendance") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRedAttendance");
			}
			if (id == "wtRedAttendanceNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRedAttendanceNumber");
			}
			if (id == "wt_InlineExpression81") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression81");
			}
			if (id == "wtRemoveRedAttendanceFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveRedAttendanceFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance51") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance51");
			}
			if (id == "wtAmberAttendance") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtAmberAttendance");
			}
			if (id == "wtAmberAttendanceNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtAmberAttendanceNumber");
			}
			if (id == "wt_InlineExpression84") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression84");
			}
			if (id == "wtRemoveAmberAttendanceFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveAmberAttendanceFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance44") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance44");
			}
			if (id == "wtGreenAttendance") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtGreenAttendance");
			}
			if (id == "wtGreenAttendanceNumber") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtGreenAttendanceNumber");
			}
			if (id == "wt_InlineExpression60") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression60");
			}
			if (id == "wtRemoveGreenAttendanceFilter") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtRemoveGreenAttendanceFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance36") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance36");
			}
			if (id == "wtLearners") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtLearners");
			}
			if (id == "wt_Container97") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_Container97");
			}
			if (id == "wt_InlineExpression12") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wt_InlineExpression12");
			}
			if (id == "wtLearnersList") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("wtLearnersList");
			}
			if (id == "RichWidgets_wt_WebBlockInstance4") {
				return ThemeProvider_wt_WebBlockInstance79.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance4");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Dashboard"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Dashboard"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssLearnersListListDoDataBind = true;
				Title = "Dashboard"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Dashboard", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowDashboard.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotLearningSupportPractitioner("LearningSupportPractitioner role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("AZtDaeK_4kynBO8g6_nO9Q"); 
			}
		}

		public bool isSecure {
			get {
				return false; 
			}
		}


		/// <summary>
		/// Action <code>CommandOnNumberOfCausesOfConcernClick</code> that represents the Service Studio screen
		///  action <code>OnNumberOfCausesOfConcernClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNumberOfCausesOfConcernClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
				varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
				varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
				varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
				varLcDashboardFilter.ssCauseForConcernFilterOn = (!varLcDashboardFilter.ssCauseForConcernFilterOn); // DashboardFilter.CauseForConcernFilterOn = notDashboardFilter.CauseForConcernFilterOn
				// Query QueryGetLearnerList
				{
					int QueryGetLearnerList_maxRecords = Math.Max(wtLearnersList.StartIndex + wtLearnersList.LineCount + 1, 0);
					queryResGetLearnerList_outParamList = FuncssPreparation.QueryGetLearnerList(heContext, QueryGetLearnerList_maxRecords, IterationMultiplicity.Single, out queryResGetLearnerList_outParamCount, varLcDashboardFilter.ssIsFavourites
					, varLcMyLearnersList
					, varLcMyFavouritesList
					, varLcDashboardFilter.ssRedRAGFilterOn
					, varLcDashboardFilter.ssAmberRAGFilterOn
					, varLcDashboardFilter.ssGreenRAGFilterOn
					, varLcDashboardFilter.ssLatestUpdatesFilterOn
					, varLcDashboardFilter.ssCauseForConcernFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
					, varLcGetUpdatesFromDate
					, Functions.ActionGetMyStaffListOrder(heContext, "Name")
					, varLcDashboardFilter.ssRedAttendanceFilterOn
					, varLcDashboardFilter.ssAmberAttendanceFilterOn
					, varLcDashboardFilter.ssGreenAttendanceFilterOn
					, varLcDashboardFilter.ssNotSetRAGFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
					);
				}
				// Refresh Widget (wtLearners)
				ssLearnersListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtLearners, "None", StoreViewState);
				// Refresh Widget (wtNumberOfCausesOfConcern)
				((OSPageViewState) Page).AjaxRefresh(wtNumberOfCausesOfConcern, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnClick: VarsBag {
			public Actions.lcoCalculcateAttendanceFigures resCalculcateAttendanceFigures = new Actions.lcoCalculcateAttendanceFigures();
			public Actions.lcoGetLearnerListString resGetFavouritesList = new Actions.lcoGetLearnerListString();
			public Actions.lcoGetLearnerListString resGetMyLearnersList = new Actions.lcoGetLearnerListString();
			public lcvOnClick() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnClick</code> that represents the Service Studio screen action
		///  <code>OnClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnClick localVars = new lcvOnClick();
			try {
				// GetFavouritesList
				Actions.ActionGetLearnerListString(heContext, true, varLcOnlyActive, out localVars.resGetFavouritesList.outParamStudentListString, out localVars.resGetFavouritesList.outParamStudentCount);
				// GetMyLearnersList
				Actions.ActionGetLearnerListString(heContext, false, varLcOnlyActive, out localVars.resGetMyLearnersList.outParamStudentListString, out localVars.resGetMyLearnersList.outParamStudentCount);
				varLcGetUpdatesFromDate = Functions.ActionGetLastViewedDate(heContext); // GetUpdatesFromDate = GetLastViewedDate()
				varLcMyFavouritesList = (((localVars.resGetFavouritesList.outParamStudentListString== "()")) ?("(\'\')"):(localVars.resGetFavouritesList.outParamStudentListString)); // MyFavouritesList = internalIf
				varLcMyLearnersList = (((localVars.resGetMyLearnersList.outParamStudentListString== "()")) ?("(\'\')"):(localVars.resGetMyLearnersList.outParamStudentListString)); // MyLearnersList = internalIf
				varLcMyLearnersCount = localVars.resGetMyLearnersList.outParamStudentCount; // MyLearnersCount = GetMyLearnersList.StudentCount
				varLcMyFavouritesCount = localVars.resGetFavouritesList.outParamStudentCount; // MyFavouritesCount = GetFavouritesList.StudentCount
				// Query QueryGetRAGTotals
				{
					int QueryGetRAGTotals_maxRecords = 0;
					queryResGetRAGTotals_outParamList = FuncssPreparation.QueryGetRAGTotals(heContext, QueryGetRAGTotals_maxRecords, IterationMultiplicity.Multiple, out queryResGetRAGTotals_outParamCount, varLcMyLearnersList
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
					, varLcMyFavouritesList
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
					, varLcOnlyActive
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
					);
				}
				// Query QueryGetUpdatesCount
				{
					int QueryGetUpdatesCount_maxRecords = 0;
					queryResGetUpdatesCount_outParamList = FuncssPreparation.QueryGetUpdatesCount(heContext, QueryGetUpdatesCount_maxRecords, IterationMultiplicity.Multiple, out queryResGetUpdatesCount_outParamCount, varLcGetUpdatesFromDate
					, varLcMyLearnersList
					, varLcMyFavouritesList
					);
				}
				// Query QueryGetConcernNotesCount
				{
					int QueryGetConcernNotesCount_maxRecords = 0;
					queryResGetConcernNotesCount_outParamList = FuncssPreparation.QueryGetConcernNotesCount(heContext, QueryGetConcernNotesCount_maxRecords, IterationMultiplicity.Multiple, out queryResGetConcernNotesCount_outParamCount, varLcMyLearnersList
					, varLcMyFavouritesList
					);
				}
				// Query QueryGetLearnerList
				{
					int QueryGetLearnerList_maxRecords = Math.Max(wtLearnersList.StartIndex + wtLearnersList.LineCount + 1, 0);
					queryResGetLearnerList_outParamList = FuncssPreparation.QueryGetLearnerList(heContext, QueryGetLearnerList_maxRecords, IterationMultiplicity.Single, out queryResGetLearnerList_outParamCount, varLcDashboardFilter.ssIsFavourites
					, varLcMyLearnersList
					, varLcMyFavouritesList
					, varLcDashboardFilter.ssRedRAGFilterOn
					, varLcDashboardFilter.ssAmberRAGFilterOn
					, varLcDashboardFilter.ssGreenRAGFilterOn
					, varLcDashboardFilter.ssLatestUpdatesFilterOn
					, varLcDashboardFilter.ssCauseForConcernFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
					, varLcGetUpdatesFromDate
					, Functions.ActionGetMyStaffListOrder(heContext, "Name")
					, varLcDashboardFilter.ssRedAttendanceFilterOn
					, varLcDashboardFilter.ssAmberAttendanceFilterOn
					, varLcDashboardFilter.ssGreenAttendanceFilterOn
					, varLcDashboardFilter.ssNotSetRAGFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
					);
				}
				// Query QueryGetAttendanceCount
				{
					int QueryGetAttendanceCount_maxRecords = 0;
					queryResGetAttendanceCount_outParamList = FuncssPreparation.QueryGetAttendanceCount(heContext, QueryGetAttendanceCount_maxRecords, IterationMultiplicity.Multiple, out queryResGetAttendanceCount_outParamCount, varLcMyLearnersList
					, varLcMyFavouritesList
					);
				}
				// CalculcateAttendanceFigures
				Actions.ActionCalculcateAttendanceFigures(heContext, RLStudentAttendanceTotalsList.Convert(queryResGetAttendanceCount_outParamList, new RLStudentAttendanceTotalsList(), (ref RCStudentAttendanceTotalsRecord source, ref STStudentAttendanceTotalsStructure target) => {
					target = source;
				}
				), out localVars.resCalculcateAttendanceFigures.outParamMyLearnersGreenAttendanceCount, out localVars.resCalculcateAttendanceFigures.outParamMyLearnersAmberAttendanceCount, out localVars.resCalculcateAttendanceFigures.outParamMyLearnersRedAttendanceCount, out localVars.resCalculcateAttendanceFigures.outParamMyFavouritesGreenAttendanceCount, out localVars.resCalculcateAttendanceFigures.outParamMyFavouritesAmberAttendanceCount, out localVars.resCalculcateAttendanceFigures.outParamMyFavouritesRedAttendanceCount);
				varLcNotSetTotal = (varLcMyLearnersCount-((queryResGetRAGTotals_outParamList[0] .ssSTInt.ssValue+queryResGetRAGTotals_outParamList[2] .ssSTInt.ssValue) +queryResGetRAGTotals_outParamList[4] .ssSTInt.ssValue)); // NotSetTotal = MyLearnersCount - GetRAGTotals.List[0].Int.Value + GetRAGTotals.List[2].Int.Value +
				// GetRAGTotals.List[4].Int.Value
				varLcNotSetTotalFavourites = (varLcMyFavouritesCount-((queryResGetRAGTotals_outParamList[1] .ssSTInt.ssValue+queryResGetRAGTotals_outParamList[3] .ssSTInt.ssValue) +queryResGetRAGTotals_outParamList[5] .ssSTInt.ssValue)); // NotSetTotalFavourites = MyFavouritesCount - GetRAGTotals.List[1].Int.Value + GetRAGTotals.List[3].Int.Value +
				// GetRAGTotals.List[5].Int.Value
				varLcMyLearnersAttendanceGreenCount = localVars.resCalculcateAttendanceFigures.outParamMyLearnersGreenAttendanceCount; // MyLearnersAttendanceGreenCount = CalculcateAttendanceFigures.MyLearnersGreenAttendanceCount
				varLcMyLearnersAttendanceAmberCount = localVars.resCalculcateAttendanceFigures.outParamMyLearnersAmberAttendanceCount; // MyLearnersAttendanceAmberCount = CalculcateAttendanceFigures.MyLearnersAmberAttendanceCount
				varLcMyLearnersAttendanceRedCount = localVars.resCalculcateAttendanceFigures.outParamMyLearnersRedAttendanceCount; // MyLearnersAttendanceRedCount = CalculcateAttendanceFigures.MyLearnersRedAttendanceCount
				varLcMyFavouritesAttendanceGreenCount = localVars.resCalculcateAttendanceFigures.outParamMyFavouritesGreenAttendanceCount; // MyFavouritesAttendanceGreenCount = CalculcateAttendanceFigures.MyFavouritesGreenAttendanceCount
				varLcMyFavouritesAttendanceAmberCount = localVars.resCalculcateAttendanceFigures.outParamMyFavouritesAmberAttendanceCount; // MyFavouritesAttendanceAmberCount = CalculcateAttendanceFigures.MyFavouritesAmberAttendanceCount
				varLcMyFavouritesAttendanceRedCount = localVars.resCalculcateAttendanceFigures.outParamMyFavouritesRedAttendanceCount; // MyFavouritesAttendanceRedCount = CalculcateAttendanceFigures.MyFavouritesRedAttendanceCount
				// Refresh Widget (wtOverallFigures)
				((OSPageViewState) Page).AjaxRefresh(wtOverallFigures, "None", StoreViewState);
				// Refresh Widget (wtLearners)
				ssLearnersListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtLearners, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnRAGClick: VarsBag {
			public string inParamRAGStatusID;
			public bool inParamIsOverallRAGClicked;
			public lcvOnRAGClick(string inParamRAGStatusID, bool inParamIsOverallRAGClicked) {
				this.inParamRAGStatusID = inParamRAGStatusID;
				this.inParamIsOverallRAGClicked = inParamIsOverallRAGClicked;
			}
		}
		/// <summary>
		/// Action <code>CommandOnRAGClick</code> that represents the Service Studio screen action
		///  <code>OnRAGClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnRAGClick(HeContext heContext, string inParamRAGStatusID, bool inParamIsOverallRAGClicked) {
			CheckPermissions(heContext);
			lcvOnRAGClick localVars = new lcvOnRAGClick(inParamRAGStatusID, inParamIsOverallRAGClicked);
			try {
				if (localVars.inParamIsOverallRAGClicked) {
					if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId)) {
						varLcDashboardFilter.ssRedRAGFilterOn = (!varLcDashboardFilter.ssRedRAGFilterOn); // DashboardFilter.RedRAGFilterOn = notDashboardFilter.RedRAGFilterOn
						varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
						varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
						varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
						varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
						varLcDashboardFilter.ssNotSetRAGFilterOn = false; // DashboardFilter.NotSetRAGFilterOn = False

					} else {
						if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId)) {
							varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
							varLcDashboardFilter.ssAmberRAGFilterOn = (!varLcDashboardFilter.ssAmberRAGFilterOn); // DashboardFilter.AmberRAGFilterOn = notDashboardFilter.AmberRAGFilterOn
							varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
							varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
							varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
							varLcDashboardFilter.ssNotSetRAGFilterOn = false; // DashboardFilter.NotSetRAGFilterOn = False

						} else {
							if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId)) {
								varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
								varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
								varLcDashboardFilter.ssGreenRAGFilterOn = (!varLcDashboardFilter.ssGreenRAGFilterOn); // DashboardFilter.GreenRAGFilterOn = notDashboardFilter.GreenRAGFilterOn
								varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
								varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
								varLcDashboardFilter.ssNotSetRAGFilterOn = false; // DashboardFilter.NotSetRAGFilterOn = False

							} else {
								if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId)) {
									varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
									varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
									varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
									varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
									varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
									varLcDashboardFilter.ssNotSetRAGFilterOn = (!varLcDashboardFilter.ssNotSetRAGFilterOn); // DashboardFilter.NotSetRAGFilterOn = notDashboardFilter.NotSetRAGFilterOn

								} else {
									goto KGpu_PlSjJEmGgAhwULB_ww;

								}

							}

						}

					}

				} else {
					if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId)) {
						varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
						varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
						varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
						varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
						varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
						varLcDashboardFilter.ssRedAttendanceFilterOn = (!varLcDashboardFilter.ssRedAttendanceFilterOn); // DashboardFilter.RedAttendanceFilterOn = notDashboardFilter.RedAttendanceFilterOn
						varLcDashboardFilter.ssAmberAttendanceFilterOn = false; // DashboardFilter.AmberAttendanceFilterOn = False
						varLcDashboardFilter.ssGreenAttendanceFilterOn = false; // DashboardFilter.GreenAttendanceFilterOn = False
						varLcDashboardFilter.ssNotSetRAGFilterOn = false; // DashboardFilter.NotSetRAGFilterOn = False

					} else {
						if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId)) {
							varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
							varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
							varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
							varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
							varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
							varLcDashboardFilter.ssRedAttendanceFilterOn = false; // DashboardFilter.RedAttendanceFilterOn = False
							varLcDashboardFilter.ssAmberAttendanceFilterOn = (!varLcDashboardFilter.ssAmberAttendanceFilterOn); // DashboardFilter.AmberAttendanceFilterOn = notDashboardFilter.AmberAttendanceFilterOn
							varLcDashboardFilter.ssGreenAttendanceFilterOn = false; // DashboardFilter.GreenAttendanceFilterOn = False
							varLcDashboardFilter.ssNotSetRAGFilterOn = false; // DashboardFilter.NotSetRAGFilterOn = False

						} else {
							if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId)) {
								varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
								varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
								varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
								varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
								varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
								varLcDashboardFilter.ssRedAttendanceFilterOn = false; // DashboardFilter.RedAttendanceFilterOn = False
								varLcDashboardFilter.ssAmberAttendanceFilterOn = false; // DashboardFilter.AmberAttendanceFilterOn = False
								varLcDashboardFilter.ssGreenAttendanceFilterOn = (!varLcDashboardFilter.ssGreenAttendanceFilterOn); // DashboardFilter.GreenAttendanceFilterOn = notDashboardFilter.GreenAttendanceFilterOn
								varLcDashboardFilter.ssNotSetRAGFilterOn = false; // DashboardFilter.NotSetRAGFilterOn = False

							} else {
								if ((localVars.inParamRAGStatusID==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId)) {
									varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
									varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
									varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
									varLcDashboardFilter.ssLatestUpdatesFilterOn = false; // DashboardFilter.LatestUpdatesFilterOn = False
									varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
									varLcDashboardFilter.ssRedAttendanceFilterOn = false; // DashboardFilter.RedAttendanceFilterOn = False
									varLcDashboardFilter.ssAmberAttendanceFilterOn = false; // DashboardFilter.AmberAttendanceFilterOn = False
									varLcDashboardFilter.ssGreenAttendanceFilterOn = false; // DashboardFilter.GreenAttendanceFilterOn = False
									varLcDashboardFilter.ssNotSetRAGFilterOn = false; // DashboardFilter.NotSetRAGFilterOn = False

								} else {
									goto KGpu_PlSjJEmGgAhwULB_ww;

								}

							}

						}

					}

				}
				// Query QueryGetLearnerList
				{
					int QueryGetLearnerList_maxRecords = Math.Max(wtLearnersList.StartIndex + wtLearnersList.LineCount + 1, 0);
					queryResGetLearnerList_outParamList = FuncssPreparation.QueryGetLearnerList(heContext, QueryGetLearnerList_maxRecords, IterationMultiplicity.Single, out queryResGetLearnerList_outParamCount, varLcDashboardFilter.ssIsFavourites
					, varLcMyLearnersList
					, varLcMyFavouritesList
					, varLcDashboardFilter.ssRedRAGFilterOn
					, varLcDashboardFilter.ssAmberRAGFilterOn
					, varLcDashboardFilter.ssGreenRAGFilterOn
					, varLcDashboardFilter.ssLatestUpdatesFilterOn
					, varLcDashboardFilter.ssCauseForConcernFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
					, varLcGetUpdatesFromDate
					, Functions.ActionGetMyStaffListOrder(heContext, "Name")
					, varLcDashboardFilter.ssRedAttendanceFilterOn
					, varLcDashboardFilter.ssAmberAttendanceFilterOn
					, varLcDashboardFilter.ssGreenAttendanceFilterOn
					, varLcDashboardFilter.ssNotSetRAGFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
					);
				}
				// Refresh Widget (wtLearners)
				ssLearnersListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtLearners, "None", StoreViewState);
				// Refresh Widget (wtOverallFigures)
				((OSPageViewState) Page).AjaxRefresh(wtOverallFigures, "None", StoreViewState);
				KGpu_PlSjJEmGgAhwULB_ww:// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query QueryGetLearnerList
				{
					int QueryGetLearnerList_maxRecords = Math.Max(wtLearnersList.StartIndex + wtLearnersList.LineCount + 1, 0);
					queryResGetLearnerList_outParamList = FuncssPreparation.QueryGetLearnerList(heContext, QueryGetLearnerList_maxRecords, IterationMultiplicity.Single, out queryResGetLearnerList_outParamCount, varLcDashboardFilter.ssIsFavourites
					, varLcMyLearnersList
					, varLcMyFavouritesList
					, varLcDashboardFilter.ssRedRAGFilterOn
					, varLcDashboardFilter.ssAmberRAGFilterOn
					, varLcDashboardFilter.ssGreenRAGFilterOn
					, varLcDashboardFilter.ssLatestUpdatesFilterOn
					, varLcDashboardFilter.ssCauseForConcernFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
					, varLcGetUpdatesFromDate
					, Functions.ActionGetMyStaffListOrder(heContext, "Name")
					, varLcDashboardFilter.ssRedAttendanceFilterOn
					, varLcDashboardFilter.ssAmberAttendanceFilterOn
					, varLcDashboardFilter.ssGreenAttendanceFilterOn
					, varLcDashboardFilter.ssNotSetRAGFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
					);
				}
				// Refresh Widget (wtLearners)
				ssLearnersListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtLearners, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnLearnersUpdatedClick</code> that represents the Service Studio screen action
		///  <code>OnLearnersUpdatedClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnLearnersUpdatedClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcDashboardFilter.ssRedRAGFilterOn = false; // DashboardFilter.RedRAGFilterOn = False
				varLcDashboardFilter.ssAmberRAGFilterOn = false; // DashboardFilter.AmberRAGFilterOn = False
				varLcDashboardFilter.ssGreenRAGFilterOn = false; // DashboardFilter.GreenRAGFilterOn = False
				varLcDashboardFilter.ssLatestUpdatesFilterOn = (!varLcDashboardFilter.ssLatestUpdatesFilterOn); // DashboardFilter.LatestUpdatesFilterOn = notDashboardFilter.LatestUpdatesFilterOn
				varLcDashboardFilter.ssCauseForConcernFilterOn = false; // DashboardFilter.CauseForConcernFilterOn = False
				// Query QueryGetLearnerList
				{
					int QueryGetLearnerList_maxRecords = Math.Max(wtLearnersList.StartIndex + wtLearnersList.LineCount + 1, 0);
					queryResGetLearnerList_outParamList = FuncssPreparation.QueryGetLearnerList(heContext, QueryGetLearnerList_maxRecords, IterationMultiplicity.Single, out queryResGetLearnerList_outParamCount, varLcDashboardFilter.ssIsFavourites
					, varLcMyLearnersList
					, varLcMyFavouritesList
					, varLcDashboardFilter.ssRedRAGFilterOn
					, varLcDashboardFilter.ssAmberRAGFilterOn
					, varLcDashboardFilter.ssGreenRAGFilterOn
					, varLcDashboardFilter.ssLatestUpdatesFilterOn
					, varLcDashboardFilter.ssCauseForConcernFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
					, varLcGetUpdatesFromDate
					, Functions.ActionGetMyStaffListOrder(heContext, "Name")
					, varLcDashboardFilter.ssRedAttendanceFilterOn
					, varLcDashboardFilter.ssAmberAttendanceFilterOn
					, varLcDashboardFilter.ssGreenAttendanceFilterOn
					, varLcDashboardFilter.ssNotSetRAGFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
					);
				}
				// Refresh Widget (wtLearners)
				ssLearnersListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtLearners, "None", StoreViewState);
				// Refresh Widget (wtUpdatesSinceLastViewed)
				((OSPageViewState) Page).AjaxRefresh(wtUpdatesSinceLastViewed, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnLearnerListChange: VarsBag {
			public bool inParamIsFavourites2;
			public lcvOnLearnerListChange(bool inParamIsFavourites2) {
				this.inParamIsFavourites2 = inParamIsFavourites2;
			}
		}
		/// <summary>
		/// Action <code>CommandOnLearnerListChange</code> that represents the Service Studio screen action
		///  <code>OnLearnerListChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnLearnerListChange(HeContext heContext, bool inParamIsFavourites2) {
			CheckPermissions(heContext);
			lcvOnLearnerListChange localVars = new lcvOnLearnerListChange(inParamIsFavourites2);
			try {
				varLcDashboardFilter.ssIsFavourites = localVars.inParamIsFavourites2; // DashboardFilter.IsFavourites = IsFavourites2
				// Refresh Widget (wtOverallFigures)
				((OSPageViewState) Page).AjaxRefresh(wtOverallFigures, "None", StoreViewState);
				// Query QueryGetLearnerList
				{
					int QueryGetLearnerList_maxRecords = Math.Max(wtLearnersList.StartIndex + wtLearnersList.LineCount + 1, 0);
					queryResGetLearnerList_outParamList = FuncssPreparation.QueryGetLearnerList(heContext, QueryGetLearnerList_maxRecords, IterationMultiplicity.Single, out queryResGetLearnerList_outParamCount, varLcDashboardFilter.ssIsFavourites
					, varLcMyLearnersList
					, varLcMyFavouritesList
					, varLcDashboardFilter.ssRedRAGFilterOn
					, varLcDashboardFilter.ssAmberRAGFilterOn
					, varLcDashboardFilter.ssGreenRAGFilterOn
					, varLcDashboardFilter.ssLatestUpdatesFilterOn
					, varLcDashboardFilter.ssCauseForConcernFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId
					, varLcGetUpdatesFromDate
					, Functions.ActionGetMyStaffListOrder(heContext, "Name")
					, varLcDashboardFilter.ssRedAttendanceFilterOn
					, varLcDashboardFilter.ssAmberAttendanceFilterOn
					, varLcDashboardFilter.ssGreenAttendanceFilterOn
					, varLcDashboardFilter.ssNotSetRAGFilterOn
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId
					, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId
					);
				}
				// Refresh Widget (wtLearners)
				ssLearnersListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtLearners, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance79 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance79_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance67 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance67_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("93sKLG6OI0CIFm9Wk9POjA")).ssId;
		}
		/// <summary>
		/// wt_Container85 Functions
		/// </summary>
		public void cnt_Container85_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container85_setInlineAttributes(sender, e);
		}
		public string cnt_Container85_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container85_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container85)
		/// </summary>
		/// <returns>The Visible State of wt_Container85</returns>
		public bool cnt_Container85_isVisible() {
			return true;
		}

		/// <summary>
		/// wtOverallFigures Functions
		/// </summary>
		public void cntOverallFigures_onDataBinding(object sender, System.EventArgs e) {
			cntOverallFigures_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntOverallFigures_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntOverallFigures_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtOverallFigures
		/// </summary>
		public void cntOverallFigures_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnClick(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtOverallFigures)
		/// </summary>
		/// <returns>The Visible State of wtOverallFigures</returns>
		public bool cntOverallFigures_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox6 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 7GQhGyc8QkCTtFxSZzEWkg
		/// </summary>
		/// <returns>The Value of the Check Box 7GQhGyc8QkCTtFxSZzEWkg</returns>
		public bool chk_CheckBox6_checked_value() {
			return varLcOnlyActive;
		}
		public void chk_CheckBox6_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				varLcOnlyActive = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox6)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox6</returns>
		public bool chk_CheckBox6_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox6)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox6</returns>
		public bool chk_CheckBox6_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container3
		/// </summary>
		public void cnt_Container3_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnClick(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}

		/// <summary>
		/// wtMyLearners Functions
		/// </summary>
		public void cntMyLearners_onDataBinding(object sender, System.EventArgs e) {
			cntMyLearners_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntMyLearners_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((!varLcDashboardFilter.ssIsFavourites)) ?("opacity:1"):("opacity:.2"));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntMyLearners_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtMyLearners
		/// </summary>
		public void cntMyLearners_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnLearnerListChange(heContext
			, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMyLearners)
		/// </summary>
		/// <returns>The Visible State of wtMyLearners</returns>
		public bool cntMyLearners_isVisible() {
			return true;
		}

		/// <summary>
		/// wtMyLearnersTiltle Functions
		/// </summary>
		public void cntMyLearnersTiltle_onDataBinding(object sender, System.EventArgs e) {
			cntMyLearnersTiltle_setInlineAttributes(sender, e);
		}
		public string cntMyLearnersTiltle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntMyLearnersTiltle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtMyLearnersTiltle)
		/// </summary>
		/// <returns>The Visible State of wtMyLearnersTiltle</returns>
		public bool cntMyLearnersTiltle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtMyLearnersNumber Functions
		/// </summary>
		public void cntMyLearnersNumber_onDataBinding(object sender, System.EventArgs e) {
			cntMyLearnersNumber_setInlineAttributes(sender, e);
		}
		public string cntMyLearnersNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:100px;margin-top:-30px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntMyLearnersNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtMyLearnersNumber)
		/// </summary>
		/// <returns>The Visible State of wtMyLearnersNumber</returns>
		public bool cntMyLearnersNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression53 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = qw_tkS9YQkCVzie9YvPloA) Expression: MyLearnersCount
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression53() {
			return Convert.ToString(varLcMyLearnersCount);
		}
		/// <summary>
		/// wtMyFavourites Functions
		/// </summary>
		public void cntMyFavourites_onDataBinding(object sender, System.EventArgs e) {
			cntMyFavourites_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntMyFavourites_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = ((varLcDashboardFilter.ssIsFavourites) ?("opacity:1"):("opacity:.2"));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntMyFavourites_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtMyFavourites
		/// </summary>
		public void cntMyFavourites_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnLearnerListChange(heContext
			, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMyFavourites)
		/// </summary>
		/// <returns>The Visible State of wtMyFavourites</returns>
		public bool cntMyFavourites_isVisible() {
			return true;
		}

		/// <summary>
		/// wtMyFavouritesNumber Functions
		/// </summary>
		public void cntMyFavouritesNumber_onDataBinding(object sender, System.EventArgs e) {
			cntMyFavouritesNumber_setInlineAttributes(sender, e);
		}
		public string cntMyFavouritesNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:100px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntMyFavouritesNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtMyFavouritesNumber)
		/// </summary>
		/// <returns>The Visible State of wtMyFavouritesNumber</returns>
		public bool cntMyFavouritesNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression14 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 4CSUJ78eMUGamgJdcZMpkg) Expression: MyFavouritesCount
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression14() {
			return Convert.ToString(varLcMyFavouritesCount);
		}
		/// <summary>
		/// wtMyFavouritesTitle Functions
		/// </summary>
		public void cntMyFavouritesTitle_onDataBinding(object sender, System.EventArgs e) {
			cntMyFavouritesTitle_setInlineAttributes(sender, e);
		}
		public string cntMyFavouritesTitle_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-top:-30px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntMyFavouritesTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtMyFavouritesTitle)
		/// </summary>
		/// <returns>The Visible State of wtMyFavouritesTitle</returns>
		public bool cntMyFavouritesTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRAGTotals Functions
		/// </summary>
		public void cntRAGTotals_onDataBinding(object sender, System.EventArgs e) {
			cntRAGTotals_setInlineAttributes(sender, e);
		}
		public string cntRAGTotals_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = ((varLcDashboardFilter.ssIsFavourites) ?("CardLightBlue"):("CardOrange")) + " ThemeGrid_Width6";
			if (!cntRAGTotals_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRAGTotals)
		/// </summary>
		/// <returns>The Visible State of wtRAGTotals</returns>
		public bool cntRAGTotals_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRAGTotalsTitle Functions
		/// </summary>
		public void cntRAGTotalsTitle_onDataBinding(object sender, System.EventArgs e) {
			cntRAGTotalsTitle_setInlineAttributes(sender, e);
		}
		public string cntRAGTotalsTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntRAGTotalsTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRAGTotalsTitle)
		/// </summary>
		/// <returns>The Visible State of wtRAGTotalsTitle</returns>
		public bool cntRAGTotalsTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Text52 Functions
		/// </summary>
		public void wt_Text52_onDataBinding(object sender, System.EventArgs e) {
			wt_Text52_setInlineAttributes(sender, e);
		}
		public string wt_Text52_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:50px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wtRed Functions
		/// </summary>
		public void cntRed_onDataBinding(object sender, System.EventArgs e) {
			cntRed_setInlineAttributes(sender, e);
		}
		public string cntRed_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRed_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRed)
		/// </summary>
		/// <returns>The Visible State of wtRed</returns>
		public bool cntRed_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRedNumber Functions
		/// </summary>
		public void cntRedNumber_onDataBinding(object sender, System.EventArgs e) {
			cntRedNumber_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntRedNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:30px;border-width:2px;border-style:solid;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRedNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtRedNumber
		/// </summary>
		public void cntRedNumber_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnRAGClick(heContext
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtRedNumber)
		/// </summary>
		/// <returns>The Visible State of wtRedNumber</returns>
		public bool cntRedNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression70 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = UPnDvwxzeEOl3OqYZi1vHQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression70() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(queryResGetRAGTotals_outParamList[1] .ssSTInt.ssValue):(queryResGetRAGTotals_outParamList[0] .ssSTInt.ssValue)));
		}
		/// <summary>
		/// wtRemoveRedFilter Functions
		/// </summary>
		public void cntRemoveRedFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveRedFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveRedFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveRedFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveRedFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveRedFilter</returns>
		public bool cntRemoveRedFilter_isVisible() {
			return varLcDashboardFilter.ssRedRAGFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance74 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance74_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtAmber Functions
		/// </summary>
		public void cntAmber_onDataBinding(object sender, System.EventArgs e) {
			cntAmber_setInlineAttributes(sender, e);
		}
		public string cntAmber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntAmber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAmber)
		/// </summary>
		/// <returns>The Visible State of wtAmber</returns>
		public bool cntAmber_isVisible() {
			return true;
		}

		/// <summary>
		/// wtAmberNumber Functions
		/// </summary>
		public void cntAmberNumber_onDataBinding(object sender, System.EventArgs e) {
			cntAmberNumber_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntAmberNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:30px;border-width:2px;border-style:solid;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntAmberNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtAmberNumber
		/// </summary>
		public void cntAmberNumber_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnRAGClick(heContext
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAmberNumber)
		/// </summary>
		/// <returns>The Visible State of wtAmberNumber</returns>
		public bool cntAmberNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression13 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = USzbJV9HZE+ux1cQQ6joJw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression13() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(queryResGetRAGTotals_outParamList[3] .ssSTInt.ssValue):(queryResGetRAGTotals_outParamList[2] .ssSTInt.ssValue)));
		}
		/// <summary>
		/// wtRemoveAmberFilter Functions
		/// </summary>
		public void cntRemoveAmberFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveAmberFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveAmberFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveAmberFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveAmberFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveAmberFilter</returns>
		public bool cntRemoveAmberFilter_isVisible() {
			return varLcDashboardFilter.ssAmberRAGFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance86 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance86_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtGreen Functions
		/// </summary>
		public void cntGreen_onDataBinding(object sender, System.EventArgs e) {
			cntGreen_setInlineAttributes(sender, e);
		}
		public string cntGreen_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntGreen_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtGreen)
		/// </summary>
		/// <returns>The Visible State of wtGreen</returns>
		public bool cntGreen_isVisible() {
			return true;
		}

		/// <summary>
		/// wtGreenNumber Functions
		/// </summary>
		public void cntGreenNumber_onDataBinding(object sender, System.EventArgs e) {
			cntGreenNumber_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntGreenNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:30px;border-width:2px;border-style:solid;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntGreenNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtGreenNumber
		/// </summary>
		public void cntGreenNumber_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnRAGClick(heContext
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtGreenNumber)
		/// </summary>
		/// <returns>The Visible State of wtGreenNumber</returns>
		public bool cntGreenNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression10 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = rdNUH4WXjUug+E6V+qEQFg) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(queryResGetRAGTotals_outParamList[5] .ssSTInt.ssValue):(queryResGetRAGTotals_outParamList[4] .ssSTInt.ssValue)));
		}
		/// <summary>
		/// wtRemoveGreenFilter Functions
		/// </summary>
		public void cntRemoveGreenFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveGreenFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveGreenFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveGreenFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveGreenFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveGreenFilter</returns>
		public bool cntRemoveGreenFilter_isVisible() {
			return varLcDashboardFilter.ssGreenRAGFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance37 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance37_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container78 Functions
		/// </summary>
		public void cnt_Container78_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container78_setInlineAttributes(sender, e);
		}
		public string cnt_Container78_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container78_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container78)
		/// </summary>
		/// <returns>The Visible State of wt_Container78</returns>
		public bool cnt_Container78_isVisible() {
			return true;
		}

		/// <summary>
		/// wtNotSetNumber Functions
		/// </summary>
		public void cntNotSetNumber_onDataBinding(object sender, System.EventArgs e) {
			cntNotSetNumber_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntNotSetNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:30px;border-width:2px;border-style:solid;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntNotSetNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtNotSetNumber
		/// </summary>
		public void cntNotSetNumber_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnRAGClick(heContext
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNotSetNumber)
		/// </summary>
		/// <returns>The Visible State of wtNotSetNumber</returns>
		public bool cntNotSetNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression21 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = pP9lO3Lvw0eRnmeE6p3yGg) Expression: "RAG Not Set : " +
		///  internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression21() {
			return ("RAG Not Set : " +Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(varLcNotSetTotalFavourites):(varLcNotSetTotal))));
		}
		/// <summary>
		/// wtRemoveNotSetFilter Functions
		/// </summary>
		public void cntRemoveNotSetFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveNotSetFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveNotSetFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveNotSetFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveNotSetFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveNotSetFilter</returns>
		public bool cntRemoveNotSetFilter_isVisible() {
			return varLcDashboardFilter.ssNotSetRAGFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance30 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtUpdatesSinceLastViewed Functions
		/// </summary>
		public void cntUpdatesSinceLastViewed_onDataBinding(object sender, System.EventArgs e) {
			cntUpdatesSinceLastViewed_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntUpdatesSinceLastViewed_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = ((varLcDashboardFilter.ssIsFavourites) ?("CardLightBlue"):("CardOrange")) + " ThemeGrid_Width3";
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntUpdatesSinceLastViewed_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtUpdatesSinceLastViewed
		/// </summary>
		public void cntUpdatesSinceLastViewed_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnLearnersUpdatedClick(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtUpdatesSinceLastViewed)
		/// </summary>
		/// <returns>The Visible State of wtUpdatesSinceLastViewed</returns>
		public bool cntUpdatesSinceLastViewed_isVisible() {
			return true;
		}

		/// <summary>
		/// wtNumberOfUpdates Functions
		/// </summary>
		public void cntNumberOfUpdates_onDataBinding(object sender, System.EventArgs e) {
			cntNumberOfUpdates_setInlineAttributes(sender, e);
		}
		public string cntNumberOfUpdates_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:100px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntNumberOfUpdates_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtNumberOfUpdates)
		/// </summary>
		/// <returns>The Visible State of wtNumberOfUpdates</returns>
		public bool cntNumberOfUpdates_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression40 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = _Quze9wD_Ue+9YTzId7sfw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression40() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(queryResGetUpdatesCount_outParamList[1] .ssSTInt.ssValue):(queryResGetUpdatesCount_outParamList[0] .ssSTInt.ssValue)));
		}
		/// <summary>
		/// wtNumberOfUpdatesLabel Functions
		/// </summary>
		public void cntNumberOfUpdatesLabel_onDataBinding(object sender, System.EventArgs e) {
			cntNumberOfUpdatesLabel_setInlineAttributes(sender, e);
		}
		public string cntNumberOfUpdatesLabel_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-top:-30px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntNumberOfUpdatesLabel_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtNumberOfUpdatesLabel)
		/// </summary>
		/// <returns>The Visible State of wtNumberOfUpdatesLabel</returns>
		public bool cntNumberOfUpdatesLabel_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression48 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = LIi6jRLJAk6u2axZo_gH0A) Expression: "of these these learners
		///  have been updated since " + GetUpdatesFromDate
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression48() {
			return ("of these these learners have been updated since " +varLcGetUpdatesFromDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo));
		}
		/// <summary>
		/// wtRemoveNumberOfUpdatesFilter Functions
		/// </summary>
		public void cntRemoveNumberOfUpdatesFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveNumberOfUpdatesFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveNumberOfUpdatesFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveNumberOfUpdatesFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveNumberOfUpdatesFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveNumberOfUpdatesFilter</returns>
		public bool cntRemoveNumberOfUpdatesFilter_isVisible() {
			return varLcDashboardFilter.ssLatestUpdatesFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance92 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance92_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtNumberOfCausesOfConcern Functions
		/// </summary>
		public void cntNumberOfCausesOfConcern_onDataBinding(object sender, System.EventArgs e) {
			cntNumberOfCausesOfConcern_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntNumberOfCausesOfConcern_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = ((varLcDashboardFilter.ssIsFavourites) ?("CardLightBlue"):("CardOrange")) + " ThemeGrid_Width3";
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntNumberOfCausesOfConcern_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtNumberOfCausesOfConcern
		/// </summary>
		public void cntNumberOfCausesOfConcern_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnNumberOfCausesOfConcernClick(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNumberOfCausesOfConcern)
		/// </summary>
		/// <returns>The Visible State of wtNumberOfCausesOfConcern</returns>
		public bool cntNumberOfCausesOfConcern_isVisible() {
			return true;
		}

		/// <summary>
		/// wtNumberOfCauses Functions
		/// </summary>
		public void cntNumberOfCauses_onDataBinding(object sender, System.EventArgs e) {
			cntNumberOfCauses_setInlineAttributes(sender, e);
		}
		public string cntNumberOfCauses_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:100px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntNumberOfCauses_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtNumberOfCauses)
		/// </summary>
		/// <returns>The Visible State of wtNumberOfCauses</returns>
		public bool cntNumberOfCauses_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression16 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = tzGmL9l0XUmwCLRbrZVtOw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression16() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(queryResGetConcernNotesCount_outParamList[1] .ssSTInt.ssValue):(queryResGetConcernNotesCount_outParamList[0] .ssSTInt.ssValue)));
		}
		/// <summary>
		/// wtNumberOfCausesLabel Functions
		/// </summary>
		public void cntNumberOfCausesLabel_onDataBinding(object sender, System.EventArgs e) {
			cntNumberOfCausesLabel_setInlineAttributes(sender, e);
		}
		public string cntNumberOfCausesLabel_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-top:-30px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntNumberOfCausesLabel_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtNumberOfCausesLabel)
		/// </summary>
		/// <returns>The Visible State of wtNumberOfCausesLabel</returns>
		public bool cntNumberOfCausesLabel_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRemoveCauseOfConcernFilter Functions
		/// </summary>
		public void cntRemoveCauseOfConcernFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveCauseOfConcernFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveCauseOfConcernFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveCauseOfConcernFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveCauseOfConcernFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveCauseOfConcernFilter</returns>
		public bool cntRemoveCauseOfConcernFilter_isVisible() {
			return varLcDashboardFilter.ssCauseForConcernFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance82 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance82_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtAttendance Functions
		/// </summary>
		public void cntAttendance_onDataBinding(object sender, System.EventArgs e) {
			cntAttendance_setInlineAttributes(sender, e);
		}
		public string cntAttendance_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = ((varLcDashboardFilter.ssIsFavourites) ?("CardLightBlue"):("CardOrange")) + " ThemeGrid_Width6";
			if (!cntAttendance_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAttendance)
		/// </summary>
		/// <returns>The Visible State of wtAttendance</returns>
		public bool cntAttendance_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRAGTotalsTitle2 Functions
		/// </summary>
		public void cntRAGTotalsTitle2_onDataBinding(object sender, System.EventArgs e) {
			cntRAGTotalsTitle2_setInlineAttributes(sender, e);
		}
		public string cntRAGTotalsTitle2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntRAGTotalsTitle2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRAGTotalsTitle2)
		/// </summary>
		/// <returns>The Visible State of wtRAGTotalsTitle2</returns>
		public bool cntRAGTotalsTitle2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Text42 Functions
		/// </summary>
		public void wt_Text42_onDataBinding(object sender, System.EventArgs e) {
			wt_Text42_setInlineAttributes(sender, e);
		}
		public string wt_Text42_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:50px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wtRedAttendance Functions
		/// </summary>
		public void cntRedAttendance_onDataBinding(object sender, System.EventArgs e) {
			cntRedAttendance_setInlineAttributes(sender, e);
		}
		public string cntRedAttendance_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRedAttendance_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRedAttendance)
		/// </summary>
		/// <returns>The Visible State of wtRedAttendance</returns>
		public bool cntRedAttendance_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRedAttendanceNumber Functions
		/// </summary>
		public void cntRedAttendanceNumber_onDataBinding(object sender, System.EventArgs e) {
			cntRedAttendanceNumber_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntRedAttendanceNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:30px;border-width:2px;border-style:solid;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRedAttendanceNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtRedAttendanceNumber
		/// </summary>
		public void cntRedAttendanceNumber_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnRAGClick(heContext
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtRedAttendanceNumber)
		/// </summary>
		/// <returns>The Visible State of wtRedAttendanceNumber</returns>
		public bool cntRedAttendanceNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression81 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ED8c1yOGiUGcqgQmXTVeeA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression81() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(varLcMyFavouritesAttendanceRedCount):(varLcMyLearnersAttendanceRedCount)));
		}
		/// <summary>
		/// wtRemoveRedAttendanceFilter Functions
		/// </summary>
		public void cntRemoveRedAttendanceFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveRedAttendanceFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveRedAttendanceFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveRedAttendanceFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveRedAttendanceFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveRedAttendanceFilter</returns>
		public bool cntRemoveRedAttendanceFilter_isVisible() {
			return varLcDashboardFilter.ssRedAttendanceFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance51 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance51_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtAmberAttendance Functions
		/// </summary>
		public void cntAmberAttendance_onDataBinding(object sender, System.EventArgs e) {
			cntAmberAttendance_setInlineAttributes(sender, e);
		}
		public string cntAmberAttendance_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntAmberAttendance_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAmberAttendance)
		/// </summary>
		/// <returns>The Visible State of wtAmberAttendance</returns>
		public bool cntAmberAttendance_isVisible() {
			return true;
		}

		/// <summary>
		/// wtAmberAttendanceNumber Functions
		/// </summary>
		public void cntAmberAttendanceNumber_onDataBinding(object sender, System.EventArgs e) {
			cntAmberAttendanceNumber_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntAmberAttendanceNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:30px;border-width:2px;border-style:solid;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntAmberAttendanceNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtAmberAttendanceNumber
		/// </summary>
		public void cntAmberAttendanceNumber_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnRAGClick(heContext
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAmberAttendanceNumber)
		/// </summary>
		/// <returns>The Visible State of wtAmberAttendanceNumber</returns>
		public bool cntAmberAttendanceNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression84 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = yzjK3vSHGkaSPyGlvnSoew) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression84() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(varLcMyFavouritesAttendanceAmberCount):(varLcMyLearnersAttendanceAmberCount)));
		}
		/// <summary>
		/// wtRemoveAmberAttendanceFilter Functions
		/// </summary>
		public void cntRemoveAmberAttendanceFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveAmberAttendanceFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveAmberAttendanceFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveAmberAttendanceFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveAmberAttendanceFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveAmberAttendanceFilter</returns>
		public bool cntRemoveAmberAttendanceFilter_isVisible() {
			return varLcDashboardFilter.ssAmberAttendanceFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance44 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance44_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtGreenAttendance Functions
		/// </summary>
		public void cntGreenAttendance_onDataBinding(object sender, System.EventArgs e) {
			cntGreenAttendance_setInlineAttributes(sender, e);
		}
		public string cntGreenAttendance_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntGreenAttendance_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtGreenAttendance)
		/// </summary>
		/// <returns>The Visible State of wtGreenAttendance</returns>
		public bool cntGreenAttendance_isVisible() {
			return true;
		}

		/// <summary>
		/// wtGreenAttendanceNumber Functions
		/// </summary>
		public void cntGreenAttendanceNumber_onDataBinding(object sender, System.EventArgs e) {
			cntGreenAttendanceNumber_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cntGreenAttendanceNumber_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:30px;border-width:2px;border-style:solid;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntGreenAttendanceNumber_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wtGreenAttendanceNumber
		/// </summary>
		public void cntGreenAttendanceNumber_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnRAGClick(heContext
			, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtGreenAttendanceNumber)
		/// </summary>
		/// <returns>The Visible State of wtGreenAttendanceNumber</returns>
		public bool cntGreenAttendanceNumber_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression60 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Hzu_q_3fHUq_2BS0KySxXQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression60() {
			return Convert.ToString(((varLcDashboardFilter.ssIsFavourites) ?(varLcMyFavouritesAttendanceGreenCount):(varLcMyLearnersAttendanceGreenCount)));
		}
		/// <summary>
		/// wtRemoveGreenAttendanceFilter Functions
		/// </summary>
		public void cntRemoveGreenAttendanceFilter_onDataBinding(object sender, System.EventArgs e) {
			cntRemoveGreenAttendanceFilter_setInlineAttributes(sender, e);
		}
		public string cntRemoveGreenAttendanceFilter_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width: 16px;margin-left: 0px;float: right;font-size: 15px;position: absolute; top: 1px;  right: 5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRemoveGreenAttendanceFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRemoveGreenAttendanceFilter)
		/// </summary>
		/// <returns>The Visible State of wtRemoveGreenAttendanceFilter</returns>
		public bool cntRemoveGreenAttendanceFilter_isVisible() {
			return varLcDashboardFilter.ssGreenAttendanceFilterOn;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance36 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance36_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtLearners Functions
		/// </summary>
		public void cntLearners_onDataBinding(object sender, System.EventArgs e) {
			cntLearners_setInlineAttributes(sender, e);
		}
		public string cntLearners_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntLearners_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtLearners)
		/// </summary>
		/// <returns>The Visible State of wtLearners</returns>
		public bool cntLearners_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container97 Functions
		/// </summary>
		public void cnt_Container97_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container97_setInlineAttributes(sender, e);
		}
		public string cnt_Container97_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container97_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container97)
		/// </summary>
		/// <returns>The Visible State of wt_Container97</returns>
		public bool cnt_Container97_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression12 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 4CtfJd3JuUatBRTMMA2c5A) Expression: internalIf + internalIf +
		///  internalIf + internalIf + internalIf + internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression12() {
			return (((((((varLcDashboardFilter.ssIsFavourites) ?("My starred learners"):("My Learners")) + ((varLcDashboardFilter.ssRedRAGFilterOn) ?(" with Red RAG rating."):(""))) + ((varLcDashboardFilter.ssAmberRAGFilterOn) ?(" with Amber RAG rating."):(""))) + ((varLcDashboardFilter.ssGreenRAGFilterOn) ?(" with Green RAG rating."):(""))) + ((varLcDashboardFilter.ssLatestUpdatesFilterOn) ?(((" that have been updated since " +varLcGetUpdatesFromDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo)) + ".")):(""))) + ((varLcDashboardFilter.ssCauseForConcernFilterOn) ?(" who have concern notes rasied against them."):("")));
		}
		/// <summary>
		/// wtLearnersList Functions
		/// </summary>
		public void recListLearnersList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtLearnersList
			ssLearnersListList = queryResGetLearnerList_outParamList;
			ssLearnersListListDoDataBind = false;
			ssLearnersListListDataBound = true;
		}
		public void recListLearnersList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssLearnersListList.Length > 0) {
					ssLearnersListList.CurrentRec = ssLearnersListList[ssLearnersListList.CurrentRowNumber];
				}
				if (ssLearnersListList.Length > e.SelectedIndex) {
					ssLearnersListList.CurrentRec = ssLearnersListList[e.SelectedIndex];
					ssLearnersListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListLearnersList_Store(object dataItem, int index) {
			return "";
		}
		public void recListLearnersList_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListLearnersList_Clear(object sender, EventArgs e) {
			wtLearnersList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListLearnersList_Rebuild(int startIndex, int lineCount) {
			if (ssLearnersListList.Length != -1) {
				wtLearnersList_storage.Clear();
				for (int i=startIndex; i<ssLearnersListList.Data.Count && i<startIndex+lineCount; i++) {
					recListLearnersList_Store(ssLearnersListList.Data[i], wtLearnersList_storage.Count);
				}
			}
		}
		public void recListLearnersList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtLearnersList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLStudentDecimalStringStudentRAGRecordList getWtLearnersListList() {
			if (ssLearnersListListDoDataBind) {
				recListLearnersList_onDataBinding(this, null);
			}

			return ssLearnersListList;
		}
		/// <summary>
		/// wt_Container26 Functions
		/// </summary>
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container26_setInlineAttributes(sender, e);
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container26_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLearnerViewLink Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtLearnerViewLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtLearnerViewLink)</returns>
		public string lnkLearnerViewLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("FromLearnerList", System.Web.HttpUtility.UrlEncode("True", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtLearnersListList().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsOverview", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtLearnerViewLink)
		/// </summary>
		/// <returns>title of the Link (wtLearnerViewLink)</returns>
		public string
		lnkLearnerViewLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtLearnerViewLink)
		/// </summary>
		/// <returns>The Visible State of wtLearnerViewLink</returns>
		public bool lnkLearnerViewLink_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtLearnerViewLink)
		/// </summary>
		/// <returns>The Enabled State of wtLearnerViewLink</returns>
		public bool lnkLearnerViewLink_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container71 Functions
		/// </summary>
		public void cnt_Container71_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container71_setInlineAttributes(sender, e);
		}
		public string cnt_Container71_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = ("border-color:" + ((getWtLearnersListList().CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?((Functions.ssGetRAGStatus(heContext, (((getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG==BuiltInFunction.NullTextIdentifier())) ?(ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId):(getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG))).ssENRAGStatus.ssHexColor+ ";")):("#DADADA")));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container71_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container71)
		/// </summary>
		/// <returns>The Visible State of wt_Container71</returns>
		public bool cnt_Container71_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRAGStudentWrapper Functions
		/// </summary>
		public void cntRAGStudentWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntRAGStudentWrapper_setInlineAttributes(sender, e);
		}
		public string cntRAGStudentWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = Functions.ActionGetStudentRAGStyle(heContext, ((getWtLearnersListList().CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?(getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG):(ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("RyPgHl8Nkkqd0O_3tuZ3Wg")).ssId))) + " OSInline";
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-bottom:0px;margin-bottom:0px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntRAGStudentWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRAGStudentWrapper)
		/// </summary>
		/// <returns>The Visible State of wtRAGStudentWrapper</returns>
		public bool cntRAGStudentWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container66 Functions
		/// </summary>
		public void cnt_Container66_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container66_setInlineAttributes(sender, e);
		}
		public string cnt_Container66_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container66_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container66)
		/// </summary>
		/// <returns>The Visible State of wt_Container66</returns>
		public bool cnt_Container66_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Image34 Functions
		/// </summary>
		public void img_Image34_onDataBinding(object sender, System.EventArgs e) {
			img_Image34_setInlineAttributes(sender, e);
		}
		public string img_Image34_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = ("StudentPhoto " + ((getWtLearnersListList().CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?((((getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId)) ?("RedBorder"):((((getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId)) ?("AmberBorder"):((((getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId)) ?("GreenBorder"):("BlueBorder"))))))):("SilverBorder BlackAndWhiteFilter")));
			((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
			return "";
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image34)
		/// </summary>
		/// <returns>URL of the Image (wt_Image34)</returns>
		public string img_Image34_getURL() {
			string url = getWtLearnersListList().CurrentRec.ssENStudent.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			return url; 
		}
		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container59 Functions
		/// </summary>
		public void cnt_Container59_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container59_setInlineAttributes(sender, e);
		}
		public string cnt_Container59_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container59_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container59)
		/// </summary>
		/// <returns>The Visible State of wt_Container59</returns>
		public bool cnt_Container59_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression7 Functions
		/// </summary>
		public void expression_InlineExpression7_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression7_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression7_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = ("font-size:16px;font-weight:bold;color:" + ((getWtLearnersListList().CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?((Functions.ssGetRAGStatus(heContext, (((getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG==BuiltInFunction.NullTextIdentifier())) ?(ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("7ZW1jAUCgkSdtFYbaM8RSQ")).ssId):(getWtLearnersListList().CurrentRec.ssENStudentRAG.ssRAG))).ssENRAGStatus.ssHexColor+ ";")):("#DADADA")));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = XRTpHWVRyk6htca2d_e0rw) Expression: ToUpper + ", " +
		///  LearnersList.List.Current.Student.Forenames
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression7() {
			return ((BuiltInFunction.ToUpper(getWtLearnersListList().CurrentRec.ssENStudent.ssSurname) + ", ") +getWtLearnersListList().CurrentRec.ssENStudent.ssForenames);
		}
		/// <summary>
		/// wt_Container65 Functions
		/// </summary>
		public void cnt_Container65_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container65_setInlineAttributes(sender, e);
		}
		public string cnt_Container65_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container65_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container65)
		/// </summary>
		/// <returns>The Visible State of wt_Container65</returns>
		public bool cnt_Container65_isVisible() {
			return true;
		}

		/// <summary>
		/// wtInfoLink Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtInfoLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtInfoLink)</returns>
		public string lnkInfoLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(false) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtLearnersListList().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "InfoScreen", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtInfoLink)
		/// </summary>
		/// <returns>title of the Link (wtInfoLink)</returns>
		public string
		lnkInfoLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtInfoLink)
		/// </summary>
		/// <returns>The Visible State of wtInfoLink</returns>
		public bool lnkInfoLink_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtInfoLink)
		/// </summary>
		/// <returns>The Enabled State of wtInfoLink</returns>
		public bool lnkInfoLink_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance50 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance50_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("K9DJBwKg_UiFdMvJh2FEqw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container72 Functions
		/// </summary>
		public void cnt_Container72_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container72_setInlineAttributes(sender, e);
		}
		public string cnt_Container72_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-overflow;ellipsis;overflow:hidden;white-space:nowrap;margin-top:-7px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container72_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container72)
		/// </summary>
		/// <returns>The Visible State of wt_Container72</returns>
		public bool cnt_Container72_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression5 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = eXQZGcBDSUK9c2sdxXw0rw) Expression:
		///  LearnersList.List.Current.Student.MainOfferingName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return getWtLearnersListList().CurrentRec.ssENStudent.ssMainOfferingName;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance91 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance91_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon) sender;
			widget.inParamLinkId = Utils.getControlInRecordWidget(wtLearnersList, "wtInfoLink").ClientID;
			widget.inParamWidthPx = 600;
			widget.inParamHeightPx = 400;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance4 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtLearnersList.ClientID;
			widget.inParamLineCount = wtLearnersList.RtWidget.LineCount;
			widget.inParamTotalRowCount = queryResGetLearnerList_outParamCount;
			widget.inParamMaxPageNumbers = 4;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance4
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance4_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandOnNumberOfCausesOfConcernClick {
		}
		public static class FuncCommandOnClick {
		}
		public static class FuncCommandOnRAGClick {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandOnLearnersUpdatedClick {
		}
		public static class FuncCommandOnLearnerListChange {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetUpdatesCount" of Action "Preparation"
			/// </summary>
			public static RLIntRecordList QueryGetUpdatesCount(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, DateTime qpdaDateFrom, string qpstMyLearnersList, string qpstMyFavouritesList) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query pj2VlHg81Um_FYMJvhv2RQ Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpdaDateFrom", DbType.DateTime, qpdaDateFrom);
				string advSql = "SELECT COUNT(DISTINCT( {StudentLog}.[STUDENTREFERENCE]))   " +
				 "FROM  {StudentLog} WHERE  {StudentLog}.[DATETIME]>=@qpdaDateFrom   " +
				 "AND  {StudentLog}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyLearnersList) + "  " +
				 "UNION ALL  " +
				 "SELECT COUNT(DISTINCT( {StudentLog}.[STUDENTREFERENCE])) FROM  {StudentLog} WHERE  {StudentLog}.[DATETIME]>=@qpdaDateFrom AND  {StudentLog}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyFavouritesList) + "";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLIntRecordList outParamList = new RLIntRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLIntRecordList _tmp = new RLIntRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.Dashboard.Preparation.GetUpdatesCount.List");
							outParamList = (RLIntRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetUpdatesCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetUpdatesCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetUpdatesCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({StudentLog}.[StudentReference]))   FROM {StudentLog} WHERE {StudentLog}.[DateTime]>=@DateFrom   AND {StudentLog}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT COUNT(DISTINCT({StudentLog}.[StudentReference])) FROM {StudentLog} WHERE {StudentLog}.[DateTime]>=@DateFrom AND {StudentLog}.[StudentReference] IN @MyFavouritesList): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetUpdatesCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({StudentLog}.[StudentReference]))   FROM {StudentLog} WHERE {StudentLog}.[DateTime]>=@DateFrom   AND {StudentLog}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT COUNT(DISTINCT({StudentLog}.[StudentReference])) FROM {StudentLog} WHERE {StudentLog}.[DateTime]>=@DateFrom AND {StudentLog}.[StudentReference] IN @MyFavouritesList): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetUpdatesCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({StudentLog}.[StudentReference]))   FROM {StudentLog} WHERE {StudentLog}.[DateTime]>=@DateFrom   AND {StudentLog}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT COUNT(DISTINCT({StudentLog}.[StudentReference])) FROM {StudentLog} WHERE {StudentLog}.[DateTime]>=@DateFrom AND {StudentLog}.[StudentReference] IN @MyFavouritesList): " + aqExcep.Message);
				}
			}

			private static void QueryGetLearnerListReadDB(ref RCStudentDecimalStringStudentRAGRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENStudent.Read(r, ref index);
				rec.ssENStudentRAG.Read(r, ref index);
				rec.ssSTString.Read(r, ref index);
				rec.ssSTOverallAttendancePercentage.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetLearnerList" of Action "Preparation"
			/// </summary>
			public static RLStudentDecimalStringStudentRAGRecordList QueryGetLearnerList(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, bool qpboIsFavourites, string qpstMyLearnersList, string qpstMyFavouritesList, bool qpboRedRAGFilterOn, bool qpboAmberRAGFilterOn, bool qpboGreenRAGFilterOn, bool qpboLatestUpdatesFilterOn, bool qpboCauseForConcernFilterOn, string qpstRedRAGStatus, string qpstAmberRAGStatus, DateTime qpdaGetUpdatesFrom, string qpstOrderBy, bool qpboRedAttendanceFilterOn, bool qpboAmberAttendanceFilterOn, bool qpboGreenAttendanceFilterOn, bool qpboNotSetRAGFilterOn, string qpstNotSetRAGStatus, string qpstGreenRAGStatus) {
				// Query Iterations: Single {LearnersList}
				// Refresh Query 5ksJXIijC0Grvm5hXCZ5EQ Iterations: Single {LearnersList}
				// Refresh Query iIpUgkVnQEWaB0D2rdg9TQ Iterations: Single {LearnersList}
				// Refresh Query 4XlBwDps6U6kXmqlJgQEuw Iterations: Single {LearnersList}
				// Refresh Query OEBxxajGTEKPAswGhqgyGw Iterations: Single {LearnersList}
				// Refresh Query faf8xEfElEW3QkuyKtiUew Iterations: Single {LearnersList}
				// Refresh Query rj8yOpiJbUyHpcnmxQKsyQ Iterations: Single {LearnersList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpboIsFavourites", DbType.Boolean, qpboIsFavourites);
				sqlCountCmd.CreateParameter("@qpboIsFavourites", DbType.Boolean, qpboIsFavourites);
				sqlCmd.CreateParameter("@qpboRedRAGFilterOn", DbType.Boolean, qpboRedRAGFilterOn);
				sqlCountCmd.CreateParameter("@qpboRedRAGFilterOn", DbType.Boolean, qpboRedRAGFilterOn);
				sqlCmd.CreateParameter("@qpstRedRAGStatus", DbType.String, qpstRedRAGStatus);
				sqlCountCmd.CreateParameter("@qpstRedRAGStatus", DbType.String, qpstRedRAGStatus);
				sqlCmd.CreateParameter("@qpboAmberRAGFilterOn", DbType.Boolean, qpboAmberRAGFilterOn);
				sqlCountCmd.CreateParameter("@qpboAmberRAGFilterOn", DbType.Boolean, qpboAmberRAGFilterOn);
				sqlCmd.CreateParameter("@qpstAmberRAGStatus", DbType.String, qpstAmberRAGStatus);
				sqlCountCmd.CreateParameter("@qpstAmberRAGStatus", DbType.String, qpstAmberRAGStatus);
				sqlCmd.CreateParameter("@qpboGreenRAGFilterOn", DbType.Boolean, qpboGreenRAGFilterOn);
				sqlCountCmd.CreateParameter("@qpboGreenRAGFilterOn", DbType.Boolean, qpboGreenRAGFilterOn);
				sqlCmd.CreateParameter("@qpstGreenRAGStatus", DbType.String, qpstGreenRAGStatus);
				sqlCountCmd.CreateParameter("@qpstGreenRAGStatus", DbType.String, qpstGreenRAGStatus);
				sqlCmd.CreateParameter("@qpboNotSetRAGFilterOn", DbType.Boolean, qpboNotSetRAGFilterOn);
				sqlCountCmd.CreateParameter("@qpboNotSetRAGFilterOn", DbType.Boolean, qpboNotSetRAGFilterOn);
				sqlCmd.CreateParameter("@qpstNotSetRAGStatus", DbType.String, qpstNotSetRAGStatus);
				sqlCountCmd.CreateParameter("@qpstNotSetRAGStatus", DbType.String, qpstNotSetRAGStatus);
				sqlCmd.CreateParameter("@qpboLatestUpdatesFilterOn", DbType.Boolean, qpboLatestUpdatesFilterOn);
				sqlCountCmd.CreateParameter("@qpboLatestUpdatesFilterOn", DbType.Boolean, qpboLatestUpdatesFilterOn);
				sqlCmd.CreateParameter("@qpdaGetUpdatesFrom", DbType.DateTime, qpdaGetUpdatesFrom);
				sqlCountCmd.CreateParameter("@qpdaGetUpdatesFrom", DbType.DateTime, qpdaGetUpdatesFrom);
				sqlCmd.CreateParameter("@qpboCauseForConcernFilterOn", DbType.Boolean, qpboCauseForConcernFilterOn);
				sqlCountCmd.CreateParameter("@qpboCauseForConcernFilterOn", DbType.Boolean, qpboCauseForConcernFilterOn);
				sqlCmd.CreateParameter("@qpboRedAttendanceFilterOn", DbType.Boolean, qpboRedAttendanceFilterOn);
				sqlCountCmd.CreateParameter("@qpboRedAttendanceFilterOn", DbType.Boolean, qpboRedAttendanceFilterOn);
				sqlCmd.CreateParameter("@qpboAmberAttendanceFilterOn", DbType.Boolean, qpboAmberAttendanceFilterOn);
				sqlCountCmd.CreateParameter("@qpboAmberAttendanceFilterOn", DbType.Boolean, qpboAmberAttendanceFilterOn);
				sqlCmd.CreateParameter("@qpboGreenAttendanceFilterOn", DbType.Boolean, qpboGreenAttendanceFilterOn);
				sqlCountCmd.CreateParameter("@qpboGreenAttendanceFilterOn", DbType.Boolean, qpboGreenAttendanceFilterOn);
				string advSql = "SELECT DISTINCT   " +
				 "     {Student}.[STUDENTREFERENCE], {Student}.[FORENAMES], {Student}.[SURNAME], {Student}.[DATEOFBIRTH], {Student}.[GENDER], {Student}.[MAINOFFERINGCODE], {Student}.[MAINOFFERINGNAME], {Student}.[STUDENTPHOTOURL], {Student}.[HOMEADDRESS], {Student}.[HOMEADDRESSPOSTCODE], {Student}.[CURRENTADDRESS], {Student}.[CURRENTADDRESSPOSTCODE], {Student}.[EMAILADDRESS], {Student}.[HOMETELEPHONE], {Student}.[MOBILEPHONE], {Student}.[NEXTOFKINNAME], {Student}.[NEXTOFKINRELATIONSHIP], {Student}.[NEXTOFKINADDRESS], {Student}.[NEXTOFKINPOSTCODE], {Student}.[NEXTOFKINPHONE], {Student}.[PERSONALTUTOR], {Student}.[NEXTOFKINEMAIL], {Student}.[HASCURRENTACTIVEENROLMENT], {Student}.[NETWORKLOGIN], {Student}.[NINUMBER], {Student}.[RESIDENTIALSTATUS], {Student}.[PREVIOUSSCHOOL],  " +
				 "     {StudentRAG}.[STUDENTREFERENCE], {StudentRAG}.[RAG], {StudentRAG}.[DESCRIPTION], {StudentRAG}.[UPDATEDBY], {StudentRAG}.[UPDATEDAT],  " +
				 "    ISNULL( {RAGStatus}.[ORDER],3),  " +
				 "    (SELECT  {StudentAttendance}.[OVERALLPERCENTAGEATTENDANCE] FROM  {StudentAttendance} WHERE  {StudentAttendance}.[STUDENTREFERENCE]= {Student}.[STUDENTREFERENCE] AND  {StudentAttendance}.[OFFERINGCODE] = 'Overall')  " +
				 "FROM   " +
				 "     {Student}  " +
				 "LEFT JOIN   " +
				 "     {StudentRAG} ON  {Student}.[STUDENTREFERENCE] =  {StudentRAG}.[STUDENTREFERENCE]  " +
				 "LEFT JOIN   " +
				 "     {RAGStatus} ON  {StudentRAG}.[RAG] =  {RAGStatus}.[ID]  " +
				 "LEFT JOIN   " +
				 "     {StudentLog} ON  {Student}.[STUDENTREFERENCE] =  {StudentLog}.[STUDENTREFERENCE]  " +
				 "LEFT JOIN   " +
				 "     {CauseOfConcern} ON  {Student}.[STUDENTREFERENCE] =  {CauseOfConcern}.[STUDENTREFERENCE]  " +
				 "LEFT JOIN   " +
				 "     {StudentAttendance} ON  {Student}.[STUDENTREFERENCE] =  {StudentAttendance}.[STUDENTREFERENCE]  " +
				 "WHERE   " +
				 "    (@qpboIsFavourites = 0 OR  {Student}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyFavouritesList) + ")  " +
				 "AND   " +
				 "    (@qpboIsFavourites = 1 OR  {Student}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyLearnersList) + ")  " +
				 "AND   " +
				 "    (@qpboRedRAGFilterOn = 0 OR  {StudentRAG}.[RAG] = @qpstRedRAGStatus)  " +
				 "AND   " +
				 "    (@qpboAmberRAGFilterOn = 0 OR  {StudentRAG}.[RAG] = @qpstAmberRAGStatus)  " +
				 "AND   " +
				 "    (@qpboGreenRAGFilterOn = 0 OR  {StudentRAG}.[RAG] = @qpstGreenRAGStatus)  " +
				 "AND   " +
				 "    (@qpboNotSetRAGFilterOn = 0 OR ( {StudentRAG}.[RAG] = @qpstNotSetRAGStatus OR  {StudentRAG}.[RAG] IS NULL))   " +
				 "AND   " +
				 "    (@qpboLatestUpdatesFilterOn = 0 OR  {StudentLog}.[DATETIME] > @qpdaGetUpdatesFrom)  " +
				 "AND   " +
				 "    (@qpboCauseForConcernFilterOn = 0 OR  {CauseOfConcern}.[STUDENTREFERENCE] IS NOT NULL)  " +
				 "AND   " +
				 "    (  " +
				 "        @qpboRedAttendanceFilterOn = 0 OR (  " +
				 "                                        (  " +
				 "                                            SELECT   " +
				 "                                                 {StudentAttendance}.[OVERALLPERCENTAGEATTENDANCE]  " +
				 "                                            FROM   " +
				 "                                                 {StudentAttendance}  " +
				 "                                            WHERE   " +
				 "                                                 {StudentAttendance}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "                                            AND   " +
				 "                                                 {StudentAttendance}.[OFFERINGCODE] = 'Overall'  " +
				 "                                        ) <80)  " +
				 "                                        OR  {StudentAttendance}.[STUDENTREFERENCE] IS NULL  " +
				 "    )  " +
				 "AND   " +
				 "    (  " +
				 "        @qpboAmberAttendanceFilterOn = 0 OR (  " +
				 "                                            (  " +
				 "                                                SELECT    " +
				 "                                                     {StudentAttendance}.[OVERALLPERCENTAGEATTENDANCE]  " +
				 "                                                FROM   " +
				 "                                                     {StudentAttendance}   " +
				 "                                                WHERE   " +
				 "                                                     {StudentAttendance}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "                                                AND   " +
				 "                                                     {StudentAttendance}.[OFFERINGCODE] = 'Overall'  " +
				 "                                            ) >=80  " +
				 "                                        )  " +
				 "                                        AND  " +
				 "                                        (  " +
				 "                                            (  " +
				 "                                                SELECT    " +
				 "                                                     {StudentAttendance}.[OVERALLPERCENTAGEATTENDANCE]  " +
				 "                                                FROM   " +
				 "                                                     {StudentAttendance}   " +
				 "                                                WHERE   " +
				 "                                                     {StudentAttendance}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "                                                AND  {StudentAttendance}.[OFFERINGCODE] ='Overall'  " +
				 "                                            )<90  " +
				 "                                        )  " +
				 "                                    )  " +
				 "AND (  " +
				 "    @qpboGreenAttendanceFilterOn = 0 OR (  " +
				 "                                        SELECT    " +
				 "                                             {StudentAttendance}.[OVERALLPERCENTAGEATTENDANCE]  " +
				 "                                        FROM   " +
				 "                                             {StudentAttendance}   " +
				 "                                        WHERE   " +
				 "                                             {StudentAttendance}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "                                        AND   " +
				 "                                             {StudentAttendance}.[OFFERINGCODE] = 'Overall'  " +
				 "                                        )>=90  " +
				 "                                    )                                          " +
				 "ORDER BY " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstOrderBy) + ", {Student}.[SURNAME], {Student}.[FORENAMES]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLStudentDecimalStringStudentRAGRecordList outParamList = new RLStudentDecimalStringStudentRAGRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetLearnerListReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[4];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					opt[2] = new BitArray(new bool[] {
						false
					}
					);
					opt[3] = new BitArray(new bool[] {
						false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentDecimalStringStudentRAGRecordList _tmp = new RLStudentDecimalStringStudentRAGRecordList();
						_tmp.AlternateReadDBMethod = QueryGetLearnerListReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.Dashboard.Preparation.GetLearnerList.List");
							outParamList = (RLStudentDecimalStringStudentRAGRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Dashboard.Dashboard.Preparation.GetLearnerList.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Dashboard.Dashboard.Preparation.GetLearnerList.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetLearnerList.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Dashboard.Dashboard.Preparation.GetLearnerList.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetLearnerList.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetLearnerList in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT DISTINCT       {Student}.*,      {StudentRAG}.*,      ISNULL({RAGStatus}.[Order],3),      (SELECT {StudentAttendance}.[OverallPercentageAttendance] FROM {StudentAttendance} WHERE {StudentAttendance}.[StudentReference]={Student}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall')  FROM       {Student}  LEFT JOIN       {StudentRAG} ON {Student}.[StudentReference] = {StudentRAG}.[StudentReference]  LEFT JOIN       {RAGStatus} ON {StudentRAG}.[RAG] = {RAGStatus}.[Id]  LEFT JOIN       {StudentLog} ON {Student}.[StudentReference] = {StudentLog}.[StudentReference]  LEFT JOIN       {CauseOfConcern} ON {Student}.[StudentReference] = {CauseOfConcern}.[StudentReference]  LEFT JOIN       {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE       (@IsFavourites = 0 OR {Student}.[StudentReference] IN @MyFavouritesList)  AND       (@IsFavourites = 1 OR {Student}.[StudentReference] IN @MyLearnersList)  AND       (@RedRAGFilterOn  ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetLearnerList in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT DISTINCT       {Student}.*,      {StudentRAG}.*,      ISNULL({RAGStatus}.[Order],3),      (SELECT {StudentAttendance}.[OverallPercentageAttendance] FROM {StudentAttendance} WHERE {StudentAttendance}.[StudentReference]={Student}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall')  FROM       {Student}  LEFT JOIN       {StudentRAG} ON {Student}.[StudentReference] = {StudentRAG}.[StudentReference]  LEFT JOIN       {RAGStatus} ON {StudentRAG}.[RAG] = {RAGStatus}.[Id]  LEFT JOIN       {StudentLog} ON {Student}.[StudentReference] = {StudentLog}.[StudentReference]  LEFT JOIN       {CauseOfConcern} ON {Student}.[StudentReference] = {CauseOfConcern}.[StudentReference]  LEFT JOIN       {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE       (@IsFavourites = 0 OR {Student}.[StudentReference] IN @MyFavouritesList)  AND       (@IsFavourites = 1 OR {Student}.[StudentReference] IN @MyLearnersList)  AND       (@RedRAGFilterOn  ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetLearnerList in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT DISTINCT       {Student}.*,      {StudentRAG}.*,      ISNULL({RAGStatus}.[Order],3),      (SELECT {StudentAttendance}.[OverallPercentageAttendance] FROM {StudentAttendance} WHERE {StudentAttendance}.[StudentReference]={Student}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall')  FROM       {Student}  LEFT JOIN       {StudentRAG} ON {Student}.[StudentReference] = {StudentRAG}.[StudentReference]  LEFT JOIN       {RAGStatus} ON {StudentRAG}.[RAG] = {RAGStatus}.[Id]  LEFT JOIN       {StudentLog} ON {Student}.[StudentReference] = {StudentLog}.[StudentReference]  LEFT JOIN       {CauseOfConcern} ON {Student}.[StudentReference] = {CauseOfConcern}.[StudentReference]  LEFT JOIN       {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE       (@IsFavourites = 0 OR {Student}.[StudentReference] IN @MyFavouritesList)  AND       (@IsFavourites = 1 OR {Student}.[StudentReference] IN @MyLearnersList)  AND       (@RedRAGFilterOn  ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetRAGTotals" of Action "Preparation"
			/// </summary>
			public static RLIntRecordList QueryGetRAGTotals(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstLearnerList, string qpstRedRAG, string qpstFavouritesList, string qpstAmberRAG, bool qpboOnlyActive, string qpstGreenRAG) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query bXyplnyzSUiNq_fNqnzn2A Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstRedRAG", DbType.String, qpstRedRAG);
				sqlCmd.CreateParameter("@qpboOnlyActive", DbType.Boolean, qpboOnlyActive);
				sqlCmd.CreateParameter("@qpstAmberRAG", DbType.String, qpstAmberRAG);
				sqlCmd.CreateParameter("@qpstGreenRAG", DbType.String, qpstGreenRAG);
				string advSql = "SELECT COUNT(DISTINCT( {StudentRAG}.[STUDENTREFERENCE]))  " +
				 "FROM  {StudentRAG}  " +
				 "INNER JOIN  {Student} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentRAG}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstLearnerList) + " AND  {StudentRAG}.[RAG] = @qpstRedRAG  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] = 1)  " +
				 "UNION ALL  " +
				 "SELECT COUNT(DISTINCT( {StudentRAG}.[STUDENTREFERENCE]))  " +
				 "FROM  {StudentRAG}  " +
				 "INNER JOIN  {Student} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentRAG}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstFavouritesList) + " AND  {StudentRAG}.[RAG] = @qpstRedRAG  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] = 1)  " +
				 "UNION ALL  " +
				 "SELECT COUNT(DISTINCT( {StudentRAG}.[STUDENTREFERENCE]))  " +
				 "FROM  {StudentRAG}  " +
				 "INNER JOIN  {Student} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentRAG}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstLearnerList) + " AND  {StudentRAG}.[RAG] = @qpstAmberRAG  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] = 1)  " +
				 "UNION ALL  " +
				 "SELECT COUNT(DISTINCT( {StudentRAG}.[STUDENTREFERENCE]))  " +
				 "FROM  {StudentRAG}  " +
				 "INNER JOIN  {Student} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentRAG}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstFavouritesList) + " AND  {StudentRAG}.[RAG] = @qpstAmberRAG  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] = 1)  " +
				 "UNION ALL  " +
				 "SELECT COUNT(DISTINCT( {StudentRAG}.[STUDENTREFERENCE]))  " +
				 "FROM  {StudentRAG}  " +
				 "INNER JOIN  {Student} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentRAG}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstLearnerList) + " AND  {StudentRAG}.[RAG] = @qpstGreenRAG  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] = 1)  " +
				 "UNION ALL  " +
				 "SELECT COUNT(DISTINCT( {StudentRAG}.[STUDENTREFERENCE]))  " +
				 "FROM  {StudentRAG}  " +
				 "INNER JOIN  {Student} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentRAG}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstFavouritesList) + " AND  {StudentRAG}.[RAG] = @qpstGreenRAG  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] = 1)";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLIntRecordList outParamList = new RLIntRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLIntRecordList _tmp = new RLIntRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.Dashboard.Preparation.GetRAGTotals.List");
							outParamList = (RLIntRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetRAGTotals.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetRAGTotals.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetRAGTotals in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @LearnerList AND {StudentRAG}.[RAG] = @RedRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @FavouritesList AND {StudentRAG}.[RAG] = @RedRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @LearnerList AND {StudentRAG}.[RAG] = @AmberRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SE ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetRAGTotals in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @LearnerList AND {StudentRAG}.[RAG] = @RedRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @FavouritesList AND {StudentRAG}.[RAG] = @RedRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @LearnerList AND {StudentRAG}.[RAG] = @AmberRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SE ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetRAGTotals in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @LearnerList AND {StudentRAG}.[RAG] = @RedRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @FavouritesList AND {StudentRAG}.[RAG] = @RedRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SELECT COUNT(DISTINCT({StudentRAG}.[StudentReference]))  FROM {StudentRAG}  INNER JOIN {Student} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE {StudentRAG}.[StudentReference] IN @LearnerList AND {StudentRAG}.[RAG] = @AmberRAG  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)  UNION ALL  SE ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetAttendanceCount" of Action "Preparation"
			/// </summary>
			public static RLStudentAttendanceTotalsRecordList QueryGetAttendanceCount(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstMyLearnersList, string qpstMyFavouritesList) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query oUCq8+KIhEmTlPaFHqiHcw Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string advSql = "SELECT  {StudentAttendance}.[OVERALLPERCENTAGEATTENDANCE],'MyLearners'  " +
				 "FROM  {Student}  " +
				 "LEFT JOIN  {StudentAttendance} ON  {Student}.[STUDENTREFERENCE] =  {StudentAttendance}.[STUDENTREFERENCE] AND  {StudentAttendance}.[OFFERINGCODE] = 'Overall'  " +
				 "WHERE  {Student}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyLearnersList) + "  " +
				 "UNION ALL  " +
				 "SELECT  {StudentAttendance}.[OVERALLPERCENTAGEATTENDANCE],'Favourites'  " +
				 "FROM  {Student}  " +
				 "LEFT JOIN  {StudentAttendance} ON  {Student}.[STUDENTREFERENCE] =  {StudentAttendance}.[STUDENTREFERENCE] AND  {StudentAttendance}.[OFFERINGCODE] = 'Overall'  " +
				 "WHERE  {Student}.[STUDENTREFERENCE]  IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyFavouritesList) + "";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudentAttendanceTotalsRecordList outParamList = new RLStudentAttendanceTotalsRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentAttendanceTotalsRecordList _tmp = new RLStudentAttendanceTotalsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.Dashboard.Preparation.GetAttendanceCount.List");
							outParamList = (RLStudentAttendanceTotalsRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetAttendanceCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetAttendanceCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetAttendanceCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT {StudentAttendance}.[OverallPercentageAttendance],'MyLearners'  FROM {Student}  LEFT JOIN {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall'  WHERE {Student}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT {StudentAttendance}.[OverallPercentageAttendance],'Favourites'  FROM {Student}  LEFT JOIN {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall'  WHERE {Student}.[StudentReference]  IN @MyFavouritesList  ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetAttendanceCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT {StudentAttendance}.[OverallPercentageAttendance],'MyLearners'  FROM {Student}  LEFT JOIN {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall'  WHERE {Student}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT {StudentAttendance}.[OverallPercentageAttendance],'Favourites'  FROM {Student}  LEFT JOIN {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall'  WHERE {Student}.[StudentReference]  IN @MyFavouritesList  ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetAttendanceCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT {StudentAttendance}.[OverallPercentageAttendance],'MyLearners'  FROM {Student}  LEFT JOIN {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall'  WHERE {Student}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT {StudentAttendance}.[OverallPercentageAttendance],'Favourites'  FROM {Student}  LEFT JOIN {StudentAttendance} ON {Student}.[StudentReference] = {StudentAttendance}.[StudentReference] AND {StudentAttendance}.[OfferingCode] = 'Overall'  WHERE {Student}.[StudentReference]  IN @MyFavouritesList  ): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetConcernNotesCount" of Action "Preparation"
			/// </summary>
			public static RLIntRecordList QueryGetConcernNotesCount(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstMyLearnersList, string qpstMyFavouritesList) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query FirxHbbXGkWkeu7JhQS2Dw Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string advSql = "SELECT COUNT(DISTINCT( {CauseOfConcern}.[STUDENTREFERENCE])) FROM  {CauseOfConcern} WHERE  {CauseOfConcern}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyLearnersList) + "  " +
				 "UNION ALL  " +
				 "SELECT COUNT(DISTINCT( {CauseOfConcern}.[STUDENTREFERENCE])) FROM  {CauseOfConcern} WHERE  {CauseOfConcern}.[STUDENTREFERENCE] IN " + BaseAppUtils.ReplaceEntityReferencesInParameter(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstMyFavouritesList) + "";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLIntRecordList outParamList = new RLIntRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLIntRecordList _tmp = new RLIntRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.Dashboard.Preparation.GetConcernNotesCount.List");
							outParamList = (RLIntRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetConcernNotesCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.Dashboard.Preparation.GetConcernNotesCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetConcernNotesCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({CauseOfConcern}.[StudentReference])) FROM {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT COUNT(DISTINCT({CauseOfConcern}.[StudentReference])) FROM {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] IN @MyFavouritesList): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetConcernNotesCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({CauseOfConcern}.[StudentReference])) FROM {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT COUNT(DISTINCT({CauseOfConcern}.[StudentReference])) FROM {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] IN @MyFavouritesList): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetConcernNotesCount in Preparation in Dashboard in Dashboard in CaseConferencing (SELECT COUNT(DISTINCT({CauseOfConcern}.[StudentReference])) FROM {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] IN @MyLearnersList  UNION ALL  SELECT COUNT(DISTINCT({CauseOfConcern}.[StudentReference])) FROM {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] IN @MyFavouritesList): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Dashboard"; ssLearnersListListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Dashboard", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Dashboard", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetUpdatesCount_outParamList.

			int tmpcurrentrownumberqueryResGetUpdatesCount_outParamList = queryResGetUpdatesCount_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetUpdatesCount_outParamList = queryResGetUpdatesCount_outParamList.Eof;
			ArrayList storequeryResGetUpdatesCount_outParamList = new ArrayList();

			// Write the needed fields of queryResGetUpdatesCount_outParamList to the storequeryResGetUpdatesCount_outParamList
			if (!queryResGetUpdatesCount_outParamList.Empty) {
				try {
					queryResGetUpdatesCount_outParamList.StartIteration();

					while (!queryResGetUpdatesCount_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetUpdatesCount_outParamList = new ArrayList();
						tmpFieldsqueryResGetUpdatesCount_outParamList.Add(queryResGetUpdatesCount_outParamList.CurrentRec.ssSTInt.ssValue == 0?(object) null: queryResGetUpdatesCount_outParamList.CurrentRec.ssSTInt.ssValue);
						storequeryResGetUpdatesCount_outParamList.Add(tmpFieldsqueryResGetUpdatesCount_outParamList);
						queryResGetUpdatesCount_outParamList.Advance();
					}
				} finally {
					queryResGetUpdatesCount_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetUpdatesCount_outParamList", storequeryResGetUpdatesCount_outParamList, null);

			#endregion


			#region store queryResGetUpdatesCount_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetUpdatesCount_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetUpdatesCount_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetUpdatesCount_outParamList_eof", tmpeofqueryResGetUpdatesCount_outParamList, false);
			queryResGetUpdatesCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetUpdatesCount_outParamList, tmpeofqueryResGetUpdatesCount_outParamList);

			#endregion


			#region store queryResGetRAGTotals_outParamList.

			int tmpcurrentrownumberqueryResGetRAGTotals_outParamList = queryResGetRAGTotals_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRAGTotals_outParamList = queryResGetRAGTotals_outParamList.Eof;
			ArrayList storequeryResGetRAGTotals_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRAGTotals_outParamList to the storequeryResGetRAGTotals_outParamList
			if (!queryResGetRAGTotals_outParamList.Empty) {
				try {
					queryResGetRAGTotals_outParamList.StartIteration();

					while (!queryResGetRAGTotals_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRAGTotals_outParamList = new ArrayList();
						tmpFieldsqueryResGetRAGTotals_outParamList.Add(queryResGetRAGTotals_outParamList.CurrentRec.ssSTInt.ssValue == 0?(object) null: queryResGetRAGTotals_outParamList.CurrentRec.ssSTInt.ssValue);
						storequeryResGetRAGTotals_outParamList.Add(tmpFieldsqueryResGetRAGTotals_outParamList);
						queryResGetRAGTotals_outParamList.Advance();
					}
				} finally {
					queryResGetRAGTotals_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRAGTotals_outParamList", storequeryResGetRAGTotals_outParamList, null);

			#endregion


			#region store queryResGetRAGTotals_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRAGTotals_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRAGTotals_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRAGTotals_outParamList_eof", tmpeofqueryResGetRAGTotals_outParamList, false);
			queryResGetRAGTotals_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRAGTotals_outParamList, tmpeofqueryResGetRAGTotals_outParamList);

			#endregion


			#region store queryResGetConcernNotesCount_outParamList.

			int tmpcurrentrownumberqueryResGetConcernNotesCount_outParamList = queryResGetConcernNotesCount_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetConcernNotesCount_outParamList = queryResGetConcernNotesCount_outParamList.Eof;
			ArrayList storequeryResGetConcernNotesCount_outParamList = new ArrayList();

			// Write the needed fields of queryResGetConcernNotesCount_outParamList to the storequeryResGetConcernNotesCount_outParamList
			if (!queryResGetConcernNotesCount_outParamList.Empty) {
				try {
					queryResGetConcernNotesCount_outParamList.StartIteration();

					while (!queryResGetConcernNotesCount_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetConcernNotesCount_outParamList = new ArrayList();
						tmpFieldsqueryResGetConcernNotesCount_outParamList.Add(queryResGetConcernNotesCount_outParamList.CurrentRec.ssSTInt.ssValue == 0?(object) null: queryResGetConcernNotesCount_outParamList.CurrentRec.ssSTInt.ssValue);
						storequeryResGetConcernNotesCount_outParamList.Add(tmpFieldsqueryResGetConcernNotesCount_outParamList);
						queryResGetConcernNotesCount_outParamList.Advance();
					}
				} finally {
					queryResGetConcernNotesCount_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetConcernNotesCount_outParamList", storequeryResGetConcernNotesCount_outParamList, null);

			#endregion


			#region store queryResGetConcernNotesCount_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetConcernNotesCount_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetConcernNotesCount_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetConcernNotesCount_outParamList_eof", tmpeofqueryResGetConcernNotesCount_outParamList, false);
			queryResGetConcernNotesCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetConcernNotesCount_outParamList, tmpeofqueryResGetConcernNotesCount_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("varLcGetUpdatesFromDate", varLcGetUpdatesFromDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcNotSetTotal", varLcNotSetTotal, 0);
			ViewStateAttributes.SetInViewState("varLcNotSetTotalFavourites", varLcNotSetTotalFavourites, 0);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssIsFavourites", varLcDashboardFilter.ssIsFavourites, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssRedRAGFilterOn", varLcDashboardFilter.ssRedRAGFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssAmberRAGFilterOn", varLcDashboardFilter.ssAmberRAGFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssGreenRAGFilterOn", varLcDashboardFilter.ssGreenRAGFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssLatestUpdatesFilterOn", varLcDashboardFilter.ssLatestUpdatesFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssCauseForConcernFilterOn", varLcDashboardFilter.ssCauseForConcernFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssRedAttendanceFilterOn", varLcDashboardFilter.ssRedAttendanceFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssAmberAttendanceFilterOn", varLcDashboardFilter.ssAmberAttendanceFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssGreenAttendanceFilterOn", varLcDashboardFilter.ssGreenAttendanceFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcDashboardFilter_ssNotSetRAGFilterOn", varLcDashboardFilter.ssNotSetRAGFilterOn, false);
			ViewStateAttributes.SetInViewState("varLcOnlyActive", varLcOnlyActive, false);
			ViewStateAttributes.SetInViewState("varLcMyFavouritesList", varLcMyFavouritesList, "");
			ViewStateAttributes.SetInViewState("varLcMyLearnersList", varLcMyLearnersList, "");
			ViewStateAttributes.SetInViewState("varLcMyLearnersCount", varLcMyLearnersCount, 0);
			ViewStateAttributes.SetInViewState("varLcMyFavouritesCount", varLcMyFavouritesCount, 0);
			ViewStateAttributes.SetInViewState("varLcMyLearnersAttendanceGreenCount", varLcMyLearnersAttendanceGreenCount, 0);
			ViewStateAttributes.SetInViewState("varLcMyLearnersAttendanceAmberCount", varLcMyLearnersAttendanceAmberCount, 0);
			ViewStateAttributes.SetInViewState("varLcMyLearnersAttendanceRedCount", varLcMyLearnersAttendanceRedCount, 0);
			ViewStateAttributes.SetInViewState("varLcMyFavouritesAttendanceGreenCount", varLcMyFavouritesAttendanceGreenCount, 0);
			ViewStateAttributes.SetInViewState("varLcMyFavouritesAttendanceAmberCount", varLcMyFavouritesAttendanceAmberCount, 0);
			ViewStateAttributes.SetInViewState("varLcMyFavouritesAttendanceRedCount", varLcMyFavouritesAttendanceRedCount, 0);
			if (IsAjaxRequest) {
				recListLearnersList_Rebuild((ssLearnersListListDataBound ? wtLearnersList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtLearnersList.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetUpdatesCount_outParamList.

				// Read the needed fields of queryResGetUpdatesCount_outParamList from storequeryResGetUpdatesCount_outParamList
				queryResGetUpdatesCount_outParamList = new RLIntRecordList();
				ArrayList storequeryResGetUpdatesCount_outParamList;
				storequeryResGetUpdatesCount_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetUpdatesCount_outParamList", null);
				if (storequeryResGetUpdatesCount_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetUpdatesCount_outParamList in storequeryResGetUpdatesCount_outParamList) {
						if (tmpFieldsqueryResGetUpdatesCount_outParamList != null) {
							// Aux current record variable
							RCIntRecord tmpAuxCurrentRecordqueryResGetUpdatesCount_outParamList = new RCIntRecord(null);
							tmpAuxCurrentRecordqueryResGetUpdatesCount_outParamList.ssSTInt.ssValue = (int) (tmpFieldsqueryResGetUpdatesCount_outParamList[0] == null ? 0: tmpFieldsqueryResGetUpdatesCount_outParamList[0]);

							queryResGetUpdatesCount_outParamList.Append(tmpAuxCurrentRecordqueryResGetUpdatesCount_outParamList);
						}
					}
				}
				queryResGetUpdatesCount_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetUpdatesCount_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetUpdatesCount_outParamList;
				tmpcurrentrownumberqueryResGetUpdatesCount_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetUpdatesCount_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetUpdatesCount_outParamList;
				tmpeofqueryResGetUpdatesCount_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetUpdatesCount_outParamList_eof", false);
				queryResGetUpdatesCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetUpdatesCount_outParamList, tmpeofqueryResGetUpdatesCount_outParamList);

				#endregion


				#region fetch queryResGetRAGTotals_outParamList.

				// Read the needed fields of queryResGetRAGTotals_outParamList from storequeryResGetRAGTotals_outParamList
				queryResGetRAGTotals_outParamList = new RLIntRecordList();
				ArrayList storequeryResGetRAGTotals_outParamList;
				storequeryResGetRAGTotals_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRAGTotals_outParamList", null);
				if (storequeryResGetRAGTotals_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRAGTotals_outParamList in storequeryResGetRAGTotals_outParamList) {
						if (tmpFieldsqueryResGetRAGTotals_outParamList != null) {
							// Aux current record variable
							RCIntRecord tmpAuxCurrentRecordqueryResGetRAGTotals_outParamList = new RCIntRecord(null);
							tmpAuxCurrentRecordqueryResGetRAGTotals_outParamList.ssSTInt.ssValue = (int) (tmpFieldsqueryResGetRAGTotals_outParamList[0] == null ? 0: tmpFieldsqueryResGetRAGTotals_outParamList[0]);

							queryResGetRAGTotals_outParamList.Append(tmpAuxCurrentRecordqueryResGetRAGTotals_outParamList);
						}
					}
				}
				queryResGetRAGTotals_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRAGTotals_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRAGTotals_outParamList;
				tmpcurrentrownumberqueryResGetRAGTotals_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRAGTotals_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRAGTotals_outParamList;
				tmpeofqueryResGetRAGTotals_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRAGTotals_outParamList_eof", false);
				queryResGetRAGTotals_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRAGTotals_outParamList, tmpeofqueryResGetRAGTotals_outParamList);

				#endregion


				#region fetch queryResGetConcernNotesCount_outParamList.

				// Read the needed fields of queryResGetConcernNotesCount_outParamList from storequeryResGetConcernNotesCount_outParamList
				queryResGetConcernNotesCount_outParamList = new RLIntRecordList();
				ArrayList storequeryResGetConcernNotesCount_outParamList;
				storequeryResGetConcernNotesCount_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetConcernNotesCount_outParamList", null);
				if (storequeryResGetConcernNotesCount_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetConcernNotesCount_outParamList in storequeryResGetConcernNotesCount_outParamList) {
						if (tmpFieldsqueryResGetConcernNotesCount_outParamList != null) {
							// Aux current record variable
							RCIntRecord tmpAuxCurrentRecordqueryResGetConcernNotesCount_outParamList = new RCIntRecord(null);
							tmpAuxCurrentRecordqueryResGetConcernNotesCount_outParamList.ssSTInt.ssValue = (int) (tmpFieldsqueryResGetConcernNotesCount_outParamList[0] == null ? 0: tmpFieldsqueryResGetConcernNotesCount_outParamList[0]);

							queryResGetConcernNotesCount_outParamList.Append(tmpAuxCurrentRecordqueryResGetConcernNotesCount_outParamList);
						}
					}
				}
				queryResGetConcernNotesCount_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetConcernNotesCount_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetConcernNotesCount_outParamList;
				tmpcurrentrownumberqueryResGetConcernNotesCount_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetConcernNotesCount_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetConcernNotesCount_outParamList;
				tmpeofqueryResGetConcernNotesCount_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetConcernNotesCount_outParamList_eof", false);
				queryResGetConcernNotesCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetConcernNotesCount_outParamList, tmpeofqueryResGetConcernNotesCount_outParamList);

				#endregion

				varLcGetUpdatesFromDate = (DateTime) ViewStateAttributes.GetFromViewState("varLcGetUpdatesFromDate", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcNotSetTotal = (int) ViewStateAttributes.GetFromViewState("varLcNotSetTotal", 0);
				varLcNotSetTotalFavourites = (int) ViewStateAttributes.GetFromViewState("varLcNotSetTotalFavourites", 0);
				varLcDashboardFilter.ssIsFavourites = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssIsFavourites", false);
				varLcDashboardFilter.ssRedRAGFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssRedRAGFilterOn", false);
				varLcDashboardFilter.ssAmberRAGFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssAmberRAGFilterOn", false);
				varLcDashboardFilter.ssGreenRAGFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssGreenRAGFilterOn", false);
				varLcDashboardFilter.ssLatestUpdatesFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssLatestUpdatesFilterOn", false);
				varLcDashboardFilter.ssCauseForConcernFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssCauseForConcernFilterOn", false);
				varLcDashboardFilter.ssRedAttendanceFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssRedAttendanceFilterOn", false);
				varLcDashboardFilter.ssAmberAttendanceFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssAmberAttendanceFilterOn", false);
				varLcDashboardFilter.ssGreenAttendanceFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssGreenAttendanceFilterOn", false);
				varLcDashboardFilter.ssNotSetRAGFilterOn = (bool) ViewStateAttributes.GetFromViewState("varLcDashboardFilter_ssNotSetRAGFilterOn", false);
				varLcOnlyActive = (bool) ViewStateAttributes.GetFromViewState("varLcOnlyActive", false);
				varLcMyFavouritesList = (string) ViewStateAttributes.GetFromViewState("varLcMyFavouritesList", "");
				varLcMyLearnersList = (string) ViewStateAttributes.GetFromViewState("varLcMyLearnersList", "");
				varLcMyLearnersCount = (int) ViewStateAttributes.GetFromViewState("varLcMyLearnersCount", 0);
				varLcMyFavouritesCount = (int) ViewStateAttributes.GetFromViewState("varLcMyFavouritesCount", 0);
				varLcMyLearnersAttendanceGreenCount = (int) ViewStateAttributes.GetFromViewState("varLcMyLearnersAttendanceGreenCount", 0);
				varLcMyLearnersAttendanceAmberCount = (int) ViewStateAttributes.GetFromViewState("varLcMyLearnersAttendanceAmberCount", 0);
				varLcMyLearnersAttendanceRedCount = (int) ViewStateAttributes.GetFromViewState("varLcMyLearnersAttendanceRedCount", 0);
				varLcMyFavouritesAttendanceGreenCount = (int) ViewStateAttributes.GetFromViewState("varLcMyFavouritesAttendanceGreenCount", 0);
				varLcMyFavouritesAttendanceAmberCount = (int) ViewStateAttributes.GetFromViewState("varLcMyFavouritesAttendanceAmberCount", 0);
				varLcMyFavouritesAttendanceRedCount = (int) ViewStateAttributes.GetFromViewState("varLcMyFavouritesAttendanceRedCount", 0);
				recListLearnersList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
