/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnAutoCompleteBank_List: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnAutoCompleteBank_List(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcAutoBankType</code> that represents the Service Studio local variable
		///  <code>AutoBankType</code> <p>Description: </p>
		/// </summary>
		int varLcAutoBankType = 0;

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance53
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance53;
		/// <summary>
		/// Variable (wt_Link54) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link54;
		protected OutSystems.HubEdition.WebWidgets.Container wtAutoCompleteBankTable_Wrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilters_Wrapper;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox31ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox31 = new SelectRtWidget();
		RLAutoCompleteBankTypeRecordList Rt_wt_ComboBox31_reclist = null;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSearchInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtSearchInputValidatorType;
		/// <summary>
		/// Variable (wt_Button57) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button57;
		/// <summary>
		/// Variable (wt_Button50) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		private RLAutoComplete_BankAutoCompleteBankTypeRecordList _ssAutoCompleteBankTableList = new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
		public RLAutoComplete_BankAutoCompleteBankTypeRecordList ssAutoCompleteBankTableList {
			get {
				return _ssAutoCompleteBankTableList; 
			}
			set {
				_ssAutoCompleteBankTableList = value;
				wtAutoCompleteBankTable.DataSource = value;
				ssAutoCompleteBankTableListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtAutoCompleteBankTable;
		public ArrayList wtAutoCompleteBankTable_storage = new ArrayList();
		protected bool ssAutoCompleteBankTableList_notUsedYet = true;
		protected bool ssAutoCompleteBankTableListDoDataBind;
		protected bool ssAutoCompleteBankTableListDataBound;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox45ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox45 = new SelectRtWidget();
		RLAutoCompleteBankTypeRecordList Rt_wt_ComboBox45_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input61ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input61ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input51ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input51ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input20ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input20ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input55ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input55ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input38ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input38ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		/// <summary>
		/// Variable (wtDeleteAutoComplete) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtDeleteAutoComplete;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container60;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container56;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("JbfuDwgzI0W6M314dPCYdA", "AutoCompleteBank_List");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "JbfuDwgzI0W6M314dPCYdA", "AutoCompleteBank_List");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "JbfuDwgzI0W6M314dPCYdA", "AutoCompleteBank_List");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "JbfuDwgzI0W6M314dPCYdA", "AutoCompleteBank_List");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "JbfuDwgzI0W6M314dPCYdA", "AutoCompleteBank_List");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnAutoCompleteBank_List() {
		}


		RLAutoComplete_BankAutoCompleteBankTypeRecordList queryResGetAutoCompleteBanksByTypeId_outParamList = new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
		int queryResGetAutoCompleteBanksByTypeId_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetAutoCompleteBanksByTypeId
			int datasetGetAutoCompleteBanksByTypeId_maxRecords = Math.Max(wtAutoCompleteBankTable.StartIndex + wtAutoCompleteBankTable.LineCount + 1, 0);
			queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, varLcAutoBankType
			, Functions.rssespacerichwidgets_ActionList_SortColumn_GetOrderBy(heContext, wtAutoCompleteBankTable.ClientID, "{AutoComplete_Bank}.[Category_1]")
			, ((string) Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"])
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "AutoCompleteBank_List.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "AutoCompleteBank_List.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AutoCompleteBank_List", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AutoCompleteBank_List", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance53 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance53");
			wt_Link54 = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wt_Link54");
			wtAutoCompleteBankTable_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAutoCompleteBankTable_Wrapper");
			wtFilters_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilters_Wrapper");
			wt_Button57 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button57");
			if (this.wt_Button57 != null) {
				this.wt_Button57.Click += new System.EventHandler(this.wt_Button57_Click);
			}
			wt_Button50 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button50");
			if (this.wt_Button50 != null) {
				this.wt_Button50.Click += new System.EventHandler(this.wt_Button50_Click);
			}
			wt_Container22 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container22");
			wtAutoCompleteBankTable = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtAutoCompleteBankTable");
			wtAutoCompleteBankTable.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtAutoCompleteBankTable.ClientID, true, -1);
			wtAutoCompleteBankTable.LineCountExpression = () => 50;
			wtAutoCompleteBankTable.EmptyMessageExpression = () => "No auto complete banks to show...";
			wt_Container60 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container60");
			wt_Container56 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container56");
			wt_Container27 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container27");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance6") {
				return ThemeProvider_wt_WebBlockInstance53.wtHelpUpdate.FindControl("wt_WebBlockInstance6");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance29") {
				return ThemeProvider_wt_WebBlockInstance53.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance29");
			}
			if (id == "wt_Text34") {
				return ThemeProvider_wt_WebBlockInstance53.wtTitle.FindControl("wt_Text34");
			}
			if (id == "wt_Link54") {
				return ThemeProvider_wt_WebBlockInstance53.wtActions.FindControl("wt_Link54");
			}
			if (id == "wt_Text11") {
				return ThemeProvider_wt_WebBlockInstance53.wtActions.FindControl("wt_Text11");
			}
			if (id == "wtAutoCompleteBankTable_Wrapper") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wtAutoCompleteBankTable_Wrapper");
			}
			if (id == "wtFilters_Wrapper") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wtFilters_Wrapper");
			}
			if (id == "wt_Text19") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_Text19");
			}
			if (id == "wt_ComboBox31") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_ComboBox31");
			}
			if (id == "wtSearchInput") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wtSearchInput");
			}
			if (id == "wt_Button57") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_Button57");
			}
			if (id == "wt_Button50") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_Button50");
			}
			if (id == "wt_Container22") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_Container22");
			}
			if (id == "wtAutoCompleteBankTable") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wtAutoCompleteBankTable");
			}
			if (id == "wtAutoCompleteBankTableAjaxRfrsh") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wtAutoCompleteBankTableAjaxRfrsh");
			}
			if (id == "wt_TableRecordsHeaderRow64") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_TableRecordsHeaderRow64");
			}
			if (id == "wt_Container60") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_Container60");
			}
			if (id == "wt_Container56") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_Container56");
			}
			if (id == "RichWidgets_wt_WebBlockInstance24") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance24");
			}
			if (id == "wt_Container27") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("wt_Container27");
			}
			if (id == "RichWidgets_wt_WebBlockInstance41") {
				return ThemeProvider_wt_WebBlockInstance53.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance41");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AutoCompleteBank_List"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AutoCompleteBank_List"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssAutoCompleteBankTableListDoDataBind = true;
				Title = "Auto Complete Banks"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AutoCompleteBank_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button57 = wt_Button57 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button57");
			} catch {}
			string jsString = (wt_Button57 != null) ? "return OsEnterKey('" +wt_Button57.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotPLA("PLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("JbfuDwgzI0W6M314dPCYdA"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvOnChange: VarsBag {
			public int resCreateOrUpdateAutoComplete_Bank_outParamId = 0;

			public lcvOnChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnChange localVars = new lcvOnChange();
			try {
				// CreateOrUpdateAutoComplete_Bank
				ExtendedActions.CreateOrUpdateAutoComplete_Bank(heContext, getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ChangedAttributes, ((RCAutoComplete_BankRecord) getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank), out localVars.resCreateOrUpdateAutoComplete_Bank_outParamId);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvRefreshAutoCompleteBankTable: VarsBag {
			public bool inParamResetFilters;
			public bool inParamResetPagination;
			public lcvRefreshAutoCompleteBankTable(bool inParamResetFilters, bool inParamResetPagination) {
				this.inParamResetFilters = inParamResetFilters;
				this.inParamResetPagination = inParamResetPagination;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshAutoCompleteBankTable</code> that represents the Service Studio screen
		///  action <code>RefreshAutoCompleteBankTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshAutoCompleteBankTable(HeContext heContext, bool inParamResetFilters, bool inParamResetPagination) {
			CheckPermissions(heContext);
			lcvRefreshAutoCompleteBankTable localVars = new lcvRefreshAutoCompleteBankTable(inParamResetFilters, inParamResetPagination);
			try {
				if (localVars.inParamResetFilters) {
					// ClearFilters
					Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"] = ""; // AutoCompleteBank_List_SearchKeyword = ""
					// Refresh Widget (wtFilters_Wrapper)
					((OSPageViewState) Page).AjaxRefresh(wtFilters_Wrapper, "None", StoreViewState);

				}
				if (localVars.inParamResetPagination) {
					// ResetStartIndex
					Actions.ActionList_Navigation_ResetStartIndex(heContext, wtAutoCompleteBankTable.ClientID);

				}
				// Query datasetGetAutoCompleteBanksByTypeId
				{
					int datasetGetAutoCompleteBanksByTypeId_maxRecords = Math.Max(wtAutoCompleteBankTable.StartIndex + wtAutoCompleteBankTable.LineCount + 1, 0);
					queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, varLcAutoBankType
					, Functions.rssespacerichwidgets_ActionList_SortColumn_GetOrderBy(heContext, wtAutoCompleteBankTable.ClientID, "{AutoComplete_Bank}.[Category_1]")
					, ((string) Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"])
					);
				}
				// Refresh Widget (wtAutoCompleteBankTable_Wrapper)
				ssAutoCompleteBankTableListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtAutoCompleteBankTable_Wrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDelete: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvDelete() {
			}
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDelete localVars = new lcvDelete();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)) ==ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("tEyHYiOBgEe6CLwwmz5WoQ")).ssId)) {
					// DeleteAutoComplete_Bank
					ExtendedActions.DeleteAutoComplete_Bank(heContext, getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssId);
					// Query datasetGetAutoCompleteBanksByTypeId
					{
						int datasetGetAutoCompleteBanksByTypeId_maxRecords = Math.Max(wtAutoCompleteBankTable.StartIndex + wtAutoCompleteBankTable.LineCount + 1, 0);
						queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, varLcAutoBankType
						, Functions.rssespacerichwidgets_ActionList_SortColumn_GetOrderBy(heContext, wtAutoCompleteBankTable.ClientID, "{AutoComplete_Bank}.[Category_1]")
						, ((string) Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"])
						);
					}
					// Refresh Widget (wtAutoCompleteBankTable)
					ssAutoCompleteBankTableListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtAutoCompleteBankTableAjaxRfrsh"), "None", StoreViewState);
					// Update Screen
					return true;

				} else {
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance53 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance53_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance6 Functions
		/// </summary>
		public void webBlck_WebBlockInstance6_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance29 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance29_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("kQJpaGRLYkWSr3OLG+G8mw")).ssId;
		}
		/// <summary>
		/// wt_Link54 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link54)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link54)</returns>
		public string lnk_Link54_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AutoCompleteBank_Edit", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link54)
		/// </summary>
		/// <returns>title of the Link (wt_Link54)</returns>
		public string
		lnk_Link54_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link54)
		/// </summary>
		/// <returns>The Visible State of wt_Link54</returns>
		public bool lnk_Link54_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link54)
		/// </summary>
		/// <returns>The Enabled State of wt_Link54</returns>
		public bool lnk_Link54_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtAutoCompleteBankTable_Wrapper Functions
		/// </summary>
		public void cntAutoCompleteBankTable_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntAutoCompleteBankTable_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntAutoCompleteBankTable_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntAutoCompleteBankTable_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteBankTable_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteBankTable_Wrapper</returns>
		public bool cntAutoCompleteBankTable_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtFilters_Wrapper Functions
		/// </summary>
		public void cntFilters_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntFilters_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntFilters_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntFilters_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilters_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtFilters_Wrapper</returns>
		public bool cntFilters_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox31 Functions
		/// </summary>
		public void sel_ComboBox31_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wt_ComboBox31_reclist == null) {
				using(Transaction wt_ComboBox31_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wt_ComboBox31_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENAutoCompleteBankTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wt_ComboBox31_sqlCmd = wt_ComboBox31_trans.CreateCommand(wt_ComboBox31_sql);
					Rt_wt_ComboBox31_sqlCmd.CreateParameter("@Selection", varLcAutoBankType);
					Rt_wt_ComboBox31_sqlCmd.TransformParametersSyntax();
					Rt_wt_ComboBox31_reclist = new RLAutoCompleteBankTypeRecordList();
					Rt_wt_ComboBox31_reclist.Transaction = wt_ComboBox31_trans;
					Rt_wt_ComboBox31_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox31_sqlCmd, Rt_wt_ComboBox31_reclist, "WebSelectWidget load operation");
					Rt_wt_ComboBox31_reclist = (RLAutoCompleteBankTypeRecordList) Rt_wt_ComboBox31_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wt_ComboBox31.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wt_ComboBox31_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox31_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox31_reclist.CurrentRec.ssENAutoCompleteBankType.ssLabel, Convert.ToString(Rt_wt_ComboBox31_reclist.CurrentRec.ssENAutoCompleteBankType.ssId)));
					if (varLcAutoBankType == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox31_reclist.CurrentRec.ssENAutoCompleteBankType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox31_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox31_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox31
		/// </summary>
		public void sel_ComboBox31_AjaxChange(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, true, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox31_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox31.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcAutoBankType = 0;
			}
			else {
				Rt_wt_ComboBox31.SpecialListVal = "";
				try {
					varLcAutoBankType = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox31)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox31</returns>
		public bool sel_ComboBox31_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox31)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox31</returns>
		public bool sel_ComboBox31_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox31)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox31</returns>
		public bool sel_ComboBox31_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtSearchInput Functions
		/// </summary>
		public void inputwtSearchInput_onDataBinding(object sender, System.EventArgs e) {
			inputwtSearchInput_setInlineAttributes(sender, e);
		}
		public string inputwtSearchInput_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["title"] = "Type the Category  1, Category  2, Category  3 or Category  4";
			return "";
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtSearchInput_input_value() {
			if (("" != ((string) Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"]))) {
				return ((string) Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"]);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtSearchInput");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ((string) Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"]);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtSearchInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"] = ""; 
				} else {
					Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"] = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				Global.App.OsContext.Session["CaseConferencing.AutoCompleteBank_List_SearchKeyword"] = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtSearchInput)
		/// </summary>
		/// <returns>The Visible State of wtSearchInput</returns>
		public bool inputwtSearchInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtSearchInput)
		/// </summary>
		/// <returns>The Enabled State of wtSearchInput</returns>
		public bool inputwtSearchInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtSearchInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtSearchInput</returns>
		public bool inputwtSearchInput_isMandatory() {
			return false;
		}

		/// <summary>
		/// Gets the prompt of the input (wtSearchInput)
		/// </summary>
		/// <returns>Prompt of the Input (wtSearchInput)</returns>
		public string inputwtSearchInput_getPrompt() {
			return "Type the Category  1, Category  2, Category  3 or Category  4";
		}
		/// <summary>
		/// wt_Button57 Functions
		/// </summary>
		public void btn_Button57_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button57_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandRefreshAutoCompleteBankTable(heContext, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button57)
		/// </summary>
		/// <returns>Label of the Button (wt_Button57)</returns>
		public string
		btn_Button57_getLabel() {
			return "Search";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button57)
		/// </summary>
		/// <returns>The Visible State of wt_Button57</returns>
		public bool btn_Button57_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button57)
		/// </summary>
		/// <returns>The Enabled State of wt_Button57</returns>
		public bool btn_Button57_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button50 Functions
		/// </summary>
		public void btn_Button50_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button50_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandRefreshAutoCompleteBankTable(heContext, true, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button50)
		/// </summary>
		/// <returns>Label of the Button (wt_Button50)</returns>
		public string
		btn_Button50_getLabel() {
			return "Reset";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button50)
		/// </summary>
		/// <returns>The Visible State of wt_Button50</returns>
		public bool btn_Button50_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button50)
		/// </summary>
		/// <returns>The Enabled State of wt_Button50</returns>
		public bool btn_Button50_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container22 Functions
		/// </summary>
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container22_setInlineAttributes(sender, e);
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container22_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			return true;
		}

		/// <summary>
		/// wtAutoCompleteBankTable Functions
		/// </summary>
		public void recTableAutoCompleteBankTable_onDataBinding(object sender, System.EventArgs e) {
			recTableAutoCompleteBankTable_setInlineAttributes(sender, e);
			// widget wtAutoCompleteBankTable
			ssAutoCompleteBankTableList = queryResGetAutoCompleteBanksByTypeId_outParamList;
			ssAutoCompleteBankTableListDoDataBind = false;
			ssAutoCompleteBankTableListDataBound = true;
			wtAutoCompleteBankTable.ShowHeader = true;
		}
		public string recTableAutoCompleteBankTable_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-top:0px;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		public void recTableAutoCompleteBankTable_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssAutoCompleteBankTableList.Length > 0) {
					ssAutoCompleteBankTableList.CurrentRec = ssAutoCompleteBankTableList[ssAutoCompleteBankTableList.CurrentRowNumber];
				}
				if (ssAutoCompleteBankTableList.Length > e.Item.DataSetIndex) {
					ssAutoCompleteBankTableList.CurrentRec = ssAutoCompleteBankTableList[e.Item.DataSetIndex];
					ssAutoCompleteBankTableList.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableAutoCompleteBankTable_Store(object dataItem, int index) {
			RCAutoComplete_BankAutoCompleteBankTypeRecord tmprec = (RCAutoComplete_BankAutoCompleteBankTypeRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENAutoComplete_Bank.ssId == 0?(object) null: tmprec.ssENAutoComplete_Bank.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENAutoComplete_Bank.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENAutoComplete_Bank.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true
			}
			))));
			if (index < wtAutoCompleteBankTable_storage.Count) {
				wtAutoCompleteBankTable_storage[index] = tmpFields;
			} else {
				wtAutoCompleteBankTable_storage.Add(tmpFields);
			}
			return "";
		}
		public void recTableAutoCompleteBankTable_Restore() {

			#region fetch ssAutoCompleteBankTableList.

			// Read the needed fields of ssAutoCompleteBankTableList from storewtAutoCompleteBankTable_list
			ssAutoCompleteBankTableList = new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
			ArrayList storewtAutoCompleteBankTable_list;
			storewtAutoCompleteBankTable_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankTable_list", null);
			if (storewtAutoCompleteBankTable_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtAutoCompleteBankTable_list in storewtAutoCompleteBankTable_list) {
					if (tmpFieldswtAutoCompleteBankTable_list != null) {
						// Aux current record variable
						RCAutoComplete_BankAutoCompleteBankTypeRecord tmpAuxCurrentRecordwtAutoCompleteBankTable_list = new RCAutoComplete_BankAutoCompleteBankTypeRecord(null);
						tmpAuxCurrentRecordwtAutoCompleteBankTable_list.ssENAutoComplete_Bank.ssId = (int) (tmpFieldswtAutoCompleteBankTable_list[0] == null ? 0: tmpFieldswtAutoCompleteBankTable_list[0]);

						tmpAuxCurrentRecordwtAutoCompleteBankTable_list.ssENAutoComplete_Bank.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtAutoCompleteBankTable_list[1]);

						tmpAuxCurrentRecordwtAutoCompleteBankTable_list.ssENAutoComplete_Bank.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtAutoCompleteBankTable_list[2]);

						ssAutoCompleteBankTableList.Append(tmpAuxCurrentRecordwtAutoCompleteBankTable_list);
					}
				}
			}
			ssAutoCompleteBankTableList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssAutoCompleteBankTableList runtime properties state.


			if (storewtAutoCompleteBankTable_list.Count > 0) {
				ssAutoCompleteBankTableList.RestoreRecordListState(storewtAutoCompleteBankTable_list.Count - 1, false);
			} else {
				ssAutoCompleteBankTableList.CurrentRowNumber = 0;
			}

			#endregion

			wtAutoCompleteBankTable_storage = storewtAutoCompleteBankTable_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableAutoCompleteBankTable_Clear(object sender, EventArgs e) {
			wtAutoCompleteBankTable_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableAutoCompleteBankTable_Rebuild(int startIndex, int lineCount) {
			if (ssAutoCompleteBankTableList.Length != -1) {
				wtAutoCompleteBankTable_storage.Clear();
				for (int i=startIndex; i<ssAutoCompleteBankTableList.Data.Count && i<startIndex+lineCount; i++) {
					recTableAutoCompleteBankTable_Store(ssAutoCompleteBankTableList.Data[i], wtAutoCompleteBankTable_storage.Count);
				}
			}
		}
		public void recTableAutoCompleteBankTable_ListRefreshDataBind(object sender, EventArgs e) {
			wtAutoCompleteBankTable.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtAutoCompleteBankTable widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLAutoComplete_BankAutoCompleteBankTypeRecordList getWtAutoCompleteBankTableList() {
			if (ssAutoCompleteBankTableListDoDataBind) {
				recTableAutoCompleteBankTable_onDataBinding(this, null);
			}

			return ssAutoCompleteBankTableList;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance62 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance62_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{AutoCompleteBankType}.[Label]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance62
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance62_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance8 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance8_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{AutoComplete_Bank}.[Category_1]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance8
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance8_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance18 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{AutoComplete_Bank}.[Category_2]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance18
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance18_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance40 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance40_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{AutoComplete_Bank}.[Category_3]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance40
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance40_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance49 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance49_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{AutoComplete_Bank}.[Category_4]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance49
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance49_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance15 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance15_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{AutoComplete_Bank}.[Description]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance15
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance15_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_TableRecordsDataCell30 Functions
		/// </summary>
		public void wt_TableRecordsDataCell30_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsDataCell30_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsDataCell30_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_ComboBox45 Functions
		/// </summary>
		public void sel_ComboBox45_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wt_ComboBox45_reclist == null) {
				using(Transaction wt_ComboBox45_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wt_ComboBox45_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENAutoCompleteBankTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wt_ComboBox45_sqlCmd = wt_ComboBox45_trans.CreateCommand(wt_ComboBox45_sql);
					Rt_wt_ComboBox45_sqlCmd.CreateParameter("@Selection", getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssTypeId);
					Rt_wt_ComboBox45_sqlCmd.TransformParametersSyntax();
					Rt_wt_ComboBox45_reclist = new RLAutoCompleteBankTypeRecordList();
					Rt_wt_ComboBox45_reclist.Transaction = wt_ComboBox45_trans;
					Rt_wt_ComboBox45_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox45_sqlCmd, Rt_wt_ComboBox45_reclist, "WebSelectWidget load operation");
					Rt_wt_ComboBox45_reclist = (RLAutoCompleteBankTypeRecordList) Rt_wt_ComboBox45_reclist.Duplicate();
				}
			}
			Rt_wt_ComboBox45_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox45_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox45_reclist.CurrentRec.ssENAutoCompleteBankType.ssLabel, Convert.ToString(Rt_wt_ComboBox45_reclist.CurrentRec.ssENAutoCompleteBankType.ssId)));
					if (getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssTypeId == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox45_reclist.CurrentRec.ssENAutoCompleteBankType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox45_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox45_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox45
		/// </summary>
		public void sel_ComboBox45_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox45_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			Control parentControl = (Control) sender;
			while (parentControl != null) {
				if (parentControl is DataGridItem)break;
				parentControl = parentControl.Parent;
			}
			int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
			if (ssAutoCompleteBankTableList.Length > parentControlIndex && parentControlIndex > -1) {
				ssAutoCompleteBankTableList.SetPosition(parentControlIndex);
			} else {
				return;
			}
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssTypeId = 0;
			}
			else {
				try {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssTypeId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox45)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox45</returns>
		public bool sel_ComboBox45_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox45)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox45</returns>
		public bool sel_ComboBox45_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox45)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox45</returns>
		public bool sel_ComboBox45_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_TableRecordsDataCell4 Functions
		/// </summary>
		public void wt_TableRecordsDataCell4_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsDataCell4_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsDataCell4_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container42 Functions
		/// </summary>
		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container42_setInlineAttributes(sender, e);
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container42_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Input61 Functions
		/// </summary>
		public void inputwt_Input61_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_Input61
		/// </summary>
		public void inputwt_Input61_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input61_input_value() {
			if (("" !=getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_1)) {
				return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_1;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtAutoCompleteBankTable, "wt_Input61");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_1;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input61_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssAutoCompleteBankTableList.Length > parentControlIndex && parentControlIndex > -1) {
					ssAutoCompleteBankTableList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_1 = ""; 
				} else {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_1 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_1 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input61)
		/// </summary>
		/// <returns>The Visible State of wt_Input61</returns>
		public bool inputwt_Input61_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input61)
		/// </summary>
		/// <returns>The Enabled State of wt_Input61</returns>
		public bool inputwt_Input61_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input61)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input61</returns>
		public bool inputwt_Input61_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_TableRecordsDataCell2 Functions
		/// </summary>
		public void wt_TableRecordsDataCell2_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsDataCell2_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsDataCell2_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Input51 Functions
		/// </summary>
		public void inputwt_Input51_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_Input51
		/// </summary>
		public void inputwt_Input51_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input51_input_value() {
			if (("" !=getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_2)) {
				return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_2;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtAutoCompleteBankTable, "wt_Input51");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_2;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input51_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssAutoCompleteBankTableList.Length > parentControlIndex && parentControlIndex > -1) {
					ssAutoCompleteBankTableList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_2 = ""; 
				} else {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_2 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_2 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input51)
		/// </summary>
		/// <returns>The Visible State of wt_Input51</returns>
		public bool inputwt_Input51_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input51)
		/// </summary>
		/// <returns>The Enabled State of wt_Input51</returns>
		public bool inputwt_Input51_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input51)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input51</returns>
		public bool inputwt_Input51_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_TableRecordsDataCell44 Functions
		/// </summary>
		public void wt_TableRecordsDataCell44_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsDataCell44_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsDataCell44_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Input20 Functions
		/// </summary>
		public void inputwt_Input20_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_Input20
		/// </summary>
		public void inputwt_Input20_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input20_input_value() {
			if (("" !=getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_3)) {
				return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_3;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtAutoCompleteBankTable, "wt_Input20");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_3;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input20_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssAutoCompleteBankTableList.Length > parentControlIndex && parentControlIndex > -1) {
					ssAutoCompleteBankTableList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_3 = ""; 
				} else {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_3 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_3 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input20)
		/// </summary>
		/// <returns>The Visible State of wt_Input20</returns>
		public bool inputwt_Input20_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input20)
		/// </summary>
		/// <returns>The Enabled State of wt_Input20</returns>
		public bool inputwt_Input20_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input20)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input20</returns>
		public bool inputwt_Input20_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_TableRecordsDataCell59 Functions
		/// </summary>
		public void wt_TableRecordsDataCell59_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsDataCell59_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsDataCell59_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Input55 Functions
		/// </summary>
		public void inputwt_Input55_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_Input55
		/// </summary>
		public void inputwt_Input55_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input55_input_value() {
			if (("" !=getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_4)) {
				return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_4;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtAutoCompleteBankTable, "wt_Input55");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_4;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input55_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssAutoCompleteBankTableList.Length > parentControlIndex && parentControlIndex > -1) {
					ssAutoCompleteBankTableList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_4 = ""; 
				} else {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_4 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssCategory_4 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input55)
		/// </summary>
		/// <returns>The Visible State of wt_Input55</returns>
		public bool inputwt_Input55_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input55)
		/// </summary>
		/// <returns>The Enabled State of wt_Input55</returns>
		public bool inputwt_Input55_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input55)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input55</returns>
		public bool inputwt_Input55_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_TableRecordsDataCell35 Functions
		/// </summary>
		public void wt_TableRecordsDataCell35_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsDataCell35_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsDataCell35_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Input38 Functions
		/// </summary>
		public void inputwt_Input38_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_Input38
		/// </summary>
		public void inputwt_Input38_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input38_input_value() {
			if (("" !=getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssDescription)) {
				return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtAutoCompleteBankTable, "wt_Input38");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input38_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssAutoCompleteBankTableList.Length > parentControlIndex && parentControlIndex > -1) {
					ssAutoCompleteBankTableList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssDescription = ""; 
				} else {
					getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtAutoCompleteBankTableList().CurrentRec.ssENAutoComplete_Bank.ssDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input38)
		/// </summary>
		/// <returns>The Visible State of wt_Input38</returns>
		public bool inputwt_Input38_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input38)
		/// </summary>
		/// <returns>The Enabled State of wt_Input38</returns>
		public bool inputwt_Input38_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input38)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input38</returns>
		public bool inputwt_Input38_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_TableRecordsDataCell39 Functions
		/// </summary>
		public void wt_TableRecordsDataCell39_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsDataCell39_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsDataCell39_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container16 Functions
		/// </summary>
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container16_setInlineAttributes(sender, e);
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container16_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			return true;
		}

		/// <summary>
		/// wtDeleteAutoComplete Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtDeleteAutoComplete)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtDeleteAutoComplete)</returns>
		public string lnkDeleteAutoComplete_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("MessageText", System.Web.HttpUtility.UrlEncode("Are you sure you want to delete this item?", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("Title", System.Web.HttpUtility.UrlEncode("Delete autocomplete statement?", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ConfirmationMessageButtons", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("EscapeMessageText", System.Web.HttpUtility.UrlEncode("True", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ConfirmationMessage", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtDeleteAutoComplete)
		/// </summary>
		/// <returns>title of the Link (wtDeleteAutoComplete)</returns>
		public string
		lnkDeleteAutoComplete_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDeleteAutoComplete)
		/// </summary>
		/// <returns>The Visible State of wtDeleteAutoComplete</returns>
		public bool lnkDeleteAutoComplete_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtDeleteAutoComplete)
		/// </summary>
		/// <returns>The Enabled State of wtDeleteAutoComplete</returns>
		public bool lnkDeleteAutoComplete_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance32 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance32_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance7 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance7_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtAutoCompleteBankTable, "wtDeleteAutoComplete").ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = false;
			widget.inParamRecenterOnResize = false;
			widget.inParamHideCloseButton = true;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance7
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance7_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandDelete(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container60 Functions
		/// </summary>
		public void cnt_Container60_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container60_setInlineAttributes(sender, e);
		}
		public string cnt_Container60_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container60_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container60)
		/// </summary>
		/// <returns>The Visible State of wt_Container60</returns>
		public bool cnt_Container60_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container56 Functions
		/// </summary>
		public void cnt_Container56_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container56_setInlineAttributes(sender, e);
		}
		public string cnt_Container56_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container56_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container56)
		/// </summary>
		/// <returns>The Visible State of wt_Container56</returns>
		public bool cnt_Container56_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance24 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter) sender;
			widget.inParamStartIndex = Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtAutoCompleteBankTable.ClientID, true, -1);
			widget.inParamTotalRowCount = queryResGetAutoCompleteBanksByTypeId_outParamCount;
			widget.inParamLineCount = wtAutoCompleteBankTable.RtWidget.LineCount;
		}
		/// <summary>
		/// wt_Container27 Functions
		/// </summary>
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container27_setInlineAttributes(sender, e);
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container27_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance41 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance41_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtAutoCompleteBankTable.ClientID;
			widget.inParamLineCount = wtAutoCompleteBankTable.RtWidget.LineCount;
			widget.inParamTotalRowCount = queryResGetAutoCompleteBanksByTypeId_outParamCount;
			widget.inParamMaxPageNumbers = 5;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance41
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance41_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			, false, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandOnChange {
		}
		public static class FuncCommandRefreshAutoCompleteBankTable {
		}
		public static class FuncCommandDelete {
		}
		public static class FuncssPreparation {

			private static void datasetGetAutoCompleteBanksByTypeIdReadDB(ref RCAutoComplete_BankAutoCompleteBankTypeRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENAutoComplete_Bank.Read(r, ref index);
				rec.ssENAutoCompleteBankType.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetAutoCompleteBanksByTypeId" of Action "Preparation"
			/// </summary>
			public static RLAutoComplete_BankAutoCompleteBankTypeRecordList datasetGetAutoCompleteBanksByTypeId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, string qpstP1, string qpstP2) {
				// Query Iterations: Single {AutoCompleteBankTable}
				// Refresh Query 2+GJu4FIK0WlBPvkgqKUxw Iterations: Single {AutoCompleteBankTable}
				// Refresh Query GhFXlNogxEuzfJwA5WaUmg Iterations: Single {AutoCompleteBankTable}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				string sql = "";
				string sqlCount = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENAutoComplete_Bank.[ID] o1, ENAutoComplete_Bank.[TYPEID] o2, ENAutoComplete_Bank.[CATEGORY_1] o3, ENAutoComplete_Bank.[CATEGORY_2] o4, ENAutoComplete_Bank.[CATEGORY_3] o5, ENAutoComplete_Bank.[CATEGORY_4] o6, ENAutoComplete_Bank.[DESCRIPTION] o7, NULL o8, NULL o9, NULL o10, NULL o11");
				fromBuilder.Append(" FROM ({AutoComplete_Bank} ENAutoComplete_Bank Left JOIN {AutoCompleteBankType} ENAutoCompleteBankType ON (ENAutoComplete_Bank.[TYPEID] = ENAutoCompleteBankType.[ID])) ");
				if (qpstP2 != "" || qpinP != BuiltInFunction.NullIdentifier()) {
					whereBuilder.Append(" WHERE ");
					if (qpstP2 != "") {
						whereBuilder.Append("(((((ENAutoComplete_Bank.[CATEGORY_1] LIKE ((N'%' + @qpstP2) + N'%')) OR (ENAutoComplete_Bank.[CATEGORY_2] LIKE ((N'%' + @qpstP2) + N'%'))) OR (ENAutoComplete_Bank.[CATEGORY_3] LIKE ((N'%' + @qpstP2) + N'%'))) OR (ENAutoComplete_Bank.[CATEGORY_4] LIKE ((N'%' + @qpstP2) + N'%'))) OR (ENAutoComplete_Bank.[DESCRIPTION] LIKE ((N'%' + @qpstP2) + N'%'))) AND ");
						sqlCmd.CreateParameterWithoutReplacements("@qpstP2", DbType.String, qpstP2);
						sqlCountCmd.CreateParameterWithoutReplacements("@qpstP2", DbType.String, qpstP2);
					}
					if (qpinP != BuiltInFunction.NullIdentifier()) {
						if (qpinP != 0) {
							whereBuilder.Append("((ENAutoComplete_Bank.[TYPEID] = @qpinP) AND (ENAutoComplete_Bank.[TYPEID] IS NOT NULL))");
							sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
							sqlCountCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
						} else {
							whereBuilder.Append("(ENAutoComplete_Bank.[TYPEID] IS NULL)");
						}
					}
				}
				string whereBuilderString = whereBuilder.ToString();
				if (whereBuilderString.EndsWith(" AND ")) {
					whereBuilder.Remove(whereBuilderString.Length - 5, 5);
				}
				if (qpstP1.Trim() != "") {
					orderByBuilder.Append(" ORDER BY ");
					List<string> orderByColumns = new List<string>();
					orderByColumns.AddRange(BaseAppUtils.ReplaceEntityReferencesInOrderBy(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstP1, new string[] { "AutoCompleteBankType", "AutoComplete_Bank"
					}
					, new string[] { "ENAutoCompleteBankType", "ENAutoComplete_Bank"
					}
					).Split(','));
					orderByBuilder.Append(BaseAppUtils.GetOrderByColumnsWithoutDuplicates(orderByColumns));
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCount = "SELECT COUNT(1) " + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString();
				sqlCount = AppUtils.Instance.ReplaceEntityReferences(heContext, sqlCount);
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				RLAutoComplete_BankAutoCompleteBankTypeRecordList outParamList = new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetAutoCompleteBanksByTypeIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLAutoComplete_BankAutoCompleteBankTypeRecordList _tmp = new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
					_tmp.AlternateReadDBMethod = datasetGetAutoCompleteBanksByTypeIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.List");
						outParamList = (RLAutoComplete_BankAutoCompleteBankTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						if (maxRecords > 0 && outParamList.Length == maxRecords)
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.Count", false));
						else
						outParamCount = outParamList.Length;
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.Count", false));
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLAutoComplete_BankAutoCompleteBankTypeRecordList _tmp = new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
						_tmp.AlternateReadDBMethod = datasetGetAutoCompleteBanksByTypeIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.List");
							outParamList = (RLAutoComplete_BankAutoCompleteBankTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.AutoCompleteBank_List.Preparation.GetAutoCompleteBanksByTypeId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Auto Complete Banks"; ssAutoCompleteBankTableListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AutoCompleteBank_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AutoCompleteBank_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcAutoBankType", varLcAutoBankType, 0);
			ViewStateAttributes.SetInViewState("wt_ComboBox31_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox31")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtSearchInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSearchInput")).Mandatory, false);
			if (IsAjaxRequest) {
				recTableAutoCompleteBankTable_Rebuild((ssAutoCompleteBankTableListDataBound ? wtAutoCompleteBankTable.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtAutoCompleteBankTable.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankTable_list", wtAutoCompleteBankTable_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				varLcAutoBankType = (int) ViewStateAttributes.GetFromViewState("varLcAutoBankType", 0);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox31")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox31_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtSearchInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSearchInput_Mandatory", false);
				recTableAutoCompleteBankTable_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox31", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtSearchInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(FindControl("wtAutoCompleteBankTable"), "wt_ComboBox45", parentEditRecord, validate);
			ValidationUtils.ValidateInput(FindControl("wtAutoCompleteBankTable"), "wt_Input61", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtAutoCompleteBankTable"), "wt_Input51", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtAutoCompleteBankTable"), "wt_Input20", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtAutoCompleteBankTable"), "wt_Input55", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtAutoCompleteBankTable"), "wt_Input38", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
