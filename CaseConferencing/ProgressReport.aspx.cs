/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowPDF_Export {

	public class ScrnProgressReport: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnProgressReport(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamProgressReportId. Description:
		/// </summary>
		public int inParamProgressReportId = 0;
		protected OutSystems.HubEdition.WebWidgets.Container wtAddressAndLogo;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container91;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		/// <summary>
		/// Variable "True" if the Widget wt_If67
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If67T;

		/// <summary>
		/// Variable "True" if the Widget wt_If67
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If67F;
		protected OutSystems.HubEdition.WebWidgets.Container wtProgressReportTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtMainSection;
		protected OutSystems.HubEdition.WebWidgets.Container wtIntroduction;
		protected OutSystems.HubEdition.WebWidgets.Container wtIntroductionTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtIntroductionText;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversal;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalContent;
		private RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _ssUniversalListList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList ssUniversalListList {
			get {
				return _ssUniversalListList; 
			}
			set {
				_ssUniversalListList = value;
				wtUniversalList.DataSource = value;
				ssUniversalListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtUniversalList;
		public ArrayList wtUniversalList_storage = new ArrayList();
		protected bool ssUniversalListList_notUsedYet = true;
		protected bool ssUniversalListListDoDataBind;
		protected bool ssUniversalListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalCourseName;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalCourseOutline;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container70;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalKeyStrengths;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container34;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container56;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalAreasForDevelopment;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container99;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalPredictedOutcome;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container117;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container73;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversalAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container39;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialist;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialListContent;
		private RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _ssSpecialistListList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList ssSpecialistListList {
			get {
				return _ssSpecialistListList; 
			}
			set {
				_ssSpecialistListList = value;
				wtSpecialistList.DataSource = value;
				ssSpecialistListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtSpecialistList;
		public ArrayList wtSpecialistList_storage = new ArrayList();
		protected bool ssSpecialistListList_notUsedYet = true;
		protected bool ssSpecialistListListDoDataBind;
		protected bool ssSpecialistListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container121;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistCourseName;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistCourseOutline;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistCourseCoordinatorSummary;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container89;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistKeyStrengths;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container57;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistAreasForDevelopment;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistPredictedOutcome;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container97;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container122;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonal;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonalTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonalContent;
		private RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _ssPersonalListList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList ssPersonalListList {
			get {
				return _ssPersonalListList; 
			}
			set {
				_ssPersonalListList = value;
				wtPersonalList.DataSource = value;
				ssPersonalListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtPersonalList;
		public ArrayList wtPersonalList_storage = new ArrayList();
		protected bool ssPersonalListList_notUsedYet = true;
		protected bool ssPersonalListListDoDataBind;
		protected bool ssPersonalListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container65;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonalCourseName;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonalAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container84;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container62;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonalStudyProgrammeOverview;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container80;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container79;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonalEmployability;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container88;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonalWorkExperience;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container40;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container64;
		protected OutSystems.HubEdition.WebWidgets.Container wtSignOff;
		protected OutSystems.HubEdition.WebWidgets.Container wtSignOffTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtSignOffContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container116;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowPDF_Export.WBlkStudentInfo_Print.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("HSdjgPf05EGi6PhLqINYfA", "ProgressReport");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "HSdjgPf05EGi6PhLqINYfA", "ProgressReport");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "HSdjgPf05EGi6PhLqINYfA", "ProgressReport");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "HSdjgPf05EGi6PhLqINYfA", "ProgressReport");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "HSdjgPf05EGi6PhLqINYfA", "ProgressReport");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnProgressReport() {
		}


		RLAcademicYearsProgressReportLogoProgressReportTypeRecordList queryResGetProgressReportById_outParamList = new RLAcademicYearsProgressReportLogoProgressReportTypeRecordList();
		int queryResGetProgressReportById_outParamCount = 0;
		RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList queryResGetUniversalSection_outParamList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetUniversalSection_outParamCount = 0;
		RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList queryResGetSpecialistSections_outParamList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetSpecialistSections_outParamCount = 0;
		RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList queryResGetPersonalSections_outParamList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetPersonalSections_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetProgressReportById
			int datasetGetProgressReportById_maxRecords = 0;
			queryResGetProgressReportById_outParamList = FuncssPreparation.datasetGetProgressReportById(heContext, datasetGetProgressReportById_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportById_outParamCount, inParamProgressReportId
			);
			// Query datasetGetUniversalSection
			int datasetGetUniversalSection_maxRecords = Math.Max(wtUniversalList.StartIndex + wtUniversalList.LineCount + 1, 0);
			queryResGetUniversalSection_outParamList = FuncssPreparation.datasetGetUniversalSection(heContext, datasetGetUniversalSection_maxRecords, IterationMultiplicity.Single, out queryResGetUniversalSection_outParamCount, inParamProgressReportId
			);
			// Query datasetGetSpecialistSections
			int datasetGetSpecialistSections_maxRecords = Math.Max(wtSpecialistList.StartIndex + wtSpecialistList.LineCount + 1, 0);
			queryResGetSpecialistSections_outParamList = FuncssPreparation.datasetGetSpecialistSections(heContext, datasetGetSpecialistSections_maxRecords, IterationMultiplicity.Single, out queryResGetSpecialistSections_outParamCount, inParamProgressReportId
			);
			// Query datasetGetPersonalSections
			int datasetGetPersonalSections_maxRecords = Math.Max(wtPersonalList.StartIndex + wtPersonalList.LineCount + 1, 0);
			queryResGetPersonalSections_outParamList = FuncssPreparation.datasetGetPersonalSections(heContext, datasetGetPersonalSections_maxRecords, IterationMultiplicity.Single, out queryResGetPersonalSections_outParamCount, inParamProgressReportId
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "ProgressReport.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "ProgressReport.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamProgressReportId!=0)) {
				parameters.Add(new Pair<string, string>("ProgressReportId", HttpUtility.UrlEncode(Convert.ToString(inParamProgressReportId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "ProgressReport", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "ProgressReport", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtUniversalList.StartIndexExpression = () => 0;
			wtUniversalList.LineCountExpression = () => 50;
			wtUniversalList.EmptyMessageExpression = () => "No items to show...";
			wtSpecialistList.StartIndexExpression = () => 0;
			wtSpecialistList.LineCountExpression = () => 50;
			wtSpecialistList.EmptyMessageExpression = () => "No items to show...";
			wtPersonalList.StartIndexExpression = () => 0;
			wtPersonalList.LineCountExpression = () => 50;
			wtPersonalList.EmptyMessageExpression = () => "No items to show...";
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_ProgressReport"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamProgressReportId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_ProgressReport"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["ProgressReportId"] != null) {
						inParamProgressReportId = Convert.ToInt32(Request.QueryString["ProgressReportId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["ProgressReportId"] != null) {
						inParamProgressReportId = Convert.ToInt32(Request.Form["ProgressReportId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssUniversalListListDoDataBind = true;
				ssSpecialistListListDoDataBind = true;
				ssPersonalListListDoDataBind = true;
				Title = "ProgressReport"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "ProgressReport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, false);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowPDF_Export.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			return;
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("HSdjgPf05EGi6PhLqINYfA"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// wtAddressAndLogo Functions
		/// </summary>
		public void cntAddressAndLogo_onDataBinding(object sender, System.EventArgs e) {
			cntAddressAndLogo_setInlineAttributes(sender, e);
		}
		public string cntAddressAndLogo_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntAddressAndLogo_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAddressAndLogo)
		/// </summary>
		/// <returns>The Visible State of wtAddressAndLogo</returns>
		public bool cntAddressAndLogo_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container91 Functions
		/// </summary>
		public void cnt_Container91_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container91_setInlineAttributes(sender, e);
		}
		public string cnt_Container91_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container91_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container91)
		/// </summary>
		/// <returns>The Visible State of wt_Container91</returns>
		public bool cnt_Container91_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return (!queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
		}

		/// <summary>
		/// wt_WebBlockInstance38 Functions
		/// </summary>
		public void webBlck_WebBlockInstance38_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowPDF_Export.WBlkStudentInfo_Print widget = (ssCaseConferencing.Flows.FlowPDF_Export.WBlkStudentInfo_Print) sender;
			widget.inParamStudentReference = queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssStudent;
		}
		/// <summary>
		/// wt_Container31 Functions
		/// </summary>
		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container31_setInlineAttributes(sender, e);
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container31_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If67 Functions
		/// </summary>
		bool if_wt_If67_hasRun=false;
		bool if_wt_If67_evalResult;
		public bool if_wt_If67() {
			if (if_wt_If67_hasRun) {
				if_wt_If67_hasRun = false;
				return if_wt_If67_evalResult;
			}
			if_wt_If67_hasRun = true;
			if_wt_If67_evalResult = (queryResGetProgressReportById_outParamList.CurrentRec.ssENLogo.ssId==ENLogoEntity.GetRecordByKey(ObjectKey.Parse("j8SexTSHlkyVsjbE6CM_UQ")).ssId);
			return if_wt_If67_evalResult;
		}

		/// <summary>
		/// wt_Image108 Functions
		/// </summary>

		/// <summary>
		/// Gets the URL of the image (wt_Image108)
		/// </summary>
		/// <returns>URL of the Image (wt_Image108)</returns>
		public string img_Image108_getURL() {
			string url = ("img/" +queryResGetProgressReportById_outParamList.CurrentRec.ssENLogo.ssIconImage);
			url = url.Replace("&amp;", "&");
			return url; 
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image108)
		/// </summary>
		/// <returns>Width of the Image (wt_Image108)</returns>
		public string img_Image108_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(queryResGetProgressReportById_outParamList.CurrentRec.ssENLogo.ssWidth));
		}
		/// <summary>
		/// wtProgressReportTitle Functions
		/// </summary>
		public void cntProgressReportTitle_onDataBinding(object sender, System.EventArgs e) {
			cntProgressReportTitle_setInlineAttributes(sender, e);
		}
		public string cntProgressReportTitle_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:20px;font-weight:bold;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntProgressReportTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtProgressReportTitle)
		/// </summary>
		/// <returns>The Visible State of wtProgressReportTitle</returns>
		public bool cntProgressReportTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression85 Functions
		/// </summary>
		public void expression_InlineExpression85_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression85_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression85_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "style";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = hDDlpwiNP0WZdWxDYcVVOw) Expression: "Progress Report " +
		///  GetProgressReportById.List.Current.ProgressReportType.Label + "("
		/// + GetProgressReportById.List.Current.AcademicYears.FormatB + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression85() {
			return (((("Progress Report " +queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReportType.ssLabel) + "(") +queryResGetProgressReportById_outParamList.CurrentRec.ssENAcademicYears.ssFormatB) + ")");
		}
		/// <summary>
		/// wtMainSection Functions
		/// </summary>
		public void cntMainSection_onDataBinding(object sender, System.EventArgs e) {
			cntMainSection_setInlineAttributes(sender, e);
		}
		public string cntMainSection_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "style";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntMainSection_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtMainSection)
		/// </summary>
		/// <returns>The Visible State of wtMainSection</returns>
		public bool cntMainSection_isVisible() {
			return true;
		}

		/// <summary>
		/// wtIntroduction Functions
		/// </summary>
		public void cntIntroduction_onDataBinding(object sender, System.EventArgs e) {
			cntIntroduction_setInlineAttributes(sender, e);
		}
		public string cntIntroduction_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntIntroduction_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtIntroduction)
		/// </summary>
		/// <returns>The Visible State of wtIntroduction</returns>
		public bool cntIntroduction_isVisible() {
			return queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIntroductionVisible;
		}

		/// <summary>
		/// wtIntroductionTitle Functions
		/// </summary>
		public void cntIntroductionTitle_onDataBinding(object sender, System.EventArgs e) {
			cntIntroductionTitle_setInlineAttributes(sender, e);
		}
		public string cntIntroductionTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntIntroductionTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtIntroductionTitle)
		/// </summary>
		/// <returns>The Visible State of wtIntroductionTitle</returns>
		public bool cntIntroductionTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtIntroductionText Functions
		/// </summary>
		public void cntIntroductionText_onDataBinding(object sender, System.EventArgs e) {
			cntIntroductionText_setInlineAttributes(sender, e);
		}
		public string cntIntroductionText_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntIntroductionText_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtIntroductionText)
		/// </summary>
		/// <returns>The Visible State of wtIntroductionText</returns>
		public bool cntIntroductionText_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression4 Functions
		/// </summary>
		public void expression_InlineExpression4_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression4_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression4_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "style";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = LcZyB4debUm8V+kDp5zC+g) Expression:
		///  GetProgressReportById.List.Current.ProgressReport.Introduction
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIntroduction;
		}
		/// <summary>
		/// wtUniversal Functions
		/// </summary>
		public void cntUniversal_onDataBinding(object sender, System.EventArgs e) {
			cntUniversal_setInlineAttributes(sender, e);
		}
		public string cntUniversal_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversal_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversal)
		/// </summary>
		/// <returns>The Visible State of wtUniversal</returns>
		public bool cntUniversal_isVisible() {
			return queryResGetUniversalSection_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}

		/// <summary>
		/// wtUniversalTitle Functions
		/// </summary>
		public void cntUniversalTitle_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalTitle_setInlineAttributes(sender, e);
		}
		public string cntUniversalTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalTitle)
		/// </summary>
		/// <returns>The Visible State of wtUniversalTitle</returns>
		public bool cntUniversalTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtUniversalContent Functions
		/// </summary>
		public void cntUniversalContent_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalContent_setInlineAttributes(sender, e);
		}
		public string cntUniversalContent_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalContent_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalContent)
		/// </summary>
		/// <returns>The Visible State of wtUniversalContent</returns>
		public bool cntUniversalContent_isVisible() {
			return true;
		}

		/// <summary>
		/// wtUniversalList Functions
		/// </summary>
		public void recListUniversalList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtUniversalList
			ssUniversalListList = queryResGetUniversalSection_outParamList;
			ssUniversalListListDoDataBind = false;
			ssUniversalListListDataBound = true;
		}
		public void recListUniversalList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssUniversalListList.Length > 0) {
					ssUniversalListList.CurrentRec = ssUniversalListList[ssUniversalListList.CurrentRowNumber];
				}
				if (ssUniversalListList.Length > e.SelectedIndex) {
					ssUniversalListList.CurrentRec = ssUniversalListList[e.SelectedIndex];
					ssUniversalListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListUniversalList_Store(object dataItem, int index) {
			return "";
		}
		public void recListUniversalList_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListUniversalList_Clear(object sender, EventArgs e) {
			wtUniversalList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListUniversalList_Rebuild(int startIndex, int lineCount) {
			if (ssUniversalListList.Length != -1) {
				wtUniversalList_storage.Clear();
				for (int i=startIndex; i<ssUniversalListList.Data.Count && i<startIndex+lineCount; i++) {
					recListUniversalList_Store(ssUniversalListList.Data[i], wtUniversalList_storage.Count);
				}
			}
		}
		public void recListUniversalList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtUniversalList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList getWtUniversalListList() {
			if (ssUniversalListListDoDataBind) {
				recListUniversalList_onDataBinding(this, null);
			}

			return ssUniversalListList;
		}
		/// <summary>
		/// wt_Container21 Functions
		/// </summary>
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container21_setInlineAttributes(sender, e);
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container21_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}

		/// <summary>
		/// wtUniversalCourseName Functions
		/// </summary>
		public void cntUniversalCourseName_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalCourseName_setInlineAttributes(sender, e);
		}
		public string cntUniversalCourseName_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalCourseName_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalCourseName)
		/// </summary>
		/// <returns>The Visible State of wtUniversalCourseName</returns>
		public bool cntUniversalCourseName_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression5 Functions
		/// </summary>
		public void expression_InlineExpression5_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression5_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression5_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "line-height:150%;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = XVDWB34FpE+5Z+Ok9pNMyw) Expression:
		///  UniversalList.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return getWtUniversalListList().CurrentRec.ssENGroup.ssGroupDescription;
		}
		/// <summary>
		/// wtUniversalCourseOutline Functions
		/// </summary>
		public void cntUniversalCourseOutline_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalCourseOutline_setInlineAttributes(sender, e);
		}
		public string cntUniversalCourseOutline_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalCourseOutline_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalCourseOutline)
		/// </summary>
		/// <returns>The Visible State of wtUniversalCourseOutline</returns>
		public bool cntUniversalCourseOutline_isVisible() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible;
		}

		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container70 Functions
		/// </summary>
		public void cnt_Container70_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container70_setInlineAttributes(sender, e);
		}
		public string cnt_Container70_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container70_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container70)
		/// </summary>
		/// <returns>The Visible State of wt_Container70</returns>
		public bool cnt_Container70_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression10 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ClVOFb_vREuHzgDZaeck+g) Expression:
		///  UniversalList.List.Current.ProgressReportSection.CourseOutline
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssCourseOutline;
		}
		/// <summary>
		/// wtUniversalKeyStrengths Functions
		/// </summary>
		public void cntUniversalKeyStrengths_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalKeyStrengths_setInlineAttributes(sender, e);
		}
		public string cntUniversalKeyStrengths_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalKeyStrengths_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalKeyStrengths)
		/// </summary>
		/// <returns>The Visible State of wtUniversalKeyStrengths</returns>
		public bool cntUniversalKeyStrengths_isVisible() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible;
		}

		/// <summary>
		/// wt_Container34 Functions
		/// </summary>
		public void cnt_Container34_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container34_setInlineAttributes(sender, e);
		}
		public string cnt_Container34_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container34_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container34)
		/// </summary>
		/// <returns>The Visible State of wt_Container34</returns>
		public bool cnt_Container34_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container56 Functions
		/// </summary>
		public void cnt_Container56_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container56_setInlineAttributes(sender, e);
		}
		public string cnt_Container56_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container56_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container56)
		/// </summary>
		/// <returns>The Visible State of wt_Container56</returns>
		public bool cnt_Container56_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression13 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ecc_GI187UG4yIxwCsb27w) Expression:
		///  UniversalList.List.Current.ProgressReportSection.KeyStrengths
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression13() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssKeyStrengths;
		}
		/// <summary>
		/// wtUniversalAreasForDevelopment Functions
		/// </summary>
		public void cntUniversalAreasForDevelopment_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalAreasForDevelopment_setInlineAttributes(sender, e);
		}
		public string cntUniversalAreasForDevelopment_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalAreasForDevelopment_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalAreasForDevelopment)
		/// </summary>
		/// <returns>The Visible State of wtUniversalAreasForDevelopment</returns>
		public bool cntUniversalAreasForDevelopment_isVisible() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible;
		}

		/// <summary>
		/// wt_Container99 Functions
		/// </summary>
		public void cnt_Container99_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container99_setInlineAttributes(sender, e);
		}
		public string cnt_Container99_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container99_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container99)
		/// </summary>
		/// <returns>The Visible State of wt_Container99</returns>
		public bool cnt_Container99_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container23 Functions
		/// </summary>
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container23_setInlineAttributes(sender, e);
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container23_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression68 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = upzBhgRNxUm48SMxv83ZUg) Expression:
		///  UniversalList.List.Current.ProgressReportSection.AreasForDevelopment
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression68() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment;
		}
		/// <summary>
		/// wtUniversalPredictedOutcome Functions
		/// </summary>
		public void cntUniversalPredictedOutcome_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalPredictedOutcome_setInlineAttributes(sender, e);
		}
		public string cntUniversalPredictedOutcome_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalPredictedOutcome_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalPredictedOutcome)
		/// </summary>
		/// <returns>The Visible State of wtUniversalPredictedOutcome</returns>
		public bool cntUniversalPredictedOutcome_isVisible() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible;
		}

		/// <summary>
		/// wt_Container117 Functions
		/// </summary>
		public void cnt_Container117_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container117_setInlineAttributes(sender, e);
		}
		public string cnt_Container117_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container117_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container117)
		/// </summary>
		/// <returns>The Visible State of wt_Container117</returns>
		public bool cnt_Container117_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container73 Functions
		/// </summary>
		public void cnt_Container73_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container73_setInlineAttributes(sender, e);
		}
		public string cnt_Container73_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container73_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container73)
		/// </summary>
		/// <returns>The Visible State of wt_Container73</returns>
		public bool cnt_Container73_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression100 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Z7WiyiyGuE2vui1avk9fAw) Expression:
		///  UniversalList.List.Current.ProgressReportSection.PredictedOutcome
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression100() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssPredictedOutcome;
		}
		/// <summary>
		/// wtUniversalAttendance Functions
		/// </summary>
		public void cntUniversalAttendance_onDataBinding(object sender, System.EventArgs e) {
			cntUniversalAttendance_setInlineAttributes(sender, e);
		}
		public string cntUniversalAttendance_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUniversalAttendance_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversalAttendance)
		/// </summary>
		/// <returns>The Visible State of wtUniversalAttendance</returns>
		public bool cntUniversalAttendance_isVisible() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssAttendanceVisible;
		}

		/// <summary>
		/// wt_Container39 Functions
		/// </summary>
		public void cnt_Container39_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container39_setInlineAttributes(sender, e);
		}
		public string cnt_Container39_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container39_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container39)
		/// </summary>
		/// <returns>The Visible State of wt_Container39</returns>
		public bool cnt_Container39_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression29 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = J8NBPnErYkaDfoZ91tQz8g) Expression:
		///  UniversalList.List.Current.ProgressReportSection.Attendance
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression29() {
			return getWtUniversalListList().CurrentRec.ssENProgressReportSection.ssAttendance;
		}
		/// <summary>
		/// wtSpecialist Functions
		/// </summary>
		public void cntSpecialist_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialist_setInlineAttributes(sender, e);
		}
		public string cntSpecialist_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialist_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialist)
		/// </summary>
		/// <returns>The Visible State of wtSpecialist</returns>
		public bool cntSpecialist_isVisible() {
			return queryResGetSpecialistSections_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}

		/// <summary>
		/// wtSpecialistTitle Functions
		/// </summary>
		public void cntSpecialistTitle_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistTitle_setInlineAttributes(sender, e);
		}
		public string cntSpecialistTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistTitle)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistTitle</returns>
		public bool cntSpecialistTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSpecialListContent Functions
		/// </summary>
		public void cntSpecialListContent_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialListContent_setInlineAttributes(sender, e);
		}
		public string cntSpecialListContent_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialListContent_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialListContent)
		/// </summary>
		/// <returns>The Visible State of wtSpecialListContent</returns>
		public bool cntSpecialListContent_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSpecialistList Functions
		/// </summary>
		public void recListSpecialistList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtSpecialistList
			ssSpecialistListList = queryResGetSpecialistSections_outParamList;
			ssSpecialistListListDoDataBind = false;
			ssSpecialistListListDataBound = true;
		}
		public void recListSpecialistList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssSpecialistListList.Length > 0) {
					ssSpecialistListList.CurrentRec = ssSpecialistListList[ssSpecialistListList.CurrentRowNumber];
				}
				if (ssSpecialistListList.Length > e.SelectedIndex) {
					ssSpecialistListList.CurrentRec = ssSpecialistListList[e.SelectedIndex];
					ssSpecialistListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListSpecialistList_Store(object dataItem, int index) {
			return "";
		}
		public void recListSpecialistList_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListSpecialistList_Clear(object sender, EventArgs e) {
			wtSpecialistList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListSpecialistList_Rebuild(int startIndex, int lineCount) {
			if (ssSpecialistListList.Length != -1) {
				wtSpecialistList_storage.Clear();
				for (int i=startIndex; i<ssSpecialistListList.Data.Count && i<startIndex+lineCount; i++) {
					recListSpecialistList_Store(ssSpecialistListList.Data[i], wtSpecialistList_storage.Count);
				}
			}
		}
		public void recListSpecialistList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtSpecialistList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList getWtSpecialistListList() {
			if (ssSpecialistListListDoDataBind) {
				recListSpecialistList_onDataBinding(this, null);
			}

			return ssSpecialistListList;
		}
		/// <summary>
		/// wt_Container121 Functions
		/// </summary>
		public void cnt_Container121_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container121_setInlineAttributes(sender, e);
		}
		public string cnt_Container121_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container121_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container121)
		/// </summary>
		/// <returns>The Visible State of wt_Container121</returns>
		public bool cnt_Container121_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}

		/// <summary>
		/// wtSpecialistCourseName Functions
		/// </summary>
		public void cntSpecialistCourseName_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistCourseName_setInlineAttributes(sender, e);
		}
		public string cntSpecialistCourseName_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistCourseName_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistCourseName)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistCourseName</returns>
		public bool cntSpecialistCourseName_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression55 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = L+J7cPKuP0yGDXJ03L97FQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression55() {
			return ((((((((getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible==false) && (getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi==false)) && (getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible==false)) && (getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible==false)) && (getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible==false)) && (getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssAttendanceVisible==false))) ?(""):(getWtSpecialistListList().CurrentRec.ssENGroup.ssGroupDescription));
		}
		/// <summary>
		/// wtSpecialistCourseOutline Functions
		/// </summary>
		public void cntSpecialistCourseOutline_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistCourseOutline_setInlineAttributes(sender, e);
		}
		public string cntSpecialistCourseOutline_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistCourseOutline_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistCourseOutline)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistCourseOutline</returns>
		public bool cntSpecialistCourseOutline_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible;
		}

		/// <summary>
		/// wt_Container36 Functions
		/// </summary>
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container36_setInlineAttributes(sender, e);
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container36_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container18 Functions
		/// </summary>
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container18_setInlineAttributes(sender, e);
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container18_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression75 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ImOqjlUq90OOT0frV+gvsg) Expression:
		///  SpecialistList.List.Current.ProgressReportSection.CourseOutline
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression75() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssCourseOutline;
		}
		/// <summary>
		/// wtSpecialistCourseCoordinatorSummary Functions
		/// </summary>
		public void cntSpecialistCourseCoordinatorSummary_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistCourseCoordinatorSummary_setInlineAttributes(sender, e);
		}
		public string cntSpecialistCourseCoordinatorSummary_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistCourseCoordinatorSummary_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistCourseCoordinatorSummary)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistCourseCoordinatorSummary</returns>
		public bool cntSpecialistCourseCoordinatorSummary_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi;
		}

		/// <summary>
		/// wt_Container50 Functions
		/// </summary>
		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container50_setInlineAttributes(sender, e);
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container50_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container89 Functions
		/// </summary>
		public void cnt_Container89_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container89_setInlineAttributes(sender, e);
		}
		public string cnt_Container89_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container89_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container89)
		/// </summary>
		/// <returns>The Visible State of wt_Container89</returns>
		public bool cnt_Container89_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression82 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = DPqqoM3sYEm6razw87mSeA) Expression:
		///  SpecialistList.List.Current.ProgressReportSection.CourseCoordinatorSummary
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression82() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary;
		}
		/// <summary>
		/// wtSpecialistKeyStrengths Functions
		/// </summary>
		public void cntSpecialistKeyStrengths_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistKeyStrengths_setInlineAttributes(sender, e);
		}
		public string cntSpecialistKeyStrengths_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistKeyStrengths_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistKeyStrengths)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistKeyStrengths</returns>
		public bool cntSpecialistKeyStrengths_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible;
		}

		/// <summary>
		/// wt_Container57 Functions
		/// </summary>
		public void cnt_Container57_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container57_setInlineAttributes(sender, e);
		}
		public string cnt_Container57_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container57_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container57)
		/// </summary>
		/// <returns>The Visible State of wt_Container57</returns>
		public bool cnt_Container57_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container61 Functions
		/// </summary>
		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container61_setInlineAttributes(sender, e);
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container61_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression98 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = AduDwShPBUGWqJvjbRGsFA) Expression:
		///  SpecialistList.List.Current.ProgressReportSection.KeyStrengths
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression98() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssKeyStrengths;
		}
		/// <summary>
		/// wtSpecialistAreasForDevelopment Functions
		/// </summary>
		public void cntSpecialistAreasForDevelopment_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistAreasForDevelopment_setInlineAttributes(sender, e);
		}
		public string cntSpecialistAreasForDevelopment_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistAreasForDevelopment_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistAreasForDevelopment)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistAreasForDevelopment</returns>
		public bool cntSpecialistAreasForDevelopment_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible;
		}

		/// <summary>
		/// wt_Container7 Functions
		/// </summary>
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container7_setInlineAttributes(sender, e);
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container7_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container24 Functions
		/// </summary>
		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container24_setInlineAttributes(sender, e);
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container24_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression15 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = gEZDHD6uHUGmLVD6D5n3cA) Expression:
		///  SpecialistList.List.Current.ProgressReportSection.AreasForDevelopment
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression15() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment;
		}
		/// <summary>
		/// wtSpecialistPredictedOutcome Functions
		/// </summary>
		public void cntSpecialistPredictedOutcome_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistPredictedOutcome_setInlineAttributes(sender, e);
		}
		public string cntSpecialistPredictedOutcome_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistPredictedOutcome_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistPredictedOutcome)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistPredictedOutcome</returns>
		public bool cntSpecialistPredictedOutcome_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible;
		}

		/// <summary>
		/// wt_Container97 Functions
		/// </summary>
		public void cnt_Container97_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container97_setInlineAttributes(sender, e);
		}
		public string cnt_Container97_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container97_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container97)
		/// </summary>
		/// <returns>The Visible State of wt_Container97</returns>
		public bool cnt_Container97_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container47 Functions
		/// </summary>
		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container47_setInlineAttributes(sender, e);
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container47_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression123 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = aRLd+x5On06KaNqqNDGETg) Expression:
		///  SpecialistList.List.Current.ProgressReportSection.PredictedOutcome
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression123() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssPredictedOutcome;
		}
		/// <summary>
		/// wtSpecialistAttendance Functions
		/// </summary>
		public void cntSpecialistAttendance_onDataBinding(object sender, System.EventArgs e) {
			cntSpecialistAttendance_setInlineAttributes(sender, e);
		}
		public string cntSpecialistAttendance_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSpecialistAttendance_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistAttendance)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistAttendance</returns>
		public bool cntSpecialistAttendance_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssAttendanceVisible;
		}

		/// <summary>
		/// wt_Container19 Functions
		/// </summary>
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container19_setInlineAttributes(sender, e);
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container19_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container122 Functions
		/// </summary>
		public void cnt_Container122_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container122_setInlineAttributes(sender, e);
		}
		public string cnt_Container122_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container122_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container122)
		/// </summary>
		/// <returns>The Visible State of wt_Container122</returns>
		public bool cnt_Container122_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression86 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = g67np7unLk+oExYLzVu5hw) Expression:
		///  SpecialistList.List.Current.ProgressReportSection.Attendance
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression86() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSection.ssAttendance;
		}
		/// <summary>
		/// wtPersonal Functions
		/// </summary>
		public void cntPersonal_onDataBinding(object sender, System.EventArgs e) {
			cntPersonal_setInlineAttributes(sender, e);
		}
		public string cntPersonal_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonal_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonal)
		/// </summary>
		/// <returns>The Visible State of wtPersonal</returns>
		public bool cntPersonal_isVisible() {
			return queryResGetPersonalSections_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}

		/// <summary>
		/// wtPersonalTitle Functions
		/// </summary>
		public void cntPersonalTitle_onDataBinding(object sender, System.EventArgs e) {
			cntPersonalTitle_setInlineAttributes(sender, e);
		}
		public string cntPersonalTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonalTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalTitle)
		/// </summary>
		/// <returns>The Visible State of wtPersonalTitle</returns>
		public bool cntPersonalTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtPersonalContent Functions
		/// </summary>
		public void cntPersonalContent_onDataBinding(object sender, System.EventArgs e) {
			cntPersonalContent_setInlineAttributes(sender, e);
		}
		public string cntPersonalContent_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonalContent_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalContent)
		/// </summary>
		/// <returns>The Visible State of wtPersonalContent</returns>
		public bool cntPersonalContent_isVisible() {
			return true;
		}

		/// <summary>
		/// wtPersonalList Functions
		/// </summary>
		public void recListPersonalList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtPersonalList
			ssPersonalListList = queryResGetPersonalSections_outParamList;
			ssPersonalListListDoDataBind = false;
			ssPersonalListListDataBound = true;
		}
		public void recListPersonalList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssPersonalListList.Length > 0) {
					ssPersonalListList.CurrentRec = ssPersonalListList[ssPersonalListList.CurrentRowNumber];
				}
				if (ssPersonalListList.Length > e.SelectedIndex) {
					ssPersonalListList.CurrentRec = ssPersonalListList[e.SelectedIndex];
					ssPersonalListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListPersonalList_Store(object dataItem, int index) {
			return "";
		}
		public void recListPersonalList_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListPersonalList_Clear(object sender, EventArgs e) {
			wtPersonalList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListPersonalList_Rebuild(int startIndex, int lineCount) {
			if (ssPersonalListList.Length != -1) {
				wtPersonalList_storage.Clear();
				for (int i=startIndex; i<ssPersonalListList.Data.Count && i<startIndex+lineCount; i++) {
					recListPersonalList_Store(ssPersonalListList.Data[i], wtPersonalList_storage.Count);
				}
			}
		}
		public void recListPersonalList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtPersonalList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList getWtPersonalListList() {
			if (ssPersonalListListDoDataBind) {
				recListPersonalList_onDataBinding(this, null);
			}

			return ssPersonalListList;
		}
		/// <summary>
		/// wt_Container65 Functions
		/// </summary>
		public void cnt_Container65_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container65_setInlineAttributes(sender, e);
		}
		public string cnt_Container65_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container65_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container65)
		/// </summary>
		/// <returns>The Visible State of wt_Container65</returns>
		public bool cnt_Container65_isVisible() {
			return getWtSpecialistListList().CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}

		/// <summary>
		/// wtPersonalCourseName Functions
		/// </summary>
		public void cntPersonalCourseName_onDataBinding(object sender, System.EventArgs e) {
			cntPersonalCourseName_setInlineAttributes(sender, e);
		}
		public string cntPersonalCourseName_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonalCourseName_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalCourseName)
		/// </summary>
		/// <returns>The Visible State of wtPersonalCourseName</returns>
		public bool cntPersonalCourseName_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression27 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 10f6NgkkTkqhUWhDG0oL5g) Expression:
		///  PersonalList.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression27() {
			return getWtPersonalListList().CurrentRec.ssENGroup.ssGroupDescription;
		}
		/// <summary>
		/// wtPersonalAttendance Functions
		/// </summary>
		public void cntPersonalAttendance_onDataBinding(object sender, System.EventArgs e) {
			cntPersonalAttendance_setInlineAttributes(sender, e);
		}
		public string cntPersonalAttendance_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonalAttendance_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalAttendance)
		/// </summary>
		/// <returns>The Visible State of wtPersonalAttendance</returns>
		public bool cntPersonalAttendance_isVisible() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssAttendanceVisible;
		}

		/// <summary>
		/// wt_Container84 Functions
		/// </summary>
		public void cnt_Container84_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container84_setInlineAttributes(sender, e);
		}
		public string cnt_Container84_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container84_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container84)
		/// </summary>
		/// <returns>The Visible State of wt_Container84</returns>
		public bool cnt_Container84_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container62 Functions
		/// </summary>
		public void cnt_Container62_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container62_setInlineAttributes(sender, e);
		}
		public string cnt_Container62_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container62_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container62)
		/// </summary>
		/// <returns>The Visible State of wt_Container62</returns>
		public bool cnt_Container62_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression35 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = oSifRgyX_0uilLwUvRI4kA) Expression:
		///  PersonalList.List.Current.ProgressReportSection.Attendance
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression35() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssAttendance;
		}
		/// <summary>
		/// wtPersonalStudyProgrammeOverview Functions
		/// </summary>
		public void cntPersonalStudyProgrammeOverview_onDataBinding(object sender, System.EventArgs e) {
			cntPersonalStudyProgrammeOverview_setInlineAttributes(sender, e);
		}
		public string cntPersonalStudyProgrammeOverview_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonalStudyProgrammeOverview_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalStudyProgrammeOverview)
		/// </summary>
		/// <returns>The Visible State of wtPersonalStudyProgrammeOverview</returns>
		public bool cntPersonalStudyProgrammeOverview_isVisible() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl;
		}

		/// <summary>
		/// wt_Container80 Functions
		/// </summary>
		public void cnt_Container80_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container80_setInlineAttributes(sender, e);
		}
		public string cnt_Container80_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container80_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container80)
		/// </summary>
		/// <returns>The Visible State of wt_Container80</returns>
		public bool cnt_Container80_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container79 Functions
		/// </summary>
		public void cnt_Container79_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container79_setInlineAttributes(sender, e);
		}
		public string cnt_Container79_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container79_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container79)
		/// </summary>
		/// <returns>The Visible State of wt_Container79</returns>
		public bool cnt_Container79_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression14 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = T4m1GEGMuk+Ug8pLCa2Ckw) Expression:
		///  PersonalList.List.Current.ProgressReportSection.StudyProgrammeOverview
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression14() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview;
		}
		/// <summary>
		/// wtPersonalEmployability Functions
		/// </summary>
		public void cntPersonalEmployability_onDataBinding(object sender, System.EventArgs e) {
			cntPersonalEmployability_setInlineAttributes(sender, e);
		}
		public string cntPersonalEmployability_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonalEmployability_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalEmployability)
		/// </summary>
		/// <returns>The Visible State of wtPersonalEmployability</returns>
		public bool cntPersonalEmployability_isVisible() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssEmployabilityVisible;
		}

		/// <summary>
		/// wt_Container88 Functions
		/// </summary>
		public void cnt_Container88_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container88_setInlineAttributes(sender, e);
		}
		public string cnt_Container88_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container88_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container88)
		/// </summary>
		/// <returns>The Visible State of wt_Container88</returns>
		public bool cnt_Container88_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container42 Functions
		/// </summary>
		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container42_setInlineAttributes(sender, e);
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container42_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression118 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = EsNB7DnABUWia_uxMIst1Q) Expression:
		///  PersonalList.List.Current.ProgressReportSection.Employability
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression118() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssEmployability;
		}
		/// <summary>
		/// wtPersonalWorkExperience Functions
		/// </summary>
		public void cntPersonalWorkExperience_onDataBinding(object sender, System.EventArgs e) {
			cntPersonalWorkExperience_setInlineAttributes(sender, e);
		}
		public string cntPersonalWorkExperience_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPersonalWorkExperience_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalWorkExperience)
		/// </summary>
		/// <returns>The Visible State of wtPersonalWorkExperience</returns>
		public bool cntPersonalWorkExperience_isVisible() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssWorkExperienceVisible;
		}

		/// <summary>
		/// wt_Container40 Functions
		/// </summary>
		public void cnt_Container40_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container40_setInlineAttributes(sender, e);
		}
		public string cnt_Container40_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container40_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container40)
		/// </summary>
		/// <returns>The Visible State of wt_Container40</returns>
		public bool cnt_Container40_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container64 Functions
		/// </summary>
		public void cnt_Container64_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container64_setInlineAttributes(sender, e);
		}
		public string cnt_Container64_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container64_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container64)
		/// </summary>
		/// <returns>The Visible State of wt_Container64</returns>
		public bool cnt_Container64_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression25 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = JyHrNAU_BEeKvtj4zxmC0w) Expression:
		///  PersonalList.List.Current.ProgressReportSection.WorkExperience
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression25() {
			return getWtPersonalListList().CurrentRec.ssENProgressReportSection.ssWorkExperience;
		}
		/// <summary>
		/// wtSignOff Functions
		/// </summary>
		public void cntSignOff_onDataBinding(object sender, System.EventArgs e) {
			cntSignOff_setInlineAttributes(sender, e);
		}
		public string cntSignOff_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSignOff_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSignOff)
		/// </summary>
		/// <returns>The Visible State of wtSignOff</returns>
		public bool cntSignOff_isVisible() {
			return queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssSignOffVisible;
		}

		/// <summary>
		/// wtSignOffTitle Functions
		/// </summary>
		public void cntSignOffTitle_onDataBinding(object sender, System.EventArgs e) {
			cntSignOffTitle_setInlineAttributes(sender, e);
		}
		public string cntSignOffTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSignOffTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSignOffTitle)
		/// </summary>
		/// <returns>The Visible State of wtSignOffTitle</returns>
		public bool cntSignOffTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSignOffContent Functions
		/// </summary>
		public void cntSignOffContent_onDataBinding(object sender, System.EventArgs e) {
			cntSignOffContent_setInlineAttributes(sender, e);
		}
		public string cntSignOffContent_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSignOffContent_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSignOffContent)
		/// </summary>
		/// <returns>The Visible State of wtSignOffContent</returns>
		public bool cntSignOffContent_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression26 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = LaPDNbWPi065K+QSITRROw) Expression:
		///  GetProgressReportById.List.Current.ProgressReport.Signoff
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression26() {
			return queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssSignoff;
		}
		/// <summary>
		/// wt_Container116 Functions
		/// </summary>
		public void cnt_Container116_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container116_setInlineAttributes(sender, e);
		}
		public string cnt_Container116_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container116_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container116)
		/// </summary>
		/// <returns>The Visible State of wt_Container116</returns>
		public bool cnt_Container116_isVisible() {
			return true;
		}



		public static class FuncssPreparation {

			private static void datasetGetProgressReportByIdReadDB(ref RCAcademicYearsProgressReportLogoProgressReportTypeRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENAcademicYears.Read(r, ref index);
				rec.ssENLogo.Read(r, ref index);
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENProgressReportType.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportById" of Action "Preparation"
			/// </summary>
			public static RLAcademicYearsProgressReportLogoProgressReportTypeRecordList datasetGetProgressReportById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, ENAcademicYears.[FORMATB] o6, NULL o7, NULL o8, NULL o9, NULL o10, ENLogo.[ID] o11, NULL o12, NULL o13, NULL o14, ENLogo.[ICONIMAGE] o15, ENLogo.[WIDTH] o16, NULL o17, ENProgressReport.[STUDENT] o18, NULL o19, NULL o20, ENProgressReport.[ISCOMPLETE] o21, NULL o22, NULL o23, NULL o24, NULL o25, ENProgressReport.[INTRODUCTION] o26, ENProgressReport.[SIGNOFF] o27, ENProgressReport.[INTRODUCTIONVISIBLE] o28, ENProgressReport.[SIGNOFFVISIBLE] o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, ENProgressReportType.[LABEL] o41, NULL o42, NULL o43");
				fromBuilder.Append(" FROM ((({ProgressReport} ENProgressReport Left JOIN {AcademicYears} ENAcademicYears ON (ENProgressReport.[ACADEMICYEAR] = ENAcademicYears.[ID]))  Left JOIN {ProgressReportType} ENProgressReportType ON (ENProgressReport.[PROGRESSREPORTTYPE] = ENProgressReportType.[ID]))  Left JOIN {Logo} ENLogo ON (ENProgressReport.[LOGOID] = ENLogo.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLAcademicYearsProgressReportLogoProgressReportTypeRecordList outParamList = new RLAcademicYearsProgressReportLogoProgressReportTypeRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[4];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, false, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, true, true, true, false, false
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLAcademicYearsProgressReportLogoProgressReportTypeRecordList _tmp = new RLAcademicYearsProgressReportLogoProgressReportTypeRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetProgressReportById.List");
						outParamList = (RLAcademicYearsProgressReportLogoProgressReportTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetProgressReportById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLAcademicYearsProgressReportLogoProgressReportTypeRecordList _tmp = new RLAcademicYearsProgressReportLogoProgressReportTypeRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetProgressReportById.List");
							outParamList = (RLAcademicYearsProgressReportLogoProgressReportTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetProgressReportById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetUniversalSectionReadDB(ref RCGroupCategoryProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCategory.Read(r, ref index);
				rec.ssENGroup.Read(r, ref index);
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetUniversalSection" of Action "Preparation"
			/// </summary>
			public static RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList datasetGetUniversalSection(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {UniversalList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, ENGroup.[GROUPDESCRIPTION] o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, ENProgressReportSection.[COURSEOUTLINE] o19, ENProgressReportSection.[COURSEOUTLINEVISIBLE] o20, NULL o21, NULL o22, NULL o23, ENProgressReportSection.[KEYSTRENGTHS] o24, ENProgressReportSection.[KEYSTRENGTHSVISIBLE] o25, NULL o26, NULL o27, NULL o28, ENProgressReportSection.[AREASFORDEVELOPMENT] o29, ENProgressReportSection.[AREASFORDEVELOPMENTVISIBLE] o30, NULL o31, NULL o32, NULL o33, ENProgressReportSection.[PREDICTEDOUTCOME] o34, ENProgressReportSection.[PREDICTEDOUTCOMEVISIBLE] o35, NULL o36, NULL o37, NULL o38, ENProgressReportSection.[ATTENDANCE] o39, ENProgressReportSection.[ATTENDANCEVISIBLE] o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60, NULL o61, NULL o62, NULL o63, NULL o64, NULL o65, NULL o66, NULL o67, ENProgressReportSections.[SECTIONVISIBLE] o68, NULL o69, NULL o70, NULL o71, NULL o72");
				fromBuilder.Append(" FROM ((({ProgressReportSections} ENProgressReportSections Left JOIN {ProgressReportSection} ENProgressReportSection ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID]))  Left JOIN {Group} ENGroup ON (ENProgressReportSection.[GROUP] = ENGroup.[ID]))  Left JOIN {Category} ENCategory ON (ENGroup.[CATEGORY] = ENCategory.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("XB+m9GjXJ0qMg2YRsbvmGg")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList outParamList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetUniversalSectionReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[4];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetUniversalSectionReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetUniversalSection.List");
						outParamList = (RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetUniversalSection.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetUniversalSectionReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetUniversalSection.List");
							outParamList = (RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetUniversalSection.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetSpecialistSectionsReadDB(ref RCGroupCategoryProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCategory.Read(r, ref index);
				rec.ssENGroup.Read(r, ref index);
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetSpecialistSections" of Action "Preparation"
			/// </summary>
			public static RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList datasetGetSpecialistSections(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {SpecialistList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, ENGroup.[GROUPDESCRIPTION] o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, ENProgressReportSection.[COURSEOUTLINE] o19, ENProgressReportSection.[COURSEOUTLINEVISIBLE] o20, NULL o21, NULL o22, NULL o23, ENProgressReportSection.[KEYSTRENGTHS] o24, ENProgressReportSection.[KEYSTRENGTHSVISIBLE] o25, NULL o26, NULL o27, NULL o28, ENProgressReportSection.[AREASFORDEVELOPMENT] o29, ENProgressReportSection.[AREASFORDEVELOPMENTVISIBLE] o30, NULL o31, NULL o32, NULL o33, ENProgressReportSection.[PREDICTEDOUTCOME] o34, ENProgressReportSection.[PREDICTEDOUTCOMEVISIBLE] o35, NULL o36, NULL o37, NULL o38, ENProgressReportSection.[ATTENDANCE] o39, ENProgressReportSection.[ATTENDANCEVISIBLE] o40, NULL o41, NULL o42, NULL o43, ENProgressReportSection.[COURSECOORDINATORSUMMARY] o44, ENProgressReportSection.[COURSECOORDINATORSUMMARYVISI] o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60, NULL o61, NULL o62, NULL o63, NULL o64, NULL o65, NULL o66, NULL o67, ENProgressReportSections.[SECTIONVISIBLE] o68, NULL o69, NULL o70, NULL o71, NULL o72");
				fromBuilder.Append(" FROM ((({ProgressReportSections} ENProgressReportSections Left JOIN {ProgressReportSection} ENProgressReportSection ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID]))  Left JOIN {Group} ENGroup ON (ENProgressReportSection.[GROUP] = ENGroup.[ID]))  Left JOIN {Category} ENCategory ON (ENGroup.[CATEGORY] = ENCategory.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("fFloxfgF1Em7zQJ43bgF4g")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList outParamList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetSpecialistSectionsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[4];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetSpecialistSectionsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetSpecialistSections.List");
						outParamList = (RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetSpecialistSections.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetSpecialistSectionsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetSpecialistSections.List");
							outParamList = (RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetSpecialistSections.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetPersonalSectionsReadDB(ref RCGroupCategoryProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCategory.Read(r, ref index);
				rec.ssENGroup.Read(r, ref index);
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetPersonalSections" of Action "Preparation"
			/// </summary>
			public static RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList datasetGetPersonalSections(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {PersonalList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, ENGroup.[GROUPDESCRIPTION] o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, ENProgressReportSection.[ATTENDANCE] o39, ENProgressReportSection.[ATTENDANCEVISIBLE] o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEW] o49, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEWVISIBL] o50, NULL o51, NULL o52, NULL o53, ENProgressReportSection.[EMPLOYABILITY] o54, ENProgressReportSection.[EMPLOYABILITYVISIBLE] o55, NULL o56, NULL o57, NULL o58, ENProgressReportSection.[WORKEXPERIENCE] o59, ENProgressReportSection.[WORKEXPERIENCEVISIBLE] o60, NULL o61, NULL o62, NULL o63, NULL o64, NULL o65, NULL o66, NULL o67, ENProgressReportSections.[SECTIONVISIBLE] o68, NULL o69, NULL o70, NULL o71, NULL o72");
				fromBuilder.Append(" FROM ((({ProgressReportSections} ENProgressReportSections Left JOIN {ProgressReportSection} ENProgressReportSection ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID]))  Left JOIN {Group} ENGroup ON (ENProgressReportSection.[GROUP] = ENGroup.[ID]))  Left JOIN {Category} ENCategory ON (ENGroup.[CATEGORY] = ENCategory.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("T5cjSpNDb06Xftq9ynq4mQ")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList outParamList = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetPersonalSectionsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[4];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetPersonalSectionsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetPersonalSections.List");
						outParamList = (RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetPersonalSections.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetPersonalSectionsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query PDF_Export.ProgressReport.Preparation.GetPersonalSections.List");
							outParamList = (RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query PDF_Export.ProgressReport.Preparation.GetPersonalSections.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "ProgressReport"; ssUniversalListListDoDataBind = true;
				ssSpecialistListListDoDataBind = true;
				ssPersonalListListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "ProgressReport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "ProgressReport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			if (IsAjaxRequest) {
				recListUniversalList_Rebuild((ssUniversalListListDataBound ? wtUniversalList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtUniversalList.LineCount);
			}
			if (IsAjaxRequest) {
				recListSpecialistList_Rebuild((ssSpecialistListListDataBound ? wtSpecialistList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtSpecialistList.LineCount);
			}
			if (IsAjaxRequest) {
				recListPersonalList_Rebuild((ssPersonalListListDataBound ? wtPersonalList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtPersonalList.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				recListUniversalList_Restore();
				recListSpecialistList_Restore();
				recListPersonalList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
