/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {

	public class ScrnPopup_ProgressReportSection: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_ProgressReportSection(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamProgressReportSectionId. Description:
		/// </summary>
		public int inParamProgressReportSectionId = 0;
		/// <summary>
		/// Screen Input Parameter inParamProgressReportSubSectionType. Description:
		/// </summary>
		public string inParamProgressReportSubSectionType = "";
		/// <summary>
		/// Screen Input Parameter inParamProgressReportID. Description:
		/// </summary>
		public int inParamProgressReportID = 0;
		/// <summary>
		/// Variable <code>varLcTextInputValue</code> that represents the Service Studio local variable
		///  <code>TextInputValue</code> <p>Description: </p>
		/// </summary>
		string varLcTextInputValue = "";

		/// <summary>
		/// Variable <code>varLcProgressReportSection</code> that represents the Service Studio local variable
		///  <code>ProgressReportSection</code> <p>Description: </p>
		/// </summary>
		RCProgressReportSectionRecord varLcProgressReportSection = new RCProgressReportSectionRecord(null);

		/// <summary>
		/// Variable <code>varLccharCount</code> that represents the Service Studio local variable
		///  <code>charCount</code> <p>Description: </p>
		/// </summary>
		string varLccharCount = "";

		/// <summary>
		/// Variable <code>varLcProgressReport</code> that represents the Service Studio local variable
		///  <code>ProgressReport</code> <p>Description: </p>
		/// </summary>
		RCProgressReportRecord varLcProgressReport = new RCProgressReportRecord(null);

		/// <summary>
		/// Variable <code>varLcCheckBoxValue</code> that represents the Service Studio local variable
		///  <code>CheckBoxValue</code> <p>Description: </p>
		/// </summary>
		bool varLcCheckBoxValue = false;

		/// <summary>
		/// Variable <code>varLcGetProgressReportSubSectionTypeById_ProgressReport</code> that represents the
		///  Service Studio local variable <code>GetProgressReportSubSectionTypeById_ProgressReport</code
		/// > <p>Description: Created by the upgrade of 'GetProgressReportSubSectionTypeById' to an Aggregate.
		///  Corresponds to the old query parameter 'ProgressReportSubSectionTypeId'.</p>
		/// </summary>
		string varLcGetProgressReportSubSectionTypeById_ProgressReport = "";

		/// <summary>
		/// Variable wt_WebBlockInstance10
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTextInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTextInputValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_SetFocus.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("Bf2+Geqo_kO9dgu5oKmBYg", "Popup_ProgressReportSection");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "Bf2+Geqo_kO9dgu5oKmBYg", "Popup_ProgressReportSection");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "Bf2+Geqo_kO9dgu5oKmBYg", "Popup_ProgressReportSection");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "Bf2+Geqo_kO9dgu5oKmBYg", "Popup_ProgressReportSection");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "Bf2+Geqo_kO9dgu5oKmBYg", "Popup_ProgressReportSection");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_ProgressReportSection() {
		}


		RLProgressReportSectionRecordList queryResGetProgressReportSectionById_outParamList = new RLProgressReportSectionRecordList();
		int queryResGetProgressReportSectionById_outParamCount = 0;
		RLProgressReportSubSectionTypeRecordList queryResGetProgressReportSubSectionTypeById_outParamList = new RLProgressReportSubSectionTypeRecordList();
		int queryResGetProgressReportSubSectionTypeById_outParamCount = 0;
		RLProgressReportRecordList queryResGetProgressReportById_outParamList = new RLProgressReportRecordList();
		int queryResGetProgressReportById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			if ((inParamProgressReportSectionId!=BuiltInFunction.NullIdentifier())) {
				// Query datasetGetProgressReportSectionById
				int datasetGetProgressReportSectionById_maxRecords = 0;
				queryResGetProgressReportSectionById_outParamList = FuncssPreparation.datasetGetProgressReportSectionById(heContext, datasetGetProgressReportSectionById_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportSectionById_outParamCount, inParamProgressReportSectionId
				);
				// Created by the upgrade of 'GetProgressReportSubSectionTypeById' to an Aggregate.
				varLcGetProgressReportSubSectionTypeById_ProgressReport = inParamProgressReportSubSectionType; // GetProgressReportSubSectionTypeById_ProgressReport = ProgressReportSubSectionType
				// Query datasetGetProgressReportSubSectionTypeById
				int datasetGetProgressReportSubSectionTypeById_maxRecords = 0;
				queryResGetProgressReportSubSectionTypeById_outParamList = FuncssPreparation.datasetGetProgressReportSubSectionTypeById(heContext, datasetGetProgressReportSubSectionTypeById_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportSubSectionTypeById_outParamCount, varLcGetProgressReportSubSectionTypeById_ProgressReport
				);
				varLcProgressReportSection = ((RCProgressReportSectionRecord) queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection); // ProgressReportSection = GetProgressReportSectionById.List.Current.ProgressReportSection
				if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("SDjuQ6v3MUmu_ig49G0Wzg")).ssId)) {
					varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutline; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.CourseOutline
					varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.CourseOutlineCompleted

				} else {
					if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("v5hrUY5JNUGkxlQ0AvRvwg")).ssId)) {
						varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengths; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.KeyStrengths
						varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.KeyStrengthsCompleted

					} else {
						if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("IPwjcVN7r0KXXjyKfRFWrA")).ssId)) {
							varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopment; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.AreasForDevelopment
							varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.AreasForDevelopmentCompleted

						} else {
							if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("+Hg3vuD2+0ybaSobi9yKCA")).ssId)) {
								varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcome; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.PredictedOutcome
								varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.PredictedOutcomeCompleted

							} else {
								if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("0tie0dcUHUqXgvBcFGY47g")).ssId)) {
									varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.Attendance
									varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.AttendanceCompleted

								} else {
									if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("NOrGml+TsEWTC5Y6yWfgQw")).ssId)) {
										varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.CourseCoordinatorSummary
										varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.CourseCoordinatorCompleted

									} else {
										if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("lFdrAeUXHUG8WRXYzTT5Ew")).ssId)) {
											varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.StudyProgrammeOverview
											varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.StudyProgrammeCompleted

										} else {
											if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("8OI5WKUok0WGw9CbPBKsqA")).ssId)) {
												varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssEmployability; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.Employability
												varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.EmployabilityCompleted

											} else {
												if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("i7cBb_zp1ESXj+SINgWLjw")).ssId)) {
													varLcTextInputValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperience; // TextInputValue = GetProgressReportSectionById.List.Current.ProgressReportSection.WorkExperience
													varLcCheckBoxValue = queryResGetProgressReportSectionById_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceCompleted; // CheckBoxValue = GetProgressReportSectionById.List.Current.ProgressReportSection.WorkExperienceCompleted

												} else {
													return;

												}

											}

										}

									}

								}

							}

						}

					}

				}

			} else {
				// Query datasetGetProgressReportById
				int datasetGetProgressReportById_maxRecords = 0;
				queryResGetProgressReportById_outParamList = FuncssPreparation.datasetGetProgressReportById(heContext, datasetGetProgressReportById_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportById_outParamCount, inParamProgressReportID
				);
				varLcProgressReport = ((RCProgressReportRecord) queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport); // ProgressReport = GetProgressReportById.List.Current.ProgressReport
				if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("+2OdP7dZfkysFXF6+Nl50g")).ssId)) {
					varLcTextInputValue = queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIntroduction; // TextInputValue = GetProgressReportById.List.Current.ProgressReport.Introduction

				} else {
					if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("dzyKNW0zgkeyfCgkmOVTXg")).ssId)) {
						varLcTextInputValue = queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssSignoff; // TextInputValue = GetProgressReportById.List.Current.ProgressReport.Signoff

					} else {
						return;

					}

				}

			}
			varLccharCount = (Convert.ToString(BuiltInFunction.Length(varLcTextInputValue)) + "/2000"); // charCount = Length + "/2000"
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamProgressReportSectionId!=0)) {
				parameters.Add(new Pair<string, string>("ProgressReportSectionId", HttpUtility.UrlEncode(Convert.ToString(inParamProgressReportSectionId), Request.ContentEncoding)));
			}
			if ((inParamProgressReportSubSectionType!= "")) {
				parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", HttpUtility.UrlEncode(inParamProgressReportSubSectionType, Request.ContentEncoding)));
			}
			if ((inParamProgressReportID!=0)) {
				parameters.Add(new Pair<string, string>("ProgressReportID", HttpUtility.UrlEncode(Convert.ToString(inParamProgressReportID), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance10 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance10");
			wt_Container22 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container22");
			wt_Container23 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container23");
			wt_Container1 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container1");
			wt_Container17 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container17");
			wt_Container21 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container21");
			wt_Container13 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container13");
			wt_Container16 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container16");
			wt_Container4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container4");
			wt_Container3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container3");
			wt_Container8 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container8");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_Text11") {
				return wt_WebBlockInstance10.wtTitle.FindControl("wt_Text11");
			}
			if (id == "wt_Container22") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container22");
			}
			if (id == "wt_Container23") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container23");
			}
			if (id == "wt_InlineExpression5") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_InlineExpression5");
			}
			if (id == "wtTextInput") {
				return wt_WebBlockInstance10.wtContent.FindControl("wtTextInput");
			}
			if (id == "wt_Container1") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container1");
			}
			if (id == "wtcharcountHolder") {
				return wt_WebBlockInstance10.wtContent.FindControl("wtcharcountHolder");
			}
			if (id == "wt_Container17") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container17");
			}
			if (id == "wt_CheckBox2") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_CheckBox2");
			}
			if (id == "wt_Text15") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Text15");
			}
			if (id == "wt_Container21") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container21");
			}
			if (id == "wt_Container13") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container13");
			}
			if (id == "wt_Container16") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container16");
			}
			if (id == "Hunspell_wt_WebBlockInstance24") {
				return wt_WebBlockInstance10.wtContent.FindControl("Hunspell_wt_WebBlockInstance24");
			}
			if (id == "wt_Container4") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container4");
			}
			if (id == "wt_WebBlockInstance18") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_WebBlockInstance18");
			}
			if (id == "wt_Container3") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container3");
			}
			if (id == "RichWidgets_wt_WebBlockInstance20") {
				return wt_WebBlockInstance10.wtContent.FindControl("RichWidgets_wt_WebBlockInstance20");
			}
			if (id == "wt_Text25") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Text25");
			}
			if (id == "wt_Container8") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Container8");
			}
			if (id == "wt_Text9") {
				return wt_WebBlockInstance10.wtContent.FindControl("wt_Text9");
			}
			if (id == "RichWidgets_wt_WebBlockInstance7") {
				return wt_WebBlockInstance10.wtContent.FindControl("RichWidgets_wt_WebBlockInstance7");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_ProgressReportSection"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamProgressReportSectionId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamProgressReportSubSectionType = (string) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamProgressReportID = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_ProgressReportSection"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["ProgressReportSectionId"] != null) {
						inParamProgressReportSectionId = Convert.ToInt32(Request.QueryString["ProgressReportSectionId"]);
					}
					if (Request.QueryString["ProgressReportSubSectionType"] != null) {
						inParamProgressReportSubSectionType = Request.QueryString["ProgressReportSubSectionType"];
					}
					if (Request.QueryString["ProgressReportID"] != null) {
						inParamProgressReportID = Convert.ToInt32(Request.QueryString["ProgressReportID"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["ProgressReportSectionId"] != null) {
						inParamProgressReportSectionId = Convert.ToInt32(Request.Form["ProgressReportSectionId"]);
					}
					if (Request.Form["ProgressReportSubSectionType"] != null) {
						inParamProgressReportSubSectionType = Request.Form["ProgressReportSubSectionType"];
					}
					if (Request.Form["ProgressReportID"] != null) {
						inParamProgressReportID = Convert.ToInt32(Request.Form["ProgressReportID"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "Popup ProgressReportSection"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ProgressReportSection", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_ProgressReport.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingBackoffice("CaseConferencingBackoffice role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("Bf2+Geqo_kO9dgu5oKmBYg"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandOnTextInputChange</code> that represents the Service Studio screen action
		///  <code>OnTextInputChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnTextInputChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLccharCount = (Convert.ToString(BuiltInFunction.Length(varLcTextInputValue)) + "/2000"); // charCount = Length + "/2000"
				// Refresh Widget (wtcharcountHolder)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtcharcountHolder"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public int resCreateOrUpdateProgressReportSection_outParamId = 0;

			public int resCreateOrUpdateProgressReport_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				if ((BuiltInFunction.Index(varLcTextInputValue, "~", 0, false, false) >0)) {
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, "Text contains ~ symbol, please replace all with the correct wording.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);

				} else {
					if ((inParamProgressReportSectionId==BuiltInFunction.NullIdentifier())) {
						if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("+2OdP7dZfkysFXF6+Nl50g")).ssId)) {
							varLcProgressReport.ssENProgressReport.ssIntroduction = varLcTextInputValue; // ProgressReport.ProgressReport.Introduction = TextInputValue
							varLcProgressReport.ssENProgressReport.ssIntroductionUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReport.ProgressReport.IntroductionUpdatedBy = UserID
							varLcProgressReport.ssENProgressReport.ssIntroductionUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReport.ProgressReport.IntroductionUpdatedOn = CurrDate

						} else {
							if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("dzyKNW0zgkeyfCgkmOVTXg")).ssId)) {
								varLcProgressReport.ssENProgressReport.ssSignoff = varLcTextInputValue; // ProgressReport.ProgressReport.Signoff = TextInputValue
								varLcProgressReport.ssENProgressReport.ssSignOffUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReport.ProgressReport.SignOffUpdatedBy = UserID
								varLcProgressReport.ssENProgressReport.ssSignOffUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReport.ProgressReport.SignOffUpdatedOn = CurrDate

							} else {
								goto K6nifExFUmkuEwaCRum91xg;

							}

						}
						// CreateOrUpdateProgressReport
						ExtendedActions.CreateOrUpdateProgressReport(heContext, varLcProgressReport.ChangedAttributes, varLcProgressReport, out localVars.resCreateOrUpdateProgressReport_outParamId);

					} else {
						if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("SDjuQ6v3MUmu_ig49G0Wzg")).ssId)) {
							varLcProgressReportSection.ssENProgressReportSection.ssCourseOutline = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.CourseOutline = TextInputValue
							varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.CourseOutlineUpdatedBy = UserID
							varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.CourseOutlineUpdatedOn = CurrDate
							varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.CourseOutlineCompleted = CheckBoxValue

						} else {
							if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("v5hrUY5JNUGkxlQ0AvRvwg")).ssId)) {
								varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengths = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.KeyStrengths = TextInputValue
								varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.KeyStrengthsUpdatedBy = UserID
								varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.KeyStrengthsUpdatedOn = CurrDate
								varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.KeyStrengthsCompleted = CheckBoxValue

							} else {
								if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("IPwjcVN7r0KXXjyKfRFWrA")).ssId)) {
									varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopment = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.AreasForDevelopment = TextInputValue
									varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.AreasForDevelopmentUpdatedBy = UserID
									varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.AreasForDevelopmentUpdatedOn = CurrDate
									varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.AreasForDevelopmentCompleted = CheckBoxValue

								} else {
									if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("+Hg3vuD2+0ybaSobi9yKCA")).ssId)) {
										varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcome = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.PredictedOutcome = TextInputValue
										varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.PredictedOutcomeUpdatedBy = UserID
										varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.PredictedOutcomeUpdatedOn = CurrDate
										varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.PredictedOutcomeCompleted = CheckBoxValue

									} else {
										if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("0tie0dcUHUqXgvBcFGY47g")).ssId)) {
											varLcProgressReportSection.ssENProgressReportSection.ssAttendance = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.Attendance = TextInputValue
											varLcProgressReportSection.ssENProgressReportSection.ssAttendanceUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.AttendanceUpdatedBy = UserID
											varLcProgressReportSection.ssENProgressReportSection.ssAttendanceUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.AttendanceUpdatedOn = CurrDate
											varLcProgressReportSection.ssENProgressReportSection.ssAttendanceCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.AttendanceCompleted = CheckBoxValue

										} else {
											if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("NOrGml+TsEWTC5Y6yWfgQw")).ssId)) {
												varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorSummary = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.CourseCoordinatorSummary = TextInputValue
												varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.CourseCoordinatorUpdatedBy = UserID
												varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.CourseCoordinatorUpdatedOn = CurrDate
												varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.CourseCoordinatorCompleted = CheckBoxValue

											} else {
												if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("lFdrAeUXHUG8WRXYzTT5Ew")).ssId)) {
													varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeOverview = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.StudyProgrammeOverview = TextInputValue
													varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.StudyProgrammeUpdatedBy = UserID
													varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.StudyProgrammeUpdatedOn = CurrDate
													varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.StudyProgrammeCompleted = CheckBoxValue

												} else {
													if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("8OI5WKUok0WGw9CbPBKsqA")).ssId)) {
														varLcProgressReportSection.ssENProgressReportSection.ssEmployability = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.Employability = TextInputValue
														varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityUpdatesdBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.EmployabilityUpdatesdBy = UserID
														varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.EmployabilityUpdatedOn = CurrDate
														varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.EmployabilityCompleted = CheckBoxValue

													} else {
														if ((inParamProgressReportSubSectionType==ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("i7cBb_zp1ESXj+SINgWLjw")).ssId)) {
															varLcProgressReportSection.ssENProgressReportSection.ssWorkExperience = varLcTextInputValue; // ProgressReportSection.ProgressReportSection.WorkExperience = TextInputValue
															varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReportSection.ProgressReportSection.WorkExperienceUpdatedBy = UserID
															varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceUpdatedOn = BuiltInFunction.CurrDate(); // ProgressReportSection.ProgressReportSection.WorkExperienceUpdatedOn = CurrDate
															varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceCompleted = varLcCheckBoxValue; // ProgressReportSection.ProgressReportSection.WorkExperienceCompleted = CheckBoxValue

														}

													}

												}

											}

										}

									}

								}

							}

						}
						// CreateOrUpdateProgressReportSection
						ExtendedActions.CreateOrUpdateProgressReportSection(heContext, varLcProgressReportSection.ChangedAttributes, varLcProgressReportSection, out localVars.resCreateOrUpdateProgressReportSection_outParamId);

					}
					// Popup_Editor_Notify
					Actions.ActionPopup_Editor_Notify(heContext, "");
					// Popup_Editor_Close
					Actions.ActionPopup_Editor_Close(heContext);
					// Update Screen
					return true;

				}
				K6nifExFUmkuEwaCRum91xg:// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandClose</code> that represents the Service Studio screen action
		///  <code>Close</code> <p> Description: </p>
		/// </summary>
		private bool CommandClose(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance10 Functions
		/// </summary>
		public void webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 550;
		}
		/// <summary>
		/// wt_Container22 Functions
		/// </summary>
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container22_setInlineAttributes(sender, e);
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container22_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container23 Functions
		/// </summary>
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container23_setInlineAttributes(sender, e);
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:16px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container23_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression5 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 9j0HNt16fkmXIy+366Pw8w) Expression:
		///  GetProgressReportSubSectionTypeById.List.Current.ProgressReportSubSectionType.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return queryResGetProgressReportSubSectionTypeById_outParamList.CurrentRec.ssENProgressReportSubSectionType.ssLabel;
		}
		/// <summary>
		/// wtTextInput Functions
		/// </summary>
		public void inputwtTextInput_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wtTextInput
		/// </summary>
		public void inputwtTextInput_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnTextInputChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTextInput_input_value() {
			if (("" !=varLcTextInputValue)) {
				return varLcTextInputValue;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTextInput");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcTextInputValue;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTextInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcTextInputValue = ""; 
				} else {
					varLcTextInputValue = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcTextInputValue = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTextInput)
		/// </summary>
		/// <returns>The Visible State of wtTextInput</returns>
		public bool inputwtTextInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTextInput)
		/// </summary>
		/// <returns>The Enabled State of wtTextInput</returns>
		public bool inputwtTextInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTextInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTextInput</returns>
		public bool inputwtTextInput_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container1 Functions
		/// </summary>
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container1_setInlineAttributes(sender, e);
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container1_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			return true;
		}

		/// <summary>
		/// wtcharcountHolder Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = wriK3AFd7kqa7nefj93c1g) Expression: charCount
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expressioncharcountHolder() {
			return varLccharCount;
		}
		/// <summary>
		/// wt_Container17 Functions
		/// </summary>
		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container17_setInlineAttributes(sender, e);
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container17_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox2 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 0SVZJ9CqfEShcsJNyC8VIw
		/// </summary>
		/// <returns>The Value of the Check Box 0SVZJ9CqfEShcsJNyC8VIw</returns>
		public bool chk_CheckBox2_checked_value() {
			return varLcCheckBoxValue;
		}
		public void chk_CheckBox2_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				varLcCheckBoxValue = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox2)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox2</returns>
		public bool chk_CheckBox2_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox2)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox2</returns>
		public bool chk_CheckBox2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container21 Functions
		/// </summary>
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container21_setInlineAttributes(sender, e);
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container21_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container13 Functions
		/// </summary>
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container13_setInlineAttributes(sender, e);
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container13_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container16 Functions
		/// </summary>
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container16_setInlineAttributes(sender, e);
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container16_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			return true;
		}

		/// <summary>
		/// Hunspell_wt_WebBlockInstance24 Functions
		/// </summary>
		public void Hunspell_webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
			widget.inParamTextInputId = this.FindControl("wtTextInput").ClientID;
			widget.inParamExtraStyle = "";
			widget.inParamInPopupWindow = true;
		}
		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance18 Functions
		/// </summary>
		public void webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon widget = (ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon) sender;
			widget.inParamTextInputId = this.FindControl("wtTextInput").ClientID;
			widget.inParamAutoCompleteType = ENAutoCompleteBankTypeEntity.GetRecordByKey(ObjectKey.Parse("TXgF3mr6BkiKrq5gpMS8sw")).ssId;
		}
		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container3
		/// </summary>
		public void cnt_Container3_AjaxClick(object sender, System.EventArgs e) {
			if (CommandSave(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance20 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance20_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container8 Functions
		/// </summary>
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container8_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container8_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container8
		/// </summary>
		public void cnt_Container8_AjaxClick(object sender, System.EventArgs e) {
			if (CommandClose(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance7 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance7_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_SetFocus widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_SetFocus) sender;
			widget.inParamInputWidgetId = this.FindControl("wtTextInput").ClientID;
		}


		public static class FuncCommandOnTextInputChange {
		}
		public static class FuncCommandSave {
		}
		public static class FuncCommandClose {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetProgressReportSectionById" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSectionRecordList datasetGetProgressReportSectionById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportSection.[ID] o1, NULL o2, NULL o3, NULL o4, ENProgressReportSection.[COURSEOUTLINE] o5, NULL o6, ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] o7, ENProgressReportSection.[COURSEOUTLINEUPDATEDON] o8, ENProgressReportSection.[COURSEOUTLINECOMPLETED] o9, ENProgressReportSection.[KEYSTRENGTHS] o10, NULL o11, ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] o12, ENProgressReportSection.[KEYSTRENGTHSUPDATEDON] o13, ENProgressReportSection.[KEYSTRENGTHSCOMPLETED] o14, ENProgressReportSection.[AREASFORDEVELOPMENT] o15, NULL o16, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] o17, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDON] o18, ENProgressReportSection.[AREASFORDEVELOPMENTCOMPLETED] o19, ENProgressReportSection.[PREDICTEDOUTCOME] o20, NULL o21, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] o22, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDON] o23, ENProgressReportSection.[PREDICTEDOUTCOMECOMPLETED] o24, ENProgressReportSection.[ATTENDANCE] o25, NULL o26, ENProgressReportSection.[ATTENDANCEUPDATEDBY] o27, ENProgressReportSection.[ATTENDANCEUPDATEDON] o28, ENProgressReportSection.[ATTENDANCECOMPLETED] o29, ENProgressReportSection.[COURSECOORDINATORSUMMARY] o30, NULL o31, ENProgressReportSection.[COURSECOORDINATORUPDATEDBY] o32, ENProgressReportSection.[COURSECOORDINATORUPDATEDON] o33, ENProgressReportSection.[COURSECOORDINATORCOMPLETED] o34, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEW] o35, NULL o36" +
				", ENProgressReportSection.[STUDYPROGRAMMEUPDATEDBY] o37, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDON] o38, ENProgressReportSection.[STUDYPROGRAMMECOMPLETED] o39, ENProgressReportSection.[EMPLOYABILITY] o40, NULL o41, ENProgressReportSection.[EMPLOYABILITYUPDATESDBY] o42, ENProgressReportSection.[EMPLOYABILITYUPDATEDON] o43, ENProgressReportSection.[EMPLOYABILITYCOMPLETED] o44, ENProgressReportSection.[WORKEXPERIENCE] o45, NULL o46, ENProgressReportSection.[WORKEXPERIENCEUPDATEDBY] o47, ENProgressReportSection.[WORKEXPERIENCEUPDATEDON] o48, ENProgressReportSection.[WORKEXPERIENCECOMPLETED] o49");
				fromBuilder.Append(" FROM {ProgressReportSection} ENProgressReportSection");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSection.[ID] = @qpinP) AND (ENProgressReportSection.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSection.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionRecordList outParamList = new RLProgressReportSectionRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionRecordList _tmp = new RLProgressReportSectionRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSectionById.List");
						outParamList = (RLProgressReportSectionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSectionById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionRecordList _tmp = new RLProgressReportSectionRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSectionById.List");
							outParamList = (RLProgressReportSectionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSectionById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetProgressReportSubSectionTypeById" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSubSectionTypeRecordList datasetGetProgressReportSubSectionTypeById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENProgressReportSubSectionType.[LABEL] o2, NULL o3, NULL o4");
				fromBuilder.Append(" FROM {ProgressReportSubSectionType} ENProgressReportSubSectionType");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENProgressReportSubSectionType.[ID] = @qpstP) AND (ENProgressReportSubSectionType.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENProgressReportSubSectionType.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSubSectionTypeRecordList outParamList = new RLProgressReportSubSectionTypeRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSubSectionTypeRecordList _tmp = new RLProgressReportSubSectionTypeRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSubSectionTypeById.List");
						outParamList = (RLProgressReportSubSectionTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSubSectionTypeById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSubSectionTypeRecordList _tmp = new RLProgressReportSubSectionTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSubSectionTypeById.List");
							outParamList = (RLProgressReportSubSectionTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportSubSectionTypeById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetProgressReportById" of Action "Preparation"
			/// </summary>
			public static RLProgressReportRecordList datasetGetProgressReportById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReport.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, ENProgressReport.[INTRODUCTION] o10, ENProgressReport.[SIGNOFF] o11, NULL o12, NULL o13, ENProgressReport.[INTRODUCTIONUPDATEDBY] o14, ENProgressReport.[INTRODUCTIONUPDATEDON] o15, ENProgressReport.[SIGNOFFUPDATEDBY] o16, ENProgressReport.[SIGNOFFUPDATEDON] o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23");
				fromBuilder.Append(" FROM {ProgressReport} ENProgressReport");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportRecordList outParamList = new RLProgressReportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportById.List");
						outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportById.List");
							outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReportSection.Preparation.GetProgressReportById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Popup ProgressReportSection"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ProgressReportSection", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ProgressReportSection", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamProgressReportSectionId", inParamProgressReportSectionId, 0);
			ViewStateAttributes.SetInViewState("inParamProgressReportSubSectionType", inParamProgressReportSubSectionType, "");
			ViewStateAttributes.SetInViewState("varLcTextInputValue", varLcTextInputValue, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssId", varLcProgressReportSection.ssENProgressReportSection.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutline", varLcProgressReportSection.ssENProgressReportSection.ssCourseOutline, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutlineUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutlineUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutlineCompleted", varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengths", varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengths, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengthsUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengthsUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengthsCompleted", varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopment", varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopment, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopmentUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopmentUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopmentCompleted", varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcome", varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcome, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcomeUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcomeUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcomeCompleted", varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendance", varLcProgressReportSection.ssENProgressReportSection.ssAttendance, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendanceUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssAttendanceUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendanceUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssAttendanceUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendanceCompleted", varLcProgressReportSection.ssENProgressReportSection.ssAttendanceCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorSummary", varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorSummary, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorCompleted", varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeOverview", varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeOverview, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeCompleted", varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployability", varLcProgressReportSection.ssENProgressReportSection.ssEmployability, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployabilityUpdatesdBy", varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityUpdatesdBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployabilityUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployabilityCompleted", varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperience", varLcProgressReportSection.ssENProgressReportSection.ssWorkExperience, "");
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperienceUpdatedBy", varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperienceUpdatedOn", varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperienceCompleted", varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceCompleted, false);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcProgressReportSection.ssENProgressReportSection.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcProgressReportSection_ssENProgressReportSection_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcProgressReportSection.ssENProgressReportSection.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ssId", varLcProgressReport.ssENProgressReport.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ssIntroduction", varLcProgressReport.ssENProgressReport.ssIntroduction, "");
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ssSignoff", varLcProgressReport.ssENProgressReport.ssSignoff, "");
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ssIntroductionUpdatedBy", varLcProgressReport.ssENProgressReport.ssIntroductionUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ssIntroductionUpdatedOn", varLcProgressReport.ssENProgressReport.ssIntroductionUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ssSignOffUpdatedBy", varLcProgressReport.ssENProgressReport.ssSignOffUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ssSignOffUpdatedOn", varLcProgressReport.ssENProgressReport.ssSignOffUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcProgressReport.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcProgressReport_ssENProgressReport_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcProgressReport.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcCheckBoxValue", varLcCheckBoxValue, false);
			ViewStateAttributes.SetInViewState("wtTextInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTextInput")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamProgressReportSectionId = (int) ViewStateAttributes.GetFromViewState("inParamProgressReportSectionId", 0);
				inParamProgressReportSubSectionType = (string) ViewStateAttributes.GetFromViewState("inParamProgressReportSubSectionType", "");
				varLcTextInputValue = (string) ViewStateAttributes.GetFromViewState("varLcTextInputValue", "");
				varLcProgressReportSection.ssENProgressReportSection.ssId = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssId", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssCourseOutline = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutline", "");
				varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutlineUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutlineUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseOutlineCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengths = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengths", "");
				varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengthsUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengthsUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssKeyStrengthsCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopment = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopment", "");
				varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopmentUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopmentUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAreasForDevelopmentCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcome = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcome", "");
				varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcomeUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcomeUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssPredictedOutcomeCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssAttendance = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendance", "");
				varLcProgressReportSection.ssENProgressReportSection.ssAttendanceUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendanceUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssAttendanceUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendanceUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssAttendanceCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssAttendanceCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorSummary = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorSummary", "");
				varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssCourseCoordinatorCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeOverview = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeOverview", "");
				varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssStudyProgrammeCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssEmployability = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployability", "");
				varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityUpdatesdBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployabilityUpdatesdBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployabilityUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssEmployabilityCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ssWorkExperience = (string) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperience", "");
				varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperienceUpdatedBy", 0);
				varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperienceUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceCompleted = (bool) ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ssWorkExperienceCompleted", false);
				varLcProgressReportSection.ssENProgressReportSection.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_ChangedAttributes", null));
				varLcProgressReportSection.ssENProgressReportSection.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcProgressReportSection_ssENProgressReportSection_OptimizedAttributes", null));
				varLcProgressReport.ssENProgressReport.ssId = (int) ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ssId", 0);
				varLcProgressReport.ssENProgressReport.ssIntroduction = (string) ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ssIntroduction", "");
				varLcProgressReport.ssENProgressReport.ssSignoff = (string) ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ssSignoff", "");
				varLcProgressReport.ssENProgressReport.ssIntroductionUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ssIntroductionUpdatedBy", 0);
				varLcProgressReport.ssENProgressReport.ssIntroductionUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ssIntroductionUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReport.ssENProgressReport.ssSignOffUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ssSignOffUpdatedBy", 0);
				varLcProgressReport.ssENProgressReport.ssSignOffUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ssSignOffUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcProgressReport.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_ChangedAttributes", null));
				varLcProgressReport.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcProgressReport_ssENProgressReport_OptimizedAttributes", null));
				varLcCheckBoxValue = (bool) ViewStateAttributes.GetFromViewState("varLcCheckBoxValue", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTextInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTextInput_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtTextInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
