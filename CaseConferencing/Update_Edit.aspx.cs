/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnUpdate_Edit: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnUpdate_Edit(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamUpdateId. Description:
		/// </summary>
		public int inParamUpdateId = 0;
		/// <summary>
		/// Variable <code>varLcDocument</code> that represents the Service Studio local variable
		///  <code>Document</code> <p>Description: </p>
		/// </summary>
		RCDocumentsRecord varLcDocument = new RCDocumentsRecord(null);

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance31
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance31;
		/// <summary>
		/// Variable "True" if the Widget wt_If46
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If46T;

		/// <summary>
		/// Variable "True" if the Widget wt_If46
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If46F;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCDocumentsUpdatesRecord ssUpdateEditRecord = new RCDocumentsUpdatesRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtUpdateEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtUpdate_UpdateTitle") &&
			ValidationUtils.IsValid(this, "wtUpdate_UpdateHTML") &&
			ValidationUtils.IsValid(this, "wtUpdate_InternalMessageType");
			return res;
		}


		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtUpdate_UpdateTitleValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtUpdate_UpdateTitleValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtUpdate_UpdateHTMLValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtUpdate_UpdateHTMLValidatorType;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtUpdate_InternalMessageTypeValidatorRequired;
		protected SelectRtWidget Rt_wtUpdate_InternalMessageType = new SelectRtWidget();
		RLInternalMessageTypeRecordList Rt_wtUpdate_InternalMessageType_reclist = null;
		/// <summary>
		/// Variable "True" if the Widget wt_If3
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If3T;

		/// <summary>
		/// Variable "True" if the Widget wt_If3
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If3F;
		/// <summary>
		/// Input File name widget (wtUpload1)
		/// </summary>
		protected HtmlInputFile wtUpload1;
		/// <summary>
		/// Input File name Runtime Properties (wtUpload1)
		/// </summary>
		private InputFilenameRtWidget _Rt_wtUpload1;
		protected InputFilenameRtWidget Rt_wtUpload1 {
			get {
				if (_Rt_wtUpload1 == null) {
					_Rt_wtUpload1 = new InputFilenameRtWidget(wtUpload1); 
				}
				return _Rt_wtUpload1; 
			}
		}
		/// <summary>
		/// Variable (wt_Link23) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link23;
		/// <summary>
		/// Variable (wt_Button26) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button26;
		/// <summary>
		/// Variable (wt_Button40) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button40;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("wTNevupQM0yKNUjRnx8Dug", "Update_Edit");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "wTNevupQM0yKNUjRnx8Dug", "Update_Edit");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "wTNevupQM0yKNUjRnx8Dug", "Update_Edit");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "wTNevupQM0yKNUjRnx8Dug", "Update_Edit");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "wTNevupQM0yKNUjRnx8Dug", "Update_Edit");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnUpdate_Edit() {
			htTabIndexGroups["wt_Text2"] = "wtUpdateEdit-1";
			htTabIndexGroups["wtUpdate_UpdateTitle"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Text15"] = "wtUpdateEdit-1";
			htTabIndexGroups["wtUpdate_UpdateHTML"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Text8"] = "wtUpdateEdit-1";
			htTabIndexGroups["wtUpdate_InternalMessageType"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Text41"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_If3"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_IfBranch33"] = "wtUpdateEdit-1";
			htTabIndexGroups["wtUpload1"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_IfBranch35"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_InlineExpression20"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Text4"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Link23"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Text45"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Button26"] = "wtUpdateEdit-1";
			htTabIndexGroups["wt_Button40"] = "wtUpdateEdit-1";
		}


		RLDocumentsUpdatesRecordList queryResGetUpdateById_outParamList = new RLDocumentsUpdatesRecordList();
		int queryResGetUpdateById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetUpdateById
			int datasetGetUpdateById_maxRecords = 1;
			if (datasetGetUpdateById_maxRecords < 1) datasetGetUpdateById_maxRecords = 1;
			queryResGetUpdateById_outParamList = FuncssPreparation.datasetGetUpdateById(heContext, datasetGetUpdateById_maxRecords, IterationMultiplicity.Never, out queryResGetUpdateById_outParamCount, inParamUpdateId
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamUpdateId!=0)) {
				parameters.Add(new Pair<string, string>("UpdateId", HttpUtility.UrlEncode(Convert.ToString(inParamUpdateId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Update_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Update_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance31 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance31");
			wtUpload1 = (OutSystems.HubEdition.WebWidgets.InputFile) FindControl("wtUpload1");
			wt_Link23 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link23");
			if (this.wt_Link23 != null) {
				this.wt_Link23.Click += new System.EventHandler(this.wt_Link23_Click);
			}
			wt_Button26 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button26");
			if (this.wt_Button26 != null) {
				this.wt_Button26.Click += new System.EventHandler(this.wt_Button26_Click);
			}
			wt_Button40 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button40");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance11") {
				return ThemeProvider_wt_WebBlockInstance31.wtHelpUpdate.FindControl("wt_WebBlockInstance11");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance37") {
				return ThemeProvider_wt_WebBlockInstance31.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance37");
			}
			if (id == "wt_If46") {
				return ThemeProvider_wt_WebBlockInstance31.wtTitle.FindControl("wt_If46");
			}
			if (id == "wt_If46T") {
				return ThemeProvider_wt_WebBlockInstance31.wtTitle.FindControl("wt_If46T");
			}
			if (id == "wt_Text7") {
				return ThemeProvider_wt_WebBlockInstance31.wtTitle.FindControl("wt_Text7");
			}
			if (id == "wt_If46F") {
				return ThemeProvider_wt_WebBlockInstance31.wtTitle.FindControl("wt_If46F");
			}
			if (id == "wt_Text43") {
				return ThemeProvider_wt_WebBlockInstance31.wtTitle.FindControl("wt_Text43");
			}
			if (id == "wt_InlineExpression17") {
				return ThemeProvider_wt_WebBlockInstance31.wtTitle.FindControl("wt_InlineExpression17");
			}
			if (id == "wt_Text44") {
				return ThemeProvider_wt_WebBlockInstance31.wtTitle.FindControl("wt_Text44");
			}
			if (id == "wtUpdateEdit") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wtUpdateEdit");
			}
			if (id == "wt_EditRecordRow39") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordRow39");
			}
			if (id == "wt_EditRecordCell42") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell42");
			}
			if (id == "wt_Text2") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Text2");
			}
			if (id == "wt_EditRecordCell21") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell21");
			}
			if (id == "wtUpdate_UpdateTitle") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wtUpdate_UpdateTitle");
			}
			if (id == "wt_EditRecordRow1") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordRow1");
			}
			if (id == "wt_EditRecordCell18") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell18");
			}
			if (id == "wt_Text15") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Text15");
			}
			if (id == "wt_EditRecordCell47") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell47");
			}
			if (id == "wtUpdate_UpdateHTML") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wtUpdate_UpdateHTML");
			}
			if (id == "wt_EditRecordRow22") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordRow22");
			}
			if (id == "wt_EditRecordCell38") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell38");
			}
			if (id == "wt_Text8") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Text8");
			}
			if (id == "wt_EditRecordCell6") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell6");
			}
			if (id == "wtUpdate_InternalMessageType") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wtUpdate_InternalMessageType");
			}
			if (id == "wt_EditRecordRow34") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordRow34");
			}
			if (id == "wt_EditRecordCell48") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell48");
			}
			if (id == "wt_Text41") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Text41");
			}
			if (id == "wt_EditRecordCell24") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell24");
			}
			if (id == "wt_If3") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_If3");
			}
			if (id == "wt_If3T") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_If3T");
			}
			if (id == "wtUpload1") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wtUpload1");
			}
			if (id == "wt_If3F") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_If3F");
			}
			if (id == "wt_InlineExpression20") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_InlineExpression20");
			}
			if (id == "wt_Text4") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Text4");
			}
			if (id == "wt_Link23") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Link23");
			}
			if (id == "wt_Text45") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Text45");
			}
			if (id == "wt_EditRecordRow25") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordRow25");
			}
			if (id == "wt_EditRecordCell36") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell36");
			}
			if (id == "wt_EditRecordCell27") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_EditRecordCell27");
			}
			if (id == "wt_Button26") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Button26");
			}
			if (id == "wt_Button40") {
				return ThemeProvider_wt_WebBlockInstance31.wtMainContent.FindControl("wt_Button40");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Update_Edit"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamUpdateId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Update_Edit"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["UpdateId"] != null) {
						inParamUpdateId = Convert.ToInt32(Request.QueryString["UpdateId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["UpdateId"] != null) {
						inParamUpdateId = Convert.ToInt32(Request.Form["UpdateId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtUpdateEdit_onDataBindingDataSource(this.FindControl("wtUpdateEdit"), null);
				}
				Title = (((queryResGetUpdateById_outParamList.CurrentRec.ssENUpdates.ssId==BuiltInFunction.NullIdentifier())) ?("New Update"):((("Edit \'" +queryResGetUpdateById_outParamList.CurrentRec.ssENUpdates.ssUpdateTitle) + "\'"))); Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Update_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button26 = wt_Button26 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button26");
			} catch {}
			string jsString = (wt_Button26 != null) ? "return OsEnterKey('" +wt_Button26.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotPLA("PLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("wTNevupQM0yKNUjRnx8Dug"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvSave: VarsBag {
			public int resCreateOrUpdateUpdates_outParamId = 0;

			public int resCreateOrUpdateDocuments_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				// Valid
				if (wtUpdateEdit_Valid()) {
					ssUpdateEditRecord.ssENUpdates.ssUpdateDate = BuiltInFunction.CurrDate(); // UpdateEdit.Record.Updates.UpdateDate = CurrDate
					ssUpdateEditRecord.ssENUpdates.ssUpdateSubmittedBy = ((int) Global.App.OsContext.Session["UserID"]); // UpdateEdit.Record.Updates.UpdateSubmittedBy = UserID
					varLcDocument.ssENDocuments.ssDocumentType = ENDocumentTypeEntity.GetRecordByKey(ObjectKey.Parse("cC8DkdtjkUWvggpubC2pFw")).ssId; // Document.Documents.DocumentType = HelpGuide
					varLcDocument.ssENDocuments.ssDocumentName = Rt_wtUpload1.Filename; // Document.Documents.DocumentName = Upload1.Filename
					varLcDocument.ssENDocuments.ssDocumentData = Rt_wtUpload1.Content; // Document.Documents.DocumentData = Upload1.Content
					// CreateOrUpdateDocuments
					ExtendedActions.CreateOrUpdateDocuments(heContext, varLcDocument.ChangedAttributes, varLcDocument, out localVars.resCreateOrUpdateDocuments_outParamId);
					ssUpdateEditRecord.ssENUpdates.ssDocument = localVars.resCreateOrUpdateDocuments_outParamId; // UpdateEdit.Record.Updates.Document = CreateOrUpdateDocuments.Id
					ssUpdateEditRecord.ssENUpdates.ssActive = true; // UpdateEdit.Record.Updates.Active = True
					// CreateOrUpdateUpdates
					ExtendedActions.CreateOrUpdateUpdates(heContext, ssUpdateEditRecord.ssENUpdates.ChangedAttributes, ((RCUpdatesRecord) ssUpdateEditRecord.ssENUpdates), out localVars.resCreateOrUpdateUpdates_outParamId);
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, ((("Update \'" +ssUpdateEditRecord.ssENUpdates.ssUpdateTitle) + "\' was successfully ") + (((ssUpdateEditRecord.ssENUpdates.ssId==BuiltInFunction.NullIdentifier())) ?("created."):("updated."))), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// Destination = Update_List

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "+YScYuxSG0m4BpXVzV7hKw";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Update_List"] = screenParameters;
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Update_List.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "+YScYuxSG0m4BpXVzV7hKw";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Update_List"] = screenParameters;
							Server.Transfer("Update_List.aspx");
							return false;

						}
					}

				} else {
					// Input_FocusFirstInvalid
					Actions.ActionInput_FocusFirstInvalid(heContext);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandChange</code> that represents the Service Studio screen action
		///  <code>Change</code> <p> Description: </p>
		/// </summary>
		private bool CommandChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance31 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance11 Functions
		/// </summary>
		public void webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance37 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance37_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("m4UeleQOz0eLvrp6PzKJPQ")).ssId;
		}
		/// <summary>
		/// wt_If46 Functions
		/// </summary>
		bool if_wt_If46_hasRun=false;
		bool if_wt_If46_evalResult;
		public bool if_wt_If46() {
			if (if_wt_If46_hasRun) {
				if_wt_If46_hasRun = false;
				return if_wt_If46_evalResult;
			}
			if_wt_If46_hasRun = true;
			if_wt_If46_evalResult = (queryResGetUpdateById_outParamList.CurrentRec.ssENUpdates.ssId==BuiltInFunction.NullIdentifier());
			return if_wt_If46_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression17 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = FeUvMzvClEWNY1Nw130yoA) Expression:
		///  GetUpdateById.List.Current.Updates.UpdateTitle
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression17() {
			return queryResGetUpdateById_outParamList.CurrentRec.ssENUpdates.ssUpdateTitle;
		}
		/// <summary>
		/// wtUpdateEdit Functions
		/// </summary>
		public void wtUpdateEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssUpdateEditRecord = queryResGetUpdateById_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wtUpdate_UpdateTitle Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtUpdate_UpdateTitle_input_value() {
			if (("" !=ssUpdateEditRecord.ssENUpdates.ssUpdateTitle)) {
				return ssUpdateEditRecord.ssENUpdates.ssUpdateTitle;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtUpdate_UpdateTitle");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssUpdateEditRecord.ssENUpdates.ssUpdateTitle;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtUpdate_UpdateTitle_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssUpdateEditRecord.ssENUpdates.ssUpdateTitle = ""; 
				} else {
					ssUpdateEditRecord.ssENUpdates.ssUpdateTitle = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssUpdateEditRecord.ssENUpdates.ssUpdateTitle = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtUpdate_UpdateTitle)
		/// </summary>
		/// <returns>The Visible State of wtUpdate_UpdateTitle</returns>
		public bool inputwtUpdate_UpdateTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtUpdate_UpdateTitle)
		/// </summary>
		/// <returns>The Enabled State of wtUpdate_UpdateTitle</returns>
		public bool inputwtUpdate_UpdateTitle_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtUpdate_UpdateTitle)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtUpdate_UpdateTitle</returns>
		public bool inputwtUpdate_UpdateTitle_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtUpdate_UpdateHTML Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtUpdate_UpdateHTML_input_value() {
			if (("" !=ssUpdateEditRecord.ssENUpdates.ssUpdateHTML)) {
				return ssUpdateEditRecord.ssENUpdates.ssUpdateHTML;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtUpdate_UpdateHTML");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssUpdateEditRecord.ssENUpdates.ssUpdateHTML;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtUpdate_UpdateHTML_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssUpdateEditRecord.ssENUpdates.ssUpdateHTML = ""; 
				} else {
					ssUpdateEditRecord.ssENUpdates.ssUpdateHTML = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssUpdateEditRecord.ssENUpdates.ssUpdateHTML = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtUpdate_UpdateHTML)
		/// </summary>
		/// <returns>The Visible State of wtUpdate_UpdateHTML</returns>
		public bool inputwtUpdate_UpdateHTML_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtUpdate_UpdateHTML)
		/// </summary>
		/// <returns>The Enabled State of wtUpdate_UpdateHTML</returns>
		public bool inputwtUpdate_UpdateHTML_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtUpdate_UpdateHTML)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtUpdate_UpdateHTML</returns>
		public bool inputwtUpdate_UpdateHTML_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtUpdate_InternalMessageType Functions
		/// </summary>
		public void selUpdate_InternalMessageType_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtUpdate_InternalMessageType_reclist == null) {
				using(Transaction wtUpdate_InternalMessageType_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtUpdate_InternalMessageType_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENInternalMessageTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtUpdate_InternalMessageType_sqlCmd = wtUpdate_InternalMessageType_trans.CreateCommand(wtUpdate_InternalMessageType_sql);
					Rt_wtUpdate_InternalMessageType_sqlCmd.CreateParameter("@Selection", ssUpdateEditRecord.ssENUpdates.ssInternalMessageType);
					Rt_wtUpdate_InternalMessageType_sqlCmd.TransformParametersSyntax();
					Rt_wtUpdate_InternalMessageType_reclist = new RLInternalMessageTypeRecordList();
					Rt_wtUpdate_InternalMessageType_reclist.Transaction = wtUpdate_InternalMessageType_trans;
					Rt_wtUpdate_InternalMessageType_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtUpdate_InternalMessageType_sqlCmd, Rt_wtUpdate_InternalMessageType_reclist, "WebSelectWidget load operation");
					Rt_wtUpdate_InternalMessageType_reclist = (RLInternalMessageTypeRecordList) Rt_wtUpdate_InternalMessageType_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtUpdate_InternalMessageType.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtUpdate_InternalMessageType_reclist.StartIteration();
			try {
				while (!Rt_wtUpdate_InternalMessageType_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtUpdate_InternalMessageType_reclist.CurrentRec.ssENInternalMessageType.ssLabel, Convert.ToString(Rt_wtUpdate_InternalMessageType_reclist.CurrentRec.ssENInternalMessageType.ssId)));
					if (ssUpdateEditRecord.ssENUpdates.ssInternalMessageType == Convert.ToInt32(Convert.ToString(Rt_wtUpdate_InternalMessageType_reclist.CurrentRec.ssENInternalMessageType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtUpdate_InternalMessageType_reclist.Advance();
				}
			} finally {
				Rt_wtUpdate_InternalMessageType_reclist.EndIteration();
			}
		}
		public void selUpdate_InternalMessageType_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtUpdate_InternalMessageType.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssUpdateEditRecord.ssENUpdates.ssInternalMessageType = 0;
			}
			else {
				Rt_wtUpdate_InternalMessageType.SpecialListVal = "";
				try {
					ssUpdateEditRecord.ssENUpdates.ssInternalMessageType = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtUpdate_InternalMessageType)
		/// </summary>
		/// <returns>The Visible State of wtUpdate_InternalMessageType</returns>
		public bool selUpdate_InternalMessageType_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtUpdate_InternalMessageType)
		/// </summary>
		/// <returns>The Enabled State of wtUpdate_InternalMessageType</returns>
		public bool selUpdate_InternalMessageType_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selUpdate_InternalMessageType)
		/// </summary>
		/// <returns>The Mandatory Value of selUpdate_InternalMessageType</returns>
		public bool selUpdate_InternalMessageType_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_If3 Functions
		/// </summary>
		bool if_wt_If3_hasRun=false;
		bool if_wt_If3_evalResult;
		public bool if_wt_If3() {
			if (if_wt_If3_hasRun) {
				if_wt_If3_hasRun = false;
				return if_wt_If3_evalResult;
			}
			if_wt_If3_hasRun = true;
			if_wt_If3_evalResult = (ssUpdateEditRecord.ssENUpdates.ssId==BuiltInFunction.NullIdentifier());
			return if_wt_If3_evalResult;
		}

		/// <summary>
		/// wtUpload1 Functions
		/// </summary>
		/// <summary>
		/// Gets the visible state of component (wtUpload1)
		/// </summary>
		/// <returns>The Visible State of wtUpload1</returns>
		public bool inputFileUpload1_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtUpload1)
		/// </summary>
		/// <returns>The Enabled State of wtUpload1</returns>
		public bool inputFileUpload1_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression20 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = i7ltTfGjvkO7VpdIIx6yiA) Expression:
		///  UpdateEdit.Record.Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			return ssUpdateEditRecord.ssENDocuments.ssDocumentName;
		}
		/// <summary>
		/// wt_Link23 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link23_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandChange(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link23)
		/// </summary>
		/// <returns>title of the Link (wt_Link23)</returns>
		public string
		lnk_Link23_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link23)
		/// </summary>
		/// <returns>The Visible State of wt_Link23</returns>
		public bool lnk_Link23_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link23)
		/// </summary>
		/// <returns>The Enabled State of wt_Link23</returns>
		public bool lnk_Link23_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button26 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button26_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSave(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button26)
		/// </summary>
		/// <returns>Label of the Button (wt_Button26)</returns>
		public string
		btn_Button26_getLabel() {
			return "Save";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button26)
		/// </summary>
		/// <returns>The Visible State of wt_Button26</returns>
		public bool btn_Button26_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button26)
		/// </summary>
		/// <returns>The Enabled State of wt_Button26</returns>
		public bool btn_Button26_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button40 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Button40)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Button40)</returns>
		public string btn_Button40_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Update_List", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the label of the button (wt_Button40)
		/// </summary>
		/// <returns>Label of the Button (wt_Button40)</returns>
		public string
		btn_Button40_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button40)
		/// </summary>
		/// <returns>The Visible State of wt_Button40</returns>
		public bool btn_Button40_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button40)
		/// </summary>
		/// <returns>The Enabled State of wt_Button40</returns>
		public bool btn_Button40_isEnabled() {
			return true; 
		}


		public static class FuncCommandSave {
		}
		public static class FuncCommandChange {
		}
		public static class FuncssPreparation {

			private static void datasetGetUpdateByIdReadDB(ref RCDocumentsUpdatesRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENDocuments.Read(r, ref index);
				rec.ssENUpdates.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetUpdateById" of Action "Preparation"
			/// </summary>
			public static RLDocumentsUpdatesRecordList datasetGetUpdateById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENDocuments.[DOCUMENTNAME] o3, NULL o4, NULL o5, NULL o6, NULL o7, ENUpdates.[ID] o8, NULL o9, NULL o10, ENUpdates.[UPDATETITLE] o11, ENUpdates.[UPDATEHTML] o12, NULL o13, NULL o14, ENUpdates.[INTERNALMESSAGETYPE] o15");
				fromBuilder.Append(" FROM ({Updates} ENUpdates Left JOIN {Documents} ENDocuments ON (ENUpdates.[DOCUMENT] = ENDocuments.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENUpdates.[ID] = @qpinP) AND (ENUpdates.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENUpdates.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDocumentsUpdatesRecordList outParamList = new RLDocumentsUpdatesRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetUpdateByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, true, false, false, true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDocumentsUpdatesRecordList _tmp = new RLDocumentsUpdatesRecordList();
					_tmp.AlternateReadDBMethod = datasetGetUpdateByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.Update_Edit.Preparation.GetUpdateById.List");
						outParamList = (RLDocumentsUpdatesRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.Update_Edit.Preparation.GetUpdateById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLDocumentsUpdatesRecordList _tmp = new RLDocumentsUpdatesRecordList();
						_tmp.AlternateReadDBMethod = datasetGetUpdateByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.Update_Edit.Preparation.GetUpdateById.List");
							outParamList = (RLDocumentsUpdatesRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.Update_Edit.Preparation.GetUpdateById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = (((queryResGetUpdateById_outParamList.CurrentRec.ssENUpdates.ssId==BuiltInFunction.NullIdentifier())) ?("New Update"):((("Edit \'" +queryResGetUpdateById_outParamList.CurrentRec.ssENUpdates.ssUpdateTitle) + "\'"))); Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Update_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Update_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamUpdateId", inParamUpdateId, 0);
			ViewStateAttributes.SetInViewState("varLcDocument_ssENDocuments_ssId", varLcDocument.ssENDocuments.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcDocument_ssENDocuments_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcDocument.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcDocument_ssENDocuments_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcDocument.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENDocuments_ssDocumentName", ssUpdateEditRecord.ssENDocuments.ssDocumentName, "");
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENDocuments_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssUpdateEditRecord.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
				false, false, true, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENDocuments_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssUpdateEditRecord.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
				true, true, false, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENUpdates_ssId", ssUpdateEditRecord.ssENUpdates.ssId, 0);
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENUpdates_ssUpdateTitle", ssUpdateEditRecord.ssENUpdates.ssUpdateTitle, "");
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENUpdates_ssUpdateHTML", ssUpdateEditRecord.ssENUpdates.ssUpdateHTML, "");
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENUpdates_ssInternalMessageType", ssUpdateEditRecord.ssENUpdates.ssInternalMessageType, 0);
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENUpdates_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssUpdateEditRecord.ssENUpdates.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, true, true, false, false, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtUpdateEdit_record_ssENUpdates_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssUpdateEditRecord.ssENUpdates.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, false, false, true, true, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtUpdate_UpdateTitle_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtUpdate_UpdateTitle")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtUpdate_UpdateHTML_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtUpdate_UpdateHTML")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtUpdate_InternalMessageType_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtUpdate_InternalMessageType")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamUpdateId = (int) ViewStateAttributes.GetFromViewState("inParamUpdateId", 0);
				varLcDocument.ssENDocuments.ssId = (int) ViewStateAttributes.GetFromViewState("varLcDocument_ssENDocuments_ssId", 0);
				varLcDocument.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcDocument_ssENDocuments_ChangedAttributes", null));
				varLcDocument.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcDocument_ssENDocuments_OptimizedAttributes", null));
				ssUpdateEditRecord.ssENDocuments.ssDocumentName = (string) ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENDocuments_ssDocumentName", "");
				ssUpdateEditRecord.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENDocuments_ChangedAttributes", null));
				ssUpdateEditRecord.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENDocuments_OptimizedAttributes", null));
				ssUpdateEditRecord.ssENUpdates.ssId = (int) ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENUpdates_ssId", 0);
				ssUpdateEditRecord.ssENUpdates.ssUpdateTitle = (string) ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENUpdates_ssUpdateTitle", "");
				ssUpdateEditRecord.ssENUpdates.ssUpdateHTML = (string) ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENUpdates_ssUpdateHTML", "");
				ssUpdateEditRecord.ssENUpdates.ssInternalMessageType = (int) ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENUpdates_ssInternalMessageType", 0);
				ssUpdateEditRecord.ssENUpdates.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENUpdates_ChangedAttributes", null));
				ssUpdateEditRecord.ssENUpdates.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtUpdateEdit_record_ssENUpdates_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtUpdate_UpdateTitle")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtUpdate_UpdateTitle_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtUpdate_UpdateHTML")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtUpdate_UpdateHTML_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtUpdate_InternalMessageType")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtUpdate_InternalMessageType_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtUpdate_UpdateTitle", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtUpdate_UpdateHTML", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(this, "wtUpdate_InternalMessageType", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
