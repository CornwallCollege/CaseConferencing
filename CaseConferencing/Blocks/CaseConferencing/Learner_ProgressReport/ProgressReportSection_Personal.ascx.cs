/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {
	public abstract class WBlkProgressReportSection_Personal: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamProgressReportId. Description:
		/// </summary>
		public int inParamProgressReportId = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Variable <code>varLcVisible</code> that represents the Service Studio local variable
		///  <code>Visible</code> <p>Description: </p>
		/// </summary>
		bool varLcVisible = false;

		/// <summary>
		/// Variable <code>varLcAttendanceVisible</code> that represents the Service Studio local variable
		///  <code>AttendanceVisible</code> <p>Description: </p>
		/// </summary>
		bool varLcAttendanceVisible = false;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfSections</code> that represents the Service Studio local variable
		///  <code>TotalNumberOfSections</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfSections = 0;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfVisibleSections</code> that represents the Service Studio local
		///  variable <code>TotalNumberOfVisibleSections</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfVisibleSections = 0;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfSectionsCompleted</code> that represents the Service Studio local
		///  variable <code>TotalNumberOfSectionsCompleted</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfSectionsCompleted = 0;

		/// <summary>
		/// Variable wt_WebBlockInstance92
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout wt_WebBlockInstance92;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container97;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		protected OutSystems.HubEdition.WebWidgets.Container wtIconExpand;
		/// <summary>
		/// Variable "True" if the Widget wt_If32
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If32T;

		/// <summary>
		/// Variable "True" if the Widget wt_If32
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If32F;
		protected OutSystems.HubEdition.WebWidgets.Container wtVisibleCheckBoxContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtTitleContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtStatusBarContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtDetailWrapper;
		/// <summary>
		/// Variable "True" if the Widget wt_If111
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If111T;

		/// <summary>
		/// Variable "True" if the Widget wt_If111
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If111F;
		private RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _ssProgressReport_List2List = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		public RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList ssProgressReport_List2List {
			get {
				return _ssProgressReport_List2List; 
			}
			set {
				_ssProgressReport_List2List = value;
				wtProgressReport_List2.DataSource = value;
				ssProgressReport_List2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtProgressReport_List2;
		public ArrayList wtProgressReport_List2_storage = new ArrayList();
		protected bool ssProgressReport_List2List_notUsedYet = true;
		protected bool ssProgressReport_List2ListDoDataBind;
		protected bool ssProgressReport_List2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container75;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input24ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input24ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container108;
		/// <summary>
		/// Variable "True" if the Widget wt_If117
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If117T;

		/// <summary>
		/// Variable "True" if the Widget wt_If117
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If117F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container80;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container118;
		/// <summary>
		/// Variable (wtEditAttendance2) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditAttendance2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container106;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input78ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input78ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		/// <summary>
		/// Variable "True" if the Widget wt_If26
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If26T;

		/// <summary>
		/// Variable "True" if the Widget wt_If26
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If26F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container59;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container105;
		/// <summary>
		/// Variable (wtEditPersonalStudyProgrammeOverview) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditPersonalStudyProgrammeOverview;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container60;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input72ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input72ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container40;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container124;
		/// <summary>
		/// Variable "True" if the Widget wt_If35
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If35T;

		/// <summary>
		/// Variable "True" if the Widget wt_If35
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If35F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container121;
		/// <summary>
		/// Variable (wtEditPersonalEmployability) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditPersonalEmployability;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container38;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container109;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input104ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input104ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container120;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container46;
		/// <summary>
		/// Variable "True" if the Widget wt_If39
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If39T;

		/// <summary>
		/// Variable "True" if the Widget wt_If39
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If39F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container81;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		/// <summary>
		/// Variable (wtEditWorkExperience) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditWorkExperience;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container91;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetProgressReportCategoriesByProgressReport_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetProgressReportCategoriesByProgressReport
			int datasetGetProgressReportCategoriesByProgressReport_maxRecords = 0;
			queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
			);
			varLcTotalNumberOfSections = (queryResGetProgressReportCategoriesByProgressReport_outParamList.Length*4); // TotalNumberOfSections = GetProgressReportCategoriesByProgressReport.List.Length * 4
			varLcTotalNumberOfVisibleSections = 0; // TotalNumberOfVisibleSections = 0
			varLcTotalNumberOfSectionsCompleted = 0; // TotalNumberOfSectionsCompleted = 0
			// Foreach GetProgressReportCategoriesByProgressReport.List
			queryResGetProgressReportCategoriesByProgressReport_outParamList.StartIteration();
			try {
				queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance(0);
				while (! queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof) {
					// AttendanceVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// StudyProgrammeVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// EmployabilityVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// WorkExperienceVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// AttendanceCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// StudyProgrammeCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// EmployabilityCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// WorkExperienceCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance();
				}
			} finally {
				queryResGetProgressReportCategoriesByProgressReport_outParamList.EndIteration();
			}
		}
		static WBlkProgressReportSection_Personal() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance92 = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) FindControl("wt_WebBlockInstance92");
			wt_Container97 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container97");
			wt_Container42 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container42");
			wtIconExpand = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtIconExpand");
			wtVisibleCheckBoxContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtVisibleCheckBoxContainer");
			wtTitleContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTitleContainer");
			wtStatusBarContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtStatusBarContainer");
			wtDetailWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDetailWrapper");
			wtProgressReport_List2 = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtProgressReport_List2");
			wtProgressReport_List2.StartIndexExpression = () => 0;
			wtProgressReport_List2.LineCountExpression = () => 999;
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssProgressReport_List2ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input24", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input78", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input72", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input104", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList.

			int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof;
			ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();

			// Write the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList to the storequeryResGetProgressReportCategoriesByProgressReport_outParamList
			if (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Empty) {
				try {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.StartIteration();

					while (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ssGroupDescription == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ssGroupDescription);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssId == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssId);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployability == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployability);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityUpdatesdBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityUpdatesdBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperience == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperience);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, true, true, true, true
						}
						))));
						storequeryResGetProgressReportCategoriesByProgressReport_outParamList.Add(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance();
					}
				} finally {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", storequeryResGetProgressReportCategoriesByProgressReport_outParamList, null);

			#endregion


			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList, false);
			queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamProgressReportId", inParamProgressReportId, 0);
			ViewStateAttributes.SetInViewState("varLcVisible", varLcVisible, false);
			if (IsAjaxRequest) {
				recListProgressReport_List2_Rebuild((ssProgressReport_List2ListDataBound ? wtProgressReport_List2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtProgressReport_List2.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtProgressReport_List2_list", wtProgressReport_List2_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList.

				// Read the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList from storequeryResGetProgressReportCategoriesByProgressReport_outParamList
				queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
				ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList;
				storequeryResGetProgressReportCategoriesByProgressReport_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", null);
				if (storequeryResGetProgressReportCategoriesByProgressReport_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList in storequeryResGetProgressReportCategoriesByProgressReport_outParamList) {
						if (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList != null) {
							// Aux current record variable
							RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList = new RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(null);
							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.ssGroupDescription = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[11]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssIsComplete = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[12] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[12]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[13]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[14]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssId = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[15] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[15]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendance = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[16] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[16]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[17] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[17]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[18] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[18]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[19] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[19]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[20] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[20]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssStudyProgrammeOverview = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[21] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[21]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[22] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[22]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssStudyProgrammeUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[23] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[23]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssStudyProgrammeUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[24] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[24]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssStudyProgrammeCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[25] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[25]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssEmployability = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[26] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[26]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssEmployabilityVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[27] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[27]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssEmployabilityUpdatesdBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[28] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[28]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssEmployabilityUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[29] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[29]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssEmployabilityCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[30] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[30]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssWorkExperience = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[31] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[31]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssWorkExperienceVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[32] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[32]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssWorkExperienceUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[33] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[33]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssWorkExperienceUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[34] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[34]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssWorkExperienceCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[35] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[35]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[36]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[37]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.ssSectionVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[38] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[38]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[39]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[40]);

							queryResGetProgressReportCategoriesByProgressReport_outParamList.Append(tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						}
					}
				}
				queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", false);
				queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

				#endregion

				inParamProgressReportId = (int) ViewStateAttributes.GetFromViewState("inParamProgressReportId", 0);
				varLcVisible = (bool) ViewStateAttributes.GetFromViewState("varLcVisible", false);
				recListProgressReport_List2_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wt_Input24");
			ControlVisibility.StoreChildControlVisibility("wt_Input78");
			ControlVisibility.StoreChildControlVisibility("wt_Input72");
			ControlVisibility.StoreChildControlVisibility("wt_Input104");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wt_Input24");
			ControlVisibility.RestoreChildControlVisibility("wt_Input78");
			ControlVisibility.RestoreChildControlVisibility("wt_Input72");
			ControlVisibility.RestoreChildControlVisibility("wt_Input104");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KuYYDh8osfECXg7S3edxDNQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("uYYDh8osfECXg7S3edxDNQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify2</code> that represents the Service Studio screen action
		///  <code>OnNotify2</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify2(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetProgressReportCategoriesByProgressReport
				{
					int datasetGetProgressReportCategoriesByProgressReport_maxRecords = 0;
					queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
					);
				}
				// Refresh Me
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnSectionCheckBoxChange: VarsBag {
			public int inParamProgressReportID2;
			public int resCreateOrUpdateProgressReportSections_outParamId = 0;

			public RLProgressReportSectionsRecordList queryResGetProgressReports_outParamList = new RLProgressReportSectionsRecordList();
			public int queryResGetProgressReports_outParamCount = 0;

			public lcvOnSectionCheckBoxChange(int inParamProgressReportID2) {
				this.inParamProgressReportID2 = inParamProgressReportID2;
			}
		}
		/// <summary>
		/// Action <code>CommandOnSectionCheckBoxChange</code> that represents the Service Studio screen action
		///  <code>OnSectionCheckBoxChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSectionCheckBoxChange(HeContext heContext, int inParamProgressReportID2) {
			CheckPermissions(heContext);
			lcvOnSectionCheckBoxChange localVars = new lcvOnSectionCheckBoxChange(inParamProgressReportID2);
			try {
				// Query datasetGetProgressReports
				int datasetGetProgressReports_maxRecords = 0;
				localVars.queryResGetProgressReports_outParamList = FuncCommandOnSectionCheckBoxChange.datasetGetProgressReports(heContext, datasetGetProgressReports_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetProgressReports_outParamCount, inParamProgressReportId
				);
				// Foreach GetProgressReports.List
				localVars.queryResGetProgressReports_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetProgressReports_outParamList.Eof) {
						localVars.queryResGetProgressReports_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible = getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible; // GetProgressReports.List.Current.ProgressReportSections.SectionVisible =
						// ProgressReport_List2.List.Current.ProgressReportSections.SectionVisible
						// CreateOrUpdateProgressReportSections
						ExtendedActions.CreateOrUpdateProgressReportSections(heContext, localVars.queryResGetProgressReports_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetProgressReports_outParamList.CurrentRec, out localVars.resCreateOrUpdateProgressReportSections_outParamId);
						localVars.queryResGetProgressReports_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetProgressReports_outParamList.EndIteration();
				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnSubSectionCheckBoxChange: VarsBag {
			public int resCreateOrUpdateProgressReportSection_outParamId = 0;

			public lcvOnSubSectionCheckBoxChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnSubSectionCheckBoxChange</code> that represents the Service Studio screen
		///  action <code>OnSubSectionCheckBoxChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSubSectionCheckBoxChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnSubSectionCheckBoxChange localVars = new lcvOnSubSectionCheckBoxChange();
			try {
				// CreateOrUpdateProgressReportSection
				ExtendedActions.CreateOrUpdateProgressReportSection(heContext, getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ChangedAttributes, ((RCProgressReportSectionRecord) getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection), out localVars.resCreateOrUpdateProgressReportSection_outParamId);
				// Refresh Me
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick</code> that represents the Service Studio screen action
		///  <code>OnClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Toggle
				varLcVisible = (!varLcVisible); // Visible = notVisible
				// Refresh Widget (wtIconExpand)
				((OSPageViewState) Page).AjaxRefresh(wtIconExpand, "None", StoreViewState);
				// Refresh Widget (wtDetailWrapper)
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtDetailWrapper, "VerticalSlide", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void webBlck_WebBlockInstance92_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) sender;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container97_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container97_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container97_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container97_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container97)
		/// </summary>
		/// <returns>The Visible State of wt_Container97</returns>
		public bool cnt_Container97_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container42_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container42_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntIconExpand_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntIconExpand_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntIconExpand_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:block;float:right;cursor:pointer;margin-right:3px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntIconExpand_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtIconExpand
		/// </summary>
		public void cntIconExpand_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtIconExpand)
		/// </summary>
		/// <returns>The Visible State of wtIconExpand</returns>
		public bool cntIconExpand_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If32_hasRun=false;
		bool if_wt_If32_evalResult;
		public bool if_wt_If32() {
			if (if_wt_If32_hasRun) {
				if_wt_If32_hasRun = false;
				return if_wt_If32_evalResult;
			}
			if_wt_If32_hasRun = true;
			if_wt_If32_evalResult = varLcVisible;
			return if_wt_If32_evalResult;
		}

		public void RichWidgets_webBlck_WebBlockInstance99_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("lONIeezZcEq91R_t0lfWaQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Ksi11unkKkSD65nEu1eIYA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntVisibleCheckBoxContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntVisibleCheckBoxContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntVisibleCheckBoxContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntVisibleCheckBoxContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtVisibleCheckBoxContainer)
		/// </summary>
		/// <returns>The Visible State of wtVisibleCheckBoxContainer</returns>
		public bool cntVisibleCheckBoxContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox15
		/// </summary>
		public void chk_CheckBox15_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSectionCheckBoxChange(heContext
				, inParamProgressReportId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box h5shGj+ZP02If9c5z7D4bw
		/// </summary>
		/// <returns>The Value of the Check Box h5shGj+ZP02If9c5z7D4bw</returns>
		public bool chk_CheckBox15_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}
		public void chk_CheckBox15_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox15)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox15</returns>
		public bool chk_CheckBox15_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox15)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox15</returns>
		public bool chk_CheckBox15_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTitleContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTitleContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTitleContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTitleContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTitleContainer)
		/// </summary>
		/// <returns>The Visible State of wtTitleContainer</returns>
		public bool cntTitleContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = ueCguniEYkWFzTAII5vIdQ) Expression: "Personal"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression96() {
			return "Personal";
		}
		public void cntStatusBarContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntStatusBarContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntStatusBarContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntStatusBarContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtStatusBarContainer)
		/// </summary>
		/// <returns>The Visible State of wtStatusBarContainer</returns>
		public bool cntStatusBarContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
				widget.inParamIsSelected = false;
				widget.inParamPercentage = ((((varLcTotalNumberOfSectionsCompleted>0) && (varLcTotalNumberOfVisibleSections>0))) ?((((decimal) varLcTotalNumberOfSectionsCompleted/
				(decimal) varLcTotalNumberOfVisibleSections) *100M)):(0M));
				widget.inParamText = ((((((Convert.ToString(varLcTotalNumberOfSectionsCompleted) + " out of ") +Convert.ToString(varLcTotalNumberOfVisibleSections)) + " visible sections completed.") + " (") +Convert.ToString((varLcTotalNumberOfSections-varLcTotalNumberOfVisibleSections))) + " sections hidden from report.)");
				widget.inParamVisibleCheckbox = false;
				widget.inParamEnabledCheckbox = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance4
		/// </summary>
		public void webBlck_WebBlockInstance4_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntDetailWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDetailWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDetailWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntDetailWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDetailWrapper)
		/// </summary>
		/// <returns>The Visible State of wtDetailWrapper</returns>
		public bool cntDetailWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If111_hasRun=false;
		bool if_wt_If111_evalResult;
		public bool if_wt_If111() {
			if (if_wt_If111_hasRun) {
				if_wt_If111_hasRun = false;
				return if_wt_If111_evalResult;
			}
			if_wt_If111_hasRun = true;
			if_wt_If111_evalResult = varLcVisible;
			return if_wt_If111_evalResult;
		}

		public void recListProgressReport_List2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtProgressReport_List2
				ssProgressReport_List2List = queryResGetProgressReportCategoriesByProgressReport_outParamList;
				ssProgressReport_List2ListDoDataBind = false;
				ssProgressReport_List2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListProgressReport_List2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssProgressReport_List2List.Length > 0) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[ssProgressReport_List2List.CurrentRowNumber];
				}
				if (ssProgressReport_List2List.Length > e.SelectedIndex) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[e.SelectedIndex];
					ssProgressReport_List2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListProgressReport_List2_Store(object dataItem, int index) {
			RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmprec = (RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENProgressReportSection.ssId == 0?(object) null: tmprec.ssENProgressReportSection.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENProgressReportSection.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENProgressReportSection.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssENProgressReportSections.ssSectionVisible == false?(object) null: tmprec.ssENProgressReportSections.ssSectionVisible);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENProgressReportSections.ChangedAttributes, new BitArray(new bool[] {
				false, false, false, false, true, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENProgressReportSections.OptimizedAttributes, new BitArray(new bool[] {
				true, true, true, true, false, true, true, true, true
			}
			))));
			if (index < wtProgressReport_List2_storage.Count) {
				wtProgressReport_List2_storage[index] = tmpFields;
			} else {
				wtProgressReport_List2_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListProgressReport_List2_Restore() {

			#region fetch ssProgressReport_List2List.

			// Read the needed fields of ssProgressReport_List2List from storewtProgressReport_List2_list
			ssProgressReport_List2List = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
			ArrayList storewtProgressReport_List2_list;
			storewtProgressReport_List2_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtProgressReport_List2_list", null);
			if (storewtProgressReport_List2_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtProgressReport_List2_list in storewtProgressReport_List2_list) {
					if (tmpFieldswtProgressReport_List2_list != null) {
						// Aux current record variable
						RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmpAuxCurrentRecordwtProgressReport_List2_list = new RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(null);
						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.ssId = (int) (tmpFieldswtProgressReport_List2_list[0] == null ? 0: tmpFieldswtProgressReport_List2_list[0]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[1]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[2]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.ssSectionVisible = (bool) (tmpFieldswtProgressReport_List2_list[3] == null ? false: tmpFieldswtProgressReport_List2_list[3]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[4]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[5]);

						ssProgressReport_List2List.Append(tmpAuxCurrentRecordwtProgressReport_List2_list);
					}
				}
			}
			ssProgressReport_List2List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssProgressReport_List2List runtime properties state.


			if (storewtProgressReport_List2_list.Count > 0) {
				ssProgressReport_List2List.RestoreRecordListState(storewtProgressReport_List2_list.Count - 1, false);
			} else {
				ssProgressReport_List2List.CurrentRowNumber = 0;
			}

			#endregion

			wtProgressReport_List2_storage = storewtProgressReport_List2_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListProgressReport_List2_Clear(object sender, EventArgs e) {
			wtProgressReport_List2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListProgressReport_List2_Rebuild(int startIndex, int lineCount) {
			if (ssProgressReport_List2List.Length != -1) {
				wtProgressReport_List2_storage.Clear();
				for (int i=startIndex; i<ssProgressReport_List2List.Data.Count && i<startIndex+lineCount; i++) {
					recListProgressReport_List2_Store(ssProgressReport_List2List.Data[i], wtProgressReport_List2_storage.Count);
				}
			}
		}
		public void recListProgressReport_List2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtProgressReport_List2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList getWtProgressReport_List2List() {
			if (ssProgressReport_List2ListDoDataBind) {
				recListProgressReport_List2_onDataBinding(this, null);
			}

			return ssProgressReport_List2List;
		}
		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = ((((BuiltInFunction.Mod(getWtProgressReport_List2List().CurrentRowNumber, 2M) ==0M)) ?("background-color:#F8F8F8;"):("")) + (((getWtProgressReport_List2List().CurrentRowNumber==0)) ?("border-top: solid 1px #dadada;"):("")));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table79_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table79_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table79_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:2px;padding: 4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell77_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell77_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell77_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = pIgKYRqWA0e68LT3EUyhug) Expression:
		///  ProgressReport_List2.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression51() {
			return getWtProgressReport_List2List().CurrentRec.ssENGroup.ssGroupDescription;
		}
		public void wt_TableCell2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell54_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell54_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container75_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container75_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container75_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container75_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container75)
		/// </summary>
		/// <returns>The Visible State of wt_Container75</returns>
		public bool cnt_Container75_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chkPersonalAttendanceVisible_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtPersonalAttendanceVisible
		/// </summary>
		public void chkPersonalAttendanceVisible_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box HiQp8Cvw00CBSW93yXqPeA
		/// </summary>
		/// <returns>The Value of the Check Box HiQp8Cvw00CBSW93yXqPeA</returns>
		public bool chkPersonalAttendanceVisible_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceVisible;
		}
		public void chkPersonalAttendanceVisible_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wtPersonalAttendanceVisible)
		/// </summary>
		/// <returns>The Enabled State of wtPersonalAttendanceVisible</returns>
		public bool chkPersonalAttendanceVisible_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonalAttendanceVisible)
		/// </summary>
		/// <returns>The Visible State of wtPersonalAttendanceVisible</returns>
		public bool chkPersonalAttendanceVisible_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell67_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell67_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell67_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container9_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container9_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input24_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input24");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input24_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input24)
		/// </summary>
		/// <returns>The Visible State of wt_Input24</returns>
		public bool inputwt_Input24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input24)
		/// </summary>
		/// <returns>The Enabled State of wt_Input24</returns>
		public bool inputwt_Input24_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input24)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input24</returns>
		public bool inputwt_Input24_isMandatory() {
			return false;
		}

		public void cnt_Container108_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container108_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container108_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container108_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container108)
		/// </summary>
		/// <returns>The Visible State of wt_Container108</returns>
		public bool cnt_Container108_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox50
		/// </summary>
		public void chk_CheckBox50_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box cE6qYDaoqkayvb0m4XcZyQ
		/// </summary>
		/// <returns>The Value of the Check Box cE6qYDaoqkayvb0m4XcZyQ</returns>
		public bool chk_CheckBox50_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceCompleted;
		}
		public void chk_CheckBox50_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox50)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox50</returns>
		public bool chk_CheckBox50_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox50)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox50</returns>
		public bool chk_CheckBox50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If117_hasRun=false;
		bool if_wt_If117_evalResult;
		public bool if_wt_If117() {
			if (if_wt_If117_hasRun) {
				if_wt_If117_hasRun = false;
				return if_wt_If117_evalResult;
			}
			if_wt_If117_hasRun = true;
			if_wt_If117_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If117_evalResult;
		}

		public void cnt_Container80_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container80_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container80_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container80_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container80)
		/// </summary>
		/// <returns>The Visible State of wt_Container80</returns>
		public bool cnt_Container80_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 1KJ0oVQ7PkSJp2KIlGQhAg) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression85() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance76_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell47_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell47_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container118_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container118_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container118_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container118_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container118)
		/// </summary>
		/// <returns>The Visible State of wt_Container118</returns>
		public bool cnt_Container118_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditAttendance2").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance45
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance45_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditAttendance2)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditAttendance2)</returns>
		public string lnkEditAttendance2_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("0tie0dcUHUqXgvBcFGY47g")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditAttendance2)
		/// </summary>
		/// <returns>title of the Link (wtEditAttendance2)</returns>
		public string
		lnkEditAttendance2_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditAttendance2)
		/// </summary>
		/// <returns>The Visible State of wtEditAttendance2</returns>
		public bool lnkEditAttendance2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditAttendance2)
		/// </summary>
		/// <returns>The Enabled State of wtEditAttendance2</returns>
		public bool lnkEditAttendance2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container106_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container106_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container106_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container106_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container106)
		/// </summary>
		/// <returns>The Visible State of wt_Container106</returns>
		public bool cnt_Container106_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance100_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox110_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox110
		/// </summary>
		public void chk_CheckBox110_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box wX2k2pQ050GZ7SzROFHvvg
		/// </summary>
		/// <returns>The Value of the Check Box wX2k2pQ050GZ7SzROFHvvg</returns>
		public bool chk_CheckBox110_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl;
		}
		public void chk_CheckBox110_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox110)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox110</returns>
		public bool chk_CheckBox110_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox110)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox110</returns>
		public bool chk_CheckBox110_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell116_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell116_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell116_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container22_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container22_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input78_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input78_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input78_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input78_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input78");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input78_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input78)
		/// </summary>
		/// <returns>The Visible State of wt_Input78</returns>
		public bool inputwt_Input78_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input78)
		/// </summary>
		/// <returns>The Enabled State of wt_Input78</returns>
		public bool inputwt_Input78_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input78)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input78</returns>
		public bool inputwt_Input78_isMandatory() {
			return false;
		}

		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container31_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container31_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeOverview!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox5
		/// </summary>
		public void chk_CheckBox5_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 7JEhDDy_K0OwvREqeusKbA
		/// </summary>
		/// <returns>The Value of the Check Box 7JEhDDy_K0OwvREqeusKbA</returns>
		public bool chk_CheckBox5_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeCompleted;
		}
		public void chk_CheckBox5_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox5)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox5</returns>
		public bool chk_CheckBox5_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox5)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox5</returns>
		public bool chk_CheckBox5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container21_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container21_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If26_hasRun=false;
		bool if_wt_If26_evalResult;
		public bool if_wt_If26() {
			if (if_wt_If26_hasRun) {
				if_wt_If26_hasRun = false;
				return if_wt_If26_evalResult;
			}
			if_wt_If26_hasRun = true;
			if_wt_If26_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssStudyProgrammeUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If26_evalResult;
		}

		public void cnt_Container59_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container59_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container59_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container59_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container59)
		/// </summary>
		/// <returns>The Visible State of wt_Container59</returns>
		public bool cnt_Container59_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = LIP_YQaes0KVVdhSpTKYpA) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_2.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression53() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_2.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance69_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssStudyProgrammeUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container105_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container105_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container105_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container105_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container105)
		/// </summary>
		/// <returns>The Visible State of wt_Container105</returns>
		public bool cnt_Container105_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance83_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditPersonalStudyProgrammeOverview").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance83
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance83_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditPersonalStudyProgrammeOverview)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditPersonalStudyProgrammeOverview)</returns>
		public string lnkEditPersonalStudyProgrammeOverview_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("lFdrAeUXHUG8WRXYzTT5Ew")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditPersonalStudyProgrammeOverview)
		/// </summary>
		/// <returns>title of the Link (wtEditPersonalStudyProgrammeOverview)</returns>
		public string
		lnkEditPersonalStudyProgrammeOverview_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditPersonalStudyProgrammeOverview)
		/// </summary>
		/// <returns>The Visible State of wtEditPersonalStudyProgrammeOverview</returns>
		public bool lnkEditPersonalStudyProgrammeOverview_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditPersonalStudyProgrammeOverview)
		/// </summary>
		/// <returns>The Enabled State of wtEditPersonalStudyProgrammeOverview</returns>
		public bool lnkEditPersonalStudyProgrammeOverview_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container60_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container60_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container60_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container60_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container60)
		/// </summary>
		/// <returns>The Visible State of wt_Container60</returns>
		public bool cnt_Container60_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance71_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell94_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell94_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell94_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox28
		/// </summary>
		public void chk_CheckBox28_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box B6iqMQ+bcUa06WPi+7ehKg
		/// </summary>
		/// <returns>The Value of the Check Box B6iqMQ+bcUa06WPi+7ehKg</returns>
		public bool chk_CheckBox28_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployabilityVisible;
		}
		public void chk_CheckBox28_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployabilityVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox28)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox28</returns>
		public bool chk_CheckBox28_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox28)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox28</returns>
		public bool chk_CheckBox28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell74_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell74_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell74_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container13_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container13_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input72_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input72_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input72_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input72_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployability)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployability;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input72");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployability;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input72_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployability = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployability = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployability = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input72)
		/// </summary>
		/// <returns>The Visible State of wt_Input72</returns>
		public bool inputwt_Input72_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input72)
		/// </summary>
		/// <returns>The Enabled State of wt_Input72</returns>
		public bool inputwt_Input72_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input72)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input72</returns>
		public bool inputwt_Input72_isMandatory() {
			return false;
		}

		public void cnt_Container40_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container40_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container40_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container40_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container40)
		/// </summary>
		/// <returns>The Visible State of wt_Container40</returns>
		public bool cnt_Container40_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployability!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox7
		/// </summary>
		public void chk_CheckBox7_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 9S9ID_p2xkOzi+mDJ1KK6g
		/// </summary>
		/// <returns>The Value of the Check Box 9S9ID_p2xkOzi+mDJ1KK6g</returns>
		public bool chk_CheckBox7_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployabilityCompleted;
		}
		public void chk_CheckBox7_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployabilityCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox7)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox7</returns>
		public bool chk_CheckBox7_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox7)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox7</returns>
		public bool chk_CheckBox7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container124_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container124_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container124_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container124_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container124)
		/// </summary>
		/// <returns>The Visible State of wt_Container124</returns>
		public bool cnt_Container124_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If35_hasRun=false;
		bool if_wt_If35_evalResult;
		public bool if_wt_If35() {
			if (if_wt_If35_hasRun) {
				if_wt_If35_hasRun = false;
				return if_wt_If35_evalResult;
			}
			if_wt_If35_hasRun = true;
			if_wt_If35_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssEmployabilityUpdatesdBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If35_evalResult;
		}

		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container29_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 5GE4MU28eUKnslusp0mB1w) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_3.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression27() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_3.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssEmployabilityUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell107_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell107_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell107_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container121_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container121_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container121_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container121_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container121)
		/// </summary>
		/// <returns>The Visible State of wt_Container121</returns>
		public bool cnt_Container121_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditPersonalEmployability").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance61
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance61_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditPersonalEmployability)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditPersonalEmployability)</returns>
		public string lnkEditPersonalEmployability_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("8OI5WKUok0WGw9CbPBKsqA")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditPersonalEmployability)
		/// </summary>
		/// <returns>title of the Link (wtEditPersonalEmployability)</returns>
		public string
		lnkEditPersonalEmployability_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditPersonalEmployability)
		/// </summary>
		/// <returns>The Visible State of wtEditPersonalEmployability</returns>
		public bool lnkEditPersonalEmployability_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditPersonalEmployability)
		/// </summary>
		/// <returns>The Enabled State of wtEditPersonalEmployability</returns>
		public bool lnkEditPersonalEmployability_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container38_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container38_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container38_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container38_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container38)
		/// </summary>
		/// <returns>The Visible State of wt_Container38</returns>
		public bool cnt_Container38_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance114_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell115_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell115_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell115_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox57_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox57
		/// </summary>
		public void chk_CheckBox57_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box J4+Wa6ahBkiQoyQNID4JGQ
		/// </summary>
		/// <returns>The Value of the Check Box J4+Wa6ahBkiQoyQNID4JGQ</returns>
		public bool chk_CheckBox57_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperienceVisible;
		}
		public void chk_CheckBox57_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperienceVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox57)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox57</returns>
		public bool chk_CheckBox57_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox57)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox57</returns>
		public bool chk_CheckBox57_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell68_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell68_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container109_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container109_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container109_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container109_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container109)
		/// </summary>
		/// <returns>The Visible State of wt_Container109</returns>
		public bool cnt_Container109_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input104_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input104_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input104_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input104_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperience)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperience;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input104");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperience;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input104_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperience = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperience = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperience = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input104)
		/// </summary>
		/// <returns>The Visible State of wt_Input104</returns>
		public bool inputwt_Input104_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input104)
		/// </summary>
		/// <returns>The Enabled State of wt_Input104</returns>
		public bool inputwt_Input104_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input104)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input104</returns>
		public bool inputwt_Input104_isMandatory() {
			return false;
		}

		public void cnt_Container120_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container120_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container120_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container120_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container120)
		/// </summary>
		/// <returns>The Visible State of wt_Container120</returns>
		public bool cnt_Container120_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperience!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox103_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox103
		/// </summary>
		public void chk_CheckBox103_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box F8th0PHb4U2ArcGJB4hcVw
		/// </summary>
		/// <returns>The Value of the Check Box F8th0PHb4U2ArcGJB4hcVw</returns>
		public bool chk_CheckBox103_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperienceCompleted;
		}
		public void chk_CheckBox103_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperienceCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox103)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox103</returns>
		public bool chk_CheckBox103_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox103)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox103</returns>
		public bool chk_CheckBox103_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container46_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container46_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container46_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container46)
		/// </summary>
		/// <returns>The Visible State of wt_Container46</returns>
		public bool cnt_Container46_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If39_hasRun=false;
		bool if_wt_If39_evalResult;
		public bool if_wt_If39() {
			if (if_wt_If39_hasRun) {
				if_wt_If39_hasRun = false;
				return if_wt_If39_evalResult;
			}
			if_wt_If39_hasRun = true;
			if_wt_If39_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssWorkExperienceUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If39_evalResult;
		}

		public void cnt_Container81_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container81_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container81_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container81_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container81)
		/// </summary>
		/// <returns>The Visible State of wt_Container81</returns>
		public bool cnt_Container81_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = utJYqIXzzk6Et42nwABsJw) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_3.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression90() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_3.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance73_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssWorkExperienceUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell87_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell87_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell87_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance122_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditWorkExperience").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance122
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance122_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditWorkExperience)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditWorkExperience)</returns>
		public string lnkEditWorkExperience_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("i7cBb_zp1ESXj+SINgWLjw")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditWorkExperience)
		/// </summary>
		/// <returns>title of the Link (wtEditWorkExperience)</returns>
		public string
		lnkEditWorkExperience_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditWorkExperience)
		/// </summary>
		/// <returns>The Visible State of wtEditWorkExperience</returns>
		public bool lnkEditWorkExperience_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditWorkExperience)
		/// </summary>
		/// <returns>The Enabled State of wtEditWorkExperience</returns>
		public bool lnkEditWorkExperience_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container91_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container91_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container91_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container91_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container91)
		/// </summary>
		/// <returns>The Visible State of wt_Container91</returns>
		public bool cnt_Container91_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandOnNotify2 {
		}
		public static class FuncCommandOnSectionCheckBoxChange {

			/// <summary>
			/// Query Function "GetProgressReports" of Action "OnSectionCheckBoxChange"
			/// </summary>
			public static RLProgressReportSectionsRecordList datasetGetProgressReports(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportSections.[ID] o1, NULL o2, NULL o3, NULL o4, ENProgressReportSections.[SECTIONVISIBLE] o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {ProgressReportSections} ENProgressReportSections");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("T5cjSpNDb06Xftq9ynq4mQ")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionsRecordList outParamList = new RLProgressReportSectionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Personal.OnSectionCheckBoxChange.GetProgressReports.List");
						outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Personal.OnSectionCheckBoxChange.GetProgressReports.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Personal.OnSectionCheckBoxChange.GetProgressReports.List");
							outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Personal.OnSectionCheckBoxChange.GetProgressReports.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnSubSectionCheckBoxChange {
		}
		public static class FuncCommandOnClick {
		}
		public static class FuncssPreparation {

			private static void datasetGetProgressReportCategoriesByProgressReportReadDB(ref RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENGroup.Read(r, ref index);
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
				rec.ssENUser_2.Read(r, ref index);
				rec.ssENUser_3.Read(r, ref index);
				rec.ssENUser_4.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportCategoriesByProgressReport" of Action "Preparation"
			/// </summary>
			public static RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList datasetGetProgressReportCategoriesByProgressReport(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query 2Wpqnzi4dEScTZiHUkSliQ Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENGroup.[GROUPDESCRIPTION] o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, ENProgressReport.[ISCOMPLETE] o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, ENProgressReportSection.[ID] o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, ENProgressReportSection.[ATTENDANCE] o58, ENProgressReportSection.[ATTENDANCEVISIBLE] o59, ENProgressReportSection.[ATTENDANCEUPDATEDBY] o60, ENProgressReportSection.[ATTENDANCEUPDATEDON] o61, ENProgressReportSection.[ATTENDANCECOMPLETED] o62, NULL o63, NULL o64, NULL o65, NULL o66, NULL o67, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEW] o68, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEWVISIBL] o69, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDBY] o70, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDON] o71, ENProgressReportSection.[STUDYPROGRAMMECOMPLETED] o72, ENProgressReportSection.[EMPLOYABILITY] o73, ENProgressReportSection.[EMPLOYABILITYVISIBLE] o74, ENProgressReportSection.[EMPLOYABILITYUPDATESDBY] o75, ENProgressReportSection.[EMPLOYABILITYUPDATEDON] o76, ENProgressReportSection.[EMPLOYABILITYCOMPLETED] o7" +
				"7, ENProgressReportSection.[WORKEXPERIENCE] o78, ENProgressReportSection.[WORKEXPERIENCEVISIBLE] o79, ENProgressReportSection.[WORKEXPERIENCEUPDATEDBY] o80, ENProgressReportSection.[WORKEXPERIENCEUPDATEDON] o81, ENProgressReportSection.[WORKEXPERIENCECOMPLETED] o82, NULL o83, NULL o84, NULL o85, NULL o86, ENProgressReportSections.[SECTIONVISIBLE] o87, NULL o88, NULL o89, NULL o90, NULL o91, NULL o92, ENUser.[NAME] o93, NULL o94, NULL o95, NULL o96, NULL o97, NULL o98, NULL o99, NULL o100, NULL o101, NULL o102, ENUser_2.[NAME] o103, NULL o104, NULL o105, NULL o106, NULL o107, NULL o108, NULL o109, NULL o110, NULL o111, NULL o112, ENUser_3.[NAME] o113, NULL o114, NULL o115, NULL o116, NULL o117, NULL o118, NULL o119, NULL o120, NULL o121, NULL o122, NULL o123, NULL o124, NULL o125, NULL o126, NULL o127, NULL o128, NULL o129, NULL o130, NULL o131");
				fromBuilder.Append(" FROM ((((((({ProgressReportSection} ENProgressReportSection Inner JOIN {ProgressReportSections} ENProgressReportSections ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID]))  Left JOIN {Group} ENGroup ON (ENProgressReportSection.[GROUP] = ENGroup.[ID]))  Left JOIN {ProgressReport} ENProgressReport ON (ENProgressReportSections.[PROGRESSREPORTID] = ENProgressReport.[ID]))  Left JOIN {User} ENUser ON (ENProgressReportSection.[ATTENDANCEUPDATEDBY] = ENUser.[ID]))  Left JOIN {User} ENUser_2 ON (ENProgressReportSection.[STUDYPROGRAMMEUPDATEDBY] = ENUser_2.[ID]))  Left JOIN {User} ENUser_3 ON (ENProgressReportSection.[EMPLOYABILITYUPDATESDBY] = ENUser_3.[ID]))  Left JOIN {User} ENUser_4 ON (ENProgressReportSection.[WORKEXPERIENCEUPDATEDBY] = ENUser_4.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("T5cjSpNDb06Xftq9ynq4mQ")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList outParamList = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[9];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[5] = new BitArray(new bool[] {
					true
				}
				);
				opt[6] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[7] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[8] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Personal.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList = (RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Personal.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Personal.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList = (RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Personal.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wt_Container97") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_Container97");
			}
			if (id == "wt_Container42") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_Container42");
			}
			if (id == "wtIconExpand") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wtIconExpand");
			}
			if (id == "wt_If32") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_If32");
			}
			if (id == "wt_If32T") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_If32T");
			}
			if (id == "RichWidgets_wt_WebBlockInstance99") {
				return wt_WebBlockInstance92.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance99");
			}
			if (id == "wt_If32F") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_If32F");
			}
			if (id == "RichWidgets_wt_WebBlockInstance43") {
				return wt_WebBlockInstance92.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance43");
			}
			if (id == "wtVisibleCheckBoxContainer") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wtVisibleCheckBoxContainer");
			}
			if (id == "wt_CheckBox15") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_CheckBox15");
			}
			if (id == "wtTitleContainer") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wtTitleContainer");
			}
			if (id == "wt_InlineExpression96") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_InlineExpression96");
			}
			if (id == "wtStatusBarContainer") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wtStatusBarContainer");
			}
			if (id == "wt_WebBlockInstance4") {
				return wt_WebBlockInstance92.wtTitle.FindControl("wt_WebBlockInstance4");
			}
			if (id == "wtDetailWrapper") {
				return wt_WebBlockInstance92.wtListContent.FindControl("wtDetailWrapper");
			}
			if (id == "wt_If111") {
				return wt_WebBlockInstance92.wtListContent.FindControl("wt_If111");
			}
			if (id == "wt_If111T") {
				return wt_WebBlockInstance92.wtListContent.FindControl("wt_If111T");
			}
			if (id == "wtProgressReport_List2") {
				return wt_WebBlockInstance92.wtListContent.FindControl("wtProgressReport_List2");
			}
			if (id == "wt_If111F") {
				return wt_WebBlockInstance92.wtListContent.FindControl("wt_If111F");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KuYYDh8osfECXg7S3edxDNQ";
			}
		}
	}

}
