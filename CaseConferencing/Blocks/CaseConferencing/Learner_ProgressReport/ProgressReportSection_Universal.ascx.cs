/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {
	public abstract class WBlkProgressReportSection_Universal: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamProgressReportId. Description:
		/// </summary>
		public int inParamProgressReportId = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Variable <code>varLcVisible</code> that represents the Service Studio local variable
		///  <code>Visible</code> <p>Description: </p>
		/// </summary>
		bool varLcVisible = false;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfSections</code> that represents the Service Studio local variable
		///  <code>TotalNumberOfSections</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfSections = 0;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfVisibleSections</code> that represents the Service Studio local
		///  variable <code>TotalNumberOfVisibleSections</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfVisibleSections = 0;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfSectionsCompleted</code> that represents the Service Studio local
		///  variable <code>TotalNumberOfSectionsCompleted</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfSectionsCompleted = 0;

		/// <summary>
		/// Variable wt_WebBlockInstance7
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout wt_WebBlockInstance7;
		protected OutSystems.HubEdition.WebWidgets.Container wtTitleBar;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container109;
		protected OutSystems.HubEdition.WebWidgets.Container wtIconExpand;
		/// <summary>
		/// Variable "True" if the Widget wt_If79
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If79T;

		/// <summary>
		/// Variable "True" if the Widget wt_If79
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If79F;
		protected OutSystems.HubEdition.WebWidgets.Container wtVisibleCheckBoxContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtTitleContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtStatusBarContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtDetailWrapper;
		/// <summary>
		/// Variable "True" if the Widget wt_If82
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If82T;

		/// <summary>
		/// Variable "True" if the Widget wt_If82
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If82F;
		private RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _ssProgressReport_List2List = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		public RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList ssProgressReport_List2List {
			get {
				return _ssProgressReport_List2List; 
			}
			set {
				_ssProgressReport_List2List = value;
				wtProgressReport_List2.DataSource = value;
				ssProgressReport_List2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtProgressReport_List2;
		public ArrayList wtProgressReport_List2_storage = new ArrayList();
		protected bool ssProgressReport_List2List_notUsedYet = true;
		protected bool ssProgressReport_List2ListDoDataBind;
		protected bool ssProgressReport_List2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input46ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input46ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container69;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container127;
		/// <summary>
		/// Variable "True" if the Widget wt_If27
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If27T;

		/// <summary>
		/// Variable "True" if the Widget wt_If27
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If27F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		/// <summary>
		/// Variable (wtEditCourseOutline) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditCourseOutline;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container91;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input37ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input37ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container147;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container56;
		/// <summary>
		/// Variable "True" if the Widget wt_If128
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If128T;

		/// <summary>
		/// Variable "True" if the Widget wt_If128
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If128F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container96;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		/// <summary>
		/// Variable (wtEditKeyStrengths) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditKeyStrengths;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container89;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container93;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input115ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input115ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		/// <summary>
		/// Variable "True" if the Widget wt_If26
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If26T;

		/// <summary>
		/// Variable "True" if the Widget wt_If26
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If26F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container144;
		/// <summary>
		/// Variable (wtEditAreasForDevelopment) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditAreasForDevelopment;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container71;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container148;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input101ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input101ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container34;
		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16T;

		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container95;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container126;
		/// <summary>
		/// Variable (wtEditPredictedOutcome) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditPredictedOutcome;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container130;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input122ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input122ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container40;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container107;
		/// <summary>
		/// Variable "True" if the Widget wt_If38
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If38T;

		/// <summary>
		/// Variable "True" if the Widget wt_If38
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If38F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container146;
		/// <summary>
		/// Variable (wtEditAttendance) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container62;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetProgressReportCategoriesByProgressReport_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetProgressReportCategoriesByProgressReport
			int datasetGetProgressReportCategoriesByProgressReport_maxRecords = 0;
			queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
			);
			varLcTotalNumberOfSections = (queryResGetProgressReportCategoriesByProgressReport_outParamList.Length*5); // TotalNumberOfSections = GetProgressReportCategoriesByProgressReport.List.Length * 5
			varLcTotalNumberOfVisibleSections = 0; // TotalNumberOfVisibleSections = 0
			varLcTotalNumberOfSectionsCompleted = 0; // TotalNumberOfSectionsCompleted = 0
			// Foreach GetProgressReportCategoriesByProgressReport.List
			queryResGetProgressReportCategoriesByProgressReport_outParamList.StartIteration();
			try {
				queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance(0);
				while (! queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof) {
					// CourseOutlineVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// KeyStrengthsVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// AreasForDevelopmentVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// PredictedOutcomeVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// Attendance Visible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// CourseOutlineCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// KeyStrengthsCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// AreasForDevelopmentCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// PredictedOutcomeCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// AttendanceCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance();
				}
			} finally {
				queryResGetProgressReportCategoriesByProgressReport_outParamList.EndIteration();
			}
		}
		static WBlkProgressReportSection_Universal() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance7 = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) FindControl("wt_WebBlockInstance7");
			wtTitleBar = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTitleBar");
			wt_Container109 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container109");
			wtIconExpand = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtIconExpand");
			wtVisibleCheckBoxContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtVisibleCheckBoxContainer");
			wtTitleContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTitleContainer");
			wtStatusBarContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtStatusBarContainer");
			wtDetailWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDetailWrapper");
			wtProgressReport_List2 = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtProgressReport_List2");
			wtProgressReport_List2.StartIndexExpression = () => 0;
			wtProgressReport_List2.LineCountExpression = () => 999;
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssProgressReport_List2ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input46", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input37", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input115", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input101", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input122", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList.

			int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof;
			ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();

			// Write the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList to the storequeryResGetProgressReportCategoriesByProgressReport_outParamList
			if (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Empty) {
				try {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.StartIteration();

					while (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ssGroupDescription == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ssGroupDescription);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssId == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssId);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutline == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutline);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengths == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengths);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopment == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopment);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcome == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcome);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, true, true, true, true
						}
						))));
						storequeryResGetProgressReportCategoriesByProgressReport_outParamList.Add(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance();
					}
				} finally {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", storequeryResGetProgressReportCategoriesByProgressReport_outParamList, null);

			#endregion


			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList, false);
			queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamProgressReportId", inParamProgressReportId, 0);
			ViewStateAttributes.SetInViewState("varLcVisible", varLcVisible, false);
			if (IsAjaxRequest) {
				recListProgressReport_List2_Rebuild((ssProgressReport_List2ListDataBound ? wtProgressReport_List2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtProgressReport_List2.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtProgressReport_List2_list", wtProgressReport_List2_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList.

				// Read the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList from storequeryResGetProgressReportCategoriesByProgressReport_outParamList
				queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
				ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList;
				storequeryResGetProgressReportCategoriesByProgressReport_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", null);
				if (storequeryResGetProgressReportCategoriesByProgressReport_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList in storequeryResGetProgressReportCategoriesByProgressReport_outParamList) {
						if (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList != null) {
							// Aux current record variable
							RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList = new RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(null);
							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.ssGroupDescription = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[11]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_4.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[12] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[12]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_4.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[13]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_4.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[14]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_5.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[15] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[15]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_5.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[16]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_5.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[17]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssIsComplete = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[18] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[18]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[19]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[20]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssId = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[21] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[21]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutline = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[22] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[22]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[23] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[23]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[24] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[24]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[25] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[25]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[26] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[26]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengths = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[27] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[27]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[28] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[28]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[29] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[29]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[30] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[30]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[31] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[31]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopment = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[32] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[32]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[33] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[33]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[34] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[34]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[35] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[35]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[36] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[36]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcome = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[37] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[37]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[38] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[38]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[39] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[39]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[40] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[40]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[41] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[41]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendance = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[42] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[42]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[43] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[43]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[44] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[44]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[45] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[45]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[46] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[46]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[47]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[48]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.ssSectionVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[49] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[49]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[50]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[51]);

							queryResGetProgressReportCategoriesByProgressReport_outParamList.Append(tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						}
					}
				}
				queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", false);
				queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

				#endregion

				inParamProgressReportId = (int) ViewStateAttributes.GetFromViewState("inParamProgressReportId", 0);
				varLcVisible = (bool) ViewStateAttributes.GetFromViewState("varLcVisible", false);
				recListProgressReport_List2_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wt_Input46");
			ControlVisibility.StoreChildControlVisibility("wt_Input37");
			ControlVisibility.StoreChildControlVisibility("wt_Input115");
			ControlVisibility.StoreChildControlVisibility("wt_Input101");
			ControlVisibility.StoreChildControlVisibility("wt_Input122");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wt_Input46");
			ControlVisibility.RestoreChildControlVisibility("wt_Input37");
			ControlVisibility.RestoreChildControlVisibility("wt_Input115");
			ControlVisibility.RestoreChildControlVisibility("wt_Input101");
			ControlVisibility.RestoreChildControlVisibility("wt_Input122");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.Kekfg4ErLLUuOO9B6_Zh7Gg";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("ekfg4ErLLUuOO9B6+Zh7Gg"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify2</code> that represents the Service Studio screen action
		///  <code>OnNotify2</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify2(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetProgressReportCategoriesByProgressReport
				{
					int datasetGetProgressReportCategoriesByProgressReport_maxRecords = 0;
					queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
					);
				}
				// Refresh Me
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnSubSectionCheckBoxChange: VarsBag {
			public int resCreateOrUpdateProgressReportSection_outParamId = 0;

			public lcvOnSubSectionCheckBoxChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnSubSectionCheckBoxChange</code> that represents the Service Studio screen
		///  action <code>OnSubSectionCheckBoxChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSubSectionCheckBoxChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnSubSectionCheckBoxChange localVars = new lcvOnSubSectionCheckBoxChange();
			try {
				// CreateOrUpdateProgressReportSection
				ExtendedActions.CreateOrUpdateProgressReportSection(heContext, getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ChangedAttributes, ((RCProgressReportSectionRecord) getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection), out localVars.resCreateOrUpdateProgressReportSection_outParamId);
				// Refresh Me
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick</code> that represents the Service Studio screen action
		///  <code>OnClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Toggle
				varLcVisible = (!varLcVisible); // Visible = notVisible
				// Refresh Widget (wtIconExpand)
				((OSPageViewState) Page).AjaxRefresh(wtIconExpand, "None", StoreViewState);
				// Refresh Widget (wtDetailWrapper)
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtDetailWrapper, "VerticalSlide", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnSectionCheckBoxChange: VarsBag {
			public int inParamProgressReportID2;
			public int resCreateOrUpdateProgressReportSections_outParamId = 0;

			public RLProgressReportSectionsRecordList queryResGetProgressReports_outParamList = new RLProgressReportSectionsRecordList();
			public int queryResGetProgressReports_outParamCount = 0;

			public lcvOnSectionCheckBoxChange(int inParamProgressReportID2) {
				this.inParamProgressReportID2 = inParamProgressReportID2;
			}
		}
		/// <summary>
		/// Action <code>CommandOnSectionCheckBoxChange</code> that represents the Service Studio screen action
		///  <code>OnSectionCheckBoxChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSectionCheckBoxChange(HeContext heContext, int inParamProgressReportID2) {
			CheckPermissions(heContext);
			lcvOnSectionCheckBoxChange localVars = new lcvOnSectionCheckBoxChange(inParamProgressReportID2);
			try {
				// Query datasetGetProgressReports
				int datasetGetProgressReports_maxRecords = 0;
				localVars.queryResGetProgressReports_outParamList = FuncCommandOnSectionCheckBoxChange.datasetGetProgressReports(heContext, datasetGetProgressReports_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetProgressReports_outParamCount, inParamProgressReportId
				);
				// Foreach GetProgressReports.List
				localVars.queryResGetProgressReports_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetProgressReports_outParamList.Eof) {
						localVars.queryResGetProgressReports_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible = getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible; // GetProgressReports.List.Current.ProgressReportSections.SectionVisible =
						// ProgressReport_List2.List.Current.ProgressReportSections.SectionVisible
						// CreateOrUpdateProgressReportSections
						ExtendedActions.CreateOrUpdateProgressReportSections(heContext, localVars.queryResGetProgressReports_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetProgressReports_outParamList.CurrentRec, out localVars.resCreateOrUpdateProgressReportSections_outParamId);
						localVars.queryResGetProgressReports_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetProgressReports_outParamList.EndIteration();
				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void webBlck_WebBlockInstance7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) sender;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTitleBar_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTitleBar_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTitleBar_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTitleBar_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTitleBar)
		/// </summary>
		/// <returns>The Visible State of wtTitleBar</returns>
		public bool cntTitleBar_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container109_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container109_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container109_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container109_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container109)
		/// </summary>
		/// <returns>The Visible State of wt_Container109</returns>
		public bool cnt_Container109_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntIconExpand_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntIconExpand_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntIconExpand_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:block;float:right;cursor:pointer;margin-right:3px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntIconExpand_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtIconExpand
		/// </summary>
		public void cntIconExpand_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtIconExpand)
		/// </summary>
		/// <returns>The Visible State of wtIconExpand</returns>
		public bool cntIconExpand_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If79_hasRun=false;
		bool if_wt_If79_evalResult;
		public bool if_wt_If79() {
			if (if_wt_If79_hasRun) {
				if_wt_If79_hasRun = false;
				return if_wt_If79_evalResult;
			}
			if_wt_If79_hasRun = true;
			if_wt_If79_evalResult = varLcVisible;
			return if_wt_If79_evalResult;
		}

		public void RichWidgets_webBlck_WebBlockInstance65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("lONIeezZcEq91R_t0lfWaQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Ksi11unkKkSD65nEu1eIYA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntVisibleCheckBoxContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntVisibleCheckBoxContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntVisibleCheckBoxContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntVisibleCheckBoxContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtVisibleCheckBoxContainer)
		/// </summary>
		/// <returns>The Visible State of wtVisibleCheckBoxContainer</returns>
		public bool cntVisibleCheckBoxContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox149_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox149
		/// </summary>
		public void chk_CheckBox149_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSectionCheckBoxChange(heContext
				, inParamProgressReportId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box eiwQ_3uZLESDYg57YtYkpg
		/// </summary>
		/// <returns>The Value of the Check Box eiwQ_3uZLESDYg57YtYkpg</returns>
		public bool chk_CheckBox149_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}
		public void chk_CheckBox149_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox149)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox149</returns>
		public bool chk_CheckBox149_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox149)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox149</returns>
		public bool chk_CheckBox149_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTitleContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTitleContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTitleContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTitleContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTitleContainer)
		/// </summary>
		/// <returns>The Visible State of wtTitleContainer</returns>
		public bool cntTitleContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = iyTX60S3U0G47GFxA5rJDw) Expression: "Universal"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression139() {
			return "Universal";
		}
		public void cntStatusBarContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntStatusBarContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntStatusBarContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntStatusBarContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtStatusBarContainer)
		/// </summary>
		/// <returns>The Visible State of wtStatusBarContainer</returns>
		public bool cntStatusBarContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance63_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
				widget.inParamIsSelected = false;
				widget.inParamPercentage = ((((varLcTotalNumberOfSectionsCompleted>0) && (varLcTotalNumberOfVisibleSections>0))) ?((((decimal) varLcTotalNumberOfSectionsCompleted/
				(decimal) varLcTotalNumberOfVisibleSections) *100M)):(0M));
				widget.inParamText = ((((((Convert.ToString(varLcTotalNumberOfSectionsCompleted) + " out of ") +Convert.ToString(varLcTotalNumberOfVisibleSections)) + " visible sections completed.") + " (") +Convert.ToString((varLcTotalNumberOfSections-varLcTotalNumberOfVisibleSections))) + " sections hidden from report.)");
				widget.inParamVisibleCheckbox = false;
				widget.inParamEnabledCheckbox = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance63
		/// </summary>
		public void webBlck_WebBlockInstance63_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntDetailWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDetailWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDetailWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntDetailWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDetailWrapper)
		/// </summary>
		/// <returns>The Visible State of wtDetailWrapper</returns>
		public bool cntDetailWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If82_hasRun=false;
		bool if_wt_If82_evalResult;
		public bool if_wt_If82() {
			if (if_wt_If82_hasRun) {
				if_wt_If82_hasRun = false;
				return if_wt_If82_evalResult;
			}
			if_wt_If82_hasRun = true;
			if_wt_If82_evalResult = varLcVisible;
			return if_wt_If82_evalResult;
		}

		public void recListProgressReport_List2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtProgressReport_List2
				ssProgressReport_List2List = queryResGetProgressReportCategoriesByProgressReport_outParamList;
				ssProgressReport_List2ListDoDataBind = false;
				ssProgressReport_List2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListProgressReport_List2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssProgressReport_List2List.Length > 0) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[ssProgressReport_List2List.CurrentRowNumber];
				}
				if (ssProgressReport_List2List.Length > e.SelectedIndex) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[e.SelectedIndex];
					ssProgressReport_List2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListProgressReport_List2_Store(object dataItem, int index) {
			RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmprec = (RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENProgressReportSection.ssId == 0?(object) null: tmprec.ssENProgressReportSection.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENProgressReportSection.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENProgressReportSection.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssENProgressReportSections.ssSectionVisible == false?(object) null: tmprec.ssENProgressReportSections.ssSectionVisible);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENProgressReportSections.ChangedAttributes, new BitArray(new bool[] {
				false, false, false, false, true, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENProgressReportSections.OptimizedAttributes, new BitArray(new bool[] {
				true, true, true, true, false, true, true, true, true
			}
			))));
			if (index < wtProgressReport_List2_storage.Count) {
				wtProgressReport_List2_storage[index] = tmpFields;
			} else {
				wtProgressReport_List2_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListProgressReport_List2_Restore() {

			#region fetch ssProgressReport_List2List.

			// Read the needed fields of ssProgressReport_List2List from storewtProgressReport_List2_list
			ssProgressReport_List2List = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
			ArrayList storewtProgressReport_List2_list;
			storewtProgressReport_List2_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtProgressReport_List2_list", null);
			if (storewtProgressReport_List2_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtProgressReport_List2_list in storewtProgressReport_List2_list) {
					if (tmpFieldswtProgressReport_List2_list != null) {
						// Aux current record variable
						RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmpAuxCurrentRecordwtProgressReport_List2_list = new RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(null);
						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.ssId = (int) (tmpFieldswtProgressReport_List2_list[0] == null ? 0: tmpFieldswtProgressReport_List2_list[0]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[1]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[2]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.ssSectionVisible = (bool) (tmpFieldswtProgressReport_List2_list[3] == null ? false: tmpFieldswtProgressReport_List2_list[3]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[4]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[5]);

						ssProgressReport_List2List.Append(tmpAuxCurrentRecordwtProgressReport_List2_list);
					}
				}
			}
			ssProgressReport_List2List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssProgressReport_List2List runtime properties state.


			if (storewtProgressReport_List2_list.Count > 0) {
				ssProgressReport_List2List.RestoreRecordListState(storewtProgressReport_List2_list.Count - 1, false);
			} else {
				ssProgressReport_List2List.CurrentRowNumber = 0;
			}

			#endregion

			wtProgressReport_List2_storage = storewtProgressReport_List2_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListProgressReport_List2_Clear(object sender, EventArgs e) {
			wtProgressReport_List2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListProgressReport_List2_Rebuild(int startIndex, int lineCount) {
			if (ssProgressReport_List2List.Length != -1) {
				wtProgressReport_List2_storage.Clear();
				for (int i=startIndex; i<ssProgressReport_List2List.Data.Count && i<startIndex+lineCount; i++) {
					recListProgressReport_List2_Store(ssProgressReport_List2List.Data[i], wtProgressReport_List2_storage.Count);
				}
			}
		}
		public void recListProgressReport_List2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtProgressReport_List2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList getWtProgressReport_List2List() {
			if (ssProgressReport_List2ListDoDataBind) {
				recListProgressReport_List2_onDataBinding(this, null);
			}

			return ssProgressReport_List2List;
		}
		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = ((((BuiltInFunction.Mod(getWtProgressReport_List2List().CurrentRowNumber, 2M) ==0M)) ?("background-color:#F8F8F8;"):("")) + (((getWtProgressReport_List2List().CurrentRowNumber==0)) ?("border-top: solid 1px #dadada;"):("")));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table88_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table88_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table88_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:2px;padding: 4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = f0rNjSSChU68XPrchr180w) Expression:
		///  ProgressReport_List2.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression90() {
			return getWtProgressReport_List2List().CurrentRec.ssENGroup.ssGroupDescription;
		}
		public void wt_TableCell134_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell134_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell134_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell67_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell67_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell67_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox77_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox77
		/// </summary>
		public void chk_CheckBox77_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 8WGadyaRzkO5CwujfUNPJg
		/// </summary>
		/// <returns>The Value of the Check Box 8WGadyaRzkO5CwujfUNPJg</returns>
		public bool chk_CheckBox77_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible;
		}
		public void chk_CheckBox77_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox77)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox77</returns>
		public bool chk_CheckBox77_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox77)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox77</returns>
		public bool chk_CheckBox77_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell85_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell85_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell85_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input46_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input46_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input46_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input46");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input46_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input46)
		/// </summary>
		/// <returns>The Visible State of wt_Input46</returns>
		public bool inputwt_Input46_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input46)
		/// </summary>
		/// <returns>The Enabled State of wt_Input46</returns>
		public bool inputwt_Input46_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input46)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input46</returns>
		public bool inputwt_Input46_isMandatory() {
			return false;
		}

		public void cnt_Container69_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container69_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container69_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container69_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container69)
		/// </summary>
		/// <returns>The Visible State of wt_Container69</returns>
		public bool cnt_Container69_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutline!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox117_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox117
		/// </summary>
		public void chk_CheckBox117_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box Xn6NxOtljk+PqU0ZcOsv+A
		/// </summary>
		/// <returns>The Value of the Check Box Xn6NxOtljk+PqU0ZcOsv+A</returns>
		public bool chk_CheckBox117_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted;
		}
		public void chk_CheckBox117_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox117)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox117</returns>
		public bool chk_CheckBox117_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox117)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox117</returns>
		public bool chk_CheckBox117_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container127_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container127_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container127_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container127_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container127)
		/// </summary>
		/// <returns>The Visible State of wt_Container127</returns>
		public bool cnt_Container127_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If27_hasRun=false;
		bool if_wt_If27_evalResult;
		public bool if_wt_If27() {
			if (if_wt_If27_hasRun) {
				if_wt_If27_hasRun = false;
				return if_wt_If27_evalResult;
			}
			if_wt_If27_hasRun = true;
			if_wt_If27_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If27_evalResult;
		}

		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container47_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container47_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = TfC_7hsJS0OQHh+j3U9Edg) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression140() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance87_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell74_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell74_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell74_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container17_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container17_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance120_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditCourseOutline").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance120
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance120_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditCourseOutline)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditCourseOutline)</returns>
		public string lnkEditCourseOutline_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("SDjuQ6v3MUmu_ig49G0Wzg")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditCourseOutline)
		/// </summary>
		/// <returns>title of the Link (wtEditCourseOutline)</returns>
		public string
		lnkEditCourseOutline_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditCourseOutline)
		/// </summary>
		/// <returns>The Visible State of wtEditCourseOutline</returns>
		public bool lnkEditCourseOutline_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditCourseOutline)
		/// </summary>
		/// <returns>The Enabled State of wtEditCourseOutline</returns>
		public bool lnkEditCourseOutline_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container31_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container31_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell43_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell43_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox55_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox55
		/// </summary>
		public void chk_CheckBox55_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 4zpKRclpZEezFRkp07nhRg
		/// </summary>
		/// <returns>The Value of the Check Box 4zpKRclpZEezFRkp07nhRg</returns>
		public bool chk_CheckBox55_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible;
		}
		public void chk_CheckBox55_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox55)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox55</returns>
		public bool chk_CheckBox55_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox55)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox55</returns>
		public bool chk_CheckBox55_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell105_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell105_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell105_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container91_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container91_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container91_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container91_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container91)
		/// </summary>
		/// <returns>The Visible State of wt_Container91</returns>
		public bool cnt_Container91_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input37_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input37_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input37_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input37_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input37");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input37_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input37)
		/// </summary>
		/// <returns>The Visible State of wt_Input37</returns>
		public bool inputwt_Input37_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input37)
		/// </summary>
		/// <returns>The Enabled State of wt_Input37</returns>
		public bool inputwt_Input37_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input37)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input37</returns>
		public bool inputwt_Input37_isMandatory() {
			return false;
		}

		public void cnt_Container147_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container147_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container147_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container147_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container147)
		/// </summary>
		/// <returns>The Visible State of wt_Container147</returns>
		public bool cnt_Container147_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengths!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox145_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox145
		/// </summary>
		public void chk_CheckBox145_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box TF+U8mjxeku8zyCVTqaXvA
		/// </summary>
		/// <returns>The Value of the Check Box TF+U8mjxeku8zyCVTqaXvA</returns>
		public bool chk_CheckBox145_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted;
		}
		public void chk_CheckBox145_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox145)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox145</returns>
		public bool chk_CheckBox145_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox145)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox145</returns>
		public bool chk_CheckBox145_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container56_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container56_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container56_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container56_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container56)
		/// </summary>
		/// <returns>The Visible State of wt_Container56</returns>
		public bool cnt_Container56_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If128_hasRun=false;
		bool if_wt_If128_evalResult;
		public bool if_wt_If128() {
			if (if_wt_If128_hasRun) {
				if_wt_If128_hasRun = false;
				return if_wt_If128_evalResult;
			}
			if_wt_If128_hasRun = true;
			if_wt_If128_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If128_evalResult;
		}

		public void cnt_Container96_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container96_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container96_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container96_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container96)
		/// </summary>
		/// <returns>The Visible State of wt_Container96</returns>
		public bool cnt_Container96_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = t6gFRUORYkC7Qmc6MnkPqg) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_2.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression54() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_2.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container45_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container45_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance97_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditKeyStrengths").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance97
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance97_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditKeyStrengths)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditKeyStrengths)</returns>
		public string lnkEditKeyStrengths_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("v5hrUY5JNUGkxlQ0AvRvwg")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditKeyStrengths)
		/// </summary>
		/// <returns>title of the Link (wtEditKeyStrengths)</returns>
		public string
		lnkEditKeyStrengths_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditKeyStrengths)
		/// </summary>
		/// <returns>The Visible State of wtEditKeyStrengths</returns>
		public bool lnkEditKeyStrengths_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditKeyStrengths)
		/// </summary>
		/// <returns>The Enabled State of wtEditKeyStrengths</returns>
		public bool lnkEditKeyStrengths_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container89_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container89_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container89_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container89_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container89)
		/// </summary>
		/// <returns>The Visible State of wt_Container89</returns>
		public bool cnt_Container89_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance138_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell32_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell32_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox5
		/// </summary>
		public void chk_CheckBox5_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box DIY9Bf5O3kWZCQ4ZK3qeMA
		/// </summary>
		/// <returns>The Value of the Check Box DIY9Bf5O3kWZCQ4ZK3qeMA</returns>
		public bool chk_CheckBox5_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible;
		}
		public void chk_CheckBox5_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox5)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox5</returns>
		public bool chk_CheckBox5_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox5)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox5</returns>
		public bool chk_CheckBox5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell48_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell48_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell48_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container93_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container93_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container93_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container93_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container93)
		/// </summary>
		/// <returns>The Visible State of wt_Container93</returns>
		public bool cnt_Container93_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input115_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input115_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input115_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input115_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input115");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input115_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input115)
		/// </summary>
		/// <returns>The Visible State of wt_Input115</returns>
		public bool inputwt_Input115_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input115)
		/// </summary>
		/// <returns>The Enabled State of wt_Input115</returns>
		public bool inputwt_Input115_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input115)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input115</returns>
		public bool inputwt_Input115_isMandatory() {
			return false;
		}

		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container30_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container30_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopment!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox133_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox133
		/// </summary>
		public void chk_CheckBox133_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box DvjC3Yy1sUSRsHcpCBBqmg
		/// </summary>
		/// <returns>The Value of the Check Box DvjC3Yy1sUSRsHcpCBBqmg</returns>
		public bool chk_CheckBox133_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted;
		}
		public void chk_CheckBox133_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox133)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox133</returns>
		public bool chk_CheckBox133_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox133)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox133</returns>
		public bool chk_CheckBox133_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If26_hasRun=false;
		bool if_wt_If26_evalResult;
		public bool if_wt_If26() {
			if (if_wt_If26_hasRun) {
				if_wt_If26_hasRun = false;
				return if_wt_If26_evalResult;
			}
			if_wt_If26_hasRun = true;
			if_wt_If26_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If26_evalResult;
		}

		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container49_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container49_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 2FHHiaxiFU6oYfdwp73dLA) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_3.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression83() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_3.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance72_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell119_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell119_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell119_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container144_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container144_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container144_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container144_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container144)
		/// </summary>
		/// <returns>The Visible State of wt_Container144</returns>
		public bool cnt_Container144_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance70_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditAreasForDevelopment").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance70
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance70_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditAreasForDevelopment)</returns>
		public string lnkEditAreasForDevelopment_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("IPwjcVN7r0KXXjyKfRFWrA")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>title of the Link (wtEditAreasForDevelopment)</returns>
		public string
		lnkEditAreasForDevelopment_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>The Visible State of wtEditAreasForDevelopment</returns>
		public bool lnkEditAreasForDevelopment_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>The Enabled State of wtEditAreasForDevelopment</returns>
		public bool lnkEditAreasForDevelopment_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container71_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container71_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container71_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container71_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container71)
		/// </summary>
		/// <returns>The Visible State of wt_Container71</returns>
		public bool cnt_Container71_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance98_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell15_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell15_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox142_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox142
		/// </summary>
		public void chk_CheckBox142_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 6tvb79XGfkivU6DskhWfEw
		/// </summary>
		/// <returns>The Value of the Check Box 6tvb79XGfkivU6DskhWfEw</returns>
		public bool chk_CheckBox142_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible;
		}
		public void chk_CheckBox142_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox142)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox142</returns>
		public bool chk_CheckBox142_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox142)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox142</returns>
		public bool chk_CheckBox142_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell121_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell121_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell121_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container148_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container148_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container148_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container148_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container148)
		/// </summary>
		/// <returns>The Visible State of wt_Container148</returns>
		public bool cnt_Container148_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input101_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input101_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input101_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input101_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input101");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input101_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input101)
		/// </summary>
		/// <returns>The Visible State of wt_Input101</returns>
		public bool inputwt_Input101_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input101)
		/// </summary>
		/// <returns>The Enabled State of wt_Input101</returns>
		public bool inputwt_Input101_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input101)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input101</returns>
		public bool inputwt_Input101_isMandatory() {
			return false;
		}

		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcome!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox106_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox106
		/// </summary>
		public void chk_CheckBox106_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box iG0RrCu1ikGXZv9vEEFtDg
		/// </summary>
		/// <returns>The Value of the Check Box iG0RrCu1ikGXZv9vEEFtDg</returns>
		public bool chk_CheckBox106_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted;
		}
		public void chk_CheckBox106_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox106)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox106</returns>
		public bool chk_CheckBox106_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox106)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox106</returns>
		public bool chk_CheckBox106_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container34_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container34_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container34_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container34)
		/// </summary>
		/// <returns>The Visible State of wt_Container34</returns>
		public bool cnt_Container34_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If16_hasRun=false;
		bool if_wt_If16_evalResult;
		public bool if_wt_If16() {
			if (if_wt_If16_hasRun) {
				if_wt_If16_hasRun = false;
				return if_wt_If16_evalResult;
			}
			if_wt_If16_hasRun = true;
			if_wt_If16_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If16_evalResult;
		}

		public void cnt_Container95_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container95_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container95_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container95_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container95)
		/// </summary>
		/// <returns>The Visible State of wt_Container95</returns>
		public bool cnt_Container95_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = Ua5Ct9hF6kWAup5IbO2WfA) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_4.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression110() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_4.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance135_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell51_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell51_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell51_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container126_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container126_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container126_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container126_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container126)
		/// </summary>
		/// <returns>The Visible State of wt_Container126</returns>
		public bool cnt_Container126_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance113_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditPredictedOutcome").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance113
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance113_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditPredictedOutcome)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditPredictedOutcome)</returns>
		public string lnkEditPredictedOutcome_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("+Hg3vuD2+0ybaSobi9yKCA")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditPredictedOutcome)
		/// </summary>
		/// <returns>title of the Link (wtEditPredictedOutcome)</returns>
		public string
		lnkEditPredictedOutcome_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditPredictedOutcome)
		/// </summary>
		/// <returns>The Visible State of wtEditPredictedOutcome</returns>
		public bool lnkEditPredictedOutcome_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditPredictedOutcome)
		/// </summary>
		/// <returns>The Enabled State of wtEditPredictedOutcome</returns>
		public bool lnkEditPredictedOutcome_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container130_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container130_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container130_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container130_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container130)
		/// </summary>
		/// <returns>The Visible State of wt_Container130</returns>
		public bool cnt_Container130_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell108_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell108_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell108_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox78_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox78
		/// </summary>
		public void chk_CheckBox78_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box iCDMd49pSkCOWg4UE2Z0Uw
		/// </summary>
		/// <returns>The Value of the Check Box iCDMd49pSkCOWg4UE2Z0Uw</returns>
		public bool chk_CheckBox78_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceVisible;
		}
		public void chk_CheckBox78_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox78)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox78</returns>
		public bool chk_CheckBox78_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox78)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox78</returns>
		public bool chk_CheckBox78_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell112_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell112_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell112_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container28_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container28_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input122_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input122_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input122_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input122_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input122");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input122_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input122)
		/// </summary>
		/// <returns>The Visible State of wt_Input122</returns>
		public bool inputwt_Input122_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input122)
		/// </summary>
		/// <returns>The Enabled State of wt_Input122</returns>
		public bool inputwt_Input122_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input122)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input122</returns>
		public bool inputwt_Input122_isMandatory() {
			return false;
		}

		public void cnt_Container40_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container40_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container40_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container40_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container40)
		/// </summary>
		/// <returns>The Visible State of wt_Container40</returns>
		public bool cnt_Container40_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox8
		/// </summary>
		public void chk_CheckBox8_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box iuW7CPA2NEuT4etftIhh3Q
		/// </summary>
		/// <returns>The Value of the Check Box iuW7CPA2NEuT4etftIhh3Q</returns>
		public bool chk_CheckBox8_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceCompleted;
		}
		public void chk_CheckBox8_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox8)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox8</returns>
		public bool chk_CheckBox8_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox8)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox8</returns>
		public bool chk_CheckBox8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container107_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container107_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container107_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container107_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container107)
		/// </summary>
		/// <returns>The Visible State of wt_Container107</returns>
		public bool cnt_Container107_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If38_hasRun=false;
		bool if_wt_If38_evalResult;
		public bool if_wt_If38() {
			if (if_wt_If38_hasRun) {
				if_wt_If38_hasRun = false;
				return if_wt_If38_evalResult;
			}
			if_wt_If38_hasRun = true;
			if_wt_If38_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If38_evalResult;
		}

		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container9_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container9_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = yKjLRKyY5UW+qWLFUJVLNw) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_5.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression53() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_5.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance124_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell111_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell111_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell111_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container146_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container146_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container146_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container146_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container146)
		/// </summary>
		/// <returns>The Visible State of wt_Container146</returns>
		public bool cnt_Container146_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance75_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditAttendance").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance75
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance75_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditAttendance)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditAttendance)</returns>
		public string lnkEditAttendance_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("0tie0dcUHUqXgvBcFGY47g")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditAttendance)
		/// </summary>
		/// <returns>title of the Link (wtEditAttendance)</returns>
		public string
		lnkEditAttendance_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditAttendance)
		/// </summary>
		/// <returns>The Visible State of wtEditAttendance</returns>
		public bool lnkEditAttendance_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditAttendance)
		/// </summary>
		/// <returns>The Enabled State of wtEditAttendance</returns>
		public bool lnkEditAttendance_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container62_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container62_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container62_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container62_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container62)
		/// </summary>
		/// <returns>The Visible State of wt_Container62</returns>
		public bool cnt_Container62_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance129_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandOnNotify2 {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandOnSubSectionCheckBoxChange {
		}
		public static class FuncCommandOnClick {
		}
		public static class FuncCommandOnSectionCheckBoxChange {

			/// <summary>
			/// Query Function "GetProgressReports" of Action "OnSectionCheckBoxChange"
			/// </summary>
			public static RLProgressReportSectionsRecordList datasetGetProgressReports(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportSections.[ID] o1, NULL o2, NULL o3, NULL o4, ENProgressReportSections.[SECTIONVISIBLE] o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {ProgressReportSections} ENProgressReportSections");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("XB+m9GjXJ0qMg2YRsbvmGg")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionsRecordList outParamList = new RLProgressReportSectionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Universal.OnSectionCheckBoxChange.GetProgressReports.List");
						outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Universal.OnSectionCheckBoxChange.GetProgressReports.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Universal.OnSectionCheckBoxChange.GetProgressReports.List");
							outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Universal.OnSectionCheckBoxChange.GetProgressReports.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncssPreparation {

			private static void datasetGetProgressReportCategoriesByProgressReportReadDB(ref RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENGroup.Read(r, ref index);
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
				rec.ssENUser_2.Read(r, ref index);
				rec.ssENUser_3.Read(r, ref index);
				rec.ssENUser_4.Read(r, ref index);
				rec.ssENUser_5.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportCategoriesByProgressReport" of Action "Preparation"
			/// </summary>
			public static RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList datasetGetProgressReportCategoriesByProgressReport(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query 1q6dKHiGlUylGW+JwhvS3Q Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENGroup.[GROUPDESCRIPTION] o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, ENProgressReport.[ISCOMPLETE] o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, ENProgressReportSection.[ID] o34, NULL o35, NULL o36, NULL o37, ENProgressReportSection.[COURSEOUTLINE] o38, ENProgressReportSection.[COURSEOUTLINEVISIBLE] o39, ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] o40, ENProgressReportSection.[COURSEOUTLINEUPDATEDON] o41, ENProgressReportSection.[COURSEOUTLINECOMPLETED] o42, ENProgressReportSection.[KEYSTRENGTHS] o43, ENProgressReportSection.[KEYSTRENGTHSVISIBLE] o44, ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] o45, ENProgressReportSection.[KEYSTRENGTHSUPDATEDON] o46, ENProgressReportSection.[KEYSTRENGTHSCOMPLETED] o47, ENProgressReportSection.[AREASFORDEVELOPMENT] o48, ENProgressReportSection.[AREASFORDEVELOPMENTVISIBLE] o49, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] o50, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDON] o51, ENProgressReportSection.[AREASFORDEVELOPMENTCOMPLETED] o52, ENProgressReportSection.[PREDICTEDOUTCOME] o53, ENProgressReportSection.[PREDICTEDOUTCOMEVISIBLE] o54, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] o55, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDON] o56, ENProgressR" +
				"eportSection.[PREDICTEDOUTCOMECOMPLETED] o57, ENProgressReportSection.[ATTENDANCE] o58, ENProgressReportSection.[ATTENDANCEVISIBLE] o59, ENProgressReportSection.[ATTENDANCEUPDATEDBY] o60, ENProgressReportSection.[ATTENDANCEUPDATEDON] o61, ENProgressReportSection.[ATTENDANCECOMPLETED] o62, NULL o63, NULL o64, NULL o65, NULL o66, NULL o67, NULL o68, NULL o69, NULL o70, NULL o71, NULL o72, NULL o73, NULL o74, NULL o75, NULL o76, NULL o77, NULL o78, NULL o79, NULL o80, NULL o81, NULL o82, NULL o83, NULL o84, NULL o85, NULL o86, ENProgressReportSections.[SECTIONVISIBLE] o87, NULL o88, NULL o89, NULL o90, NULL o91, NULL o92, ENUser.[NAME] o93, NULL o94, NULL o95, NULL o96, NULL o97, NULL o98, NULL o99, NULL o100, NULL o101, NULL o102, ENUser_2.[NAME] o103, NULL o104, NULL o105, NULL o106, NULL o107, NULL o108, NULL o109, NULL o110, NULL o111, NULL o112, ENUser_3.[NAME] o113, NULL o114, NULL o115, NULL o116, NULL o117, NULL o118, NULL o119, NULL o120, NULL o121, NULL o122, ENUser_4.[NAME] o123, NULL o124, NULL o125, NULL o126, NULL o127, NULL o128, NULL o129, NULL o130, NULL o131, NULL o132, ENUser_5.[NAME] o133, NULL o134, NULL o135, NULL o136, NULL o137, NULL o138, NULL o139, NULL o140, NULL o141");
				fromBuilder.Append(" FROM (((((((({ProgressReportSection} ENProgressReportSection Inner JOIN {ProgressReportSections} ENProgressReportSections ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID]))  Left JOIN {Group} ENGroup ON (ENProgressReportSection.[GROUP] = ENGroup.[ID]))  Left JOIN {ProgressReport} ENProgressReport ON (ENProgressReportSections.[PROGRESSREPORTID] = ENProgressReport.[ID]))  Left JOIN {User} ENUser ON (ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] = ENUser.[ID]))  Left JOIN {User} ENUser_2 ON (ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] = ENUser_2.[ID]))  Left JOIN {User} ENUser_3 ON (ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] = ENUser_3.[ID]))  Left JOIN {User} ENUser_4 ON (ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] = ENUser_4.[ID]))  Left JOIN {User} ENUser_5 ON (ENProgressReportSection.[ATTENDANCEUPDATEDBY] = ENUser_5.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("XB+m9GjXJ0qMg2YRsbvmGg")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList outParamList = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[10];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[5] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[6] = new BitArray(new bool[] {
					true
				}
				);
				opt[7] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[8] = new BitArray(new bool[] {
					false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[9] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Universal.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList = (RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Universal.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Universal.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList = (RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Universal.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wtTitleBar") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wtTitleBar");
			}
			if (id == "wt_Container109") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wt_Container109");
			}
			if (id == "wtIconExpand") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wtIconExpand");
			}
			if (id == "wt_If79") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wt_If79");
			}
			if (id == "wt_If79T") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wt_If79T");
			}
			if (id == "RichWidgets_wt_WebBlockInstance65") {
				return wt_WebBlockInstance7.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance65");
			}
			if (id == "wt_If79F") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wt_If79F");
			}
			if (id == "RichWidgets_wt_WebBlockInstance12") {
				return wt_WebBlockInstance7.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance12");
			}
			if (id == "wtVisibleCheckBoxContainer") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wtVisibleCheckBoxContainer");
			}
			if (id == "wt_CheckBox149") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wt_CheckBox149");
			}
			if (id == "wtTitleContainer") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wtTitleContainer");
			}
			if (id == "wt_InlineExpression139") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wt_InlineExpression139");
			}
			if (id == "wtStatusBarContainer") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wtStatusBarContainer");
			}
			if (id == "wt_WebBlockInstance63") {
				return wt_WebBlockInstance7.wtTitle.FindControl("wt_WebBlockInstance63");
			}
			if (id == "wtDetailWrapper") {
				return wt_WebBlockInstance7.wtListContent.FindControl("wtDetailWrapper");
			}
			if (id == "wt_If82") {
				return wt_WebBlockInstance7.wtListContent.FindControl("wt_If82");
			}
			if (id == "wt_If82T") {
				return wt_WebBlockInstance7.wtListContent.FindControl("wt_If82T");
			}
			if (id == "wtProgressReport_List2") {
				return wt_WebBlockInstance7.wtListContent.FindControl("wtProgressReport_List2");
			}
			if (id == "wt_If82F") {
				return wt_WebBlockInstance7.wtListContent.FindControl("wt_If82F");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.Kekfg4ErLLUuOO9B6_Zh7Gg";
			}
		}
	}

}
