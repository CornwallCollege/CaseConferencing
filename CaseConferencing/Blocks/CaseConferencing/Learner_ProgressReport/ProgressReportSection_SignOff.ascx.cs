/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {
	public abstract class WBlkProgressReportSection_SignOff: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamProgressReportId. Description:
		/// </summary>
		public int inParamProgressReportId = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Variable <code>varLcVisible</code> that represents the Service Studio local variable
		///  <code>Visible</code> <p>Description: </p>
		/// </summary>
		bool varLcVisible = false;

		/// <summary>
		/// Variable wt_WebBlockInstance65
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout wt_WebBlockInstance65;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wtIconExpand;
		/// <summary>
		/// Variable "True" if the Widget wt_If72
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If72T;

		/// <summary>
		/// Variable "True" if the Widget wt_If72
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If72F;
		protected OutSystems.HubEdition.WebWidgets.Container wtVisibleCheckBoxConatiner;
		protected OutSystems.HubEdition.WebWidgets.Container wtTitleContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtStatusBarContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtDetailWrapper;
		/// <summary>
		/// Variable "True" if the Widget wt_If7
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If7T;

		/// <summary>
		/// Variable "True" if the Widget wt_If7
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If7F;
		private RLUserBooleanProgressReportRecordList _ssProgressReport_List2List = new RLUserBooleanProgressReportRecordList();
		public RLUserBooleanProgressReportRecordList ssProgressReport_List2List {
			get {
				return _ssProgressReport_List2List; 
			}
			set {
				_ssProgressReport_List2List = value;
				wtProgressReport_List2.DataSource = value;
				ssProgressReport_List2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtProgressReport_List2;
		public ArrayList wtProgressReport_List2_storage = new ArrayList();
		protected bool ssProgressReport_List2List_notUsedYet = true;
		protected bool ssProgressReport_List2ListDoDataBind;
		protected bool ssProgressReport_List2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input35ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input35ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container60;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		/// <summary>
		/// Variable "True" if the Widget wt_If58
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If58T;

		/// <summary>
		/// Variable "True" if the Widget wt_If58
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If58F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container68;
		/// <summary>
		/// Variable (wtEditSignOff) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditSignOff;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container67;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		/// <summary>
		/// Variable "True" if the Widget wt_If66
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If66T;

		/// <summary>
		/// Variable "True" if the Widget wt_If66
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If66F;
		/// <summary>
		/// Variable "True" if the Widget wt_If55
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If55T;

		/// <summary>
		/// Variable "True" if the Widget wt_If55
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If55F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container59;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		/// <summary>
		/// Variable "True" if the Widget wt_If29
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If29T;

		/// <summary>
		/// Variable "True" if the Widget wt_If29
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If29F;
		/// <summary>
		/// Variable (wt_Link53) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link53;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		/// <summary>
		/// Variable (wt_Link36) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link36;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container54;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLUserBooleanProgressReportRecordList queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLUserBooleanProgressReportRecordList();
		int queryResGetProgressReportCategoriesByProgressReport_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetProgressReportCategoriesByProgressReport
			int datasetGetProgressReportCategoriesByProgressReport_maxRecords = Math.Max(wtProgressReport_List2.StartIndex + wtProgressReport_List2.LineCount + 1, 0);
			queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
			);
		}
		static WBlkProgressReportSection_SignOff() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance65 = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) FindControl("wt_WebBlockInstance65");
			wt_Container9 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container9");
			wt_Container41 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container41");
			wtIconExpand = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtIconExpand");
			wtVisibleCheckBoxConatiner = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtVisibleCheckBoxConatiner");
			wtTitleContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTitleContainer");
			wtStatusBarContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtStatusBarContainer");
			wtDetailWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDetailWrapper");
			wtProgressReport_List2 = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtProgressReport_List2");
			wtProgressReport_List2.StartIndexExpression = () => 0;
			wtProgressReport_List2.LineCountExpression = () => 999;
			if (this.wt_Link53 != null) {
				this.wt_Link53.Click += new System.EventHandler(this.wt_Link53_Click);
			}
			if (this.wt_Link36 != null) {
				this.wt_Link36.Click += new System.EventHandler(this.wt_Link36_Click);
			}
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssProgressReport_List2ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input35", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList.

			int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof;
			ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();

			// Write the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList to the storequeryResGetProgressReportCategoriesByProgressReport_outParamList
			if (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Empty) {
				try {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.StartIteration();

					while (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssId == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssId);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssCompleteDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssCompleteDate);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssCompleteBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssCompleteBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignoff == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignoff);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, true
						}
						))));
						storequeryResGetProgressReportCategoriesByProgressReport_outParamList.Add(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance();
					}
				} finally {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", storequeryResGetProgressReportCategoriesByProgressReport_outParamList, null);

			#endregion


			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList, false);
			queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamProgressReportId", inParamProgressReportId, 0);
			ViewStateAttributes.SetInViewState("varLcVisible", varLcVisible, false);
			if (IsAjaxRequest) {
				recListProgressReport_List2_Rebuild((ssProgressReport_List2ListDataBound ? wtProgressReport_List2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtProgressReport_List2.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtProgressReport_List2_list", wtProgressReport_List2_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList.

				// Read the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList from storequeryResGetProgressReportCategoriesByProgressReport_outParamList
				queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLUserBooleanProgressReportRecordList();
				ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList;
				storequeryResGetProgressReportCategoriesByProgressReport_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", null);
				if (storequeryResGetProgressReportCategoriesByProgressReport_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList in storequeryResGetProgressReportCategoriesByProgressReport_outParamList) {
						if (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList != null) {
							// Aux current record variable
							RCUserBooleanProgressReportRecord tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList = new RCUserBooleanProgressReportRecord(null);
							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssId = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssIsComplete = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[4] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssCompleteDate = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssCompleteBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssSignoff = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[7] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssSignOffUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[8] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssSignOffUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssSignOffCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[10] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[11]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[12]);

							queryResGetProgressReportCategoriesByProgressReport_outParamList.Append(tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						}
					}
				}
				queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", false);
				queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

				#endregion

				inParamProgressReportId = (int) ViewStateAttributes.GetFromViewState("inParamProgressReportId", 0);
				varLcVisible = (bool) ViewStateAttributes.GetFromViewState("varLcVisible", false);
				recListProgressReport_List2_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wt_Input35");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wt_Input35");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KzpAK3sOaMESkuA5Pv73dsg";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("zpAK3sOaMESkuA5Pv73dsg"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify2</code> that represents the Service Studio screen action
		///  <code>OnNotify2</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify2(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetProgressReportCategoriesByProgressReport
				{
					int datasetGetProgressReportCategoriesByProgressReport_maxRecords = Math.Max(wtProgressReport_List2.StartIndex + wtProgressReport_List2.LineCount + 1, 0);
					queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
					);
				}
				// Refresh Widget (wtProgressReport_List2)
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtProgressReport_List2, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick</code> that represents the Service Studio screen action
		///  <code>OnClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Toggle
				varLcVisible = (!varLcVisible); // Visible = notVisible
				// Refresh Widget (wtIconExpand)
				((OSPageViewState) Page).AjaxRefresh(wtIconExpand, "None", StoreViewState);
				// Refresh Widget (wtDetailWrapper)
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtDetailWrapper, "VerticalSlide", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSignOffReopen: VarsBag {
			public bool inParamSignedOff;
			public int resCreateOrUpdateProgressReport_outParamId = 0;

			public lcvSignOffReopen(bool inParamSignedOff) {
				this.inParamSignedOff = inParamSignedOff;
			}
		}
		/// <summary>
		/// Action <code>CommandSignOffReopen</code> that represents the Service Studio screen action
		///  <code>SignOffReopen</code> <p> Description: </p>
		/// </summary>
		private bool CommandSignOffReopen(HeContext heContext, bool inParamSignedOff) {
			CheckPermissions(heContext);
			lcvSignOffReopen localVars = new lcvSignOffReopen(inParamSignedOff);
			try {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete = localVars.inParamSignedOff; // ProgressReport_List2.List.Current.ProgressReport.IsComplete = SignedOff
				getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssCompleteDate = BuiltInFunction.CurrDate(); // ProgressReport_List2.List.Current.ProgressReport.CompleteDate = CurrDate
				getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssCompleteBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReport_List2.List.Current.ProgressReport.CompleteBy = UserID
				// CreateOrUpdateProgressReport
				ExtendedActions.CreateOrUpdateProgressReport(heContext, getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ChangedAttributes, ((RCProgressReportRecord) getWtProgressReport_List2List().CurrentRec.ssENProgressReport), out localVars.resCreateOrUpdateProgressReport_outParamId);
				// Query datasetGetProgressReportCategoriesByProgressReport
				{
					int datasetGetProgressReportCategoriesByProgressReport_maxRecords = Math.Max(wtProgressReport_List2.StartIndex + wtProgressReport_List2.LineCount + 1, 0);
					queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
					);
				}
				// Refresh Widget (wtDetailWrapper)
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtDetailWrapper, "None", StoreViewState);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "");
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnSectionCheckBoxChange: VarsBag {
			public int resCreateOrUpdateProgressReport_outParamId = 0;

			public lcvOnSectionCheckBoxChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnSectionCheckBoxChange</code> that represents the Service Studio screen action
		///  <code>OnSectionCheckBoxChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSectionCheckBoxChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnSectionCheckBoxChange localVars = new lcvOnSectionCheckBoxChange();
			try {
				// CreateOrUpdateProgressReport
				ExtendedActions.CreateOrUpdateProgressReport(heContext, getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ChangedAttributes, ((RCProgressReportRecord) getWtProgressReport_List2List().CurrentRec.ssENProgressReport), out localVars.resCreateOrUpdateProgressReport_outParamId);
				// Refresh Me
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void webBlck_WebBlockInstance65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) sender;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container9_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container9_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container41_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container41_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntIconExpand_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntIconExpand_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntIconExpand_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:block;float:right;cursor:pointer;margin-right:3px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntIconExpand_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtIconExpand
		/// </summary>
		public void cntIconExpand_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtIconExpand)
		/// </summary>
		/// <returns>The Visible State of wtIconExpand</returns>
		public bool cntIconExpand_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If72_hasRun=false;
		bool if_wt_If72_evalResult;
		public bool if_wt_If72() {
			if (if_wt_If72_hasRun) {
				if_wt_If72_hasRun = false;
				return if_wt_If72_evalResult;
			}
			if_wt_If72_hasRun = true;
			if_wt_If72_evalResult = varLcVisible;
			return if_wt_If72_evalResult;
		}

		public void RichWidgets_webBlck_WebBlockInstance70_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("lONIeezZcEq91R_t0lfWaQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Ksi11unkKkSD65nEu1eIYA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntVisibleCheckBoxConatiner_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntVisibleCheckBoxConatiner_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntVisibleCheckBoxConatiner_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntVisibleCheckBoxConatiner_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtVisibleCheckBoxConatiner)
		/// </summary>
		/// <returns>The Visible State of wtVisibleCheckBoxConatiner</returns>
		public bool cntVisibleCheckBoxConatiner_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox24
		/// </summary>
		public void chk_CheckBox24_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box maqAV5EWDE6AVMQ6esTUUQ
		/// </summary>
		/// <returns>The Value of the Check Box maqAV5EWDE6AVMQ6esTUUQ</returns>
		public bool chk_CheckBox24_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignOffVisible;
		}
		public void chk_CheckBox24_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignOffVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox24)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox24</returns>
		public bool chk_CheckBox24_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox24)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox24</returns>
		public bool chk_CheckBox24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTitleContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTitleContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTitleContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTitleContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTitleContainer)
		/// </summary>
		/// <returns>The Visible State of wtTitleContainer</returns>
		public bool cntTitleContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = B8r64kOZ_USayvcE32SkXQ) Expression: "Sign Off"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression63() {
			return "Sign Off";
		}
		public void cntStatusBarContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntStatusBarContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntStatusBarContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntStatusBarContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtStatusBarContainer)
		/// </summary>
		/// <returns>The Visible State of wtStatusBarContainer</returns>
		public bool cntStatusBarContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
				widget.inParamIsSelected = false;
				widget.inParamPercentage = ((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffCompleted) ?(100):(0));
				widget.inParamText = ((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssSignOffCompleted) ?("Sign-off section completed"):("Sign-off section incomplete"));
				widget.inParamVisibleCheckbox = false;
				widget.inParamEnabledCheckbox = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance3
		/// </summary>
		public void webBlck_WebBlockInstance3_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntDetailWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDetailWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDetailWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntDetailWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDetailWrapper)
		/// </summary>
		/// <returns>The Visible State of wtDetailWrapper</returns>
		public bool cntDetailWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If7_hasRun=false;
		bool if_wt_If7_evalResult;
		public bool if_wt_If7() {
			if (if_wt_If7_hasRun) {
				if_wt_If7_hasRun = false;
				return if_wt_If7_evalResult;
			}
			if_wt_If7_hasRun = true;
			if_wt_If7_evalResult = varLcVisible;
			return if_wt_If7_evalResult;
		}

		public void recListProgressReport_List2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtProgressReport_List2
				ssProgressReport_List2List = queryResGetProgressReportCategoriesByProgressReport_outParamList;
				ssProgressReport_List2ListDoDataBind = false;
				ssProgressReport_List2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListProgressReport_List2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssProgressReport_List2List.Length > 0) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[ssProgressReport_List2List.CurrentRowNumber];
				}
				if (ssProgressReport_List2List.Length > e.SelectedIndex) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[e.SelectedIndex];
					ssProgressReport_List2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListProgressReport_List2_Store(object dataItem, int index) {
			RCUserBooleanProgressReportRecord tmprec = (RCUserBooleanProgressReportRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENProgressReport.ssId == 0?(object) null: tmprec.ssENProgressReport.ssId);
			tmpFields.Add(tmprec.ssENProgressReport.ssIsComplete == false?(object) null: tmprec.ssENProgressReport.ssIsComplete);
			tmpFields.Add(tmprec.ssENProgressReport.ssCompleteDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssENProgressReport.ssCompleteDate);
			tmpFields.Add(tmprec.ssENProgressReport.ssCompleteBy == 0?(object) null: tmprec.ssENProgressReport.ssCompleteBy);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			if (index < wtProgressReport_List2_storage.Count) {
				wtProgressReport_List2_storage[index] = tmpFields;
			} else {
				wtProgressReport_List2_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListProgressReport_List2_Restore() {

			#region fetch ssProgressReport_List2List.

			// Read the needed fields of ssProgressReport_List2List from storewtProgressReport_List2_list
			ssProgressReport_List2List = new RLUserBooleanProgressReportRecordList();
			ArrayList storewtProgressReport_List2_list;
			storewtProgressReport_List2_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtProgressReport_List2_list", null);
			if (storewtProgressReport_List2_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtProgressReport_List2_list in storewtProgressReport_List2_list) {
					if (tmpFieldswtProgressReport_List2_list != null) {
						// Aux current record variable
						RCUserBooleanProgressReportRecord tmpAuxCurrentRecordwtProgressReport_List2_list = new RCUserBooleanProgressReportRecord(null);
						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReport.ssId = (int) (tmpFieldswtProgressReport_List2_list[0] == null ? 0: tmpFieldswtProgressReport_List2_list[0]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReport.ssIsComplete = (bool) (tmpFieldswtProgressReport_List2_list[1] == null ? false: tmpFieldswtProgressReport_List2_list[1]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReport.ssCompleteDate = (DateTime) (tmpFieldswtProgressReport_List2_list[2] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtProgressReport_List2_list[2]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReport.ssCompleteBy = (int) (tmpFieldswtProgressReport_List2_list[3] == null ? 0: tmpFieldswtProgressReport_List2_list[3]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[4]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[5]);

						ssProgressReport_List2List.Append(tmpAuxCurrentRecordwtProgressReport_List2_list);
					}
				}
			}
			ssProgressReport_List2List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssProgressReport_List2List runtime properties state.


			if (storewtProgressReport_List2_list.Count > 0) {
				ssProgressReport_List2List.RestoreRecordListState(storewtProgressReport_List2_list.Count - 1, false);
			} else {
				ssProgressReport_List2List.CurrentRowNumber = 0;
			}

			#endregion

			wtProgressReport_List2_storage = storewtProgressReport_List2_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListProgressReport_List2_Clear(object sender, EventArgs e) {
			wtProgressReport_List2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListProgressReport_List2_Rebuild(int startIndex, int lineCount) {
			if (ssProgressReport_List2List.Length != -1) {
				wtProgressReport_List2_storage.Clear();
				for (int i=startIndex; i<ssProgressReport_List2List.Data.Count && i<startIndex+lineCount; i++) {
					recListProgressReport_List2_Store(ssProgressReport_List2List.Data[i], wtProgressReport_List2_storage.Count);
				}
			}
		}
		public void recListProgressReport_List2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtProgressReport_List2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLUserBooleanProgressReportRecordList getWtProgressReport_List2List() {
			if (ssProgressReport_List2ListDoDataBind) {
				recListProgressReport_List2_onDataBinding(this, null);
			}

			return ssProgressReport_List2List;
		}
		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = ((((BuiltInFunction.Mod(getWtProgressReport_List2List().CurrentRowNumber, 2M) ==0M)) ?("background-color:#F8F8F8;"):("")) + (((getWtProgressReport_List2List().CurrentRowNumber==0)) ?("border-top: solid 1px #dadada;"):("")));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table21_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table21_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table21_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:2px;padding: 4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell64_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell64_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell64_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container43_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container43_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input35_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input35_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input35_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignoff)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignoff;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input35");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignoff;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input35_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignoff = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignoff = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignoff = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input35)
		/// </summary>
		/// <returns>The Visible State of wt_Input35</returns>
		public bool inputwt_Input35_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input35)
		/// </summary>
		/// <returns>The Enabled State of wt_Input35</returns>
		public bool inputwt_Input35_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input35)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input35</returns>
		public bool inputwt_Input35_isMandatory() {
			return false;
		}

		public void cnt_Container60_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container60_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container60_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container60_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container60)
		/// </summary>
		/// <returns>The Visible State of wt_Container60</returns>
		public bool cnt_Container60_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignoff!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox39_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox39
		/// </summary>
		public void chk_CheckBox39_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box FAKFiuzRSkGHgj_JrXcalQ
		/// </summary>
		/// <returns>The Value of the Check Box FAKFiuzRSkGHgj_JrXcalQ</returns>
		public bool chk_CheckBox39_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignOffCompleted;
		}
		public void chk_CheckBox39_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignOffCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox39)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox39</returns>
		public bool chk_CheckBox39_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox39)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox39</returns>
		public bool chk_CheckBox39_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If58_hasRun=false;
		bool if_wt_If58_evalResult;
		public bool if_wt_If58() {
			if (if_wt_If58_hasRun) {
				if_wt_If58_hasRun = false;
				return if_wt_If58_evalResult;
			}
			if_wt_If58_hasRun = true;
			if_wt_If58_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignOffUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If58_evalResult;
		}

		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container49_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container49_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = RzMhw5tbok++vqQMWfgAIg) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression56() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssSignOffUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container68_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container68_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container68_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container68)
		/// </summary>
		/// <returns>The Visible State of wt_Container68</returns>
		public bool cnt_Container68_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditSignOff").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance4
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance4_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditSignOff)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditSignOff)</returns>
		public string lnkEditSignOff_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("dzyKNW0zgkeyfCgkmOVTXg")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportID", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(BuiltInFunction.NullIdentifier()), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditSignOff)
		/// </summary>
		/// <returns>title of the Link (wtEditSignOff)</returns>
		public string
		lnkEditSignOff_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditSignOff)
		/// </summary>
		/// <returns>The Visible State of wtEditSignOff</returns>
		public bool lnkEditSignOff_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditSignOff)
		/// </summary>
		/// <returns>The Enabled State of wtEditSignOff</returns>
		public bool lnkEditSignOff_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container67_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container67_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container67_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container67_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container67)
		/// </summary>
		/// <returns>The Visible State of wt_Container67</returns>
		public bool cnt_Container67_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container10_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If66_hasRun=false;
		bool if_wt_If66_evalResult;
		public bool if_wt_If66() {
			if (if_wt_If66_hasRun) {
				if_wt_If66_hasRun = false;
				return if_wt_If66_evalResult;
			}
			if_wt_If66_hasRun = true;
			if_wt_If66_evalResult = (Functions.rssespaceuserpermissions_ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("90KYDrWi40a+ybxleOV++g")).ssId) ==BuiltInFunction.NullIdentifier());
			return if_wt_If66_evalResult;
		}

		bool if_wt_If55_hasRun=false;
		bool if_wt_If55_evalResult;
		public bool if_wt_If55() {
			if (if_wt_If55_hasRun) {
				if_wt_If55_hasRun = false;
				return if_wt_If55_evalResult;
			}
			if_wt_If55_hasRun = true;
			if_wt_If55_evalResult = getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete;
			return if_wt_If55_evalResult;
		}

		public void cnt_Container59_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container59_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container59_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container59_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container59)
		/// </summary>
		/// <returns>The Visible State of wt_Container59</returns>
		public bool cnt_Container59_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container22_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container22_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If29_hasRun=false;
		bool if_wt_If29_evalResult;
		public bool if_wt_If29() {
			if (if_wt_If29_hasRun) {
				if_wt_If29_hasRun = false;
				return if_wt_If29_evalResult;
			}
			if_wt_If29_hasRun = true;
			if_wt_If29_evalResult = getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete;
			return if_wt_If29_evalResult;
		}

		public void lnk_Link53_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link53_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandSignOffReopen(heContext, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link53)
		/// </summary>
		/// <returns>title of the Link (wt_Link53)</returns>
		public string
		lnk_Link53_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link53)
		/// </summary>
		/// <returns>The Visible State of wt_Link53</returns>
		public bool lnk_Link53_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link53)
		/// </summary>
		/// <returns>The Enabled State of wt_Link53</returns>
		public bool lnk_Link53_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container61_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container61_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 2uSC_VLTt0SXdizeZraF+Q) Expression: "Reopen Progress Report"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression71() {
			return "Reopen Progress Report";
		}
		public void lnk_Link36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link36_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandSignOffReopen(heContext, true)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link36)
		/// </summary>
		/// <returns>title of the Link (wt_Link36)</returns>
		public string
		lnk_Link36_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link36)
		/// </summary>
		/// <returns>The Visible State of wt_Link36</returns>
		public bool lnk_Link36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link36)
		/// </summary>
		/// <returns>The Enabled State of wt_Link36</returns>
		public bool lnk_Link36_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container54_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container54_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container54_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container54)
		/// </summary>
		/// <returns>The Visible State of wt_Container54</returns>
		public bool cnt_Container54_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance40_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = wM3G3O5wOU+zgqhUk4GabQ) Expression: "Sign Off Progress Report"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression62() {
			return "Sign Off Progress Report";
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public static class FuncCommandOnNotify2 {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandOnClick {
		}
		public static class FuncCommandSignOffReopen {
		}
		public static class FuncCommandOnSectionCheckBoxChange {
		}
		public static class FuncssPreparation {

			private static void datasetGetProgressReportCategoriesByProgressReportReadDB(ref RCUserBooleanProgressReportRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportCategoriesByProgressReport" of Action "Preparation"
			/// </summary>
			public static RLUserBooleanProgressReportRecordList datasetGetProgressReportCategoriesByProgressReport(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {ProgressReport_List2}
				// Refresh Query V47XDm6D_0qzJlFxDeEXtQ Iterations: Multiple {ProgressReport_List2}
				// Refresh Query n0QWKqsPeESvGHVwEN5j3Q Iterations: Multiple {ProgressReport_List2}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENProgressReport.[ID] o2, NULL o3, NULL o4, NULL o5, ENProgressReport.[ISCOMPLETE] o6, ENProgressReport.[COMPLETEDATE] o7, ENProgressReport.[COMPLETEBY] o8, NULL o9, NULL o10, NULL o11, ENProgressReport.[SIGNOFF] o12, NULL o13, ENProgressReport.[SIGNOFFVISIBLE] o14, NULL o15, NULL o16, ENProgressReport.[SIGNOFFUPDATEDBY] o17, ENProgressReport.[SIGNOFFUPDATEDON] o18, NULL o19, ENProgressReport.[SIGNOFFCOMPLETED] o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, ENUser.[NAME] o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34");
				fromBuilder.Append(" FROM ({ProgressReport} ENProgressReport Left JOIN {User} ENUser ON (ENProgressReport.[SIGNOFFUPDATEDBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserBooleanProgressReportRecordList outParamList = new RLUserBooleanProgressReportRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserBooleanProgressReportRecordList _tmp = new RLUserBooleanProgressReportRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_SignOff.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList = (RLUserBooleanProgressReportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_SignOff.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserBooleanProgressReportRecordList _tmp = new RLUserBooleanProgressReportRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_SignOff.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList = (RLUserBooleanProgressReportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_SignOff.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wt_Container9") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_Container9");
			}
			if (id == "wt_Container41") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_Container41");
			}
			if (id == "wtIconExpand") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wtIconExpand");
			}
			if (id == "wt_If72") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_If72");
			}
			if (id == "wt_If72T") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_If72T");
			}
			if (id == "RichWidgets_wt_WebBlockInstance70") {
				return wt_WebBlockInstance65.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance70");
			}
			if (id == "wt_If72F") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_If72F");
			}
			if (id == "RichWidgets_wt_WebBlockInstance1") {
				return wt_WebBlockInstance65.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance1");
			}
			if (id == "wtVisibleCheckBoxConatiner") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wtVisibleCheckBoxConatiner");
			}
			if (id == "wt_CheckBox24") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_CheckBox24");
			}
			if (id == "wtTitleContainer") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wtTitleContainer");
			}
			if (id == "wt_InlineExpression63") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_InlineExpression63");
			}
			if (id == "wtStatusBarContainer") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wtStatusBarContainer");
			}
			if (id == "wt_WebBlockInstance3") {
				return wt_WebBlockInstance65.wtTitle.FindControl("wt_WebBlockInstance3");
			}
			if (id == "wtDetailWrapper") {
				return wt_WebBlockInstance65.wtListContent.FindControl("wtDetailWrapper");
			}
			if (id == "wt_If7") {
				return wt_WebBlockInstance65.wtListContent.FindControl("wt_If7");
			}
			if (id == "wt_If7T") {
				return wt_WebBlockInstance65.wtListContent.FindControl("wt_If7T");
			}
			if (id == "wtProgressReport_List2") {
				return wt_WebBlockInstance65.wtListContent.FindControl("wtProgressReport_List2");
			}
			if (id == "wt_If7F") {
				return wt_WebBlockInstance65.wtListContent.FindControl("wt_If7F");
			}
			if (id == "wt_Container11") {
				return wt_WebBlockInstance65.wtListContent.FindControl("wt_Container11");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KzpAK3sOaMESkuA5Pv73dsg";
			}
		}
	}

}
