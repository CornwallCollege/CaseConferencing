/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {
	public abstract class WBlkProgressReport: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamProgressReport_Id. Description:
		/// </summary>
		public int inParamProgressReport_Id = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentId2. Description:
		/// </summary>
		public string inParamStudentId2 = "";
		/// <summary>
		/// Variable "True" if the Widget wt_If13
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If13T;

		/// <summary>
		/// Variable "True" if the Widget wt_If13
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If13F;
		protected OutSystems.HubEdition.WebWidgets.Container wtFullWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wtLogContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		/// <summary>
		/// Variable (wtHiddenCreateButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtHiddenCreateButton;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		/// <summary>
		/// Variable (wtEditLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		/// <summary>
		/// Variable (wtPrintProgressReport) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtPrintProgressReport;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		/// <summary>
		/// Variable (wtDeleteLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtDeleteLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.Container wtIntroduction;
		protected OutSystems.HubEdition.WebWidgets.Container wtUniversal;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialist;
		protected OutSystems.HubEdition.WebWidgets.Container wtPersonal;
		protected OutSystems.HubEdition.WebWidgets.Container wtSignOff;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList queryResGetProgressReportsByProgressReportID_outParamList = new RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList();
		int queryResGetProgressReportsByProgressReportID_outParamCount = 0;
		RLProgressReportSectionsRecordList queryResGetUniveralSection_outParamList = new RLProgressReportSectionsRecordList();
		int queryResGetUniveralSection_outParamCount = 0;
		RLProgressReportSectionsRecordList queryResGetSpecialistSection_outParamList = new RLProgressReportSectionsRecordList();
		int queryResGetSpecialistSection_outParamCount = 0;
		RLProgressReportSectionsRecordList queryResGetPersonalSection_outParamList = new RLProgressReportSectionsRecordList();
		int queryResGetPersonalSection_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetProgressReportsByProgressReportID
			int datasetGetProgressReportsByProgressReportID_maxRecords = 0;
			queryResGetProgressReportsByProgressReportID_outParamList = FuncssPreparation.datasetGetProgressReportsByProgressReportID(heContext, datasetGetProgressReportsByProgressReportID_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportsByProgressReportID_outParamCount, inParamProgressReport_Id
			);
			// Query datasetGetUniveralSection
			int datasetGetUniveralSection_maxRecords = 0;
			queryResGetUniveralSection_outParamList = FuncssPreparation.datasetGetUniveralSection(heContext, datasetGetUniveralSection_maxRecords, IterationMultiplicity.Never, out queryResGetUniveralSection_outParamCount, inParamProgressReport_Id
			);
			// Query datasetGetSpecialistSection
			int datasetGetSpecialistSection_maxRecords = 0;
			queryResGetSpecialistSection_outParamList = FuncssPreparation.datasetGetSpecialistSection(heContext, datasetGetSpecialistSection_maxRecords, IterationMultiplicity.Never, out queryResGetSpecialistSection_outParamCount, inParamProgressReport_Id
			);
			// Query datasetGetPersonalSection
			int datasetGetPersonalSection_maxRecords = 0;
			queryResGetPersonalSection_outParamList = FuncssPreparation.datasetGetPersonalSection(heContext, datasetGetPersonalSection_maxRecords, IterationMultiplicity.Never, out queryResGetPersonalSection_outParamCount, inParamProgressReport_Id
			);
		}
		static WBlkProgressReport() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wtHiddenCreateButton != null) {
				this.wtHiddenCreateButton.Click += new System.EventHandler(this.wtHiddenCreateButton_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wtHiddenCreateButton = wtHiddenCreateButton ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wtHiddenCreateButton");
			} catch {}
			string jsString = (wtHiddenCreateButton != null) ? "return OsEnterKey('" +wtHiddenCreateButton.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetProgressReportsByProgressReportID_outParamList.

			int tmpcurrentrownumberqueryResGetProgressReportsByProgressReportID_outParamList = queryResGetProgressReportsByProgressReportID_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetProgressReportsByProgressReportID_outParamList = queryResGetProgressReportsByProgressReportID_outParamList.Eof;
			ArrayList storequeryResGetProgressReportsByProgressReportID_outParamList = new ArrayList();

			// Write the needed fields of queryResGetProgressReportsByProgressReportID_outParamList to the storequeryResGetProgressReportsByProgressReportID_outParamList
			if (!queryResGetProgressReportsByProgressReportID_outParamList.Empty) {
				try {
					queryResGetProgressReportsByProgressReportID_outParamList.StartIteration();

					while (!queryResGetProgressReportsByProgressReportID_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList = new ArrayList();
						tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList.Add(queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssId == 0?(object) null: queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssId);
						tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList.Add(queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssStudent == "" ?(object) null: queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssStudent);
						tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						storequeryResGetProgressReportsByProgressReportID_outParamList.Add(tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList);
						queryResGetProgressReportsByProgressReportID_outParamList.Advance();
					}
				} finally {
					queryResGetProgressReportsByProgressReportID_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetProgressReportsByProgressReportID_outParamList", storequeryResGetProgressReportsByProgressReportID_outParamList, null);

			#endregion


			#region store queryResGetProgressReportsByProgressReportID_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetProgressReportsByProgressReportID_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetProgressReportsByProgressReportID_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetProgressReportsByProgressReportID_outParamList_eof", tmpeofqueryResGetProgressReportsByProgressReportID_outParamList, false);
			queryResGetProgressReportsByProgressReportID_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportsByProgressReportID_outParamList, tmpeofqueryResGetProgressReportsByProgressReportID_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamProgressReport_Id", inParamProgressReport_Id, 0);
			ViewStateAttributes.SetInViewState("inParamStudentId2", inParamStudentId2, "");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetProgressReportsByProgressReportID_outParamList.

				// Read the needed fields of queryResGetProgressReportsByProgressReportID_outParamList from storequeryResGetProgressReportsByProgressReportID_outParamList
				queryResGetProgressReportsByProgressReportID_outParamList = new RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList();
				ArrayList storequeryResGetProgressReportsByProgressReportID_outParamList;
				storequeryResGetProgressReportsByProgressReportID_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetProgressReportsByProgressReportID_outParamList", null);
				if (storequeryResGetProgressReportsByProgressReportID_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList in storequeryResGetProgressReportsByProgressReportID_outParamList) {
						if (tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList != null) {
							// Aux current record variable
							RCUserUserAcademicYearsProgressReportProgressReportTypeRecord tmpAuxCurrentRecordqueryResGetProgressReportsByProgressReportID_outParamList = new RCUserUserAcademicYearsProgressReportProgressReportTypeRecord(null);
							tmpAuxCurrentRecordqueryResGetProgressReportsByProgressReportID_outParamList.ssENProgressReport.ssId = (int) (tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList[0] == null ? 0: tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetProgressReportsByProgressReportID_outParamList.ssENProgressReport.ssStudent = (string) (tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList[1] == null ? "": tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetProgressReportsByProgressReportID_outParamList.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetProgressReportsByProgressReportID_outParamList.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportsByProgressReportID_outParamList[3]);

							queryResGetProgressReportsByProgressReportID_outParamList.Append(tmpAuxCurrentRecordqueryResGetProgressReportsByProgressReportID_outParamList);
						}
					}
				}
				queryResGetProgressReportsByProgressReportID_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetProgressReportsByProgressReportID_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetProgressReportsByProgressReportID_outParamList;
				tmpcurrentrownumberqueryResGetProgressReportsByProgressReportID_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetProgressReportsByProgressReportID_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetProgressReportsByProgressReportID_outParamList;
				tmpeofqueryResGetProgressReportsByProgressReportID_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetProgressReportsByProgressReportID_outParamList_eof", false);
				queryResGetProgressReportsByProgressReportID_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportsByProgressReportID_outParamList, tmpeofqueryResGetProgressReportsByProgressReportID_outParamList);

				#endregion

				inParamProgressReport_Id = (int) ViewStateAttributes.GetFromViewState("inParamProgressReport_Id", 0);
				inParamStudentId2 = (string) ViewStateAttributes.GetFromViewState("inParamStudentId2", "");
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KcysVH6D46k_nLNBN0VW4TQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/Learner_ProgressReport/ProgressReport.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\Learner_ProgressReport\\ProgressReport.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\Learner_ProgressReport\\ProgressReport.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Introduction.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Universal.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Specialist.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Personal.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_SignOff.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("cysVH6D46k+nLNBN0VW4TQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvDelete: VarsBag {
			public int resStudentLog_Create_outParamStudentLogId = 0;

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public RLProgressReportProgressReportSectionProgressReportSectionsRecordList queryResGetProgressReportById_outParamList = new RLProgressReportProgressReportSectionProgressReportSectionsRecordList();
			public int queryResGetProgressReportById_outParamCount = 0;

			public lcvDelete() {
			}
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDelete localVars = new lcvDelete();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)) ==ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("tEyHYiOBgEe6CLwwmz5WoQ")).ssId)) {
					// Query datasetGetProgressReportById
					int datasetGetProgressReportById_maxRecords = 0;
					localVars.queryResGetProgressReportById_outParamList = FuncCommandDelete.datasetGetProgressReportById(heContext, datasetGetProgressReportById_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetProgressReportById_outParamCount, inParamProgressReport_Id
					);
					// Foreach GetProgressReportById.List
					localVars.queryResGetProgressReportById_outParamList.StartIteration();
					try {
						while (!localVars.queryResGetProgressReportById_outParamList.Eof) {
							// DeleteProgressReportSections
							ExtendedActions.DeleteProgressReportSections(heContext, localVars.queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReportSections.ssId);
							// DeleteProgressReportSection
							ExtendedActions.DeleteProgressReportSection(heContext, localVars.queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReportSections.ssProgressReportSectionId);
							localVars.queryResGetProgressReportById_outParamList.Advance();
						}
					} finally {
						localVars.queryResGetProgressReportById_outParamList.EndIteration();
					}
					// DeleteProgressReport
					ExtendedActions.DeleteProgressReport(heContext, queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssId);
					// StudentLog_Create
					Actions.ActionStudentLog_Create(heContext, inParamStudentId2, ((int) Global.App.OsContext.Session["UserID"]), "Progress Report deleted", ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("znk6eguxg0SugJ3_VUPzMg")).ssLogType, "Progress Report deleted", BuiltInFunction.NullTextIdentifier(), false, 0, "Progress Report", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
					// NotifyWidget
					ExtendedActions.NotifyWidget(heContext, RuntimeID, "Delete");
					// Update Screen
					return true;

				} else {
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetProgressReportsByProgressReportID
				{
					int datasetGetProgressReportsByProgressReportID_maxRecords = 0;
					queryResGetProgressReportsByProgressReportID_outParamList = FuncssPreparation.datasetGetProgressReportsByProgressReportID(heContext, datasetGetProgressReportsByProgressReportID_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportsByProgressReportID_outParamCount, inParamProgressReport_Id
					);
				}
				// Refresh Me
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "");
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvExportProgressReport: VarsBag {
			public string inParamStudentId;
			public int inParamProgressReportId;
			/// <summary>
			/// Variable <code>varLcURL</code> that represents the Service Studio local variable <code>URL</code>
			///  <p>Description: </p>
			/// </summary>
			public string varLcURL = "";

			public byte[] resHtmlToPdfConverter_outParamBinary = new byte[] {};
			public bool resHtmlToPdfConverter_outParamError = true;

			public lcvExportProgressReport(string inParamStudentId, int inParamProgressReportId) {
				this.inParamStudentId = inParamStudentId;
				this.inParamProgressReportId = inParamProgressReportId;
			}
		}
		/// <summary>
		/// Action <code>CommandExportProgressReport</code> that represents the Service Studio screen action
		///  <code>ExportProgressReport</code> <p> Description: </p>
		/// </summary>
		private bool CommandExportProgressReport(HeContext heContext, string inParamStudentId, int inParamProgressReportId) {
			CheckPermissions(heContext);
			lcvExportProgressReport localVars = new lcvExportProgressReport(inParamStudentId, inParamProgressReportId);
			try {
				// HtmlToPdfConverter
				Actions.ActionHtmlToPdfConverter(heContext, (Functions.ssGetPDFReportType(heContext, ENPDFReportTypeEntity.GetRecordByKey(ObjectKey.Parse("t5+V4o0n60W9gpN2dK+T7g")).ssId).ssENPDFReportType.ssURL+Convert.ToString(localVars.inParamProgressReportId)), "F", out localVars.resHtmlToPdfConverter_outParamBinary, out localVars.resHtmlToPdfConverter_outParamError);
				// Download Download5
				Response.ClearContent();
				string md5Hash_Download5;
				md5Hash_Download5 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.resHtmlToPdfConverter_outParamBinary);
				Response.ContentType = "application/pdf";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download5 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download5);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload5 = RuntimePlatformUtils.EscapeFilenameForDownload((("ProgressReport" +localVars.inParamStudentId) + ".pdf"));
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload5 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload5);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload5+ "\"");
				byte[] downloadDownload5FileContent = localVars.resHtmlToPdfConverter_outParamBinary;

				if (downloadDownload5FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/pdf";
						file_info.Second = localVars.resHtmlToPdfConverter_outParamBinary;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload((("ProgressReport" +localVars.inParamStudentId) + ".pdf")));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload5FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload5FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "ProgressReport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnNotifyIconSelected: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvOnNotifyIconSelected() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotifyIconSelected</code> that represents the Service Studio screen action
		///  <code>OnNotifyIconSelected</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotifyIconSelected(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotifyIconSelected localVars = new lcvOnNotifyIconSelected();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((localVars.resNotifyWidgetGetMessage_outParamMessage== "Cancelled")) {
					// Update Screen
					return true;

				} else {
					// Widget_Click
					Actions.ActionWidget_Click(heContext, wtHiddenCreateButton.ClientID);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		bool if_wt_If13_hasRun=false;
		bool if_wt_If13_evalResult;
		public bool if_wt_If13() {
			if (if_wt_If13_hasRun) {
				if_wt_If13_hasRun = false;
				return if_wt_If13_evalResult;
			}
			if_wt_If13_hasRun = true;
			if_wt_If13_evalResult = (inParamProgressReport_Id==BuiltInFunction.NullIdentifier());
			return if_wt_If13_evalResult;
		}

		public void cntFullWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntFullWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntFullWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntFullWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtFullWrapper)
		/// </summary>
		/// <returns>The Visible State of wtFullWrapper</returns>
		public bool cntFullWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntLogContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLogContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLogContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLogContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLogContent)
		/// </summary>
		/// <returns>The Visible State of wtLogContent</returns>
		public bool cntLogContent_isVisible() {
			return true;
		}

		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container27_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding: 15px; font-size: 18px;text-shadow: 0px 1px 2px #dadada;min-height: 18px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container27_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = GqfStfx8rU2ABmZTbuXbcg) Expression:
		///  GetProgressReportsByProgressReportID.List.Current.ProgressReportType.Label + " ("
		/// + GetProgressReportsByProgressReportID.List.Current.AcademicYears.FormatB + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression26() {
			return (((queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReportType.ssLabel+ " (") +queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENAcademicYears.ssFormatB) + ")");
		}
		public void btnHiddenCreateButton_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				btnHiddenCreateButton_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string btnHiddenCreateButton_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:none";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtHiddenCreateButton_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
				if (CommandExportProgressReport(heContext, queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssStudent, inParamProgressReport_Id)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the label of the button (wtHiddenCreateButton)
		/// </summary>
		/// <returns>Label of the Button (wtHiddenCreateButton)</returns>
		public string
		btnHiddenCreateButton_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wtHiddenCreateButton)
		/// </summary>
		/// <returns>The Visible State of wtHiddenCreateButton</returns>
		public bool btnHiddenCreateButton_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtHiddenCreateButton)
		/// </summary>
		/// <returns>The Enabled State of wtHiddenCreateButton</returns>
		public bool btnHiddenCreateButton_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:-7px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container36_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditLink)</returns>
		public string lnkEditLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportId", System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamProgressReport_Id), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("StudentId", System.Web.HttpUtility.UrlEncode(queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssStudent, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReport", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditLink)
		/// </summary>
		/// <returns>title of the Link (wtEditLink)</returns>
		public string
		lnkEditLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditLink)
		/// </summary>
		/// <returns>The Visible State of wtEditLink</returns>
		public bool lnkEditLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditLink)
		/// </summary>
		/// <returns>The Enabled State of wtEditLink</returns>
		public bool lnkEditLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance21_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtEditLink.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance2
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance2_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtPrintProgressReport)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtPrintProgressReport)</returns>
		public string lnkPrintProgressReport_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportID", System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamProgressReport_Id), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_LogoSelection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtPrintProgressReport)
		/// </summary>
		/// <returns>title of the Link (wtPrintProgressReport)</returns>
		public string
		lnkPrintProgressReport_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPrintProgressReport)
		/// </summary>
		/// <returns>The Visible State of wtPrintProgressReport</returns>
		public bool lnkPrintProgressReport_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssIsComplete;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtPrintProgressReport)
		/// </summary>
		/// <returns>The Enabled State of wtPrintProgressReport</returns>
		public bool lnkPrintProgressReport_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("FAYqYa1mFUizlhFReuRckQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtPrintProgressReport.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance12
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance12_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotifyIconSelected(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtDeleteLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtDeleteLink)</returns>
		public string lnkDeleteLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("MessageText", System.Web.HttpUtility.UrlEncode("Are you sure you wish to delete this progress report?", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("Title", System.Web.HttpUtility.UrlEncode("Delete Progress Report", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ConfirmationMessageButtons", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ConfirmationMessage", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtDeleteLink)
		/// </summary>
		/// <returns>title of the Link (wtDeleteLink)</returns>
		public string
		lnkDeleteLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDeleteLink)
		/// </summary>
		/// <returns>The Visible State of wtDeleteLink</returns>
		public bool lnkDeleteLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return ((Functions.rssespaceuserpermissions_ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("jj_mT8a2Fk2satD2wwcfaQ")).ssId) ==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("oTzyT6KcpkiqqPUl9hzCfA")).ssId) || (Functions.rssespaceuserpermissions_ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("jj_mT8a2Fk2satD2wwcfaQ")).ssId) ==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtDeleteLink)
		/// </summary>
		/// <returns>The Enabled State of wtDeleteLink</returns>
		public bool lnkDeleteLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container15_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container15_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtDeleteLink.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance6
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance6_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandDelete(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntIntroduction_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntIntroduction_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntIntroduction_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntIntroduction_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtIntroduction)
		/// </summary>
		/// <returns>The Visible State of wtIntroduction</returns>
		public bool cntIntroduction_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Introduction widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Introduction) sender;
				widget.inParamProgressReportId = inParamProgressReport_Id;
				widget.inParamStudentId = inParamStudentId2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntUniversal_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntUniversal_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntUniversal_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntUniversal_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtUniversal)
		/// </summary>
		/// <returns>The Visible State of wtUniversal</returns>
		public bool cntUniversal_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetUniveralSection_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Universal widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Universal) sender;
				widget.inParamProgressReportId = queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssId;
				widget.inParamStudentId = queryResGetProgressReportsByProgressReportID_outParamList.CurrentRec.ssENProgressReport.ssStudent;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntSpecialist_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSpecialist_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSpecialist_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntSpecialist_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialist)
		/// </summary>
		/// <returns>The Visible State of wtSpecialist</returns>
		public bool cntSpecialist_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetSpecialistSection_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Specialist widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Specialist) sender;
				widget.inParamProgressReportId = inParamProgressReport_Id;
				widget.inParamStudentId = inParamStudentId2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntPersonal_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntPersonal_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntPersonal_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntPersonal_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPersonal)
		/// </summary>
		/// <returns>The Visible State of wtPersonal</returns>
		public bool cntPersonal_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetPersonalSection_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Personal widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_Personal) sender;
				widget.inParamProgressReportId = inParamProgressReport_Id;
				widget.inParamStudentId = inParamStudentId2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntSignOff_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSignOff_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSignOff_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntSignOff_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSignOff)
		/// </summary>
		/// <returns>The Visible State of wtSignOff</returns>
		public bool cntSignOff_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_SignOff widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReportSection_SignOff) sender;
				widget.inParamProgressReportId = inParamProgressReport_Id;
				widget.inParamStudentId = inParamStudentId2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance31
		/// </summary>
		public void webBlck_WebBlockInstance31_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandDelete {

			private static void datasetGetProgressReportByIdReadDB(ref RCProgressReportProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportById" of Action "Delete"
			/// </summary>
			public static RLProgressReportProgressReportSectionProgressReportSectionsRecordList datasetGetProgressReportById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60, NULL o61, NULL o62, NULL o63, NULL o64, NULL o65, NULL o66, NULL o67, NULL o68, NULL o69, NULL o70, NULL o71, NULL o72, ENProgressReportSections.[ID] o73, NULL o74, ENProgressReportSections.[PROGRESSREPORTSECTIONID] o75, NULL o76, NULL o77, NULL o78, NULL o79, NULL o80, NULL o81");
				fromBuilder.Append(" FROM (({ProgressReportSections} ENProgressReportSections Left JOIN {ProgressReport} ENProgressReport ON (ENProgressReportSections.[PROGRESSREPORTID] = ENProgressReport.[ID]))  Left JOIN {ProgressReportSection} ENProgressReportSection ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportProgressReportSectionProgressReportSectionsRecordList outParamList = new RLProgressReportProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Delete.GetProgressReportById.List");
						outParamList = (RLProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Delete.GetProgressReportById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Delete.GetProgressReportById.List");
							outParamList = (RLProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Delete.GetProgressReportById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandExportProgressReport {
		}
		public static class FuncCommandOnNotifyIconSelected {
		}
		public static class FuncssPreparation {

			private static void datasetGetProgressReportsByProgressReportIDReadDB(ref RCUserUserAcademicYearsProgressReportProgressReportTypeRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENAcademicYears.Read(r, ref index);
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENProgressReportType.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
				rec.ssENUser_2.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportsByProgressReportID" of Action "Preparation"
			/// </summary>
			public static RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList datasetGetProgressReportsByProgressReportID(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query 91MXfCIEUkq2aZnt4oBiaw Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, ENAcademicYears.[FORMATB] o6, NULL o7, NULL o8, NULL o9, NULL o10, ENProgressReport.[ID] o11, ENProgressReport.[STUDENT] o12, NULL o13, NULL o14, ENProgressReport.[ISCOMPLETE] o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, ENProgressReportType.[LABEL] o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57");
				fromBuilder.Append(" FROM (((({ProgressReport} ENProgressReport Left JOIN {User} ENUser ON (ENProgressReport.[CREATEDBY] = ENUser.[ID]))  Left JOIN {User} ENUser_2 ON (ENProgressReport.[SIGNOFFUPDATEDBY] = ENUser_2.[ID]))  Left JOIN {AcademicYears} ENAcademicYears ON (ENProgressReport.[ACADEMICYEAR] = ENAcademicYears.[ID]))  Left JOIN {ProgressReportType} ENProgressReportType ON (ENProgressReport.[PROGRESSREPORTTYPE] = ENProgressReportType.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENProgressReport.[COMPLETEDATE] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList outParamList = new RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportsByProgressReportIDReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[5];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, true, true, false, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList _tmp = new RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportsByProgressReportIDReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetProgressReportsByProgressReportID.List");
						outParamList = (RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetProgressReportsByProgressReportID.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList _tmp = new RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportsByProgressReportIDReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetProgressReportsByProgressReportID.List");
							outParamList = (RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetProgressReportsByProgressReportID.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetUniveralSection" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSectionsRecordList datasetGetUniveralSection(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {ProgressReportSections} ENProgressReportSections");
				whereBuilder.Append(" WHERE (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("XB+m9GjXJ0qMg2YRsbvmGg")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(") AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionsRecordList outParamList = new RLProgressReportSectionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetUniveralSection.List");
						outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetUniveralSection.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetUniveralSection.List");
							outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetUniveralSection.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSpecialistSection" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSectionsRecordList datasetGetSpecialistSection(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {ProgressReportSections} ENProgressReportSections");
				whereBuilder.Append(" WHERE (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("fFloxfgF1Em7zQJ43bgF4g")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(") AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionsRecordList outParamList = new RLProgressReportSectionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetSpecialistSection.List");
						outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetSpecialistSection.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetSpecialistSection.List");
							outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetSpecialistSection.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetPersonalSection" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSectionsRecordList datasetGetPersonalSection(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {ProgressReportSections} ENProgressReportSections");
				whereBuilder.Append(" WHERE (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("T5cjSpNDb06Xftq9ynq4mQ")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(") AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionsRecordList outParamList = new RLProgressReportSectionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetPersonalSection.List");
						outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetPersonalSection.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReport.Preparation.GetPersonalSection.List");
							outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReport.Preparation.GetPersonalSection.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KcysVH6D46k_nLNBN0VW4TQ";
			}
		}
	}

}
