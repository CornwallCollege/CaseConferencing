/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {
	public abstract class WBlkCourseLearnerProgressReportStatus: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamProgressReportID2. Description:
		/// </summary>
		public int inParamProgressReportID2 = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamProgressReportTypeID. Description:
		/// </summary>
		public int inParamProgressReportTypeID = 0;
		/// <summary>
		/// Variable <code>varLcCourseLearnerProgressReportSummary</code> that represents the Service Studio
		///  local variable <code>CourseLearnerProgressReportSummary</code> <p>Description: </p>
		/// </summary>
		RCCourseLearnerProgressReportSummaryRecord varLcCourseLearnerProgressReportSummary = new RCCourseLearnerProgressReportSummaryRecord(null);

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container55;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		/// <summary>
		/// Variable "True" if the Widget wt_If51
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If51T;

		/// <summary>
		/// Variable "True" if the Widget wt_If51
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If51F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container39;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		/// <summary>
		/// Variable (wtCreateNewProgressReport) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtCreateNewProgressReport;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		/// <summary>
		/// Variable "True" if the Widget wt_If1
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If1T;

		/// <summary>
		/// Variable "True" if the Widget wt_If1
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If1F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container46;
		/// <summary>
		/// Variable (wtPreviewReport) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtPreviewReport;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		/// <summary>
		/// Variable (wtHiddenCreateButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtHiddenCreateButton;
		/// <summary>
		/// Variable "True" if the Widget wt_If56
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If56T;

		/// <summary>
		/// Variable "True" if the Widget wt_If56
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If56F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container38;
		/// <summary>
		/// Variable (wt_Link24) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container34;
		/// <summary>
		/// Variable "True" if the Widget wt_If31
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If31T;

		/// <summary>
		/// Variable "True" if the Widget wt_If31
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If31F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21T;

		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		/// <summary>
		/// Variable "True" if the Widget wt_If3
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If3T;

		/// <summary>
		/// Variable "True" if the Widget wt_If3
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If3F;
		/// <summary>
		/// Variable (wt_Link57) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link57;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container25;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container54;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		Actions.lcoProgressReportPersonalSectionCount resProgressReportPersonalSectionCount = new Actions.lcoProgressReportPersonalSectionCount(); RLProgressReportSectionProgressReportSectionsRecordList queryResGetSpecialistSections_outParamList = new RLProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetSpecialistSections_outParamCount = 0;
		RLProgressReportSectionProgressReportSectionsRecordList queryResGetUniversalSections_outParamList = new RLProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetUniversalSections_outParamCount = 0;
		Actions.lcoProgressReportSpecialistSectionCount resProgressReportSpecialistSectionCount = new Actions.lcoProgressReportSpecialistSectionCount(); RLStudentRecordList queryResGetStudentByStudentReference_outParamList = new RLStudentRecordList();
		int queryResGetStudentByStudentReference_outParamCount = 0;
		RLProgressReportRecordList queryResGetProgressReportById_outParamList = new RLProgressReportRecordList();
		int queryResGetProgressReportById_outParamCount = 0;
		Actions.lcoProgressReportUniversalSectionCount resProgressReportUniversalSectionCount = new Actions.lcoProgressReportUniversalSectionCount(); RLProgressReportSectionProgressReportSectionsRecordList queryResGetPersonalSections_outParamList = new RLProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetPersonalSections_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetStudentByStudentReference
			int datasetGetStudentByStudentReference_maxRecords = 0;
			queryResGetStudentByStudentReference_outParamList = FuncssPreparation.datasetGetStudentByStudentReference(heContext, datasetGetStudentByStudentReference_maxRecords, IterationMultiplicity.Never, out queryResGetStudentByStudentReference_outParamCount, inParamStudentReference
			);
			varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentReference = queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssStudentReference; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.StudentReference =
			// GetStudentByStudentReference.List.Current.Student.StudentReference
			varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentSurname = queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssSurname; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.StudentSurname =
			// GetStudentByStudentReference.List.Current.Student.Surname
			varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentForename = queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssForenames; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.StudentForename =
			// GetStudentByStudentReference.List.Current.Student.Forenames
			varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssHasProgressReport = false; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.HasProgressReport = False
			varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentPhotoURL = queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssStudentPhotoURL; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.StudentPhotoURL =
			// GetStudentByStudentReference.List.Current.Student.StudentPhotoURL
			if ((inParamProgressReportID2==BuiltInFunction.NullIdentifier())) {
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssHasProgressReport = false; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.HasProgressReport = False

			} else {
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId = inParamProgressReportID2; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.ProgressReportId = ProgressReportID2
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssHasProgressReport = true; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.HasProgressReport = True
				// Query datasetGetProgressReportById
				int datasetGetProgressReportById_maxRecords = 0;
				queryResGetProgressReportById_outParamList = FuncssPreparation.datasetGetProgressReportById(heContext, datasetGetProgressReportById_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportById_outParamCount, varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId
				);
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections = 2; // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections = 2
				// IntroductionCompleted
				if (queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIntroductionCompleted) {
					varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections+1); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections =
					// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections + 1

				}
				// SignOffCompleted
				if (queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssSignOffCompleted) {
					varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections = ((varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections==1) ? 1: 0); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections =
					// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections = 1

				}
				// IntroductionVisible
				if (queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIntroductionVisible) {
					varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections+1); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections =
					// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections + 1

				}
				// SignOffVisible
				if (queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssSignOffVisible) {
					varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections+1); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections =
					// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections + 1

				}
				// Query datasetGetUniversalSections
				int datasetGetUniversalSections_maxRecords = 0;
				queryResGetUniversalSections_outParamList = FuncssPreparation.datasetGetUniversalSections(heContext, datasetGetUniversalSections_maxRecords, IterationMultiplicity.Single, out queryResGetUniversalSections_outParamCount, varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId
				);
				// Foreach GetUniversalSections.List
				queryResGetUniversalSections_outParamList.StartIteration();
				try {
					while (!queryResGetUniversalSections_outParamList.Eof) {
						// ProgressReportUniversalSectionCount
						Actions.ActionProgressReportUniversalSectionCount(heContext, ((RCProgressReportSectionRecord) queryResGetUniversalSections_outParamList.CurrentRec.ssENProgressReportSection), out resProgressReportUniversalSectionCount.outParamTotalNumberOfVisibleSections, out resProgressReportUniversalSectionCount.outParamTotalNumberOfCompletedSections);
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections+5); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections + 5
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections+resProgressReportUniversalSectionCount.outParamTotalNumberOfVisibleSections); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections +
						// ProgressReportUniversalSectionCount.TotalNumberOfVisibleSections
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections+resProgressReportUniversalSectionCount.outParamTotalNumberOfCompletedSections); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections +
						// ProgressReportUniversalSectionCount.TotalNumberOfCompletedSections
						queryResGetUniversalSections_outParamList.Advance();
					}
				} finally {
					queryResGetUniversalSections_outParamList.EndIteration();
				}
				// Query datasetGetSpecialistSections
				int datasetGetSpecialistSections_maxRecords = 0;
				queryResGetSpecialistSections_outParamList = FuncssPreparation.datasetGetSpecialistSections(heContext, datasetGetSpecialistSections_maxRecords, IterationMultiplicity.Single, out queryResGetSpecialistSections_outParamCount, varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId
				);
				// Foreach GetSpecialistSections.List
				queryResGetSpecialistSections_outParamList.StartIteration();
				try {
					while (!queryResGetSpecialistSections_outParamList.Eof) {
						// ProgressReportSpecialistSectionCount
						Actions.ActionProgressReportSpecialistSectionCount(heContext, ((RCProgressReportSectionRecord) queryResGetSpecialistSections_outParamList.CurrentRec.ssENProgressReportSection), out resProgressReportSpecialistSectionCount.outParamTotalNumberOfVisibleSections, out resProgressReportSpecialistSectionCount.outParamTotalNumberOfCompletedSections);
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections+6); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections + 6
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections+resProgressReportSpecialistSectionCount.outParamTotalNumberOfVisibleSections); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections +
						// ProgressReportSpecialistSectionCount.TotalNumberOfVisibleSections
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections+resProgressReportSpecialistSectionCount.outParamTotalNumberOfCompletedSections); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections +
						// ProgressReportSpecialistSectionCount.TotalNumberOfCompletedSections
						queryResGetSpecialistSections_outParamList.Advance();
					}
				} finally {
					queryResGetSpecialistSections_outParamList.EndIteration();
				}
				// Query datasetGetPersonalSections
				int datasetGetPersonalSections_maxRecords = 0;
				queryResGetPersonalSections_outParamList = FuncssPreparation.datasetGetPersonalSections(heContext, datasetGetPersonalSections_maxRecords, IterationMultiplicity.Single, out queryResGetPersonalSections_outParamCount, varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId
				);
				// Foreach GetPersonalSections.List
				queryResGetPersonalSections_outParamList.StartIteration();
				try {
					while (!queryResGetPersonalSections_outParamList.Eof) {
						// ProgressReportPersonalSectionCount
						Actions.ActionProgressReportPersonalSectionCount(heContext, ((RCProgressReportSectionRecord) queryResGetPersonalSections_outParamList.CurrentRec.ssENProgressReportSection), out resProgressReportPersonalSectionCount.outParamTotalNumberOfVisibleSections, out resProgressReportPersonalSectionCount.outParamTotalNumberOfCompletedSections);
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections+4); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections + 4
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections+resProgressReportPersonalSectionCount.outParamTotalNumberOfVisibleSections); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections +
						// ProgressReportPersonalSectionCount.TotalNumberOfVisibleSections
						varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections = (varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections+resProgressReportPersonalSectionCount.outParamTotalNumberOfCompletedSections); // CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections =
						// CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections +
						// ProgressReportPersonalSectionCount.TotalNumberOfCompletedSections
						queryResGetPersonalSections_outParamList.Advance();
					}
				} finally {
					queryResGetPersonalSections_outParamList.EndIteration();
				}

			}
		}
		static WBlkCourseLearnerProgressReportStatus() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wtHiddenCreateButton != null) {
				this.wtHiddenCreateButton.Click += new System.EventHandler(this.wtHiddenCreateButton_Click);
			}
			if (this.wt_Link57 != null) {
				this.wt_Link57.Click += new System.EventHandler(this.wt_Link57_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wtHiddenCreateButton = wtHiddenCreateButton ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wtHiddenCreateButton");
			} catch {}
			string jsString = (wtHiddenCreateButton != null) ? "return OsEnterKey('" +wtHiddenCreateButton.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetProgressReportById_outParamList.

			int tmpcurrentrownumberqueryResGetProgressReportById_outParamList = queryResGetProgressReportById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetProgressReportById_outParamList = queryResGetProgressReportById_outParamList.Eof;
			ArrayList storequeryResGetProgressReportById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetProgressReportById_outParamList to the storequeryResGetProgressReportById_outParamList
			if (!queryResGetProgressReportById_outParamList.Empty) {
				try {
					queryResGetProgressReportById_outParamList.StartIteration();

					while (!queryResGetProgressReportById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetProgressReportById_outParamList = new ArrayList();
						tmpFieldsqueryResGetProgressReportById_outParamList.Add(queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIsComplete == false?(object) null: queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
						tmpFieldsqueryResGetProgressReportById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						storequeryResGetProgressReportById_outParamList.Add(tmpFieldsqueryResGetProgressReportById_outParamList);
						queryResGetProgressReportById_outParamList.Advance();
					}
				} finally {
					queryResGetProgressReportById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetProgressReportById_outParamList", storequeryResGetProgressReportById_outParamList, null);

			#endregion


			#region store queryResGetProgressReportById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetProgressReportById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetProgressReportById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetProgressReportById_outParamList_eof", tmpeofqueryResGetProgressReportById_outParamList, false);
			queryResGetProgressReportById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportById_outParamList, tmpeofqueryResGetProgressReportById_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssProgressReportId", varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId, 0);
			ViewStateAttributes.SetInViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssTotalNumberOfSections", varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections, 0);
			ViewStateAttributes.SetInViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssTotalNumberOfVisibleSections", varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections, 0);
			ViewStateAttributes.SetInViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssTotalNumberOfCompletedSections", varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections, 0);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetProgressReportById_outParamList.

				// Read the needed fields of queryResGetProgressReportById_outParamList from storequeryResGetProgressReportById_outParamList
				queryResGetProgressReportById_outParamList = new RLProgressReportRecordList();
				ArrayList storequeryResGetProgressReportById_outParamList;
				storequeryResGetProgressReportById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetProgressReportById_outParamList", null);
				if (storequeryResGetProgressReportById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetProgressReportById_outParamList in storequeryResGetProgressReportById_outParamList) {
						if (tmpFieldsqueryResGetProgressReportById_outParamList != null) {
							// Aux current record variable
							RCProgressReportRecord tmpAuxCurrentRecordqueryResGetProgressReportById_outParamList = new RCProgressReportRecord(null);
							tmpAuxCurrentRecordqueryResGetProgressReportById_outParamList.ssENProgressReport.ssIsComplete = (bool) (tmpFieldsqueryResGetProgressReportById_outParamList[0] == null ? false: tmpFieldsqueryResGetProgressReportById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetProgressReportById_outParamList.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetProgressReportById_outParamList.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportById_outParamList[2]);

							queryResGetProgressReportById_outParamList.Append(tmpAuxCurrentRecordqueryResGetProgressReportById_outParamList);
						}
					}
				}
				queryResGetProgressReportById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetProgressReportById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetProgressReportById_outParamList;
				tmpcurrentrownumberqueryResGetProgressReportById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetProgressReportById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetProgressReportById_outParamList;
				tmpeofqueryResGetProgressReportById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetProgressReportById_outParamList_eof", false);
				queryResGetProgressReportById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportById_outParamList, tmpeofqueryResGetProgressReportById_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId = (int) ViewStateAttributes.GetFromViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssProgressReportId", 0);
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections = (int) ViewStateAttributes.GetFromViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssTotalNumberOfSections", 0);
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections = (int) ViewStateAttributes.GetFromViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssTotalNumberOfVisibleSections", 0);
				varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections = (int) ViewStateAttributes.GetFromViewState("varLcCourseLearnerProgressReportSummary_ssSTCourseLearnerProgressReportSummary_ssTotalNumberOfCompletedSections", 0);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.K4n_8gVydXk6qO55OHtdUpA";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("4n_8gVydXk6qO55OHtdUpA"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvOnNotifyIconSelected: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvOnNotifyIconSelected() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotifyIconSelected</code> that represents the Service Studio screen action
		///  <code>OnNotifyIconSelected</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotifyIconSelected(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotifyIconSelected localVars = new lcvOnNotifyIconSelected();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((localVars.resNotifyWidgetGetMessage_outParamMessage== "Cancelled")) {
					// Update Screen
					return true;

				} else {
					// Widget_Click
					Actions.ActionWidget_Click(heContext, wtHiddenCreateButton.ClientID);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvExportProgressReport: VarsBag {
			public string inParamStudentId;
			public int inParamProgressReportId;
			public byte[] resHtmlToPdfConverter_outParamBinary = new byte[] {};
			public bool resHtmlToPdfConverter_outParamError = true;

			public lcvExportProgressReport(string inParamStudentId, int inParamProgressReportId) {
				this.inParamStudentId = inParamStudentId;
				this.inParamProgressReportId = inParamProgressReportId;
			}
		}
		/// <summary>
		/// Action <code>CommandExportProgressReport</code> that represents the Service Studio screen action
		///  <code>ExportProgressReport</code> <p> Description: </p>
		/// </summary>
		private bool CommandExportProgressReport(HeContext heContext, string inParamStudentId, int inParamProgressReportId) {
			CheckPermissions(heContext);
			lcvExportProgressReport localVars = new lcvExportProgressReport(inParamStudentId, inParamProgressReportId);
			try {
				// HtmlToPdfConverter
				Actions.ActionHtmlToPdfConverter(heContext, (Functions.ssGetPDFReportType(heContext, ENPDFReportTypeEntity.GetRecordByKey(ObjectKey.Parse("t5+V4o0n60W9gpN2dK+T7g")).ssId).ssENPDFReportType.ssURL+Convert.ToString(localVars.inParamProgressReportId)), "F", out localVars.resHtmlToPdfConverter_outParamBinary, out localVars.resHtmlToPdfConverter_outParamError);
				// Download Download6
				Response.ClearContent();
				string md5Hash_Download6;
				md5Hash_Download6 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.resHtmlToPdfConverter_outParamBinary);
				Response.ContentType = "application/pdf";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download6 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download6);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload6 = RuntimePlatformUtils.EscapeFilenameForDownload((("ProgressReport" +localVars.inParamStudentId) + ".pdf"));
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload6 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload6);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload6+ "\"");
				byte[] downloadDownload6FileContent = localVars.resHtmlToPdfConverter_outParamBinary;

				if (downloadDownload6FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/pdf";
						file_info.Second = localVars.resHtmlToPdfConverter_outParamBinary;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload((("ProgressReport" +localVars.inParamStudentId) + ".pdf")));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload6FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload6FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CourseLearnerProgressReportStatus", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Refresh Me
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container55_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container55_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container55_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container55_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container55)
		/// </summary>
		/// <returns>The Visible State of wt_Container55</returns>
		public bool cnt_Container55_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container43_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container43_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void img_Image9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				img_Image9_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string img_Image9_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image9)
		/// </summary>
		/// <returns>URL of the Image (wt_Image9)</returns>
		public string img_Image9_getURL() {
			string url = varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			// remove ascx path from image src
			if (url != null && !url.Contains(":") && !url.StartsWith("/") && !url.StartsWith("\\")) {
				url = "../../../" + url;
			}
			return url; 
		}
		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container45_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container45_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container29_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = WoNcxo05uUqzgZfP9RoY7A) Expression: ToUpper + ", " +
		///  CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.StudentForename + "("
		/// + CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.StudentReference + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression53() {
			return (((((BuiltInFunction.ToUpper(varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentSurname) + ", ") +varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentForename) + "(") +varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssStudentReference) + ")");
		}
		bool if_wt_If51_hasRun=false;
		bool if_wt_If51_evalResult;
		public bool if_wt_If51() {
			if (if_wt_If51_hasRun) {
				if_wt_If51_hasRun = false;
				return if_wt_If51_evalResult;
			}
			if_wt_If51_hasRun = true;
			if_wt_If51_evalResult = varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssHasProgressReport;
			return if_wt_If51_evalResult;
		}

		public void cnt_Container39_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container39_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container39_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container39_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container39)
		/// </summary>
		/// <returns>The Visible State of wt_Container39</returns>
		public bool cnt_Container39_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container49_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container49_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance58_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
				widget.inParamIsSelected = false;
				widget.inParamPercentage = (((varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections>0)) ?((((decimal) varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections/
				(decimal) varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections) *100M)):(0M));
				widget.inParamText = (((Convert.ToString(varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections) + " out of ") +Convert.ToString(varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections)) + " visible sections completed.");
				widget.inParamVisibleCheckbox = false;
				widget.inParamEnabledCheckbox = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance58
		/// </summary>
		public void webBlck_WebBlockInstance58_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container47_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container47_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = OXXsKsuSiUuczawwptQ+_g) Expression: "(" +
		///  CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfSections
		/// -
		///  CourseLearnerProgressReportSummary.CourseLearnerProgressReportSummary.TotalNumberOfVisibleSection
		/// s + " sections hidden from report.)"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression15() {
			return (("(" +Convert.ToString((varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfSections-varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections))) + " sections hidden from report.)");
		}
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtCreateNewProgressReport.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance20
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance20_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtCreateNewProgressReport)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtCreateNewProgressReport)</returns>
		public string lnkCreateNewProgressReport_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportTypeId", System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamProgressReportTypeID), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("StudentId", System.Web.HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportId", System.Web.HttpUtility.UrlEncode(Convert.ToString(BuiltInFunction.NullIdentifier()), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReport", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtCreateNewProgressReport)
		/// </summary>
		/// <returns>title of the Link (wtCreateNewProgressReport)</returns>
		public string
		lnkCreateNewProgressReport_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCreateNewProgressReport)
		/// </summary>
		/// <returns>The Visible State of wtCreateNewProgressReport</returns>
		public bool lnkCreateNewProgressReport_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtCreateNewProgressReport)
		/// </summary>
		/// <returns>The Enabled State of wtCreateNewProgressReport</returns>
		public bool lnkCreateNewProgressReport_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If1_hasRun=false;
		bool if_wt_If1_evalResult;
		public bool if_wt_If1() {
			if (if_wt_If1_hasRun) {
				if_wt_If1_hasRun = false;
				return if_wt_If1_evalResult;
			}
			if_wt_If1_hasRun = true;
			if_wt_If1_evalResult = varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssHasProgressReport;
			return if_wt_If1_evalResult;
		}

		public void cnt_Container46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container46_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container46_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container46_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container46)
		/// </summary>
		/// <returns>The Visible State of wt_Container46</returns>
		public bool cnt_Container46_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtPreviewReport)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtPreviewReport)</returns>
		public string lnkPreviewReport_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportID", System.Web.HttpUtility.UrlEncode(Convert.ToString(varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_LogoSelection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtPreviewReport)
		/// </summary>
		/// <returns>title of the Link (wtPreviewReport)</returns>
		public string
		lnkPreviewReport_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPreviewReport)
		/// </summary>
		/// <returns>The Visible State of wtPreviewReport</returns>
		public bool lnkPreviewReport_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtPreviewReport)
		/// </summary>
		/// <returns>The Enabled State of wtPreviewReport</returns>
		public bool lnkPreviewReport_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("P6TrCAKarUmrhWJVVUvY2w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtPreviewReport.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance33
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance33_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotifyIconSelected(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container44_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void btnHiddenCreateButton_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				btnHiddenCreateButton_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string btnHiddenCreateButton_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:none";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtHiddenCreateButton_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
				if (CommandExportProgressReport(heContext, inParamStudentReference, varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the label of the button (wtHiddenCreateButton)
		/// </summary>
		/// <returns>Label of the Button (wtHiddenCreateButton)</returns>
		public string
		btnHiddenCreateButton_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wtHiddenCreateButton)
		/// </summary>
		/// <returns>The Visible State of wtHiddenCreateButton</returns>
		public bool btnHiddenCreateButton_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtHiddenCreateButton)
		/// </summary>
		/// <returns>The Enabled State of wtHiddenCreateButton</returns>
		public bool btnHiddenCreateButton_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If56_hasRun=false;
		bool if_wt_If56_evalResult;
		public bool if_wt_If56() {
			if (if_wt_If56_hasRun) {
				if_wt_If56_hasRun = false;
				return if_wt_If56_evalResult;
			}
			if_wt_If56_hasRun = true;
			if_wt_If56_evalResult = varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssHasProgressReport;
			return if_wt_If56_evalResult;
		}

		public void cnt_Container38_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container38_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container38_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container38_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container38)
		/// </summary>
		/// <returns>The Visible State of wt_Container38</returns>
		public bool cnt_Container38_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link24)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link24)</returns>
		public string lnk_Link24_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ActiveTabId", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENTabsEntity.GetRecordByKey(ObjectKey.Parse("dMF9PjLsLkuXJfDGk7dH+g")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsTabs", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link24)
		/// </summary>
		/// <returns>title of the Link (wt_Link24)</returns>
		public string
		lnk_Link24_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link24)
		/// </summary>
		/// <returns>The Visible State of wt_Link24</returns>
		public bool lnk_Link24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link24)
		/// </summary>
		/// <returns>The Enabled State of wt_Link24</returns>
		public bool lnk_Link24_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container17_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container17_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance37_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("P6TrCAKarUmrhWJVVUvY2w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container34_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container34_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container34_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container34)
		/// </summary>
		/// <returns>The Visible State of wt_Container34</returns>
		public bool cnt_Container34_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If31_hasRun=false;
		bool if_wt_If31_evalResult;
		public bool if_wt_If31() {
			if (if_wt_If31_hasRun) {
				if_wt_If31_hasRun = false;
				return if_wt_If31_evalResult;
			}
			if_wt_If31_hasRun = true;
			if_wt_If31_evalResult = varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssHasProgressReport;
			return if_wt_If31_evalResult;
		}

		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container50_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If21_hasRun=false;
		bool if_wt_If21_evalResult;
		public bool if_wt_If21() {
			if (if_wt_If21_hasRun) {
				if_wt_If21_hasRun = false;
				return if_wt_If21_evalResult;
			}
			if_wt_If21_hasRun = true;
			if_wt_If21_evalResult = queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIsComplete;
			return if_wt_If21_evalResult;
		}

		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container42_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container42_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((Functions.rssespaceuserpermissions_ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("90KYDrWi40a+ybxleOV++g")).ssId) ==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If3_hasRun=false;
		bool if_wt_If3_evalResult;
		public bool if_wt_If3() {
			if (if_wt_If3_hasRun) {
				if_wt_If3_hasRun = false;
				return if_wt_If3_evalResult;
			}
			if_wt_If3_hasRun = true;
			if_wt_If3_evalResult = (((varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfVisibleSections==varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssTotalNumberOfCompletedSections)) ?(true):(false));
			return if_wt_If3_evalResult;
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link57_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandExportProgressReport(heContext, inParamStudentReference, varLcCourseLearnerProgressReportSummary.ssSTCourseLearnerProgressReportSummary.ssProgressReportId)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link57)
		/// </summary>
		/// <returns>title of the Link (wt_Link57)</returns>
		public string
		lnk_Link57_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link57)
		/// </summary>
		/// <returns>The Visible State of wt_Link57</returns>
		public bool lnk_Link57_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link57)
		/// </summary>
		/// <returns>The Enabled State of wt_Link57</returns>
		public bool lnk_Link57_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssIsComplete; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container25_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container25_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container25_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container25_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container25)
		/// </summary>
		/// <returns>The Visible State of wt_Container25</returns>
		public bool cnt_Container25_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("CVlsDr+2eEWplbMTBcZihQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container54_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container54_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container54_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container54)
		/// </summary>
		/// <returns>The Visible State of wt_Container54</returns>
		public bool cnt_Container54_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance59_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("CVlsDr+2eEWplbMTBcZihQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container36_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public static class FuncCommandOnNotifyIconSelected {
		}
		public static class FuncCommandExportProgressReport {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncssPreparation {

			private static void datasetGetSpecialistSectionsReadDB(ref RCProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetSpecialistSections" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSectionProgressReportSectionsRecordList datasetGetSpecialistSections(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportSection.[ID] o1, ENProgressReportSection.[GROUP] o2, ENProgressReportSection.[CREATEDBY] o3, ENProgressReportSection.[CREATEDON] o4, ENProgressReportSection.[COURSEOUTLINE] o5, ENProgressReportSection.[COURSEOUTLINEVISIBLE] o6, ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] o7, ENProgressReportSection.[COURSEOUTLINEUPDATEDON] o8, ENProgressReportSection.[COURSEOUTLINECOMPLETED] o9, ENProgressReportSection.[KEYSTRENGTHS] o10, ENProgressReportSection.[KEYSTRENGTHSVISIBLE] o11, ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] o12, ENProgressReportSection.[KEYSTRENGTHSUPDATEDON] o13, ENProgressReportSection.[KEYSTRENGTHSCOMPLETED] o14, ENProgressReportSection.[AREASFORDEVELOPMENT] o15, ENProgressReportSection.[AREASFORDEVELOPMENTVISIBLE] o16, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] o17, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDON] o18, ENProgressReportSection.[AREASFORDEVELOPMENTCOMPLETED] o19, ENProgressReportSection.[PREDICTEDOUTCOME] o20, ENProgressReportSection.[PREDICTEDOUTCOMEVISIBLE] o21, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] o22, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDON] o23, ENProgressReportSection.[PREDICTEDOUTCOMECOMPLETED] o24, ENProgressReportSection.[ATTENDANCE] o25, ENProgressReportSection.[ATTENDANCEVISIBLE] o26, ENProgressReportSection.[ATTENDANCEUPDATEDBY] o27, ENProgressReportSection.[ATTENDANCEUPDATEDON] o28, ENProgressReportSection.[ATTENDANCECOMPLETED] o29" +
				", ENProgressReportSection.[COURSECOORDINATORSUMMARY] o30, ENProgressReportSection.[COURSECOORDINATORSUMMARYVISI] o31, ENProgressReportSection.[COURSECOORDINATORUPDATEDBY] o32, ENProgressReportSection.[COURSECOORDINATORUPDATEDON] o33, ENProgressReportSection.[COURSECOORDINATORCOMPLETED] o34, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEW] o35, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEWVISIBL] o36, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDBY] o37, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDON] o38, ENProgressReportSection.[STUDYPROGRAMMECOMPLETED] o39, ENProgressReportSection.[EMPLOYABILITY] o40, ENProgressReportSection.[EMPLOYABILITYVISIBLE] o41, ENProgressReportSection.[EMPLOYABILITYUPDATESDBY] o42, ENProgressReportSection.[EMPLOYABILITYUPDATEDON] o43, ENProgressReportSection.[EMPLOYABILITYCOMPLETED] o44, ENProgressReportSection.[WORKEXPERIENCE] o45, ENProgressReportSection.[WORKEXPERIENCEVISIBLE] o46, ENProgressReportSection.[WORKEXPERIENCEUPDATEDBY] o47, ENProgressReportSection.[WORKEXPERIENCEUPDATEDON] o48, ENProgressReportSection.[WORKEXPERIENCECOMPLETED] o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58");
				fromBuilder.Append(" FROM ({ProgressReportSections} ENProgressReportSections Left JOIN {ProgressReportSection} ENProgressReportSection ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("fFloxfgF1Em7zQJ43bgF4g")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionProgressReportSectionsRecordList outParamList = new RLProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetSpecialistSectionsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetSpecialistSectionsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetSpecialistSections.List");
						outParamList = (RLProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetSpecialistSections.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetSpecialistSectionsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetSpecialistSections.List");
							outParamList = (RLProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetSpecialistSections.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetUniversalSectionsReadDB(ref RCProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetUniversalSections" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSectionProgressReportSectionsRecordList datasetGetUniversalSections(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportSection.[ID] o1, ENProgressReportSection.[GROUP] o2, ENProgressReportSection.[CREATEDBY] o3, ENProgressReportSection.[CREATEDON] o4, ENProgressReportSection.[COURSEOUTLINE] o5, ENProgressReportSection.[COURSEOUTLINEVISIBLE] o6, ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] o7, ENProgressReportSection.[COURSEOUTLINEUPDATEDON] o8, ENProgressReportSection.[COURSEOUTLINECOMPLETED] o9, ENProgressReportSection.[KEYSTRENGTHS] o10, ENProgressReportSection.[KEYSTRENGTHSVISIBLE] o11, ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] o12, ENProgressReportSection.[KEYSTRENGTHSUPDATEDON] o13, ENProgressReportSection.[KEYSTRENGTHSCOMPLETED] o14, ENProgressReportSection.[AREASFORDEVELOPMENT] o15, ENProgressReportSection.[AREASFORDEVELOPMENTVISIBLE] o16, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] o17, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDON] o18, ENProgressReportSection.[AREASFORDEVELOPMENTCOMPLETED] o19, ENProgressReportSection.[PREDICTEDOUTCOME] o20, ENProgressReportSection.[PREDICTEDOUTCOMEVISIBLE] o21, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] o22, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDON] o23, ENProgressReportSection.[PREDICTEDOUTCOMECOMPLETED] o24, ENProgressReportSection.[ATTENDANCE] o25, ENProgressReportSection.[ATTENDANCEVISIBLE] o26, ENProgressReportSection.[ATTENDANCEUPDATEDBY] o27, ENProgressReportSection.[ATTENDANCEUPDATEDON] o28, ENProgressReportSection.[ATTENDANCECOMPLETED] o29" +
				", ENProgressReportSection.[COURSECOORDINATORSUMMARY] o30, ENProgressReportSection.[COURSECOORDINATORSUMMARYVISI] o31, ENProgressReportSection.[COURSECOORDINATORUPDATEDBY] o32, ENProgressReportSection.[COURSECOORDINATORUPDATEDON] o33, ENProgressReportSection.[COURSECOORDINATORCOMPLETED] o34, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEW] o35, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEWVISIBL] o36, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDBY] o37, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDON] o38, ENProgressReportSection.[STUDYPROGRAMMECOMPLETED] o39, ENProgressReportSection.[EMPLOYABILITY] o40, ENProgressReportSection.[EMPLOYABILITYVISIBLE] o41, ENProgressReportSection.[EMPLOYABILITYUPDATESDBY] o42, ENProgressReportSection.[EMPLOYABILITYUPDATEDON] o43, ENProgressReportSection.[EMPLOYABILITYCOMPLETED] o44, ENProgressReportSection.[WORKEXPERIENCE] o45, ENProgressReportSection.[WORKEXPERIENCEVISIBLE] o46, ENProgressReportSection.[WORKEXPERIENCEUPDATEDBY] o47, ENProgressReportSection.[WORKEXPERIENCEUPDATEDON] o48, ENProgressReportSection.[WORKEXPERIENCECOMPLETED] o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58");
				fromBuilder.Append(" FROM ({ProgressReportSections} ENProgressReportSections Left JOIN {ProgressReportSection} ENProgressReportSection ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("XB+m9GjXJ0qMg2YRsbvmGg")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionProgressReportSectionsRecordList outParamList = new RLProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetUniversalSectionsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetUniversalSectionsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetUniversalSections.List");
						outParamList = (RLProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetUniversalSections.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetUniversalSectionsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetUniversalSections.List");
							outParamList = (RLProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetUniversalSections.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetStudentByStudentReference" of Action "Preparation"
			/// </summary>
			public static RLStudentRecordList datasetGetStudentByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStudent.[STUDENTREFERENCE] o1, ENStudent.[FORENAMES] o2, ENStudent.[SURNAME] o3, NULL o4, NULL o5, NULL o6, NULL o7, ENStudent.[STUDENTPHOTOURL] o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27");
				fromBuilder.Append(" FROM {Student} ENStudent");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENStudent.[STUDENTREFERENCE] = @qpstP) AND (ENStudent.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENStudent.[STUDENTREFERENCE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentRecordList outParamList = new RLStudentRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentRecordList _tmp = new RLStudentRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetStudentByStudentReference.List");
						outParamList = (RLStudentRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetStudentByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentRecordList _tmp = new RLStudentRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetStudentByStudentReference.List");
							outParamList = (RLStudentRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetStudentByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetProgressReportById" of Action "Preparation"
			/// </summary>
			public static RLProgressReportRecordList datasetGetProgressReportById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, ENProgressReport.[ISCOMPLETE] o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, ENProgressReport.[INTRODUCTIONVISIBLE] o12, ENProgressReport.[SIGNOFFVISIBLE] o13, NULL o14, NULL o15, NULL o16, NULL o17, ENProgressReport.[INTRODUCTIONCOMPLETED] o18, ENProgressReport.[SIGNOFFCOMPLETED] o19, NULL o20, NULL o21, NULL o22, NULL o23");
				fromBuilder.Append(" FROM {ProgressReport} ENProgressReport");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportRecordList outParamList = new RLProgressReportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetProgressReportById.List");
						outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetProgressReportById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetProgressReportById.List");
							outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetProgressReportById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetPersonalSectionsReadDB(ref RCProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetPersonalSections" of Action "Preparation"
			/// </summary>
			public static RLProgressReportSectionProgressReportSectionsRecordList datasetGetPersonalSections(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportSection.[ID] o1, ENProgressReportSection.[GROUP] o2, ENProgressReportSection.[CREATEDBY] o3, ENProgressReportSection.[CREATEDON] o4, ENProgressReportSection.[COURSEOUTLINE] o5, ENProgressReportSection.[COURSEOUTLINEVISIBLE] o6, ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] o7, ENProgressReportSection.[COURSEOUTLINEUPDATEDON] o8, ENProgressReportSection.[COURSEOUTLINECOMPLETED] o9, ENProgressReportSection.[KEYSTRENGTHS] o10, ENProgressReportSection.[KEYSTRENGTHSVISIBLE] o11, ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] o12, ENProgressReportSection.[KEYSTRENGTHSUPDATEDON] o13, ENProgressReportSection.[KEYSTRENGTHSCOMPLETED] o14, ENProgressReportSection.[AREASFORDEVELOPMENT] o15, ENProgressReportSection.[AREASFORDEVELOPMENTVISIBLE] o16, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] o17, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDON] o18, ENProgressReportSection.[AREASFORDEVELOPMENTCOMPLETED] o19, ENProgressReportSection.[PREDICTEDOUTCOME] o20, ENProgressReportSection.[PREDICTEDOUTCOMEVISIBLE] o21, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] o22, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDON] o23, ENProgressReportSection.[PREDICTEDOUTCOMECOMPLETED] o24, ENProgressReportSection.[ATTENDANCE] o25, ENProgressReportSection.[ATTENDANCEVISIBLE] o26, ENProgressReportSection.[ATTENDANCEUPDATEDBY] o27, ENProgressReportSection.[ATTENDANCEUPDATEDON] o28, ENProgressReportSection.[ATTENDANCECOMPLETED] o29" +
				", ENProgressReportSection.[COURSECOORDINATORSUMMARY] o30, ENProgressReportSection.[COURSECOORDINATORSUMMARYVISI] o31, ENProgressReportSection.[COURSECOORDINATORUPDATEDBY] o32, ENProgressReportSection.[COURSECOORDINATORUPDATEDON] o33, ENProgressReportSection.[COURSECOORDINATORCOMPLETED] o34, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEW] o35, ENProgressReportSection.[STUDYPROGRAMMEOVERVIEWVISIBL] o36, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDBY] o37, ENProgressReportSection.[STUDYPROGRAMMEUPDATEDON] o38, ENProgressReportSection.[STUDYPROGRAMMECOMPLETED] o39, ENProgressReportSection.[EMPLOYABILITY] o40, ENProgressReportSection.[EMPLOYABILITYVISIBLE] o41, ENProgressReportSection.[EMPLOYABILITYUPDATESDBY] o42, ENProgressReportSection.[EMPLOYABILITYUPDATEDON] o43, ENProgressReportSection.[EMPLOYABILITYCOMPLETED] o44, ENProgressReportSection.[WORKEXPERIENCE] o45, ENProgressReportSection.[WORKEXPERIENCEVISIBLE] o46, ENProgressReportSection.[WORKEXPERIENCEUPDATEDBY] o47, ENProgressReportSection.[WORKEXPERIENCEUPDATEDON] o48, ENProgressReportSection.[WORKEXPERIENCECOMPLETED] o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58");
				fromBuilder.Append(" FROM ({ProgressReportSections} ENProgressReportSections Left JOIN {ProgressReportSection} ENProgressReportSection ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("T5cjSpNDb06Xftq9ynq4mQ")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionProgressReportSectionsRecordList outParamList = new RLProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetPersonalSectionsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetPersonalSectionsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetPersonalSections.List");
						outParamList = (RLProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetPersonalSections.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionProgressReportSectionsRecordList _tmp = new RLProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetPersonalSectionsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetPersonalSections.List");
							outParamList = (RLProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.CourseLearnerProgressReportStatus.Preparation.GetPersonalSections.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.K4n_8gVydXk6qO55OHtdUpA";
			}
		}
	}

}
