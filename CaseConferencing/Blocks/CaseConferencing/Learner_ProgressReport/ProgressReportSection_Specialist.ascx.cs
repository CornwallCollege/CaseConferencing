/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {
	public abstract class WBlkProgressReportSection_Specialist: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamProgressReportId. Description:
		/// </summary>
		public int inParamProgressReportId = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Variable <code>varLcVisible</code> that represents the Service Studio local variable
		///  <code>Visible</code> <p>Description: </p>
		/// </summary>
		bool varLcVisible = false;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfSections</code> that represents the Service Studio local variable
		///  <code>TotalNumberOfSections</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfSections = 0;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfVisibleSections</code> that represents the Service Studio local
		///  variable <code>TotalNumberOfVisibleSections</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfVisibleSections = 0;

		/// <summary>
		/// Variable <code>varLcTotalNumberOfSectionsCompleted</code> that represents the Service Studio local
		///  variable <code>TotalNumberOfSectionsCompleted</code> <p>Description: </p>
		/// </summary>
		int varLcTotalNumberOfSectionsCompleted = 0;

		/// <summary>
		/// Variable wt_WebBlockInstance84
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout wt_WebBlockInstance84;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container80;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container123;
		protected OutSystems.HubEdition.WebWidgets.Container wtIconExpand;
		/// <summary>
		/// Variable "True" if the Widget wt_If75
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If75T;

		/// <summary>
		/// Variable "True" if the Widget wt_If75
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If75F;
		protected OutSystems.HubEdition.WebWidgets.Container wtVisibleCheckBoxContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtTitleContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtStatusBarContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtDetailWrapper;
		/// <summary>
		/// Variable "True" if the Widget wt_If137
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If137T;

		/// <summary>
		/// Variable "True" if the Widget wt_If137
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If137F;
		private RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _ssProgressReport_List2List = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		public RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList ssProgressReport_List2List {
			get {
				return _ssProgressReport_List2List; 
			}
			set {
				_ssProgressReport_List2List = value;
				wtProgressReport_List2.DataSource = value;
				ssProgressReport_List2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtProgressReport_List2;
		public ArrayList wtProgressReport_List2_storage = new ArrayList();
		protected bool ssProgressReport_List2List_notUsedYet = true;
		protected bool ssProgressReport_List2ListDoDataBind;
		protected bool ssProgressReport_List2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container66;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input9ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input9ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container128;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container79;
		/// <summary>
		/// Variable "True" if the Widget wt_If61
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If61T;

		/// <summary>
		/// Variable "True" if the Widget wt_If61
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If61F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		/// <summary>
		/// Variable (wtEditCourseOutline) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditCourseOutline;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container119;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container68;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input2ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input2ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container99;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container120;
		/// <summary>
		/// Variable "True" if the Widget wt_If42
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If42T;

		/// <summary>
		/// Variable "True" if the Widget wt_If42
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If42F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container63;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container155;
		/// <summary>
		/// Variable (wtEditCourseCoordinatorSummary) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditCourseCoordinatorSummary;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container159;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container139;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input38ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input38ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container105;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container54;
		/// <summary>
		/// Variable "True" if the Widget wt_If109
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If109T;

		/// <summary>
		/// Variable "True" if the Widget wt_If109
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If109F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container35;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container134;
		/// <summary>
		/// Variable (wtEditCourseKeyStrengths) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditCourseKeyStrengths;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input142ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input142ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container111;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container83;
		/// <summary>
		/// Variable "True" if the Widget wt_If110
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If110T;

		/// <summary>
		/// Variable "True" if the Widget wt_If110
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If110F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container103;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container130;
		/// <summary>
		/// Variable (wtEditAreasForDevelopment) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditAreasForDevelopment;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container113;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input10ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input10ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container145;
		/// <summary>
		/// Variable "True" if the Widget wt_If94
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If94T;

		/// <summary>
		/// Variable "True" if the Widget wt_If94
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If94F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container56;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container91;
		/// <summary>
		/// Variable (wtEdiPredictedOutcome) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEdiPredictedOutcome;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container116;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input102ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input102ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container122;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container151;
		/// <summary>
		/// Variable "True" if the Widget wt_If25
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If25T;

		/// <summary>
		/// Variable "True" if the Widget wt_If25
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If25F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container96;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container140;
		/// <summary>
		/// Variable (wtEditAttendance) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditAttendance;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container65;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		int queryResGetProgressReportCategoriesByProgressReport_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetProgressReportCategoriesByProgressReport
			int datasetGetProgressReportCategoriesByProgressReport_maxRecords = 0;
			queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
			);
			varLcTotalNumberOfSections = (queryResGetProgressReportCategoriesByProgressReport_outParamList.Length*6); // TotalNumberOfSections = GetProgressReportCategoriesByProgressReport.List.Length * 6
			varLcTotalNumberOfVisibleSections = 0; // TotalNumberOfVisibleSections = 0
			varLcTotalNumberOfSectionsCompleted = 0; // TotalNumberOfSectionsCompleted = 0
			// Foreach GetProgressReportCategoriesByProgressReport.List
			queryResGetProgressReportCategoriesByProgressReport_outParamList.StartIteration();
			try {
				queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance(0);
				while (! queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof) {
					// CourseOutlineVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// CourseCoodinatorVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// KeyStrengthsVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// AreasForDevelopmentVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// PredictedOutcomeVisible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// Attendance Visible
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible) {
						varLcTotalNumberOfVisibleSections = (varLcTotalNumberOfVisibleSections+1); // TotalNumberOfVisibleSections = TotalNumberOfVisibleSections + 1

					}
					// CourseOutlineCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// CourseCoodinatorCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// KeyStrengthsCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// AreasForDevelopmentCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// PredictedOutcomeCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					// AttendanceCompleted
					if (queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted) {
						varLcTotalNumberOfSectionsCompleted = (varLcTotalNumberOfSectionsCompleted+1); // TotalNumberOfSectionsCompleted = TotalNumberOfSectionsCompleted + 1

					}
					queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance();
				}
			} finally {
				queryResGetProgressReportCategoriesByProgressReport_outParamList.EndIteration();
			}
		}
		static WBlkProgressReportSection_Specialist() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance84 = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) FindControl("wt_WebBlockInstance84");
			wt_Container80 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container80");
			wt_Container123 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container123");
			wtIconExpand = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtIconExpand");
			wtVisibleCheckBoxContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtVisibleCheckBoxContainer");
			wtTitleContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTitleContainer");
			wtStatusBarContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtStatusBarContainer");
			wtDetailWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDetailWrapper");
			wtProgressReport_List2 = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtProgressReport_List2");
			wtProgressReport_List2.StartIndexExpression = () => 0;
			wtProgressReport_List2.LineCountExpression = () => 999;
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssProgressReport_List2ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input9", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input2", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input38", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input142", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input10", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(FindControl("wtProgressReport_List2"), "wt_Input102", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList.

			int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof;
			ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();

			// Write the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList to the storequeryResGetProgressReportCategoriesByProgressReport_outParamList
			if (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Empty) {
				try {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.StartIteration();

					while (!queryResGetProgressReportCategoriesByProgressReport_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList = new ArrayList();
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ssGroupDescription == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ssGroupDescription);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENGroup.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_2.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_3.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_4.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_5.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_6.ssName == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_6.ssName);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_6.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENUser_6.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssId == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssId);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutline == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutline);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengths == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengths);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopment == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopment);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcome == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcome);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary == "" ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorUpdatedBy == 0?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorUpdatedBy);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorUpdatedOn);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorCompleted == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorCompleted);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible == false?(object) null: queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible);
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSections.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, true, true, true, true
						}
						))));
						storequeryResGetProgressReportCategoriesByProgressReport_outParamList.Add(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						queryResGetProgressReportCategoriesByProgressReport_outParamList.Advance();
					}
				} finally {
					queryResGetProgressReportCategoriesByProgressReport_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", storequeryResGetProgressReportCategoriesByProgressReport_outParamList, null);

			#endregion


			#region store queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList, false);
			queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamProgressReportId", inParamProgressReportId, 0);
			ViewStateAttributes.SetInViewState("varLcVisible", varLcVisible, false);
			if (IsAjaxRequest) {
				recListProgressReport_List2_Rebuild((ssProgressReport_List2ListDataBound ? wtProgressReport_List2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtProgressReport_List2.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtProgressReport_List2_list", wtProgressReport_List2_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList.

				// Read the needed fields of queryResGetProgressReportCategoriesByProgressReport_outParamList from storequeryResGetProgressReportCategoriesByProgressReport_outParamList
				queryResGetProgressReportCategoriesByProgressReport_outParamList = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
				ArrayList storequeryResGetProgressReportCategoriesByProgressReport_outParamList;
				storequeryResGetProgressReportCategoriesByProgressReport_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList", null);
				if (storequeryResGetProgressReportCategoriesByProgressReport_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList in storequeryResGetProgressReportCategoriesByProgressReport_outParamList) {
						if (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList != null) {
							// Aux current record variable
							RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList = new RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(null);
							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.ssGroupDescription = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENGroup.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_2.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_3.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[11]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_4.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[12] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[12]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_4.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[13]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_4.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[14]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_5.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[15] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[15]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_5.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[16]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_5.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[17]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_6.ssName = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[18] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[18]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_6.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[19]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENUser_6.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[20]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ssIsComplete = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[21] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[21]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[22]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[23]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssId = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[24] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[24]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutline = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[25] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[25]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[26] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[26]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[27] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[27]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[28] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[28]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseOutlineCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[29] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[29]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengths = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[30] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[30]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[31] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[31]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[32] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[32]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[33] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[33]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssKeyStrengthsCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[34] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[34]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopment = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[35] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[35]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[36] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[36]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[37] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[37]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[38] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[38]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAreasForDevelopmentCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[39] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[39]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcome = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[40] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[40]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[41] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[41]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[42] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[42]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[43] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[43]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssPredictedOutcomeCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[44] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[44]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendance = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[45] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[45]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[46] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[46]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[47] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[47]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[48] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[48]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssAttendanceCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[49] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[49]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseCoordinatorSummary = (string) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[50] == null ? "": tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[50]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[51] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[51]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseCoordinatorUpdatedBy = (int) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[52] == null ? 0: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[52]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseCoordinatorUpdatedOn = (DateTime) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[53] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[53]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ssCourseCoordinatorCompleted = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[54] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[54]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[55]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSection.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[56]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.ssSectionVisible = (bool) (tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[57] == null ? false: tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[57]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[58]);

							tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList.ssENProgressReportSections.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetProgressReportCategoriesByProgressReport_outParamList[59]);

							queryResGetProgressReportCategoriesByProgressReport_outParamList.Append(tmpAuxCurrentRecordqueryResGetProgressReportCategoriesByProgressReport_outParamList);
						}
					}
				}
				queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetProgressReportCategoriesByProgressReport_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList;
				tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetProgressReportCategoriesByProgressReport_outParamList_eof", false);
				queryResGetProgressReportCategoriesByProgressReport_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetProgressReportCategoriesByProgressReport_outParamList, tmpeofqueryResGetProgressReportCategoriesByProgressReport_outParamList);

				#endregion

				inParamProgressReportId = (int) ViewStateAttributes.GetFromViewState("inParamProgressReportId", 0);
				varLcVisible = (bool) ViewStateAttributes.GetFromViewState("varLcVisible", false);
				recListProgressReport_List2_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wt_Input9");
			ControlVisibility.StoreChildControlVisibility("wt_Input2");
			ControlVisibility.StoreChildControlVisibility("wt_Input38");
			ControlVisibility.StoreChildControlVisibility("wt_Input142");
			ControlVisibility.StoreChildControlVisibility("wt_Input10");
			ControlVisibility.StoreChildControlVisibility("wt_Input102");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wt_Input9");
			ControlVisibility.RestoreChildControlVisibility("wt_Input2");
			ControlVisibility.RestoreChildControlVisibility("wt_Input38");
			ControlVisibility.RestoreChildControlVisibility("wt_Input142");
			ControlVisibility.RestoreChildControlVisibility("wt_Input10");
			ControlVisibility.RestoreChildControlVisibility("wt_Input102");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.K77mm2szs5k_DwPPd2M18oQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("77mm2szs5k+DwPPd2M18oQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvOnSectionCheckBoxChange: VarsBag {
			public int inParamProgressReportID2;
			public RLProgressReportSectionsRecordList queryResGetProgressReports_outParamList = new RLProgressReportSectionsRecordList();
			public int queryResGetProgressReports_outParamCount = 0;

			public int resCreateOrUpdateProgressReportSections_outParamId = 0;

			public lcvOnSectionCheckBoxChange(int inParamProgressReportID2) {
				this.inParamProgressReportID2 = inParamProgressReportID2;
			}
		}
		/// <summary>
		/// Action <code>CommandOnSectionCheckBoxChange</code> that represents the Service Studio screen action
		///  <code>OnSectionCheckBoxChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSectionCheckBoxChange(HeContext heContext, int inParamProgressReportID2) {
			CheckPermissions(heContext);
			lcvOnSectionCheckBoxChange localVars = new lcvOnSectionCheckBoxChange(inParamProgressReportID2);
			try {
				// Query datasetGetProgressReports
				int datasetGetProgressReports_maxRecords = 0;
				localVars.queryResGetProgressReports_outParamList = FuncCommandOnSectionCheckBoxChange.datasetGetProgressReports(heContext, datasetGetProgressReports_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetProgressReports_outParamCount, inParamProgressReportId
				);
				// Foreach GetProgressReports.List
				localVars.queryResGetProgressReports_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetProgressReports_outParamList.Eof) {
						localVars.queryResGetProgressReports_outParamList.CurrentRec.ssENProgressReportSections.ssSectionVisible = getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible; // GetProgressReports.List.Current.ProgressReportSections.SectionVisible =
						// ProgressReport_List2.List.Current.ProgressReportSections.SectionVisible
						// CreateOrUpdateProgressReportSections
						ExtendedActions.CreateOrUpdateProgressReportSections(heContext, localVars.queryResGetProgressReports_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetProgressReports_outParamList.CurrentRec, out localVars.resCreateOrUpdateProgressReportSections_outParamId);
						localVars.queryResGetProgressReports_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetProgressReports_outParamList.EndIteration();
				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify2</code> that represents the Service Studio screen action
		///  <code>OnNotify2</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify2(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetProgressReportCategoriesByProgressReport
				{
					int datasetGetProgressReportCategoriesByProgressReport_maxRecords = 0;
					queryResGetProgressReportCategoriesByProgressReport_outParamList = FuncssPreparation.datasetGetProgressReportCategoriesByProgressReport(heContext, datasetGetProgressReportCategoriesByProgressReport_maxRecords, IterationMultiplicity.Multiple, out queryResGetProgressReportCategoriesByProgressReport_outParamCount, inParamProgressReportId
					);
				}
				// Refresh Me
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnSubSectionCheckBoxChange: VarsBag {
			public int resCreateOrUpdateProgressReportSection_outParamId = 0;

			public lcvOnSubSectionCheckBoxChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnSubSectionCheckBoxChange</code> that represents the Service Studio screen
		///  action <code>OnSubSectionCheckBoxChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSubSectionCheckBoxChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnSubSectionCheckBoxChange localVars = new lcvOnSubSectionCheckBoxChange();
			try {
				// CreateOrUpdateProgressReportSection
				ExtendedActions.CreateOrUpdateProgressReportSection(heContext, getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ChangedAttributes, ((RCProgressReportSectionRecord) getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection), out localVars.resCreateOrUpdateProgressReportSection_outParamId);
				// Refresh Me
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick</code> that represents the Service Studio screen action
		///  <code>OnClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Toggle
				varLcVisible = (!varLcVisible); // Visible = notVisible
				// Refresh Widget (wtIconExpand)
				((OSPageViewState) Page).AjaxRefresh(wtIconExpand, "None", StoreViewState);
				// Refresh Widget (wtDetailWrapper)
				ssProgressReport_List2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtDetailWrapper, "VerticalSlide", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void webBlck_WebBlockInstance84_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkListDetail_Layout) sender;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container80_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container80_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container80_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container80_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container80)
		/// </summary>
		/// <returns>The Visible State of wt_Container80</returns>
		public bool cnt_Container80_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container123_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container123_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container123_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container123_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container123)
		/// </summary>
		/// <returns>The Visible State of wt_Container123</returns>
		public bool cnt_Container123_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntIconExpand_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntIconExpand_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntIconExpand_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:block;float:right;cursor:pointer;margin-right:3px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntIconExpand_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtIconExpand
		/// </summary>
		public void cntIconExpand_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtIconExpand)
		/// </summary>
		/// <returns>The Visible State of wtIconExpand</returns>
		public bool cntIconExpand_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If75_hasRun=false;
		bool if_wt_If75_evalResult;
		public bool if_wt_If75() {
			if (if_wt_If75_hasRun) {
				if_wt_If75_hasRun = false;
				return if_wt_If75_evalResult;
			}
			if_wt_If75_hasRun = true;
			if_wt_If75_evalResult = varLcVisible;
			return if_wt_If75_evalResult;
		}

		public void RichWidgets_webBlck_WebBlockInstance5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("lONIeezZcEq91R_t0lfWaQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Ksi11unkKkSD65nEu1eIYA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntVisibleCheckBoxContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntVisibleCheckBoxContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntVisibleCheckBoxContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntVisibleCheckBoxContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtVisibleCheckBoxContainer)
		/// </summary>
		/// <returns>The Visible State of wtVisibleCheckBoxContainer</returns>
		public bool cntVisibleCheckBoxContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox17
		/// </summary>
		public void chk_CheckBox17_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSectionCheckBoxChange(heContext
				, inParamProgressReportId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box wFvFDwh8fE+5iJSpDsjylQ
		/// </summary>
		/// <returns>The Value of the Check Box wFvFDwh8fE+5iJSpDsjylQ</returns>
		public bool chk_CheckBox17_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible;
		}
		public void chk_CheckBox17_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSections.ssSectionVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox17)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox17</returns>
		public bool chk_CheckBox17_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox17)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox17</returns>
		public bool chk_CheckBox17_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTitleContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTitleContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTitleContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTitleContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTitleContainer)
		/// </summary>
		/// <returns>The Visible State of wtTitleContainer</returns>
		public bool cntTitleContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = F4+68vZq2kOTBTXe2Bde4g) Expression: "Specialist"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression167() {
			return "Specialist";
		}
		public void cntStatusBarContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntStatusBarContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntStatusBarContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntStatusBarContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtStatusBarContainer)
		/// </summary>
		/// <returns>The Visible State of wtStatusBarContainer</returns>
		public bool cntStatusBarContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance90_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
				widget.inParamIsSelected = false;
				widget.inParamPercentage = ((((varLcTotalNumberOfSectionsCompleted>0) && (varLcTotalNumberOfVisibleSections>0))) ?((((decimal) varLcTotalNumberOfSectionsCompleted/
				(decimal) varLcTotalNumberOfVisibleSections) *100M)):(0M));
				widget.inParamText = ((((((Convert.ToString(varLcTotalNumberOfSectionsCompleted) + " out of ") +Convert.ToString(varLcTotalNumberOfVisibleSections)) + " visible sections completed.") + " (") +Convert.ToString((varLcTotalNumberOfSections-varLcTotalNumberOfVisibleSections))) + " sections hidden from report.)");
				widget.inParamVisibleCheckbox = false;
				widget.inParamEnabledCheckbox = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance90
		/// </summary>
		public void webBlck_WebBlockInstance90_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntDetailWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDetailWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDetailWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntDetailWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDetailWrapper)
		/// </summary>
		/// <returns>The Visible State of wtDetailWrapper</returns>
		public bool cntDetailWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If137_hasRun=false;
		bool if_wt_If137_evalResult;
		public bool if_wt_If137() {
			if (if_wt_If137_hasRun) {
				if_wt_If137_hasRun = false;
				return if_wt_If137_evalResult;
			}
			if_wt_If137_hasRun = true;
			if_wt_If137_evalResult = varLcVisible;
			return if_wt_If137_evalResult;
		}

		public void recListProgressReport_List2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtProgressReport_List2
				ssProgressReport_List2List = queryResGetProgressReportCategoriesByProgressReport_outParamList;
				ssProgressReport_List2ListDoDataBind = false;
				ssProgressReport_List2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListProgressReport_List2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssProgressReport_List2List.Length > 0) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[ssProgressReport_List2List.CurrentRowNumber];
				}
				if (ssProgressReport_List2List.Length > e.SelectedIndex) {
					ssProgressReport_List2List.CurrentRec = ssProgressReport_List2List[e.SelectedIndex];
					ssProgressReport_List2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListProgressReport_List2_Store(object dataItem, int index) {
			RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmprec = (RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENProgressReportSection.ssId == 0?(object) null: tmprec.ssENProgressReportSection.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENProgressReportSection.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENProgressReportSection.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssENProgressReportSections.ssSectionVisible == false?(object) null: tmprec.ssENProgressReportSections.ssSectionVisible);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENProgressReportSections.ChangedAttributes, new BitArray(new bool[] {
				false, false, false, false, true, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENProgressReportSections.OptimizedAttributes, new BitArray(new bool[] {
				true, true, true, true, false, true, true, true, true
			}
			))));
			if (index < wtProgressReport_List2_storage.Count) {
				wtProgressReport_List2_storage[index] = tmpFields;
			} else {
				wtProgressReport_List2_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListProgressReport_List2_Restore() {

			#region fetch ssProgressReport_List2List.

			// Read the needed fields of ssProgressReport_List2List from storewtProgressReport_List2_list
			ssProgressReport_List2List = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
			ArrayList storewtProgressReport_List2_list;
			storewtProgressReport_List2_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtProgressReport_List2_list", null);
			if (storewtProgressReport_List2_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtProgressReport_List2_list in storewtProgressReport_List2_list) {
					if (tmpFieldswtProgressReport_List2_list != null) {
						// Aux current record variable
						RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord tmpAuxCurrentRecordwtProgressReport_List2_list = new RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(null);
						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.ssId = (int) (tmpFieldswtProgressReport_List2_list[0] == null ? 0: tmpFieldswtProgressReport_List2_list[0]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[1]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSection.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[2]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.ssSectionVisible = (bool) (tmpFieldswtProgressReport_List2_list[3] == null ? false: tmpFieldswtProgressReport_List2_list[3]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[4]);

						tmpAuxCurrentRecordwtProgressReport_List2_list.ssENProgressReportSections.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtProgressReport_List2_list[5]);

						ssProgressReport_List2List.Append(tmpAuxCurrentRecordwtProgressReport_List2_list);
					}
				}
			}
			ssProgressReport_List2List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssProgressReport_List2List runtime properties state.


			if (storewtProgressReport_List2_list.Count > 0) {
				ssProgressReport_List2List.RestoreRecordListState(storewtProgressReport_List2_list.Count - 1, false);
			} else {
				ssProgressReport_List2List.CurrentRowNumber = 0;
			}

			#endregion

			wtProgressReport_List2_storage = storewtProgressReport_List2_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListProgressReport_List2_Clear(object sender, EventArgs e) {
			wtProgressReport_List2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListProgressReport_List2_Rebuild(int startIndex, int lineCount) {
			if (ssProgressReport_List2List.Length != -1) {
				wtProgressReport_List2_storage.Clear();
				for (int i=startIndex; i<ssProgressReport_List2List.Data.Count && i<startIndex+lineCount; i++) {
					recListProgressReport_List2_Store(ssProgressReport_List2List.Data[i], wtProgressReport_List2_storage.Count);
				}
			}
		}
		public void recListProgressReport_List2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtProgressReport_List2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList getWtProgressReport_List2List() {
			if (ssProgressReport_List2ListDoDataBind) {
				recListProgressReport_List2_onDataBinding(this, null);
			}

			return ssProgressReport_List2List;
		}
		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = ((((BuiltInFunction.Mod(getWtProgressReport_List2List().CurrentRowNumber, 2M) ==0M)) ?("background-color:#F8F8F8;"):("")) + (((getWtProgressReport_List2List().CurrentRowNumber==0)) ?("border-top: solid 1px #dadada;"):("")));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table170_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table170_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table170_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:2px;padding: 4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell168_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell168_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell168_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = CvyJ3366MUS7zvZgNP3iIA) Expression:
		///  ProgressReport_List2.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression148() {
			return getWtProgressReport_List2List().CurrentRec.ssENGroup.ssGroupDescription;
		}
		public void wt_TableCell132_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell132_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell132_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell74_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell74_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell74_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox64_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox64
		/// </summary>
		public void chk_CheckBox64_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box NEK6ZzLDmUKrwibMW5yRwA
		/// </summary>
		/// <returns>The Value of the Check Box NEK6ZzLDmUKrwibMW5yRwA</returns>
		public bool chk_CheckBox64_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible;
		}
		public void chk_CheckBox64_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox64)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox64</returns>
		public bool chk_CheckBox64_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox64)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox64</returns>
		public bool chk_CheckBox64_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell82_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell82_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell82_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container66_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container66_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container66_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container66_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container66)
		/// </summary>
		/// <returns>The Visible State of wt_Container66</returns>
		public bool cnt_Container66_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input9_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input9_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input9_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input9");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input9_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutline = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input9)
		/// </summary>
		/// <returns>The Visible State of wt_Input9</returns>
		public bool inputwt_Input9_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input9)
		/// </summary>
		/// <returns>The Enabled State of wt_Input9</returns>
		public bool inputwt_Input9_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input9)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input9</returns>
		public bool inputwt_Input9_isMandatory() {
			return false;
		}

		public void cnt_Container128_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container128_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container128_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container128_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container128)
		/// </summary>
		/// <returns>The Visible State of wt_Container128</returns>
		public bool cnt_Container128_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutline!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox77_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox77
		/// </summary>
		public void chk_CheckBox77_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box ftq8gAYcX0yxYmKBRWdEsQ
		/// </summary>
		/// <returns>The Value of the Check Box ftq8gAYcX0yxYmKBRWdEsQ</returns>
		public bool chk_CheckBox77_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted;
		}
		public void chk_CheckBox77_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox77)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox77</returns>
		public bool chk_CheckBox77_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox77)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox77</returns>
		public bool chk_CheckBox77_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container79_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container79_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container79_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container79_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container79)
		/// </summary>
		/// <returns>The Visible State of wt_Container79</returns>
		public bool cnt_Container79_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If61_hasRun=false;
		bool if_wt_If61_evalResult;
		public bool if_wt_If61() {
			if (if_wt_If61_hasRun) {
				if_wt_If61_hasRun = false;
				return if_wt_If61_evalResult;
			}
			if_wt_If61_hasRun = true;
			if_wt_If61_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If61_evalResult;
		}

		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = _5q8iTwZyEinBlFlsyL8rA) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression87() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance62_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseOutlineUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell154_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell154_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell154_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance81_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditCourseOutline").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance81
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance81_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditCourseOutline)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditCourseOutline)</returns>
		public string lnkEditCourseOutline_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("SDjuQ6v3MUmu_ig49G0Wzg")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditCourseOutline)
		/// </summary>
		/// <returns>title of the Link (wtEditCourseOutline)</returns>
		public string
		lnkEditCourseOutline_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditCourseOutline)
		/// </summary>
		/// <returns>The Visible State of wtEditCourseOutline</returns>
		public bool lnkEditCourseOutline_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditCourseOutline)
		/// </summary>
		/// <returns>The Enabled State of wtEditCourseOutline</returns>
		public bool lnkEditCourseOutline_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container119_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container119_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container119_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container119_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container119)
		/// </summary>
		/// <returns>The Visible State of wt_Container119</returns>
		public bool cnt_Container119_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance121_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell29_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox100_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox100
		/// </summary>
		public void chk_CheckBox100_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box lhKNmosuUUClJ_sTEm_yeg
		/// </summary>
		/// <returns>The Value of the Check Box lhKNmosuUUClJ_sTEm_yeg</returns>
		public bool chk_CheckBox100_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi;
		}
		public void chk_CheckBox100_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox100)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox100</returns>
		public bool chk_CheckBox100_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox100)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox100</returns>
		public bool chk_CheckBox100_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell143_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell143_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell143_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container68_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container68_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container68_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container68)
		/// </summary>
		/// <returns>The Visible State of wt_Container68</returns>
		public bool cnt_Container68_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input2_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input2");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input2_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input2)
		/// </summary>
		/// <returns>The Visible State of wt_Input2</returns>
		public bool inputwt_Input2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input2)
		/// </summary>
		/// <returns>The Enabled State of wt_Input2</returns>
		public bool inputwt_Input2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input2)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input2</returns>
		public bool inputwt_Input2_isMandatory() {
			return false;
		}

		public void cnt_Container99_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container99_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container99_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container99_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container99)
		/// </summary>
		/// <returns>The Visible State of wt_Container99</returns>
		public bool cnt_Container99_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorSummary!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox59_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox59
		/// </summary>
		public void chk_CheckBox59_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box OTTDXLSwfU25rbZN8jukkw
		/// </summary>
		/// <returns>The Value of the Check Box OTTDXLSwfU25rbZN8jukkw</returns>
		public bool chk_CheckBox59_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorCompleted;
		}
		public void chk_CheckBox59_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox59)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox59</returns>
		public bool chk_CheckBox59_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox59)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox59</returns>
		public bool chk_CheckBox59_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container120_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container120_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container120_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container120_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container120)
		/// </summary>
		/// <returns>The Visible State of wt_Container120</returns>
		public bool cnt_Container120_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If42_hasRun=false;
		bool if_wt_If42_evalResult;
		public bool if_wt_If42() {
			if (if_wt_If42_hasRun) {
				if_wt_If42_hasRun = false;
				return if_wt_If42_evalResult;
			}
			if_wt_If42_hasRun = true;
			if_wt_If42_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssCourseCoordinatorUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If42_evalResult;
		}

		public void cnt_Container63_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container63_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container63_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container63_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container63)
		/// </summary>
		/// <returns>The Visible State of wt_Container63</returns>
		public bool cnt_Container63_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = lJXe8N2s2UmyeZY_9go4nw) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_2.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression163() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_2.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance97_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssCourseCoordinatorUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell55_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell55_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell55_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container155_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container155_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container155_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container155_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container155)
		/// </summary>
		/// <returns>The Visible State of wt_Container155</returns>
		public bool cnt_Container155_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditCourseCoordinatorSummary").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance46
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance46_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditCourseCoordinatorSummary)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditCourseCoordinatorSummary)</returns>
		public string lnkEditCourseCoordinatorSummary_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("NOrGml+TsEWTC5Y6yWfgQw")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditCourseCoordinatorSummary)
		/// </summary>
		/// <returns>title of the Link (wtEditCourseCoordinatorSummary)</returns>
		public string
		lnkEditCourseCoordinatorSummary_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditCourseCoordinatorSummary)
		/// </summary>
		/// <returns>The Visible State of wtEditCourseCoordinatorSummary</returns>
		public bool lnkEditCourseCoordinatorSummary_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditCourseCoordinatorSummary)
		/// </summary>
		/// <returns>The Enabled State of wtEditCourseCoordinatorSummary</returns>
		public bool lnkEditCourseCoordinatorSummary_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container159_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container159_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container159_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container159_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container159)
		/// </summary>
		/// <returns>The Visible State of wt_Container159</returns>
		public bool cnt_Container159_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance114_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell118_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell118_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell118_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox126_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox126
		/// </summary>
		public void chk_CheckBox126_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box tXDAwn+GuU+1BTwqGXPoGA
		/// </summary>
		/// <returns>The Value of the Check Box tXDAwn+GuU+1BTwqGXPoGA</returns>
		public bool chk_CheckBox126_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible;
		}
		public void chk_CheckBox126_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox126)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox126</returns>
		public bool chk_CheckBox126_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox126)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox126</returns>
		public bool chk_CheckBox126_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container139_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container139_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container139_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container139_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container139)
		/// </summary>
		/// <returns>The Visible State of wt_Container139</returns>
		public bool cnt_Container139_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input38_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input38_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input38_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input38_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input38");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input38_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengths = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input38)
		/// </summary>
		/// <returns>The Visible State of wt_Input38</returns>
		public bool inputwt_Input38_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input38)
		/// </summary>
		/// <returns>The Enabled State of wt_Input38</returns>
		public bool inputwt_Input38_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input38)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input38</returns>
		public bool inputwt_Input38_isMandatory() {
			return false;
		}

		public void cnt_Container105_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container105_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container105_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container105_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container105)
		/// </summary>
		/// <returns>The Visible State of wt_Container105</returns>
		public bool cnt_Container105_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengths!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox70_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox70
		/// </summary>
		public void chk_CheckBox70_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 8Mj4bQlEqkmyg7M1Vt1j_A
		/// </summary>
		/// <returns>The Value of the Check Box 8Mj4bQlEqkmyg7M1Vt1j_A</returns>
		public bool chk_CheckBox70_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted;
		}
		public void chk_CheckBox70_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox70)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox70</returns>
		public bool chk_CheckBox70_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox70)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox70</returns>
		public bool chk_CheckBox70_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container54_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container54_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container54_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container54)
		/// </summary>
		/// <returns>The Visible State of wt_Container54</returns>
		public bool cnt_Container54_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If109_hasRun=false;
		bool if_wt_If109_evalResult;
		public bool if_wt_If109() {
			if (if_wt_If109_hasRun) {
				if_wt_If109_hasRun = false;
				return if_wt_If109_evalResult;
			}
			if_wt_If109_hasRun = true;
			if_wt_If109_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If109_evalResult;
		}

		public void cnt_Container35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container35_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container35_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container35_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container35)
		/// </summary>
		/// <returns>The Visible State of wt_Container35</returns>
		public bool cnt_Container35_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 61DeQ4719E6DcYOP9VZmAQ) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_3.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression43() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_3.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance51_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssKeyStrengthsUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell171_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell171_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell171_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container134_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container134_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container134_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container134_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container134)
		/// </summary>
		/// <returns>The Visible State of wt_Container134</returns>
		public bool cnt_Container134_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance129_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditCourseKeyStrengths").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance129
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance129_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditCourseKeyStrengths)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditCourseKeyStrengths)</returns>
		public string lnkEditCourseKeyStrengths_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("v5hrUY5JNUGkxlQ0AvRvwg")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditCourseKeyStrengths)
		/// </summary>
		/// <returns>title of the Link (wtEditCourseKeyStrengths)</returns>
		public string
		lnkEditCourseKeyStrengths_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditCourseKeyStrengths)
		/// </summary>
		/// <returns>The Visible State of wtEditCourseKeyStrengths</returns>
		public bool lnkEditCourseKeyStrengths_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditCourseKeyStrengths)
		/// </summary>
		/// <returns>The Enabled State of wtEditCourseKeyStrengths</returns>
		public bool lnkEditCourseKeyStrengths_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance89_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell156_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell156_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell156_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox28
		/// </summary>
		public void chk_CheckBox28_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 0tM2KK5_tk+a3t5YdclQ_w
		/// </summary>
		/// <returns>The Value of the Check Box 0tM2KK5_tk+a3t5YdclQ_w</returns>
		public bool chk_CheckBox28_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible;
		}
		public void chk_CheckBox28_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox28)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox28</returns>
		public bool chk_CheckBox28_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox28)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox28</returns>
		public bool chk_CheckBox28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell104_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell104_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell104_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container49_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container49_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input142_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input142_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input142_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input142_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input142");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input142_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopment = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input142)
		/// </summary>
		/// <returns>The Visible State of wt_Input142</returns>
		public bool inputwt_Input142_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input142)
		/// </summary>
		/// <returns>The Enabled State of wt_Input142</returns>
		public bool inputwt_Input142_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input142)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input142</returns>
		public bool inputwt_Input142_isMandatory() {
			return false;
		}

		public void cnt_Container111_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container111_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container111_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container111_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container111)
		/// </summary>
		/// <returns>The Visible State of wt_Container111</returns>
		public bool cnt_Container111_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopment!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox112_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox112
		/// </summary>
		public void chk_CheckBox112_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box vn+prQKLtEKVjaTJqY2Kpw
		/// </summary>
		/// <returns>The Value of the Check Box vn+prQKLtEKVjaTJqY2Kpw</returns>
		public bool chk_CheckBox112_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted;
		}
		public void chk_CheckBox112_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox112)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox112</returns>
		public bool chk_CheckBox112_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox112)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox112</returns>
		public bool chk_CheckBox112_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container83_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container83_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container83_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container83_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container83)
		/// </summary>
		/// <returns>The Visible State of wt_Container83</returns>
		public bool cnt_Container83_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If110_hasRun=false;
		bool if_wt_If110_evalResult;
		public bool if_wt_If110() {
			if (if_wt_If110_hasRun) {
				if_wt_If110_hasRun = false;
				return if_wt_If110_evalResult;
			}
			if_wt_If110_hasRun = true;
			if_wt_If110_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If110_evalResult;
		}

		public void cnt_Container103_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container103_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container103_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container103_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container103)
		/// </summary>
		/// <returns>The Visible State of wt_Container103</returns>
		public bool cnt_Container103_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = q8HW58lrrk2c4LGhMZ0A1Q) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_4.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression157() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_4.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance149_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell117_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell117_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell117_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container130_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container130_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container130_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container130_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container130)
		/// </summary>
		/// <returns>The Visible State of wt_Container130</returns>
		public bool cnt_Container130_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance144_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditAreasForDevelopment").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance144
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance144_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditAreasForDevelopment)</returns>
		public string lnkEditAreasForDevelopment_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("IPwjcVN7r0KXXjyKfRFWrA")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>title of the Link (wtEditAreasForDevelopment)</returns>
		public string
		lnkEditAreasForDevelopment_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>The Visible State of wtEditAreasForDevelopment</returns>
		public bool lnkEditAreasForDevelopment_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditAreasForDevelopment)
		/// </summary>
		/// <returns>The Enabled State of wtEditAreasForDevelopment</returns>
		public bool lnkEditAreasForDevelopment_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container113_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container113_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container113_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container113_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container113)
		/// </summary>
		/// <returns>The Visible State of wt_Container113</returns>
		public bool cnt_Container113_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance92_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox153_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox153
		/// </summary>
		public void chk_CheckBox153_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box ugHD4mqeV0W5+24hBMXRtQ
		/// </summary>
		/// <returns>The Value of the Check Box ugHD4mqeV0W5+24hBMXRtQ</returns>
		public bool chk_CheckBox153_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible;
		}
		public void chk_CheckBox153_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox153)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox153</returns>
		public bool chk_CheckBox153_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox153)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox153</returns>
		public bool chk_CheckBox153_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container22_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container22_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input10_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input10");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input10_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcome = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input10)
		/// </summary>
		/// <returns>The Visible State of wt_Input10</returns>
		public bool inputwt_Input10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input10)
		/// </summary>
		/// <returns>The Enabled State of wt_Input10</returns>
		public bool inputwt_Input10_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input10)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input10</returns>
		public bool inputwt_Input10_isMandatory() {
			return false;
		}

		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container24_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcome!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox152_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox152
		/// </summary>
		public void chk_CheckBox152_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box PdZu4s+41UmiE5ESy8K2ig
		/// </summary>
		/// <returns>The Value of the Check Box PdZu4s+41UmiE5ESy8K2ig</returns>
		public bool chk_CheckBox152_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted;
		}
		public void chk_CheckBox152_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox152)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox152</returns>
		public bool chk_CheckBox152_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox152)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox152</returns>
		public bool chk_CheckBox152_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container145_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container145_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container145_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container145_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container145)
		/// </summary>
		/// <returns>The Visible State of wt_Container145</returns>
		public bool cnt_Container145_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If94_hasRun=false;
		bool if_wt_If94_evalResult;
		public bool if_wt_If94() {
			if (if_wt_If94_hasRun) {
				if_wt_If94_hasRun = false;
				return if_wt_If94_evalResult;
			}
			if_wt_If94_hasRun = true;
			if_wt_If94_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If94_evalResult;
		}

		public void cnt_Container56_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container56_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container56_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container56_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container56)
		/// </summary>
		/// <returns>The Visible State of wt_Container56</returns>
		public bool cnt_Container56_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = gHcvU8H3XU24K8DNmGmRFQ) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_5.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression52() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_5.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance165_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssPredictedOutcomeUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell161_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell161_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell161_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container91_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container91_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container91_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container91_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container91)
		/// </summary>
		/// <returns>The Visible State of wt_Container91</returns>
		public bool cnt_Container91_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance162_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEdiPredictedOutcome").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance162
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance162_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEdiPredictedOutcome)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEdiPredictedOutcome)</returns>
		public string lnkEdiPredictedOutcome_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("+Hg3vuD2+0ybaSobi9yKCA")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEdiPredictedOutcome)
		/// </summary>
		/// <returns>title of the Link (wtEdiPredictedOutcome)</returns>
		public string
		lnkEdiPredictedOutcome_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEdiPredictedOutcome)
		/// </summary>
		/// <returns>The Visible State of wtEdiPredictedOutcome</returns>
		public bool lnkEdiPredictedOutcome_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEdiPredictedOutcome)
		/// </summary>
		/// <returns>The Enabled State of wtEdiPredictedOutcome</returns>
		public bool lnkEdiPredictedOutcome_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container47_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container47_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance107_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell34_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell34_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void chk_CheckBox71_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox71
		/// </summary>
		public void chk_CheckBox71_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 3sv7bROHeEqT38adtcumSQ
		/// </summary>
		/// <returns>The Value of the Check Box 3sv7bROHeEqT38adtcumSQ</returns>
		public bool chk_CheckBox71_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceVisible;
		}
		public void chk_CheckBox71_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceVisible = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox71)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox71</returns>
		public bool chk_CheckBox71_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox71)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox71</returns>
		public bool chk_CheckBox71_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell95_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell95_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell95_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container116_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container116_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container116_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:500;line-height:16px;font-size: 13px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container116_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container116)
		/// </summary>
		/// <returns>The Visible State of wt_Container116</returns>
		public bool cnt_Container116_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwt_Input102_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwt_Input102_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwt_Input102_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input102_input_value() {
			if (("" !=getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance)) {
				return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtProgressReport_List2, "wt_Input102");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input102_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = ""; 
				} else {
					getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendance = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input102)
		/// </summary>
		/// <returns>The Visible State of wt_Input102</returns>
		public bool inputwt_Input102_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input102)
		/// </summary>
		/// <returns>The Enabled State of wt_Input102</returns>
		public bool inputwt_Input102_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input102)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input102</returns>
		public bool inputwt_Input102_isMandatory() {
			return false;
		}

		public void cnt_Container122_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container122_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container122_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container122_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container122)
		/// </summary>
		/// <returns>The Visible State of wt_Container122</returns>
		public bool cnt_Container122_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendance!= "")) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox8
		/// </summary>
		public void chk_CheckBox8_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSubSectionCheckBoxChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box ziwjCD3Kakmjnyp6aqZ5Bw
		/// </summary>
		/// <returns>The Value of the Check Box ziwjCD3Kakmjnyp6aqZ5Bw</returns>
		public bool chk_CheckBox8_checked_value() {
			return getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceCompleted;
		}
		public void chk_CheckBox8_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssProgressReport_List2List.Length > parentControlIndex && parentControlIndex > -1) {
					ssProgressReport_List2List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceCompleted = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox8)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox8</returns>
		public bool chk_CheckBox8_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReport.ssIsComplete); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox8)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox8</returns>
		public bool chk_CheckBox8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container151_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container151_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container151_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container151_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container151)
		/// </summary>
		/// <returns>The Visible State of wt_Container151</returns>
		public bool cnt_Container151_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If25_hasRun=false;
		bool if_wt_If25_evalResult;
		public bool if_wt_If25() {
			if (if_wt_If25_hasRun) {
				if_wt_If25_hasRun = false;
				return if_wt_If25_evalResult;
			}
			if_wt_If25_hasRun = true;
			if_wt_If25_evalResult = (getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If25_evalResult;
		}

		public void cnt_Container96_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container96_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container96_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container96_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container96)
		/// </summary>
		/// <returns>The Visible State of wt_Container96</returns>
		public bool cnt_Container96_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = _oKr1KScz0ixoVgYsYdrZg) Expression: "Last updated by " +
		///  ProgressReport_List2.List.Current.User_6.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression138() {
			return (("Last updated by " +getWtProgressReport_List2List().CurrentRec.ssENUser_6.ssName) + " on ");
		}
		public void webBlck_WebBlockInstance147_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetProgressReportCategoriesByProgressReport_outParamList.CurrentRec.ssENProgressReportSection.ssAttendanceUpdatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container140_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container140_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container140_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container140_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container140)
		/// </summary>
		/// <returns>The Visible State of wt_Container140</returns>
		public bool cnt_Container140_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance58_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtProgressReport_List2, "wtEditAttendance").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance58
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance58_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditAttendance)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditAttendance)</returns>
		public string lnkEditAttendance_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportSectionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtProgressReport_List2List().CurrentRec.ssENProgressReportSection.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ProgressReportSubSectionType", System.Web.HttpUtility.UrlEncode(ENProgressReportSubSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("0tie0dcUHUqXgvBcFGY47g")).ssId, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReportSection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditAttendance)
		/// </summary>
		/// <returns>title of the Link (wtEditAttendance)</returns>
		public string
		lnkEditAttendance_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditAttendance)
		/// </summary>
		/// <returns>The Visible State of wtEditAttendance</returns>
		public bool lnkEditAttendance_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtProgressReport_List2List().CurrentRec.ssENProgressReport.ssIsComplete);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditAttendance)
		/// </summary>
		/// <returns>The Enabled State of wtEditAttendance</returns>
		public bool lnkEditAttendance_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container65_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container65_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container65_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container65)
		/// </summary>
		/// <returns>The Visible State of wt_Container65</returns>
		public bool cnt_Container65_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance135_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandOnSectionCheckBoxChange {

			/// <summary>
			/// Query Function "GetProgressReports" of Action "OnSectionCheckBoxChange"
			/// </summary>
			public static RLProgressReportSectionsRecordList datasetGetProgressReports(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportSections.[ID] o1, NULL o2, NULL o3, NULL o4, ENProgressReportSections.[SECTIONVISIBLE] o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {ProgressReportSections} ENProgressReportSections");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("fFloxfgF1Em7zQJ43bgF4g")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportSectionsRecordList outParamList = new RLProgressReportSectionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Specialist.OnSectionCheckBoxChange.GetProgressReports.List");
						outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Specialist.OnSectionCheckBoxChange.GetProgressReports.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportSectionsRecordList _tmp = new RLProgressReportSectionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Specialist.OnSectionCheckBoxChange.GetProgressReports.List");
							outParamList = (RLProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Specialist.OnSectionCheckBoxChange.GetProgressReports.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnNotify2 {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandOnSubSectionCheckBoxChange {
		}
		public static class FuncCommandOnClick {
		}
		public static class FuncssPreparation {

			private static void datasetGetProgressReportCategoriesByProgressReportReadDB(ref RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENGroup.Read(r, ref index);
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENProgressReportSection.Read(r, ref index);
				rec.ssENProgressReportSections.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
				rec.ssENUser_2.Read(r, ref index);
				rec.ssENUser_3.Read(r, ref index);
				rec.ssENUser_4.Read(r, ref index);
				rec.ssENUser_5.Read(r, ref index);
				rec.ssENUser_6.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportCategoriesByProgressReport" of Action "Preparation"
			/// </summary>
			public static RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList datasetGetProgressReportCategoriesByProgressReport(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query ffSknpes1USpWXiO5w0sGw Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENGroup.[GROUPDESCRIPTION] o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, ENProgressReport.[ISCOMPLETE] o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, ENProgressReportSection.[ID] o34, NULL o35, NULL o36, NULL o37, ENProgressReportSection.[COURSEOUTLINE] o38, ENProgressReportSection.[COURSEOUTLINEVISIBLE] o39, ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] o40, ENProgressReportSection.[COURSEOUTLINEUPDATEDON] o41, ENProgressReportSection.[COURSEOUTLINECOMPLETED] o42, ENProgressReportSection.[KEYSTRENGTHS] o43, ENProgressReportSection.[KEYSTRENGTHSVISIBLE] o44, ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] o45, ENProgressReportSection.[KEYSTRENGTHSUPDATEDON] o46, ENProgressReportSection.[KEYSTRENGTHSCOMPLETED] o47, ENProgressReportSection.[AREASFORDEVELOPMENT] o48, ENProgressReportSection.[AREASFORDEVELOPMENTVISIBLE] o49, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] o50, ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDON] o51, ENProgressReportSection.[AREASFORDEVELOPMENTCOMPLETED] o52, ENProgressReportSection.[PREDICTEDOUTCOME] o53, ENProgressReportSection.[PREDICTEDOUTCOMEVISIBLE] o54, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] o55, ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDON] o56, ENProgressR" +
				"eportSection.[PREDICTEDOUTCOMECOMPLETED] o57, ENProgressReportSection.[ATTENDANCE] o58, ENProgressReportSection.[ATTENDANCEVISIBLE] o59, ENProgressReportSection.[ATTENDANCEUPDATEDBY] o60, ENProgressReportSection.[ATTENDANCEUPDATEDON] o61, ENProgressReportSection.[ATTENDANCECOMPLETED] o62, ENProgressReportSection.[COURSECOORDINATORSUMMARY] o63, ENProgressReportSection.[COURSECOORDINATORSUMMARYVISI] o64, ENProgressReportSection.[COURSECOORDINATORUPDATEDBY] o65, ENProgressReportSection.[COURSECOORDINATORUPDATEDON] o66, ENProgressReportSection.[COURSECOORDINATORCOMPLETED] o67, NULL o68, NULL o69, NULL o70, NULL o71, NULL o72, NULL o73, NULL o74, NULL o75, NULL o76, NULL o77, NULL o78, NULL o79, NULL o80, NULL o81, NULL o82, NULL o83, NULL o84, NULL o85, NULL o86, ENProgressReportSections.[SECTIONVISIBLE] o87, NULL o88, NULL o89, NULL o90, NULL o91, NULL o92, ENUser.[NAME] o93, NULL o94, NULL o95, NULL o96, NULL o97, NULL o98, NULL o99, NULL o100, NULL o101, NULL o102, ENUser_2.[NAME] o103, NULL o104, NULL o105, NULL o106, NULL o107, NULL o108, NULL o109, NULL o110, NULL o111, NULL o112, ENUser_3.[NAME] o113, NULL o114, NULL o115, NULL o116, NULL o117, NULL o118, NULL o119, NULL o120, NULL o121, NULL o122, ENUser_4.[NAME] o123, NULL o124, NULL o125, NULL o126, NULL o127, NULL o128, NULL o129, NULL o130, NULL o131, NULL o132, ENUser_5.[NAME] o133, NULL o134, NULL o135, NULL o136, NULL o137, NULL o138, NULL o139, NULL o140, NULL o141, NULL o142, ENUser_6.[NAME] o143" +
				", NULL o144, NULL o145, NULL o146, NULL o147, NULL o148, NULL o149, NULL o150, NULL o151");
				fromBuilder.Append(" FROM ((((((((({ProgressReportSection} ENProgressReportSection Inner JOIN {ProgressReportSections} ENProgressReportSections ON (ENProgressReportSections.[PROGRESSREPORTSECTIONID] = ENProgressReportSection.[ID]))  Left JOIN {Group} ENGroup ON (ENProgressReportSection.[GROUP] = ENGroup.[ID]))  Left JOIN {ProgressReport} ENProgressReport ON (ENProgressReportSections.[PROGRESSREPORTID] = ENProgressReport.[ID]))  Left JOIN {User} ENUser ON (ENProgressReportSection.[COURSEOUTLINEUPDATEDBY] = ENUser.[ID]))  Left JOIN {User} ENUser_2 ON (ENProgressReportSection.[COURSECOORDINATORUPDATEDBY] = ENUser_2.[ID]))  Left JOIN {User} ENUser_3 ON (ENProgressReportSection.[KEYSTRENGTHSUPDATEDBY] = ENUser_3.[ID]))  Left JOIN {User} ENUser_4 ON (ENProgressReportSection.[AREASFORDEVELOPMENTUPDATEDBY] = ENUser_4.[ID]))  Left JOIN {User} ENUser_5 ON (ENProgressReportSection.[PREDICTEDOUTCOMEUPDATEDBY] = ENUser_5.[ID]))  Left JOIN {User} ENUser_6 ON (ENProgressReportSection.[ATTENDANCEUPDATEDBY] = ENUser_6.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReportSections.[PROGRESSREPORTID] = @qpinP) AND (ENProgressReportSections.[PROGRESSREPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReportSections.[PROGRESSREPORTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReportSections.[PROGRESSREPORTSECTIONTYPE] = ");
				whereBuilder.Append("'" + ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("fFloxfgF1Em7zQJ43bgF4g")).ssId.Replace("'", "''") + "'");
				whereBuilder.Append(")");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList outParamList = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[11];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[5] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[6] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[7] = new BitArray(new bool[] {
					true
				}
				);
				opt[8] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[9] = new BitArray(new bool[] {
					false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[10] = new BitArray(new bool[] {
					true, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Specialist.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList = (RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Specialist.Preparation.GetProgressReportCategoriesByProgressReport.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList _tmp = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportCategoriesByProgressReportReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.ProgressReportSection_Specialist.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList = (RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.ProgressReportSection_Specialist.Preparation.GetProgressReportCategoriesByProgressReport.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wt_Container80") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_Container80");
			}
			if (id == "wt_Container123") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_Container123");
			}
			if (id == "wtIconExpand") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wtIconExpand");
			}
			if (id == "wt_If75") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_If75");
			}
			if (id == "wt_If75T") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_If75T");
			}
			if (id == "RichWidgets_wt_WebBlockInstance5") {
				return wt_WebBlockInstance84.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance5");
			}
			if (id == "wt_If75F") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_If75F");
			}
			if (id == "RichWidgets_wt_WebBlockInstance26") {
				return wt_WebBlockInstance84.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance26");
			}
			if (id == "wtVisibleCheckBoxContainer") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wtVisibleCheckBoxContainer");
			}
			if (id == "wt_CheckBox17") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_CheckBox17");
			}
			if (id == "wtTitleContainer") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wtTitleContainer");
			}
			if (id == "wt_InlineExpression167") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_InlineExpression167");
			}
			if (id == "wtStatusBarContainer") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wtStatusBarContainer");
			}
			if (id == "wt_WebBlockInstance90") {
				return wt_WebBlockInstance84.wtTitle.FindControl("wt_WebBlockInstance90");
			}
			if (id == "wtDetailWrapper") {
				return wt_WebBlockInstance84.wtListContent.FindControl("wtDetailWrapper");
			}
			if (id == "wt_If137") {
				return wt_WebBlockInstance84.wtListContent.FindControl("wt_If137");
			}
			if (id == "wt_If137T") {
				return wt_WebBlockInstance84.wtListContent.FindControl("wt_If137T");
			}
			if (id == "wtProgressReport_List2") {
				return wt_WebBlockInstance84.wtListContent.FindControl("wtProgressReport_List2");
			}
			if (id == "wt_If137F") {
				return wt_WebBlockInstance84.wtListContent.FindControl("wt_If137F");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.K77mm2szs5k_DwPPd2M18oQ";
			}
		}
	}

}
