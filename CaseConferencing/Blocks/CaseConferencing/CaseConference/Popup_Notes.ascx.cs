/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowCaseConference {
	public abstract class WBlkPopup_Notes: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamSessionId. Description:
		/// </summary>
		public int inParamSessionId = 0;
		/// <summary>
		/// Screen Input Parameter inParamCurriculumLeadId. Description:
		/// </summary>
		public int inParamCurriculumLeadId = 0;
		/// <summary>
		/// Screen Input Parameter inParamTeamId. Description:
		/// </summary>
		public int inParamTeamId = 0;
		/// <summary>
		/// Screen Input Parameter inParamGroupId. Description:
		/// </summary>
		public int inParamGroupId = 0;
		/// <summary>
		/// Screen Input Parameter inParamVisible. Description:
		/// </summary>
		public bool inParamVisible = false;
		/// <summary>
		/// Screen Input Parameter inParamtop. Description:
		/// </summary>
		public decimal inParamtop = 0.0M;
		/// <summary>
		/// Screen Input Parameter inParamleft. Description:
		/// </summary>
		public decimal inParamleft = 0.0M;
		/// <summary>
		/// Variable <code>varLcCurrentTab</code> that represents the Service Studio local variable
		///  <code>CurrentTab</code> <p>Description: </p>
		/// </summary>
		int varLcCurrentTab = 1;

		/// <summary>
		/// Variable <code>varLcNotes</code> that represents the Service Studio local variable
		///  <code>Notes</code> <p>Description: </p>
		/// </summary>
		string varLcNotes = "";

		/// <summary>
		/// Variable wtPopUpNote
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopUp wtPopUpNote;
		protected OutSystems.HubEdition.WebWidgets.Container wtTabWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperContent;
		protected OutSystems.HubEdition.WebWidgets.Container wtChangeStatus;
		protected OutSystems.HubEdition.WebWidgets.Container wtOverview2;
		protected OutSystems.HubEdition.WebWidgets.Container wtDescription;
		protected OutSystems.HubEdition.WebWidgets.Container wtResponsible2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtNoteDescriptionValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtNoteDescriptionValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLCCSessionTeamRecordList queryResGetCCSessionTeamsBySessionId_outParamList = new RLCCSessionTeamRecordList();
		int queryResGetCCSessionTeamsBySessionId_outParamCount = 0;
		RLCCSessionCourseRecordList queryResGetCCSessionCoursesByGroupId_outParamList = new RLCCSessionCourseRecordList();
		int queryResGetCCSessionCoursesByGroupId_outParamCount = 0;
		RLCCSessionCurriculumLeadRecordList queryResGetCCSessionCurriculumLeadById_outParamList = new RLCCSessionCurriculumLeadRecordList();
		int queryResGetCCSessionCurriculumLeadById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			if (inParamVisible) {
				if ((inParamCurriculumLeadId!=BuiltInFunction.NullIdentifier())) {
					// Query datasetGetCCSessionCurriculumLeadById
					int datasetGetCCSessionCurriculumLeadById_maxRecords = 0;
					queryResGetCCSessionCurriculumLeadById_outParamList = FuncssPreparation.datasetGetCCSessionCurriculumLeadById(heContext, datasetGetCCSessionCurriculumLeadById_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionCurriculumLeadById_outParamCount, inParamCurriculumLeadId
					, inParamSessionId
					);
					varLcNotes = queryResGetCCSessionCurriculumLeadById_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssNotes; // Notes = GetCCSessionCurriculumLeadById.List.Current.CCSessionCurriculumLead.Notes

				} else {
					if ((inParamTeamId!=BuiltInFunction.NullIdentifier())) {
						// Query datasetGetCCSessionTeamsBySessionId
						int datasetGetCCSessionTeamsBySessionId_maxRecords = 0;
						queryResGetCCSessionTeamsBySessionId_outParamList = FuncssPreparation.datasetGetCCSessionTeamsBySessionId(heContext, datasetGetCCSessionTeamsBySessionId_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionTeamsBySessionId_outParamCount, inParamSessionId
						, inParamTeamId
						);
						varLcNotes = queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ssENCCSessionTeam.ssNotes; // Notes = GetCCSessionTeamsBySessionId.List.Current.CCSessionTeam.Notes

					} else {
						if ((inParamGroupId!=BuiltInFunction.NullIdentifier())) {
							// Query datasetGetCCSessionCoursesByGroupId
							int datasetGetCCSessionCoursesByGroupId_maxRecords = 0;
							queryResGetCCSessionCoursesByGroupId_outParamList = FuncssPreparation.datasetGetCCSessionCoursesByGroupId(heContext, datasetGetCCSessionCoursesByGroupId_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionCoursesByGroupId_outParamCount, inParamGroupId
							, inParamSessionId
							);
							varLcNotes = queryResGetCCSessionCoursesByGroupId_outParamList.CurrentRec.ssENCCSessionCourse.ssNotes; // Notes = GetCCSessionCoursesByGroupId.List.Current.CCSessionCourse.Notes

						}

					}

				}

			}
		}
		static WBlkPopup_Notes() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtPopUpNote = (ssCaseConferencing.Flows.FlowCommon.WBlkPopUp) FindControl("wtPopUpNote");
			wtTabWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTabWrapper");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			wt_Container1 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container1");
			wtWrapperContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtWrapperContent");
			wtChangeStatus = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtChangeStatus");
			wtOverview2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtOverview2");
			wtDescription = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDescription");
			wtResponsible2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtResponsible2");
			wt_Container12 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container12");
			wt_Container26 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container26");
			wt_Container13 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container13");
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			wt_Container3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container3");
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(this, "wtNoteDescription", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamSessionId", inParamSessionId, 0);
			ViewStateAttributes.SetInViewState("inParamCurriculumLeadId", inParamCurriculumLeadId, 0);
			ViewStateAttributes.SetInViewState("inParamTeamId", inParamTeamId, 0);
			ViewStateAttributes.SetInViewState("inParamGroupId", inParamGroupId, 0);
			ViewStateAttributes.SetInViewState("inParamtop", inParamtop, 0.0M);
			ViewStateAttributes.SetInViewState("inParamleft", inParamleft, 0.0M);
			ViewStateAttributes.SetInViewState("varLcCurrentTab", varLcCurrentTab, 0);
			ViewStateAttributes.SetInViewState("varLcNotes", varLcNotes, "");
			ViewStateAttributes.SetInViewState("wtNoteDescription_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).Mandatory, false);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				inParamSessionId = (int) ViewStateAttributes.GetFromViewState("inParamSessionId", 0);
				inParamCurriculumLeadId = (int) ViewStateAttributes.GetFromViewState("inParamCurriculumLeadId", 0);
				inParamTeamId = (int) ViewStateAttributes.GetFromViewState("inParamTeamId", 0);
				inParamGroupId = (int) ViewStateAttributes.GetFromViewState("inParamGroupId", 0);
				inParamtop = (decimal) ViewStateAttributes.GetFromViewState("inParamtop", 0.0M);
				inParamleft = (decimal) ViewStateAttributes.GetFromViewState("inParamleft", 0.0M);
				varLcCurrentTab = (int) ViewStateAttributes.GetFromViewState("varLcCurrentTab", 0);
				varLcNotes = (string) ViewStateAttributes.GetFromViewState("varLcNotes", "");
				((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtNoteDescription_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wtNoteDescription");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wtNoteDescription");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KaQbrsi2GuUGx9CXYWcxCTA";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopUp.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("aQbrsi2GuUGx9CXYWcxCTA"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvSave: VarsBag {
			public int resCreateOrUpdateCCSessionTeam_outParamId = 0;

			public RLCCSessionCourseRecordList queryResGetCCSessionCoursesByGroupId2_outParamList = new RLCCSessionCourseRecordList();
			public int queryResGetCCSessionCoursesByGroupId2_outParamCount = 0;

			public RLCCSessionCurriculumLeadRecordList queryResGetCCSessionCurriculumLeadById2_outParamList = new RLCCSessionCurriculumLeadRecordList();
			public int queryResGetCCSessionCurriculumLeadById2_outParamCount = 0;

			public int resCreateOrUpdateCCSessionCourse_outParamId = 0;

			public RLCCSessionTeamRecordList queryResGetCCSessionTeamsBySessionId2_outParamList = new RLCCSessionTeamRecordList();
			public int queryResGetCCSessionTeamsBySessionId2_outParamCount = 0;

			public int resCreateOrUpdateCCSessionCurriculumLead_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				if ((((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).TypedValue == "")) {
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, "You need to insert the description", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
					// Update Screen
					return true;

				} else {
					if ((inParamCurriculumLeadId!=BuiltInFunction.NullIdentifier())) {
						// Query datasetGetCCSessionCurriculumLeadById2
						int datasetGetCCSessionCurriculumLeadById2_maxRecords = 0;
						localVars.queryResGetCCSessionCurriculumLeadById2_outParamList = FuncCommandSave.datasetGetCCSessionCurriculumLeadById2(heContext, datasetGetCCSessionCurriculumLeadById2_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCCSessionCurriculumLeadById2_outParamCount, inParamCurriculumLeadId
						, inParamSessionId
						);
						localVars.queryResGetCCSessionCurriculumLeadById2_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssNotes = ((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).TypedValue; // GetCCSessionCurriculumLeadById2.List.Current.CCSessionCurriculumLead.Notes = NoteDescription.TypedValue
						localVars.queryResGetCCSessionCurriculumLeadById2_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssSessionId = inParamSessionId; // GetCCSessionCurriculumLeadById2.List.Current.CCSessionCurriculumLead.SessionId = SessionId
						localVars.queryResGetCCSessionCurriculumLeadById2_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssCurriculumLead = inParamCurriculumLeadId; // GetCCSessionCurriculumLeadById2.List.Current.CCSessionCurriculumLead.CurriculumLead = CurriculumLeadId
						// CreateOrUpdateCCSessionCurriculumLead
						ExtendedActions.CreateOrUpdateCCSessionCurriculumLead(heContext, localVars.queryResGetCCSessionCurriculumLeadById2_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetCCSessionCurriculumLeadById2_outParamList.CurrentRec, out localVars.resCreateOrUpdateCCSessionCurriculumLead_outParamId);

					} else {
						if ((inParamTeamId!=BuiltInFunction.NullIdentifier())) {
							// Query datasetGetCCSessionTeamsBySessionId2
							int datasetGetCCSessionTeamsBySessionId2_maxRecords = 0;
							localVars.queryResGetCCSessionTeamsBySessionId2_outParamList = FuncCommandSave.datasetGetCCSessionTeamsBySessionId2(heContext, datasetGetCCSessionTeamsBySessionId2_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCCSessionTeamsBySessionId2_outParamCount, inParamSessionId
							, inParamTeamId
							);
							localVars.queryResGetCCSessionTeamsBySessionId2_outParamList.CurrentRec.ssENCCSessionTeam.ssNotes = ((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).TypedValue; // GetCCSessionTeamsBySessionId2.List.Current.CCSessionTeam.Notes = NoteDescription.TypedValue
							localVars.queryResGetCCSessionTeamsBySessionId2_outParamList.CurrentRec.ssENCCSessionTeam.ssSessionId = inParamSessionId; // GetCCSessionTeamsBySessionId2.List.Current.CCSessionTeam.SessionId = SessionId
							localVars.queryResGetCCSessionTeamsBySessionId2_outParamList.CurrentRec.ssENCCSessionTeam.ssTeamId = inParamTeamId; // GetCCSessionTeamsBySessionId2.List.Current.CCSessionTeam.TeamId = TeamId
							// CreateOrUpdateCCSessionTeam
							ExtendedActions.CreateOrUpdateCCSessionTeam(heContext, localVars.queryResGetCCSessionTeamsBySessionId2_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetCCSessionTeamsBySessionId2_outParamList.CurrentRec, out localVars.resCreateOrUpdateCCSessionTeam_outParamId);

						} else {
							if ((inParamGroupId!=BuiltInFunction.NullIdentifier())) {
								// Query datasetGetCCSessionCoursesByGroupId2
								int datasetGetCCSessionCoursesByGroupId2_maxRecords = 0;
								localVars.queryResGetCCSessionCoursesByGroupId2_outParamList = FuncCommandSave.datasetGetCCSessionCoursesByGroupId2(heContext, datasetGetCCSessionCoursesByGroupId2_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCCSessionCoursesByGroupId2_outParamCount, inParamGroupId
								, inParamSessionId
								);
								localVars.queryResGetCCSessionCoursesByGroupId2_outParamList.CurrentRec.ssENCCSessionCourse.ssNotes = ((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).TypedValue; // GetCCSessionCoursesByGroupId2.List.Current.CCSessionCourse.Notes = NoteDescription.TypedValue
								localVars.queryResGetCCSessionCoursesByGroupId2_outParamList.CurrentRec.ssENCCSessionCourse.ssSessionId = inParamSessionId; // GetCCSessionCoursesByGroupId2.List.Current.CCSessionCourse.SessionId = SessionId
								localVars.queryResGetCCSessionCoursesByGroupId2_outParamList.CurrentRec.ssENCCSessionCourse.ssGroupId = inParamGroupId; // GetCCSessionCoursesByGroupId2.List.Current.CCSessionCourse.GroupId = GroupId
								// CreateOrUpdateCCSessionCourse
								ExtendedActions.CreateOrUpdateCCSessionCourse(heContext, localVars.queryResGetCCSessionCoursesByGroupId2_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetCCSessionCoursesByGroupId2_outParamList.CurrentRec, out localVars.resCreateOrUpdateCCSessionCourse_outParamId);

							}

						}

					}
					// Invisible
					inParamVisible = false; // Visible = False
					varLcCurrentTab = 1; // CurrentTab = 1
					// NotifyWidget
					ExtendedActions.NotifyWidget(heContext, RuntimeID, "");
					// Refresh Widget (wtPopUpNote)
					((OSPageViewState) Page).AjaxRefresh(wtPopUpNote, "None", StoreViewState);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void webBlckPopUpNote_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkPopUp widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopUp) sender;
				widget.inParamVisible = inParamVisible;
				widget.inParamWidth = 500;
				widget.inParamHeight = 0;
				widget.inParamTop = (inParamtop+41M);
				widget.inParamLeft = (inParamleft+249M);
				widget.inParamBottom = (-1);
				widget.inParamRight = (-1);
				widget.inParamArrowLeft = (-1);
				widget.inParamArrowRight = (-1);
				widget.inParamArrowTop = (-1);
				widget.inParamArrowBottom = (-1);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTabWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTabWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTabWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "height:30px;text-align: left;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntTabWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTabWrapper)
		/// </summary>
		/// <returns>The Visible State of wtTabWrapper</returns>
		public bool cntTabWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container28_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((WebControl) sender).CssClass = (((varLcCurrentTab==1)) ?("TabEnabled"):("TabDisabled"));
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 225px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container28_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "height:100%;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("v8O5VJfAtEuGAFl1unUekw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = Jlg2tPeXQEmaU5ugJ+T7Kw) Expression: "Note"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression24() {
			return "Note";
		}
		public void cntWrapperContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "border: 1px solid #E8E8E8;text-align:left;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperContent)
		/// </summary>
		/// <returns>The Visible State of wtWrapperContent</returns>
		public bool cntWrapperContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntChangeStatus_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntChangeStatus_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntChangeStatus_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntChangeStatus_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtChangeStatus)
		/// </summary>
		/// <returns>The Visible State of wtChangeStatus</returns>
		public bool cntChangeStatus_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntOverview2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntOverview2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntOverview2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:21px;color:#757575;font-size: 12px;text-align: left;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntOverview2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtOverview2)
		/// </summary>
		/// <returns>The Visible State of wtOverview2</returns>
		public bool cntOverview2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntDescription_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDescription_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDescription_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:5px;font-weight: bold;width:300px;font-size: 13px;margin-top:0px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntDescription_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDescription)
		/// </summary>
		/// <returns>The Visible State of wtDescription</returns>
		public bool cntDescription_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Text18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Text18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Text18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight: bold;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntResponsible2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntResponsible2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntResponsible2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntResponsible2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtResponsible2)
		/// </summary>
		/// <returns>The Visible State of wtResponsible2</returns>
		public bool cntResponsible2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:inline;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwtNoteDescription_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwtNoteDescription_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwtNoteDescription_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color: #6F6A6A;font-size: 15px;padding: 1px 6px;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtNoteDescription_input_value() {
			if (("" !=varLcNotes)) {
				return varLcNotes;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtNoteDescription");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcNotes;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtNoteDescription_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcNotes = ""; 
				} else {
					varLcNotes = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcNotes = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtNoteDescription)
		/// </summary>
		/// <returns>The Visible State of wtNoteDescription</returns>
		public bool inputwtNoteDescription_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtNoteDescription)
		/// </summary>
		/// <returns>The Enabled State of wtNoteDescription</returns>
		public bool inputwtNoteDescription_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtNoteDescription)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtNoteDescription</returns>
		public bool inputwtNoteDescription_isMandatory() {
			return false;
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container13_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container13_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void Hunspell_webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
				widget.inParamTextInputId = this.FindControl("wtNoteDescription").ClientID;
				widget.inParamExtraStyle = "";
				widget.inParamInPopupWindow = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container3
		/// </summary>
		public void cnt_Container3_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSave(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandSave {

			/// <summary>
			/// Query Function "GetCCSessionCoursesByGroupId2" of Action "Save"
			/// </summary>
			public static RLCCSessionCourseRecordList datasetGetCCSessionCoursesByGroupId2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSessionCourse.[ID] o1, ENCCSessionCourse.[SESSIONID] o2, ENCCSessionCourse.[GROUPID] o3, ENCCSessionCourse.[NOTES] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CCSessionCourse} ENCCSessionCourse");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionCourse.[GROUPID] = @qpinP) AND (ENCCSessionCourse.[GROUPID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionCourse.[GROUPID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionCourse.[SESSIONID] = @qpinP1) AND (ENCCSessionCourse.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionCourse.[SESSIONID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionCourseRecordList outParamList = new RLCCSessionCourseRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionCourseRecordList _tmp = new RLCCSessionCourseRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Save.GetCCSessionCoursesByGroupId2.List");
						outParamList = (RLCCSessionCourseRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Save.GetCCSessionCoursesByGroupId2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionCourseRecordList _tmp = new RLCCSessionCourseRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Save.GetCCSessionCoursesByGroupId2.List");
							outParamList = (RLCCSessionCourseRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Save.GetCCSessionCoursesByGroupId2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCCSessionCurriculumLeadById2" of Action "Save"
			/// </summary>
			public static RLCCSessionCurriculumLeadRecordList datasetGetCCSessionCurriculumLeadById2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSessionCurriculumLead.[ID] o1, ENCCSessionCurriculumLead.[SESSIONID] o2, ENCCSessionCurriculumLead.[CURRICULUMLEAD] o3, ENCCSessionCurriculumLead.[NOTES] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CCSessionCurriculumLead} ENCCSessionCurriculumLead");
				whereBuilder.Append(" WHERE ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionCurriculumLead.[SESSIONID] = @qpinP1) AND (ENCCSessionCurriculumLead.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionCurriculumLead.[SESSIONID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionCurriculumLead.[CURRICULUMLEAD] = @qpinP) AND (ENCCSessionCurriculumLead.[CURRICULUMLEAD] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionCurriculumLead.[CURRICULUMLEAD] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionCurriculumLeadRecordList outParamList = new RLCCSessionCurriculumLeadRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionCurriculumLeadRecordList _tmp = new RLCCSessionCurriculumLeadRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Save.GetCCSessionCurriculumLeadById2.List");
						outParamList = (RLCCSessionCurriculumLeadRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Save.GetCCSessionCurriculumLeadById2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionCurriculumLeadRecordList _tmp = new RLCCSessionCurriculumLeadRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Save.GetCCSessionCurriculumLeadById2.List");
							outParamList = (RLCCSessionCurriculumLeadRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Save.GetCCSessionCurriculumLeadById2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCCSessionTeamsBySessionId2" of Action "Save"
			/// </summary>
			public static RLCCSessionTeamRecordList datasetGetCCSessionTeamsBySessionId2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSessionTeam.[ID] o1, ENCCSessionTeam.[SESSIONID] o2, ENCCSessionTeam.[TEAMID] o3, ENCCSessionTeam.[NOTES] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CCSessionTeam} ENCCSessionTeam");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionTeam.[SESSIONID] = @qpinP) AND (ENCCSessionTeam.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionTeam.[SESSIONID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionTeam.[TEAMID] = @qpinP1) AND (ENCCSessionTeam.[TEAMID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionTeam.[TEAMID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionTeamRecordList outParamList = new RLCCSessionTeamRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionTeamRecordList _tmp = new RLCCSessionTeamRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Save.GetCCSessionTeamsBySessionId2.List");
						outParamList = (RLCCSessionTeamRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Save.GetCCSessionTeamsBySessionId2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionTeamRecordList _tmp = new RLCCSessionTeamRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Save.GetCCSessionTeamsBySessionId2.List");
							outParamList = (RLCCSessionTeamRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Save.GetCCSessionTeamsBySessionId2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetCCSessionTeamsBySessionId" of Action "Preparation"
			/// </summary>
			public static RLCCSessionTeamRecordList datasetGetCCSessionTeamsBySessionId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENCCSessionTeam.[NOTES] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CCSessionTeam} ENCCSessionTeam");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionTeam.[SESSIONID] = @qpinP) AND (ENCCSessionTeam.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionTeam.[SESSIONID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionTeam.[TEAMID] = @qpinP1) AND (ENCCSessionTeam.[TEAMID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionTeam.[TEAMID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionTeamRecordList outParamList = new RLCCSessionTeamRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionTeamRecordList _tmp = new RLCCSessionTeamRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionTeamsBySessionId.List");
						outParamList = (RLCCSessionTeamRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionTeamsBySessionId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionTeamRecordList _tmp = new RLCCSessionTeamRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionTeamsBySessionId.List");
							outParamList = (RLCCSessionTeamRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionTeamsBySessionId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCCSessionCoursesByGroupId" of Action "Preparation"
			/// </summary>
			public static RLCCSessionCourseRecordList datasetGetCCSessionCoursesByGroupId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENCCSessionCourse.[NOTES] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CCSessionCourse} ENCCSessionCourse");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionCourse.[GROUPID] = @qpinP) AND (ENCCSessionCourse.[GROUPID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionCourse.[GROUPID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionCourse.[SESSIONID] = @qpinP1) AND (ENCCSessionCourse.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionCourse.[SESSIONID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionCourseRecordList outParamList = new RLCCSessionCourseRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionCourseRecordList _tmp = new RLCCSessionCourseRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCoursesByGroupId.List");
						outParamList = (RLCCSessionCourseRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCoursesByGroupId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionCourseRecordList _tmp = new RLCCSessionCourseRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCoursesByGroupId.List");
							outParamList = (RLCCSessionCourseRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCoursesByGroupId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCCSessionCurriculumLeadById" of Action "Preparation"
			/// </summary>
			public static RLCCSessionCurriculumLeadRecordList datasetGetCCSessionCurriculumLeadById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENCCSessionCurriculumLead.[NOTES] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CCSessionCurriculumLead} ENCCSessionCurriculumLead");
				whereBuilder.Append(" WHERE ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionCurriculumLead.[SESSIONID] = @qpinP1) AND (ENCCSessionCurriculumLead.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionCurriculumLead.[SESSIONID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionCurriculumLead.[CURRICULUMLEAD] = @qpinP) AND (ENCCSessionCurriculumLead.[CURRICULUMLEAD] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionCurriculumLead.[CURRICULUMLEAD] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionCurriculumLeadRecordList outParamList = new RLCCSessionCurriculumLeadRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionCurriculumLeadRecordList _tmp = new RLCCSessionCurriculumLeadRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCurriculumLeadById.List");
						outParamList = (RLCCSessionCurriculumLeadRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCurriculumLeadById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionCurriculumLeadRecordList _tmp = new RLCCSessionCurriculumLeadRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCurriculumLeadById.List");
							outParamList = (RLCCSessionCurriculumLeadRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.Popup_Notes.Preparation.GetCCSessionCurriculumLeadById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wtTabWrapper") {
				return wtPopUpNote.wtPopupContent.FindControl("wtTabWrapper");
			}
			if (id == "wt_Container28") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container28");
			}
			if (id == "wt_Table16") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Table16");
			}
			if (id == "wt_TableRow20") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableRow20");
			}
			if (id == "wt_TableCell23") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableCell23");
			}
			if (id == "wt_Container1") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container1");
			}
			if (id == "RichWidgets_wt_WebBlockInstance14") {
				return wtPopUpNote.wtPopupContent.FindControl("RichWidgets_wt_WebBlockInstance14");
			}
			if (id == "wt_InlineExpression24") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_InlineExpression24");
			}
			if (id == "wtWrapperContent") {
				return wtPopUpNote.wtPopupContent.FindControl("wtWrapperContent");
			}
			if (id == "wtChangeStatus") {
				return wtPopUpNote.wtPopupContent.FindControl("wtChangeStatus");
			}
			if (id == "wtOverview2") {
				return wtPopUpNote.wtPopupContent.FindControl("wtOverview2");
			}
			if (id == "wtDescription") {
				return wtPopUpNote.wtPopupContent.FindControl("wtDescription");
			}
			if (id == "wt_Text18") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Text18");
			}
			if (id == "wtResponsible2") {
				return wtPopUpNote.wtPopupContent.FindControl("wtResponsible2");
			}
			if (id == "wt_Container12") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container12");
			}
			if (id == "wtNoteDescription") {
				return wtPopUpNote.wtPopupContent.FindControl("wtNoteDescription");
			}
			if (id == "wt_Container26") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container26");
			}
			if (id == "wt_Table21") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Table21");
			}
			if (id == "wt_TableRow9") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableRow9");
			}
			if (id == "wt_TableCell2") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableCell2");
			}
			if (id == "wt_Container13") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container13");
			}
			if (id == "Hunspell_wt_WebBlockInstance10") {
				return wtPopUpNote.wtPopupContent.FindControl("Hunspell_wt_WebBlockInstance10");
			}
			if (id == "wt_TableCell6") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableCell6");
			}
			if (id == "wt_Container11") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container11");
			}
			if (id == "wt_Container3") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container3");
			}
			if (id == "RichWidgets_wt_WebBlockInstance15") {
				return wtPopUpNote.wtPopupContent.FindControl("RichWidgets_wt_WebBlockInstance15");
			}
			if (id == "wt_Text8") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Text8");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KaQbrsi2GuUGx9CXYWcxCTA";
			}
		}
	}

}
