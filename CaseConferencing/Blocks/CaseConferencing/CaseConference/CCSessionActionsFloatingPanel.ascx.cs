/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowCaseConference {
	public abstract class WBlkCCSessionActionsFloatingPanel: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamCCSessionId. Description:
		/// </summary>
		public int inParamCCSessionId = 0;
		/// <summary>
		/// Screen Input Parameter inParamStepId. Description: Step =1 , Back to List Step = 2 Back to Cluster
		///  Step = 3 , Back to FilterPage Step = 4 , Back to StaffView
		/// </summary>
		public int inParamStepId = 0;
		/// <summary>
		/// Screen Input Parameter inParamIsStaffView. Description:
		/// </summary>
		public bool inParamIsStaffView = false;
		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Variable <code>varLcShowRevised</code> that represents the Service Studio local variable
		///  <code>ShowRevised</code> <p>Description: </p>
		/// </summary>
		bool varLcShowRevised = false;

		/// <summary>
		/// Variable "True" if the Widget wt_If12
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If12T;

		/// <summary>
		/// Variable "True" if the Widget wt_If12
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If12F;
		protected OutSystems.HubEdition.WebWidgets.Container wtSlider;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		/// <summary>
		/// Variable (wtEndSession) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEndSession;
		protected OutSystems.HubEdition.WebWidgets.Container wtTabHidden;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLClusterCCSessionRecordList queryResGetCCSessionById_outParamList = new RLClusterCCSessionRecordList();
		int queryResGetCCSessionById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetCCSessionById
			int datasetGetCCSessionById_maxRecords = 0;
			queryResGetCCSessionById_outParamList = FuncssPreparation.datasetGetCCSessionById(heContext, datasetGetCCSessionById_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionById_outParamCount, inParamCCSessionId
			);
		}
		static WBlkCCSessionActionsFloatingPanel() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wtEndSession != null) {
				this.wtEndSession.Click += new System.EventHandler(this.wtEndSession_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetCCSessionById_outParamList.

			int tmpcurrentrownumberqueryResGetCCSessionById_outParamList = queryResGetCCSessionById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCCSessionById_outParamList = queryResGetCCSessionById_outParamList.Eof;
			ArrayList storequeryResGetCCSessionById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCCSessionById_outParamList to the storequeryResGetCCSessionById_outParamList
			if (!queryResGetCCSessionById_outParamList.Empty) {
				try {
					queryResGetCCSessionById_outParamList.StartIteration();

					while (!queryResGetCCSessionById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCCSessionById_outParamList = new ArrayList();
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssId == 0?(object) null: queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssId);
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssDescription == "" ?(object) null: queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssDescription);
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate);
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, true, false, false
						}
						))));
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, false, true, true
						}
						))));
						storequeryResGetCCSessionById_outParamList.Add(tmpFieldsqueryResGetCCSessionById_outParamList);
						queryResGetCCSessionById_outParamList.Advance();
					}
				} finally {
					queryResGetCCSessionById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCCSessionById_outParamList", storequeryResGetCCSessionById_outParamList, null);

			#endregion


			#region store queryResGetCCSessionById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCCSessionById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCCSessionById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCCSessionById_outParamList_eof", tmpeofqueryResGetCCSessionById_outParamList, false);
			queryResGetCCSessionById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCCSessionById_outParamList, tmpeofqueryResGetCCSessionById_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamCCSessionId", inParamCCSessionId, 0);
			ViewStateAttributes.SetInViewState("inParamStepId", inParamStepId, 0);
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("varLcShowRevised", varLcShowRevised, false);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetCCSessionById_outParamList.

				// Read the needed fields of queryResGetCCSessionById_outParamList from storequeryResGetCCSessionById_outParamList
				queryResGetCCSessionById_outParamList = new RLClusterCCSessionRecordList();
				ArrayList storequeryResGetCCSessionById_outParamList;
				storequeryResGetCCSessionById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCCSessionById_outParamList", null);
				if (storequeryResGetCCSessionById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCCSessionById_outParamList in storequeryResGetCCSessionById_outParamList) {
						if (tmpFieldsqueryResGetCCSessionById_outParamList != null) {
							// Aux current record variable
							RCClusterCCSessionRecord tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList = new RCClusterCCSessionRecord(null);
							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ssId = (int) (tmpFieldsqueryResGetCCSessionById_outParamList[0] == null ? 0: tmpFieldsqueryResGetCCSessionById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ssDescription = (string) (tmpFieldsqueryResGetCCSessionById_outParamList[1] == null ? "": tmpFieldsqueryResGetCCSessionById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ssEndDate = (DateTime) (tmpFieldsqueryResGetCCSessionById_outParamList[2] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetCCSessionById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCCSessionById_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCCSessionById_outParamList[4]);

							queryResGetCCSessionById_outParamList.Append(tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList);
						}
					}
				}
				queryResGetCCSessionById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCCSessionById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCCSessionById_outParamList;
				tmpcurrentrownumberqueryResGetCCSessionById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCCSessionById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCCSessionById_outParamList;
				tmpeofqueryResGetCCSessionById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCCSessionById_outParamList_eof", false);
				queryResGetCCSessionById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCCSessionById_outParamList, tmpeofqueryResGetCCSessionById_outParamList);

				#endregion

				inParamCCSessionId = (int) ViewStateAttributes.GetFromViewState("inParamCCSessionId", 0);
				inParamStepId = (int) ViewStateAttributes.GetFromViewState("inParamStepId", 0);
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				varLcShowRevised = (bool) ViewStateAttributes.GetFromViewState("varLcShowRevised", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KI7AIRB5XXE2HnvDKWPOsaw";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/CaseConference/CCSessionActionsFloatingPanel.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\CaseConference\\CCSessionActionsFloatingPanel.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\CaseConference\\CCSessionActionsFloatingPanel.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("I7AIRB5XXE2HnvDKWPOsaw"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvEndSession: VarsBag {
			public int resCreateOrUpdateCCSession_outParamId = 0;

			public lcvEndSession() {
			}
		}
		/// <summary>
		/// Action <code>CommandEndSession</code> that represents the Service Studio screen action
		///  <code>EndSession</code> <p> Description: </p>
		/// </summary>
		private bool CommandEndSession(HeContext heContext) {
			CheckPermissions(heContext);
			lcvEndSession localVars = new lcvEndSession();
			try {
				queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate = BuiltInFunction.CurrDateTime(); // GetCCSessionById.List.Current.CCSession.EndDate = CurrDateTime
				// CreateOrUpdateCCSession
				ExtendedActions.CreateOrUpdateCCSession(heContext, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ChangedAttributes, ((RCCCSessionRecord) queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession), out localVars.resCreateOrUpdateCCSession_outParamId);
				// ExceptionFeedbackMessage2
				Actions.ActionFeedback_Message(heContext, (("Session " +queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssDescription) + " ended"), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
				// Destination = CCSession_List

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						} else {
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return false;

						}
					}
				} else {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							Server.Transfer("CCSession_List.aspx");
							return false;

						} else {
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return false;

						}
					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandBack</code> that represents the Service Studio screen action <code>Back</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandBack(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((inParamStepId==1)) {
					// Destination = CCSession_List

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
								ArrayList screenParameters = new ArrayList();
								Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
								return false;

							} else {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
								((OSPage) Page).ClearErrorHandler();
								Response.BufferOutput = true;
								if (!OSPage.IsAjaxRequest) {
									Response.Redirect(sURL);
								} else {
									((OSPageViewState) Page).RedirectLocation = sURL;
								}
								return false;

							}
						}
					} else {
						// go to target page
						{

							if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
								ArrayList screenParameters = new ArrayList();
								Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
								Server.Transfer("CCSession_List.aspx");
								return false;

							} else {
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
								ArrayList screenParameters = new ArrayList();
								Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
								((OSPage) Page).ClearErrorHandler();
								Response.BufferOutput = true;
								if (!OSPage.IsAjaxRequest) {
									Response.Redirect(sURL);
								} else {
									((OSPageViewState) Page).RedirectLocation = sURL;
								}
								return false;

							}
						}
					}

				} else {
					if ((inParamStepId==2)) {
						// Destination = CCSession_Edit

						if (OSPage.IsAjaxRequest) {
							// go to target page
							{

								if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
									((OSPage) Page).ClearErrorHandler();
									// get parameters
									heContext.Session["_ScreenParametersKey"] = "jHNbl_Td0ki81a3x3GKPSQ";
									ArrayList screenParameters = new ArrayList();
									screenParameters.Add(inParamCCSessionId);
									screenParameters.Add("");
									Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_Edit"] = screenParameters;
									string sURLQuery = "CCSessionId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
									sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
									string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_Edit.aspx" + sURLQuery;
									((OSPageViewState) Page).RedirectLocation = sURL;
									return false;

								} else {
									string sURLQuery = "CCSessionId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
									sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
									string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_Edit.aspx" + sURLQuery;
									((OSPage) Page).ClearErrorHandler();
									Response.BufferOutput = true;
									if (!OSPage.IsAjaxRequest) {
										Response.Redirect(sURL);
									} else {
										((OSPageViewState) Page).RedirectLocation = sURL;
									}
									return false;

								}
							}
						} else {
							// go to target page
							{

								if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
									((OSPage) Page).ClearErrorHandler();
									// get parameters
									heContext.Session["_ScreenParametersKey"] = "jHNbl_Td0ki81a3x3GKPSQ";
									ArrayList screenParameters = new ArrayList();
									screenParameters.Add(inParamCCSessionId);
									screenParameters.Add("");
									Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_Edit"] = screenParameters;
									Server.Transfer("CCSession_Edit.aspx");
									return false;

								} else {
									// get parameters
									heContext.Session["_ScreenParametersKey"] = "jHNbl_Td0ki81a3x3GKPSQ";
									ArrayList screenParameters = new ArrayList();
									screenParameters.Add(inParamCCSessionId);
									screenParameters.Add("");
									Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_Edit"] = screenParameters;
									string sURLQuery = null;
									sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
									string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_Edit.aspx" + sURLQuery;
									((OSPage) Page).ClearErrorHandler();
									Response.BufferOutput = true;
									if (!OSPage.IsAjaxRequest) {
										Response.Redirect(sURL);
									} else {
										((OSPageViewState) Page).RedirectLocation = sURL;
									}
									return false;

								}
							}
						}

					} else {
						if ((inParamStepId==3)) {
							// Destination = CCSessionStep2_Edit

							if (OSPage.IsAjaxRequest) {
								// go to target page
								{

									if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
										((OSPage) Page).ClearErrorHandler();
										// get parameters
										heContext.Session["_ScreenParametersKey"] = "IcOz76lGiUaF70zBiTnCVw";
										ArrayList screenParameters = new ArrayList();
										screenParameters.Add(inParamCCSessionId);
										Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = screenParameters;
										string sURLQuery = "CCSessionId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
										sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
										string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSessionStep2_Edit.aspx" + sURLQuery;
										((OSPageViewState) Page).RedirectLocation = sURL;
										return false;

									} else {
										string sURLQuery = "CCSessionId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
										sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
										string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSessionStep2_Edit.aspx" + sURLQuery;
										((OSPage) Page).ClearErrorHandler();
										Response.BufferOutput = true;
										if (!OSPage.IsAjaxRequest) {
											Response.Redirect(sURL);
										} else {
											((OSPageViewState) Page).RedirectLocation = sURL;
										}
										return false;

									}
								}
							} else {
								// go to target page
								{

									if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
										((OSPage) Page).ClearErrorHandler();
										// get parameters
										heContext.Session["_ScreenParametersKey"] = "IcOz76lGiUaF70zBiTnCVw";
										ArrayList screenParameters = new ArrayList();
										screenParameters.Add(inParamCCSessionId);
										Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = screenParameters;
										Server.Transfer("CCSessionStep2_Edit.aspx");
										return false;

									} else {
										// get parameters
										heContext.Session["_ScreenParametersKey"] = "IcOz76lGiUaF70zBiTnCVw";
										ArrayList screenParameters = new ArrayList();
										screenParameters.Add(inParamCCSessionId);
										Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = screenParameters;
										string sURLQuery = null;
										sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
										string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSessionStep2_Edit.aspx" + sURLQuery;
										((OSPage) Page).ClearErrorHandler();
										Response.BufferOutput = true;
										if (!OSPage.IsAjaxRequest) {
											Response.Redirect(sURL);
										} else {
											((OSPageViewState) Page).RedirectLocation = sURL;
										}
										return false;

									}
								}
							}

						} else {
							if ((inParamStepId==4)) {
								// Destination = StaffView

								if (OSPage.IsAjaxRequest) {
									// go to target page
									{

										if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
											((OSPage) Page).ClearErrorHandler();
											// get parameters
											heContext.Session["_ScreenParametersKey"] = "j8jDU90qoUqC4OOZCvawmQ";
											ArrayList screenParameters = new ArrayList();
											screenParameters.Add(inParamCourseCode);
											screenParameters.Add(inParamCCSessionId);
											Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StaffView"] = screenParameters;
											string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(inParamCourseCode) + "&" +
											 "SessionID=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
											sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
											string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "StaffView.aspx" + sURLQuery;
											((OSPageViewState) Page).RedirectLocation = sURL;
											return false;

										} else {
											string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(inParamCourseCode) + "&" +
											 "SessionID=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
											sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
											string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "StaffView.aspx" + sURLQuery;
											((OSPage) Page).ClearErrorHandler();
											Response.BufferOutput = true;
											if (!OSPage.IsAjaxRequest) {
												Response.Redirect(sURL);
											} else {
												((OSPageViewState) Page).RedirectLocation = sURL;
											}
											return false;

										}
									}
								} else {
									// go to target page
									{

										if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
											((OSPage) Page).ClearErrorHandler();
											// get parameters
											heContext.Session["_ScreenParametersKey"] = "j8jDU90qoUqC4OOZCvawmQ";
											ArrayList screenParameters = new ArrayList();
											screenParameters.Add(inParamCourseCode);
											screenParameters.Add(inParamCCSessionId);
											Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StaffView"] = screenParameters;
											Server.Transfer("StaffView.aspx");
											return false;

										} else {
											// get parameters
											heContext.Session["_ScreenParametersKey"] = "j8jDU90qoUqC4OOZCvawmQ";
											ArrayList screenParameters = new ArrayList();
											screenParameters.Add(inParamCourseCode);
											screenParameters.Add(inParamCCSessionId);
											Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StaffView"] = screenParameters;
											string sURLQuery = null;
											sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
											string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "StaffView.aspx" + sURLQuery;
											((OSPage) Page).ClearErrorHandler();
											Response.BufferOutput = true;
											if (!OSPage.IsAjaxRequest) {
												Response.Redirect(sURL);
											} else {
												((OSPageViewState) Page).RedirectLocation = sURL;
											}
											return false;

										}
									}
								}

							} else {
								// Update Screen
								return true;

							}

						}

					}

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandShowRevised</code> that represents the Service Studio screen action
		///  <code>ShowRevised</code> <p> Description: </p>
		/// </summary>
		private bool CommandShowRevised(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, Convert.ToString(((varLcShowRevised) ?(1):(0))));
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandLeaveSession</code> that represents the Service Studio screen action
		///  <code>LeaveSession</code> <p> Description: </p>
		/// </summary>
		private bool CommandLeaveSession(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Destination = CCSession_List

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						} else {
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return false;

						}
					}
				} else {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							Server.Transfer("CCSession_List.aspx");
							return false;

						} else {
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return false;

						}
					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		bool if_wt_If12_hasRun=false;
		bool if_wt_If12_evalResult;
		public bool if_wt_If12() {
			if (if_wt_If12_hasRun) {
				if_wt_If12_hasRun = false;
				return if_wt_If12_evalResult;
			}
			if_wt_If12_hasRun = true;
			if_wt_If12_evalResult = (inParamCCSessionId!=BuiltInFunction.NullIdentifier());
			return if_wt_If12_evalResult;
		}

		public void cntSlider_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSlider_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSlider_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSlider_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSlider)
		/// </summary>
		/// <returns>The Visible State of wtSlider</returns>
		public bool cntSlider_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("onclick", (((("$(\'#" +wtSlider.ClientID) + "\').hide(1000);$(\'#") +wtTabHidden.ClientID) + "\').show(1000);").ToString());
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("tA9UoHbV+EGjqPoq9SOyQg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container14_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container14_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		/// <summary>
		/// Gets the URL of the image (wt_Image5)
		/// </summary>
		/// <returns>URL of the Image (wt_Image5)</returns>
		public string img_Image5_getURL() {
			string url = ("img/" +queryResGetCCSessionById_outParamList.CurrentRec.ssENCluster.ssIconFileName);
			url = url.Replace("&amp;", "&");
			// remove ascx path from image src
			if (url != null && !url.Contains(":") && !url.StartsWith("/") && !url.StartsWith("\\")) {
				url = "../../../" + url;
			}
			return url; 
		}
		/// <summary>
		/// Gets the Height of the image (wt_Image5)
		/// </summary>
		/// <returns>Height of the Image (wt_Image5)</returns>
		public string img_Image5_actualHeight() {
			return HttpUtility.HtmlEncode("60");
		}
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return inParamIsStaffView;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				chk_CheckBox24_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string chk_CheckBox24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-top:4px;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox24
		/// </summary>
		public void chk_CheckBox24_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandShowRevised(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box ETTu6hyWX0eLKOwrJdnEfQ
		/// </summary>
		/// <returns>The Value of the Check Box ETTu6hyWX0eLKOwrJdnEfQ</returns>
		public bool chk_CheckBox24_checked_value() {
			return varLcShowRevised;
		}
		public void chk_CheckBox24_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				varLcShowRevised = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox24)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox24</returns>
		public bool chk_CheckBox24_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox24)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox24</returns>
		public bool chk_CheckBox24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container2_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container2
		/// </summary>
		public void cnt_Container2_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandBack(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("ZNdxV5yXsUy60s39HmNxZw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container16
		/// </summary>
		public void cnt_Container16_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandLeaveSession(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("onclick", (("document.getElementById(\'" +wtEndSession.ClientID) + "\').click();").ToString());
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void lnkEndSession_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				string msg = OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.JavaScriptEscString("This will end the Case Conferencing session, do you want to continue?");
				((OutSystems.HubEdition.WebWidgets.LinkButton) sender).ConfirmationMessage = msg;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEndSession_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandEndSession(heContext)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEndSession)
		/// </summary>
		/// <returns>title of the Link (wtEndSession)</returns>
		public string
		lnkEndSession_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEndSession)
		/// </summary>
		/// <returns>The Visible State of wtEndSession</returns>
		public bool lnkEndSession_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEndSession)
		/// </summary>
		/// <returns>The Enabled State of wtEndSession</returns>
		public bool lnkEndSession_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTabHidden_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTabHidden_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTabHidden_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("onclick", (((("$(\'#" +wtTabHidden.ClientID) + "\').hide();$(\'#") +wtSlider.ClientID) + "\').show(2000);").ToString());
				if (!cntTabHidden_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTabHidden)
		/// </summary>
		/// <returns>The Visible State of wtTabHidden</returns>
		public bool cntTabHidden_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("3kpZpRtPlUirEeTxrOHldQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandEndSession {
		}
		public static class FuncCommandBack {
		}
		public static class FuncCommandShowRevised {
		}
		public static class FuncCommandLeaveSession {
		}
		public static class FuncssPreparation {

			private static void datasetGetCCSessionByIdReadDB(ref RCClusterCCSessionRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCCSession.Read(r, ref index);
				rec.ssENCluster.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetCCSessionById" of Action "Preparation"
			/// </summary>
			public static RLClusterCCSessionRecordList datasetGetCCSessionById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSession.[ID] o1, ENCCSession.[DESCRIPTION] o2, NULL o3, NULL o4, NULL o5, ENCCSession.[ENDDATE] o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, ENCluster.[ICONFILENAME] o12, NULL o13, NULL o14, NULL o15");
				fromBuilder.Append(" FROM ({Cluster} ENCluster Inner JOIN {CCSession} ENCCSession ON (ENCCSession.[CLUSTERID] = ENCluster.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSession.[ID] = @qpinP) AND (ENCCSession.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSession.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLClusterCCSessionRecordList outParamList = new RLClusterCCSessionRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetCCSessionByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, true, false, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, true, true, true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLClusterCCSessionRecordList _tmp = new RLClusterCCSessionRecordList();
					_tmp.AlternateReadDBMethod = datasetGetCCSessionByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionActionsFloatingPanel.Preparation.GetCCSessionById.List");
						outParamList = (RLClusterCCSessionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionActionsFloatingPanel.Preparation.GetCCSessionById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLClusterCCSessionRecordList _tmp = new RLClusterCCSessionRecordList();
						_tmp.AlternateReadDBMethod = datasetGetCCSessionByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionActionsFloatingPanel.Preparation.GetCCSessionById.List");
							outParamList = (RLClusterCCSessionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionActionsFloatingPanel.Preparation.GetCCSessionById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KI7AIRB5XXE2HnvDKWPOsaw";
			}
		}
	}

}
