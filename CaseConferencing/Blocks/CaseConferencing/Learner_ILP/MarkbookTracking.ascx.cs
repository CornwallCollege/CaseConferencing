/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ILP {
	public abstract class WBlkMarkbookTracking: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcSelectedOffering</code> that represents the Service Studio local variable
		///  <code>SelectedOffering</code> <p>Description: </p>
		/// </summary>
		int varLcSelectedOffering = 0;

		/// <summary>
		/// Variable <code>varLcMarkbookForQual</code> that represents the Service Studio local variable
		///  <code>MarkbookForQual</code> <p>Description: </p>
		/// </summary>
		STMarkbookForQualStructure varLcMarkbookForQual = new STMarkbookForQualStructure(null);

		/// <summary>
		/// Variable <code>varLcAcademicYear</code> that represents the Service Studio local variable
		///  <code>AcademicYear</code> <p>Description: </p>
		/// </summary>
		string varLcAcademicYear = "";

		/// <summary>
		/// Variable <code>varLcNoData</code> that represents the Service Studio local variable
		///  <code>NoData</code> <p>Description: </p>
		/// </summary>
		bool varLcNoData = false;

		/// <summary>
		/// Variable <code>varLcMarkbookForQual_Empty</code> that represents the Service Studio local variable
		///  <code>MarkbookForQual_Empty</code> <p>Description: </p>
		/// </summary>
		STMarkbookForQualStructure varLcMarkbookForQual_Empty = new STMarkbookForQualStructure(null);

		protected OutSystems.HubEdition.WebWidgets.Container wtContentContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		/// <summary>
		/// Variable "True" if the Widget wt_If13
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If13T;

		/// <summary>
		/// Variable "True" if the Widget wt_If13
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If13F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox26ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox26 = new SelectRtWidget();
		RLGroupStudent_GroupRecordList Rt_wt_ComboBox26_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtGraphContainer;
		/// <summary>
		/// Variable "True" if the Widget wt_If2
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If2T;

		/// <summary>
		/// Variable "True" if the Widget wt_If2
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If2F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		protected OutSystems.HubEdition.WebWidgets.Container wtUnitContainer;
		/// <summary>
		/// Variable "True" if the Widget wt_If24
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If24T;

		/// <summary>
		/// Variable "True" if the Widget wt_If24
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If24F;
		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21T;

		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21F;
		protected OutSystems.HubEdition.WebWidgets.Container wtUnitDetails;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLGroupStudent_GroupRecordList queryResGetStudentGroupsByStudentReference_outParamList = new RLGroupStudent_GroupRecordList();
		int queryResGetStudentGroupsByStudentReference_outParamCount = 0;
		STMarkbookForQualStructure resGetMarkbookForLearnerQual_outParamMarkbookForQual = new STMarkbookForQualStructure(null);
		bool resGetMarkbookForLearnerQual_outParamNoData = false;
		Actions.lcoGetCurrentAcademicYear2 resGetCurrentAcademicYear2 = new Actions.lcoGetCurrentAcademicYear2(); /// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// GetCurrentAcademicYear2
				Actions.ActionGetCurrentAcademicYear2(heContext, out resGetCurrentAcademicYear2.outParamAcademicYear);
				// Query datasetGetStudentGroupsByStudentReference
				int datasetGetStudentGroupsByStudentReference_maxRecords = 0;
				queryResGetStudentGroupsByStudentReference_outParamList = FuncssPreparation.datasetGetStudentGroupsByStudentReference(heContext, datasetGetStudentGroupsByStudentReference_maxRecords, IterationMultiplicity.Multiple, out queryResGetStudentGroupsByStudentReference_outParamCount, inParamStudentReference
				);
				if ((varLcSelectedOffering==BuiltInFunction.NullIdentifier())) {
					varLcAcademicYear = resGetCurrentAcademicYear2.outParamAcademicYear.ssENAcademicYears.ssFormatB; // AcademicYear = GetCurrentAcademicYear2.AcademicYear.AcademicYears.FormatB

				} else {
					// GetMarkbookForLearnerQual
					Actions.ActionGetMarkbookForLearnerQual(heContext, inParamStudentReference, Functions.ssGetGroup(heContext, varLcSelectedOffering).ssENGroup.ssGroupName, varLcAcademicYear, out resGetMarkbookForLearnerQual_outParamMarkbookForQual, out resGetMarkbookForLearnerQual_outParamNoData);
					varLcMarkbookForQual = resGetMarkbookForLearnerQual_outParamMarkbookForQual; // MarkbookForQual = GetMarkbookForLearnerQual.MarkbookForQual
					varLcAcademicYear = resGetCurrentAcademicYear2.outParamAcademicYear.ssENAcademicYears.ssFormatB; // AcademicYear = GetCurrentAcademicYear2.AcademicYear.AcademicYears.FormatB
					varLcNoData = resGetMarkbookForLearnerQual_outParamNoData; // NoData = GetMarkbookForLearnerQual.NoData

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				return;
			} // Catch
		}
		static WBlkMarkbookTracking() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox26", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetStudentGroupsByStudentReference_outParamList.

			int tmpcurrentrownumberqueryResGetStudentGroupsByStudentReference_outParamList = queryResGetStudentGroupsByStudentReference_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentGroupsByStudentReference_outParamList = queryResGetStudentGroupsByStudentReference_outParamList.Eof;
			ArrayList storequeryResGetStudentGroupsByStudentReference_outParamList = new ArrayList();

			// Write the needed fields of queryResGetStudentGroupsByStudentReference_outParamList to the storequeryResGetStudentGroupsByStudentReference_outParamList
			if (!queryResGetStudentGroupsByStudentReference_outParamList.Empty) {
				try {
					queryResGetStudentGroupsByStudentReference_outParamList.StartIteration();

					while (!queryResGetStudentGroupsByStudentReference_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList = new ArrayList();
						tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList.Add(queryResGetStudentGroupsByStudentReference_outParamList.CurrentRec.ssENGroup.ssId == 0?(object) null: queryResGetStudentGroupsByStudentReference_outParamList.CurrentRec.ssENGroup.ssId);
						tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList.Add(queryResGetStudentGroupsByStudentReference_outParamList.CurrentRec.ssENGroup.ssGroupName == "" ?(object) null: queryResGetStudentGroupsByStudentReference_outParamList.CurrentRec.ssENGroup.ssGroupName);
						tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentGroupsByStudentReference_outParamList.CurrentRec.ssENGroup.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentGroupsByStudentReference_outParamList.CurrentRec.ssENGroup.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, true, true, true, true
						}
						))));
						storequeryResGetStudentGroupsByStudentReference_outParamList.Add(tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList);
						queryResGetStudentGroupsByStudentReference_outParamList.Advance();
					}
				} finally {
					queryResGetStudentGroupsByStudentReference_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetStudentGroupsByStudentReference_outParamList", storequeryResGetStudentGroupsByStudentReference_outParamList, null);

			#endregion


			#region store queryResGetStudentGroupsByStudentReference_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetStudentGroupsByStudentReference_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentGroupsByStudentReference_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupsByStudentReference_outParamList_eof", tmpeofqueryResGetStudentGroupsByStudentReference_outParamList, false);
			queryResGetStudentGroupsByStudentReference_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentGroupsByStudentReference_outParamList, tmpeofqueryResGetStudentGroupsByStudentReference_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcSelectedOffering", varLcSelectedOffering, 0);
			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_ssStudentGroupTitle", varLcMarkbookForQual.ssStudentGroupTitle, "");

			#region store varLcMarkbookForQual.ssMarkbookUnits.

			int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits = varLcMarkbookForQual.ssMarkbookUnits.CurrentRowNumber;
			bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits = varLcMarkbookForQual.ssMarkbookUnits.Eof;
			ArrayList storevarLcMarkbookForQual_ssMarkbookUnits = new ArrayList();

			// Write the needed fields of varLcMarkbookForQual.ssMarkbookUnits to the storevarLcMarkbookForQual_ssMarkbookUnits
			if (!varLcMarkbookForQual.ssMarkbookUnits.Empty) {
				try {
					varLcMarkbookForQual.ssMarkbookUnits.StartIteration();

					while (!varLcMarkbookForQual.ssMarkbookUnits.Eof) {
						ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits = new ArrayList();
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitID == 0?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitID);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitCode == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitCode);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitTitle == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitTitle);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitCompleted == false?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitCompleted);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitGrade == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitGrade);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitMarks == 0.0M?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitMarks);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssUnitDateCompleted);

						#region store varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.

						int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRowNumber;
						bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Eof;
						ArrayList storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = new ArrayList();

						// Write the needed fields of varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments to the storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments
						if (!varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Empty) {
							try {
								varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.StartIteration();

								while (!varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Eof) {
									ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = new ArrayList();
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentID == 0?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentID);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCode == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCode);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentTitle == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentTitle);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCompleted == false?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCompleted);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentGrade == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentGrade);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentMarks == 0.0M?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentMarks);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateSubmitted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateSubmitted);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateMarked == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateMarked);

									#region store varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.

									int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRowNumber;
									bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Eof;
									ArrayList storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = new ArrayList();

									// Write the needed fields of varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList to the storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList
									if (!varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Empty) {
										try {
											varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.StartIteration();

											while (!varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Eof) {
												ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = new ArrayList();
												tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskID == 0?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskID);
												tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCode == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCode);
												tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskName == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskName);
												tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCompleted == false?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCompleted);
												tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskGrade == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskGrade);
												tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskDateCompleted);
												storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
												varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Advance();
											}
										} finally {
											varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.EndIteration();
										}
									}

									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);

									#endregion


									#region store varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList runtime properties state.

									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList == 0?(object) null: tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList == false?(object) null: tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
									varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList, tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);

									#endregion

									storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.Add(tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments);
									varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Advance();
								}
							} finally {
								varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.EndIteration();
							}
						}

						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments);

						#endregion


						#region store varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments runtime properties state.

						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments == 0?(object) null: tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments == false?(object) null: tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments);
						varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments, tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments);

						#endregion


						#region store varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.

						int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRowNumber;
						bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Eof;
						ArrayList storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = new ArrayList();

						// Write the needed fields of varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks to the storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks
						if (!varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Empty) {
							try {
								varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.StartIteration();

								while (!varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Eof) {
									ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = new ArrayList();
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskID == 0?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskID);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCode == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCode);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskName == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskName);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCompleted == false?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCompleted);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskGrade == "" ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskGrade);
									tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskDateCompleted);
									storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.Add(tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks);
									varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Advance();
								}
							} finally {
								varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.EndIteration();
							}
						}

						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks);

						#endregion


						#region store varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks runtime properties state.

						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks == 0?(object) null: tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks);
						tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits.Add(tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks == false?(object) null: tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks);
						varLcMarkbookForQual.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks, tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks);

						#endregion

						storevarLcMarkbookForQual_ssMarkbookUnits.Add(tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits);
						varLcMarkbookForQual.ssMarkbookUnits.Advance();
					}
				} finally {
					varLcMarkbookForQual.ssMarkbookUnits.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_ssMarkbookUnits", storevarLcMarkbookForQual_ssMarkbookUnits, null);

			#endregion


			#region store varLcMarkbookForQual.ssMarkbookUnits runtime properties state.

			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_ssMarkbookUnits_currentrownumber", tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits, 0);
			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_ssMarkbookUnits_eof", tmpeofvarLcMarkbookForQual_ssMarkbookUnits, false);
			varLcMarkbookForQual.ssMarkbookUnits.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits, tmpeofvarLcMarkbookForQual_ssMarkbookUnits);

			#endregion

			ViewStateAttributes.SetInViewState("varLcAcademicYear", varLcAcademicYear, "");
			ViewStateAttributes.SetInViewState("varLcNoData", varLcNoData, false);
			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_Empty_ssStudentGroupTitle", varLcMarkbookForQual_Empty.ssStudentGroupTitle, "");

			#region store varLcMarkbookForQual_Empty.ssMarkbookUnits.

			int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits = varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRowNumber;
			bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits = varLcMarkbookForQual_Empty.ssMarkbookUnits.Eof;
			ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits = new ArrayList();

			// Write the needed fields of varLcMarkbookForQual_Empty.ssMarkbookUnits to the storevarLcMarkbookForQual_Empty_ssMarkbookUnits
			if (!varLcMarkbookForQual_Empty.ssMarkbookUnits.Empty) {
				try {
					varLcMarkbookForQual_Empty.ssMarkbookUnits.StartIteration();

					while (!varLcMarkbookForQual_Empty.ssMarkbookUnits.Eof) {
						ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits = new ArrayList();
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitID == 0?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitID);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitCode == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitCode);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitTitle == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitTitle);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitCompleted == false?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitCompleted);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitGrade == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitGrade);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitMarks == 0.0M?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitMarks);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssUnitDateCompleted);

						#region store varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.

						int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRowNumber;
						bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Eof;
						ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = new ArrayList();

						// Write the needed fields of varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments to the storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments
						if (!varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Empty) {
							try {
								varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.StartIteration();

								while (!varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Eof) {
									ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = new ArrayList();
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentID == 0?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentID);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCode == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCode);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentTitle == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentTitle);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCompleted == false?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentCompleted);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentGrade == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentGrade);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentMarks == 0.0M?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentMarks);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateSubmitted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateSubmitted);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateMarked == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateMarked);

									#region store varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.

									int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRowNumber;
									bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Eof;
									ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = new ArrayList();

									// Write the needed fields of varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList to the storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList
									if (!varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Empty) {
										try {
											varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.StartIteration();

											while (!varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Eof) {
												ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = new ArrayList();
												tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskID == 0?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskID);
												tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCode == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCode);
												tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskName == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskName);
												tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCompleted == false?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCompleted);
												tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskGrade == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskGrade);
												tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskDateCompleted);
												storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
												varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Advance();
											}
										} finally {
											varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.EndIteration();
										}
									}

									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);

									#endregion


									#region store varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList runtime properties state.

									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList == 0?(object) null: tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList == false?(object) null: tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
									varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);

									#endregion

									storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.Add(tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments);
									varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.Advance();
								}
							} finally {
								varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.EndIteration();
							}
						}

						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments);

						#endregion


						#region store varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments runtime properties state.

						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments == 0?(object) null: tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments == false?(object) null: tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments);
						varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookAssessments.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments);

						#endregion


						#region store varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.

						int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRowNumber;
						bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Eof;
						ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = new ArrayList();

						// Write the needed fields of varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks to the storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks
						if (!varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Empty) {
							try {
								varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.StartIteration();

								while (!varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Eof) {
									ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = new ArrayList();
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskID == 0?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskID);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCode == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCode);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskName == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskName);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCompleted == false?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskCompleted);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskGrade == "" ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskGrade);
									tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.Add(varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.CurrentRec.ssTaskDateCompleted);
									storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.Add(tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks);
									varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.Advance();
								}
							} finally {
								varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.EndIteration();
							}
						}

						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks);

						#endregion


						#region store varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks runtime properties state.

						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks == 0?(object) null: tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks);
						tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks == false?(object) null: tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks);
						varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRec.ssMarkbookTasks.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks);

						#endregion

						storevarLcMarkbookForQual_Empty_ssMarkbookUnits.Add(tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits);
						varLcMarkbookForQual_Empty.ssMarkbookUnits.Advance();
					}
				} finally {
					varLcMarkbookForQual_Empty.ssMarkbookUnits.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_Empty_ssMarkbookUnits", storevarLcMarkbookForQual_Empty_ssMarkbookUnits, null);

			#endregion


			#region store varLcMarkbookForQual_Empty.ssMarkbookUnits runtime properties state.

			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_Empty_ssMarkbookUnits_currentrownumber", tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits, 0);
			ViewStateAttributes.SetInViewState("varLcMarkbookForQual_Empty_ssMarkbookUnits_eof", tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits, false);
			varLcMarkbookForQual_Empty.ssMarkbookUnits.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits);

			#endregion

			ViewStateAttributes.SetInViewState("wt_ComboBox26_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox26")).Mandatory, false);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetStudentGroupsByStudentReference_outParamList.

				// Read the needed fields of queryResGetStudentGroupsByStudentReference_outParamList from storequeryResGetStudentGroupsByStudentReference_outParamList
				queryResGetStudentGroupsByStudentReference_outParamList = new RLGroupStudent_GroupRecordList();
				ArrayList storequeryResGetStudentGroupsByStudentReference_outParamList;
				storequeryResGetStudentGroupsByStudentReference_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupsByStudentReference_outParamList", null);
				if (storequeryResGetStudentGroupsByStudentReference_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList in storequeryResGetStudentGroupsByStudentReference_outParamList) {
						if (tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList != null) {
							// Aux current record variable
							RCGroupStudent_GroupRecord tmpAuxCurrentRecordqueryResGetStudentGroupsByStudentReference_outParamList = new RCGroupStudent_GroupRecord(null);
							tmpAuxCurrentRecordqueryResGetStudentGroupsByStudentReference_outParamList.ssENGroup.ssId = (int) (tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList[0] == null ? 0: tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetStudentGroupsByStudentReference_outParamList.ssENGroup.ssGroupName = (string) (tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList[1] == null ? "": tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetStudentGroupsByStudentReference_outParamList.ssENGroup.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetStudentGroupsByStudentReference_outParamList.ssENGroup.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentGroupsByStudentReference_outParamList[3]);

							queryResGetStudentGroupsByStudentReference_outParamList.Append(tmpAuxCurrentRecordqueryResGetStudentGroupsByStudentReference_outParamList);
						}
					}
				}
				queryResGetStudentGroupsByStudentReference_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetStudentGroupsByStudentReference_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetStudentGroupsByStudentReference_outParamList;
				tmpcurrentrownumberqueryResGetStudentGroupsByStudentReference_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupsByStudentReference_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentGroupsByStudentReference_outParamList;
				tmpeofqueryResGetStudentGroupsByStudentReference_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupsByStudentReference_outParamList_eof", false);
				queryResGetStudentGroupsByStudentReference_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentGroupsByStudentReference_outParamList, tmpeofqueryResGetStudentGroupsByStudentReference_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcSelectedOffering = (int) ViewStateAttributes.GetFromViewState("varLcSelectedOffering", 0);
				varLcMarkbookForQual.ssStudentGroupTitle = (string) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_ssStudentGroupTitle", "");

				#region fetch varLcMarkbookForQual.ssMarkbookUnits.

				// Read the needed fields of varLcMarkbookForQual.ssMarkbookUnits from storevarLcMarkbookForQual_ssMarkbookUnits
				varLcMarkbookForQual.ssMarkbookUnits = new RLMarkbookUnitsList();
				ArrayList storevarLcMarkbookForQual_ssMarkbookUnits;
				storevarLcMarkbookForQual_ssMarkbookUnits = (ArrayList) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_ssMarkbookUnits", null);
				if (storevarLcMarkbookForQual_ssMarkbookUnits == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits in storevarLcMarkbookForQual_ssMarkbookUnits) {
						if (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits != null) {
							// Aux current record variable
							STMarkbookUnitsStructure tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits = new STMarkbookUnitsStructure(null);
							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssUnitID = (int) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[0]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssUnitCode = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[1] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[1]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssUnitTitle = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[2] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[2]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssUnitCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[3] == null ? false: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[3]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssUnitGrade = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[4] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[4]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssUnitMarks = (decimal) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[5] == null ? 0.0M: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[5]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssUnitDateCompleted = (DateTime) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[6] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[6]);


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookAssessments.

							// Read the needed fields of tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookAssessments from storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments
							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookAssessments = new RLMarkbookAssessmentsList();
							ArrayList storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments;
							storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = (ArrayList) tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[7];

							if (storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments == null) {
								return;
							} else {

								foreach(ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments in storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments) {
									if (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments != null) {
										// Aux current record variable
										STMarkbookAssessmentsStructure tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = new STMarkbookAssessmentsStructure(null);
										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentID = (int) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[0]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentCode = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[1] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[1]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentTitle = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[2] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[2]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[3] == null ? false: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[3]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentGrade = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[4] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[4]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentMarks = (decimal) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[5] == null ? 0.0M: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[5]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentDateSubmitted = (DateTime) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[6] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[6]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentDateMarked = (DateTime) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[7] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[7]);


										#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.

										// Read the needed fields of tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList from storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList
										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList = new RLMarkbookTasksList();
										ArrayList storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList;
										storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = (ArrayList) tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[8];

										if (storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList == null) {
											return;
										} else {

											foreach(ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList in storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList) {
												if (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList != null) {
													// Aux current record variable
													STMarkbookTasksStructure tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = new STMarkbookTasksStructure(null);
													tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskID = (int) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[0]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskCode = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[1] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[1]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskName = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[2] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[2]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[3] == null ? false: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[3]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskGrade = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[4] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[4]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskDateCompleted = (DateTime) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[5]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
												}
											}
										}
										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.CurrentRowNumber = -1;
										#endregion


										#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList runtime properties state.

										int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList;
										tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = (int) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[9] == null ? 0: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[9]);

										bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList;
										tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = (bool) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[10] == null ? false: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments[10]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList, tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);

										#endregion

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookAssessments.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments);
									}
								}
							}
							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookAssessments.CurrentRowNumber = -1;
							#endregion


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookAssessments runtime properties state.

							int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments;
							tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = (int) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[8] == null ? 0: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[8]);

							bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments;
							tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments = (bool) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[9] == null ? false: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[9]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookAssessments.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments, tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookAssessments);

							#endregion


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookTasks.

							// Read the needed fields of tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookTasks from storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks
							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookTasks = new RLMarkbookTasksList();
							ArrayList storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks;
							storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = (ArrayList) tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[10];

							if (storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks == null) {
								return;
							} else {

								foreach(ArrayList tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks in storevarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks) {
									if (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks != null) {
										// Aux current record variable
										STMarkbookTasksStructure tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = new STMarkbookTasksStructure(null);
										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.ssTaskID = (int) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[0]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.ssTaskCode = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[1] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[1]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.ssTaskName = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[2] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[2]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.ssTaskCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[3] == null ? false: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[3]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.ssTaskGrade = (string) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[4] == null ? "": tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[4]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks.ssTaskDateCompleted = (DateTime) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks[5]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookTasks.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks);
									}
								}
							}
							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookTasks.CurrentRowNumber = -1;
							#endregion


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookTasks runtime properties state.

							int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks;
							tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = (int) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[11] == null ? 0: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[11]);

							bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks;
							tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks = (bool) (tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[12] == null ? false: tmpFieldsvarLcMarkbookForQual_ssMarkbookUnits[12]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits.ssMarkbookTasks.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks, tmpeofvarLcMarkbookForQual_ssMarkbookUnits_ssMarkbookTasks);

							#endregion

							varLcMarkbookForQual.ssMarkbookUnits.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_ssMarkbookUnits);
						}
					}
				}
				varLcMarkbookForQual.ssMarkbookUnits.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcMarkbookForQual.ssMarkbookUnits runtime properties state.

				int tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits;
				tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits = (int) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_ssMarkbookUnits_currentrownumber", 0);
				bool tmpeofvarLcMarkbookForQual_ssMarkbookUnits;
				tmpeofvarLcMarkbookForQual_ssMarkbookUnits = (bool) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_ssMarkbookUnits_eof", false);
				varLcMarkbookForQual.ssMarkbookUnits.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_ssMarkbookUnits, tmpeofvarLcMarkbookForQual_ssMarkbookUnits);

				#endregion

				varLcAcademicYear = (string) ViewStateAttributes.GetFromViewState("varLcAcademicYear", "");
				varLcNoData = (bool) ViewStateAttributes.GetFromViewState("varLcNoData", false);
				varLcMarkbookForQual_Empty.ssStudentGroupTitle = (string) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_Empty_ssStudentGroupTitle", "");

				#region fetch varLcMarkbookForQual_Empty.ssMarkbookUnits.

				// Read the needed fields of varLcMarkbookForQual_Empty.ssMarkbookUnits from storevarLcMarkbookForQual_Empty_ssMarkbookUnits
				varLcMarkbookForQual_Empty.ssMarkbookUnits = new RLMarkbookUnitsList();
				ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits;
				storevarLcMarkbookForQual_Empty_ssMarkbookUnits = (ArrayList) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_Empty_ssMarkbookUnits", null);
				if (storevarLcMarkbookForQual_Empty_ssMarkbookUnits == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits in storevarLcMarkbookForQual_Empty_ssMarkbookUnits) {
						if (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits != null) {
							// Aux current record variable
							STMarkbookUnitsStructure tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits = new STMarkbookUnitsStructure(null);
							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssUnitID = (int) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[0]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssUnitCode = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[1] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[1]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssUnitTitle = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[2] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[2]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssUnitCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[3] == null ? false: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[3]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssUnitGrade = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[4] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[4]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssUnitMarks = (decimal) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[5] == null ? 0.0M: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[5]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssUnitDateCompleted = (DateTime) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[6] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[6]);


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookAssessments.

							// Read the needed fields of tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookAssessments from storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments
							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookAssessments = new RLMarkbookAssessmentsList();
							ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments;
							storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = (ArrayList) tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[7];

							if (storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments == null) {
								return;
							} else {

								foreach(ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments in storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments) {
									if (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments != null) {
										// Aux current record variable
										STMarkbookAssessmentsStructure tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = new STMarkbookAssessmentsStructure(null);
										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentID = (int) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[0]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentCode = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[1] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[1]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentTitle = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[2] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[2]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[3] == null ? false: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[3]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentGrade = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[4] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[4]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentMarks = (decimal) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[5] == null ? 0.0M: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[5]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentDateSubmitted = (DateTime) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[6] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[6]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssAssessmentDateMarked = (DateTime) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[7] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[7]);


										#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.

										// Read the needed fields of tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList from storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList
										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList = new RLMarkbookTasksList();
										ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList;
										storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = (ArrayList) tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[8];

										if (storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList == null) {
											return;
										} else {

											foreach(ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList in storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList) {
												if (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList != null) {
													// Aux current record variable
													STMarkbookTasksStructure tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = new STMarkbookTasksStructure(null);
													tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskID = (int) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[0]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskCode = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[1] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[1]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskName = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[2] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[2]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[3] == null ? false: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[3]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskGrade = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[4] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[4]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskDateCompleted = (DateTime) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList[5]);

													tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);
												}
											}
										}
										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.CurrentRowNumber = -1;
										#endregion


										#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList runtime properties state.

										int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList;
										tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = (int) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[9] == null ? 0: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[9]);

										bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList;
										tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList = (bool) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[10] == null ? false: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments[10]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments.ssMarkbookTasksList.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments_ssMarkbookTasksList);

										#endregion

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookAssessments.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments);
									}
								}
							}
							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookAssessments.CurrentRowNumber = -1;
							#endregion


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookAssessments runtime properties state.

							int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments;
							tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = (int) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[8] == null ? 0: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[8]);

							bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments;
							tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments = (bool) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[9] == null ? false: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[9]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookAssessments.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookAssessments);

							#endregion


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookTasks.

							// Read the needed fields of tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookTasks from storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks
							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookTasks = new RLMarkbookTasksList();
							ArrayList storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks;
							storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = (ArrayList) tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[10];

							if (storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks == null) {
								return;
							} else {

								foreach(ArrayList tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks in storevarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks) {
									if (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks != null) {
										// Aux current record variable
										STMarkbookTasksStructure tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = new STMarkbookTasksStructure(null);
										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.ssTaskID = (int) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[0] == null ? 0: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[0]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.ssTaskCode = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[1] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[1]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.ssTaskName = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[2] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[2]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.ssTaskCompleted = (bool) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[3] == null ? false: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[3]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.ssTaskGrade = (string) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[4] == null ? "": tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[4]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks.ssTaskDateCompleted = (DateTime) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks[5]);

										tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookTasks.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks);
									}
								}
							}
							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookTasks.CurrentRowNumber = -1;
							#endregion


							#region fetch tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookTasks runtime properties state.

							int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks;
							tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = (int) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[11] == null ? 0: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[11]);

							bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks;
							tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks = (bool) (tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[12] == null ? false: tmpFieldsvarLcMarkbookForQual_Empty_ssMarkbookUnits[12]);

							tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits.ssMarkbookTasks.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits_ssMarkbookTasks);

							#endregion

							varLcMarkbookForQual_Empty.ssMarkbookUnits.Append(tmpAuxCurrentRecordvarLcMarkbookForQual_Empty_ssMarkbookUnits);
						}
					}
				}
				varLcMarkbookForQual_Empty.ssMarkbookUnits.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcMarkbookForQual_Empty.ssMarkbookUnits runtime properties state.

				int tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits;
				tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits = (int) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_Empty_ssMarkbookUnits_currentrownumber", 0);
				bool tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits;
				tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits = (bool) ViewStateAttributes.GetFromViewState("varLcMarkbookForQual_Empty_ssMarkbookUnits_eof", false);
				varLcMarkbookForQual_Empty.ssMarkbookUnits.RestoreRecordListState(tmpcurrentrownumbervarLcMarkbookForQual_Empty_ssMarkbookUnits, tmpeofvarLcMarkbookForQual_Empty_ssMarkbookUnits);

				#endregion

				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox26")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox26_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.Kn5XGx9yh9kSi7JC3OTJAfA";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ProMonitorConnector.Flows.FlowTracking.WBlkTrackingGraph.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingUnits.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("n5XGx9yh9kSi7JC3OTJAfA"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvOnChange: VarsBag {
			public STMarkbookForQualStructure resGetMarkbookForLearnerQual2_outParamMarkbookForQual = new STMarkbookForQualStructure(null);
			public bool resGetMarkbookForLearnerQual2_outParamNoData = false;

			public lcvOnChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnChange localVars = new lcvOnChange();
			try {
				if ((varLcSelectedOffering==BuiltInFunction.NullIdentifier())) {
					varLcMarkbookForQual = varLcMarkbookForQual_Empty; // MarkbookForQual = MarkbookForQual_Empty

				} else {
					// GetMarkbookForLearnerQual2
					Actions.ActionGetMarkbookForLearnerQual(heContext, inParamStudentReference, Functions.ssGetGroup(heContext, varLcSelectedOffering).ssENGroup.ssGroupName, varLcAcademicYear, out localVars.resGetMarkbookForLearnerQual2_outParamMarkbookForQual, out localVars.resGetMarkbookForLearnerQual2_outParamNoData);
					varLcMarkbookForQual = localVars.resGetMarkbookForLearnerQual2_outParamMarkbookForQual; // MarkbookForQual = GetMarkbookForLearnerQual2.MarkbookForQual
					varLcNoData = localVars.resGetMarkbookForLearnerQual2_outParamNoData; // NoData = GetMarkbookForLearnerQual2.NoData

				}
				// Refresh Widget (wtContentContainer)
				((OSPageViewState) Page).AjaxRefresh(wtContentContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cntContentContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding:5px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntContentContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentContainer)
		/// </summary>
		/// <returns>The Visible State of wtContentContainer</returns>
		public bool cntContentContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container22_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container22_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If13_hasRun=false;
		bool if_wt_If13_evalResult;
		public bool if_wt_If13() {
			if (if_wt_If13_hasRun) {
				if_wt_If13_hasRun = false;
				return if_wt_If13_evalResult;
			}
			if_wt_If13_hasRun = true;
			if_wt_If13_evalResult = (varLcMarkbookForQual.ssStudentGroupTitle!= "");
			return if_wt_If13_evalResult;
		}

		public void expression_InlineExpression27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression27_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression27_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight:bold;font-size:16px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 3gdM3z0az0Sg_HEIpjZTBQ) Expression: "Markbook Tracking for : " +
		///  MarkbookForQual.StudentGroupTitle
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression27() {
			return ("Markbook Tracking for : " +varLcMarkbookForQual.ssStudentGroupTitle);
		}
		/// <summary>
		/// Function to dump expression (Key = 3JuTI1H77EereaUVJJ3JpQ) Expression: "Please select an enrolment
		///  from the drop down list to view Markbook Tracking Details"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression3() {
			return "Please select an enrolment from the drop down list to view Markbook Tracking Details";
		}
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("Select enrolment", "__ossli_0"));
				if (Rt_wt_ComboBox26.SpecialListVal == "0")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				RLGroupStudent_GroupRecordList Rt_wt_ComboBox26_reclist = queryResGetStudentGroupsByStudentReference_outParamList;
				Rt_wt_ComboBox26_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox26_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox26_reclist.CurrentRec.ssENGroup.ssGroupName, Convert.ToString(Rt_wt_ComboBox26_reclist.CurrentRec.ssENGroup.ssId)));
						if (varLcSelectedOffering == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox26_reclist.CurrentRec.ssENGroup.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox26_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox26_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox26
		/// </summary>
		public void sel_ComboBox26_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox26_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox26.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcSelectedOffering = 0;
			}
			else {
				Rt_wt_ComboBox26.SpecialListVal = "";
				try {
					varLcSelectedOffering = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox26)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox26</returns>
		public bool sel_ComboBox26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox26)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox26</returns>
		public bool sel_ComboBox26_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox26)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox26</returns>
		public bool sel_ComboBox26_isMandatory() {
			return false;
		}

		public void cntGraphContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntGraphContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntGraphContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntGraphContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtGraphContainer)
		/// </summary>
		/// <returns>The Visible State of wtGraphContainer</returns>
		public bool cntGraphContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If2_hasRun=false;
		bool if_wt_If2_evalResult;
		public bool if_wt_If2() {
			if (if_wt_If2_hasRun) {
				if_wt_If2_hasRun = false;
				return if_wt_If2_evalResult;
			}
			if_wt_If2_hasRun = true;
			if_wt_If2_evalResult = (varLcSelectedOffering==BuiltInFunction.NullIdentifier());
			return if_wt_If2_evalResult;
		}

		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container14_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container14_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "background-color:white;padding-right:10px;    box-shadow: 0px -2px 17px #000000; padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container10_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container17_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container17_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void ProMonitorConnector_webBlck_WebBlockInstance5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_ProMonitorConnector.Flows.FlowTracking.WBlkTrackingGraph widget = (proxy_CaseConferencing_ProMonitorConnector.Flows.FlowTracking.WBlkTrackingGraph) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamCourseCode = (((varLcSelectedOffering!=BuiltInFunction.NullIdentifier())) ?(Functions.ssGetGroup(heContext, varLcSelectedOffering).ssENGroup.ssGroupName):(""));
				widget.inParamAcademicYear = varLcAcademicYear;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntUnitContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntUnitContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntUnitContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntUnitContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtUnitContainer)
		/// </summary>
		/// <returns>The Visible State of wtUnitContainer</returns>
		public bool cntUnitContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If24_hasRun=false;
		bool if_wt_If24_evalResult;
		public bool if_wt_If24() {
			if (if_wt_If24_hasRun) {
				if_wt_If24_hasRun = false;
				return if_wt_If24_evalResult;
			}
			if_wt_If24_hasRun = true;
			if_wt_If24_evalResult = (varLcSelectedOffering==BuiltInFunction.NullIdentifier());
			return if_wt_If24_evalResult;
		}

		bool if_wt_If21_hasRun=false;
		bool if_wt_If21_evalResult;
		public bool if_wt_If21() {
			if (if_wt_If21_hasRun) {
				if_wt_If21_hasRun = false;
				return if_wt_If21_evalResult;
			}
			if_wt_If21_hasRun = true;
			if_wt_If21_evalResult = varLcNoData;
			return if_wt_If21_evalResult;
		}

		public void cntUnitDetails_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntUnitDetails_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntUnitDetails_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntUnitDetails_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtUnitDetails)
		/// </summary>
		/// <returns>The Visible State of wtUnitDetails</returns>
		public bool cntUnitDetails_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingUnits widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingUnits) sender;
				widget.inParamMarkbookUnits = varLcMarkbookForQual.ssMarkbookUnits;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandOnChange {
		}
		public static class FuncssPreparation {

			private static void datasetGetStudentGroupsByStudentReferenceReadDB(ref RCGroupStudent_GroupRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssENStudent_Group.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudentGroupsByStudentReference" of Action "Preparation"
			/// </summary>
			public static RLGroupStudent_GroupRecordList datasetGetStudentGroupsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENGroup.[ID] o1, ENGroup.[GROUPNAME] o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18");
				fromBuilder.Append(" FROM ({Student_Group} ENStudent_Group Inner JOIN {Group} ENGroup ON (ENStudent_Group.[GROUPID] = ENGroup.[ID])) ");
				whereBuilder.Append(" WHERE (ENGroup.[GROUPTYPEID] = ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId);
				whereBuilder.Append(") AND (ENStudent_Group.[STUDENTREFERENCE] = (@qpstP))");
				orderByBuilder.Append(" ORDER BY ENStudent_Group.[ENROLMENTSTATUS] ASC ");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupStudent_GroupRecordList outParamList = new RLGroupStudent_GroupRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentGroupsByStudentReferenceReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentGroupsByStudentReferenceReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.MarkbookTracking.Preparation.GetStudentGroupsByStudentReference.List");
						outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.MarkbookTracking.Preparation.GetStudentGroupsByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentGroupsByStudentReferenceReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.MarkbookTracking.Preparation.GetStudentGroupsByStudentReference.List");
							outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.MarkbookTracking.Preparation.GetStudentGroupsByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.Kn5XGx9yh9kSi7JC3OTJAfA";
			}
		}
	}

}
