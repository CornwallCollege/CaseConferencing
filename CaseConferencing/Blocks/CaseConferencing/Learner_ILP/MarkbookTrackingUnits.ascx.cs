/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ILP {
	public abstract class WBlkMarkbookTrackingUnits: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamMarkbookUnits. Description:
		/// </summary>
		public RLMarkbookUnitsList inParamMarkbookUnits = new RLMarkbookUnitsList();
		/// <summary>
		/// Variable <code>varLcVisible</code> that represents the Service Studio local variable
		///  <code>Visible</code> <p>Description: </p>
		/// </summary>
		bool varLcVisible = false;

		private RLMarkbookUnitsList _ssMarkbookUnitsListList = new RLMarkbookUnitsList();
		public RLMarkbookUnitsList ssMarkbookUnitsListList {
			get {
				return _ssMarkbookUnitsListList; 
			}
			set {
				_ssMarkbookUnitsListList = value;
				wtMarkbookUnitsList.DataSource = value;
				ssMarkbookUnitsListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtMarkbookUnitsList;
		public ArrayList wtMarkbookUnitsList_storage = new ArrayList();
		protected bool ssMarkbookUnitsListList_notUsedYet = true;
		protected bool ssMarkbookUnitsListListDoDataBind;
		protected bool ssMarkbookUnitsListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtContentContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtUnitContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		/// <summary>
		/// Variable wt_WebBlockInstance22
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTileIconText wt_WebBlockInstance22;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wtIconExpand;
		/// <summary>
		/// Variable "True" if the Widget wt_If30
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If30T;

		/// <summary>
		/// Variable "True" if the Widget wt_If30
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If30F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wtAssessmentsContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtTaskContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		static WBlkMarkbookTrackingUnits() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtMarkbookUnitsList.StartIndexExpression = () => 0;
			wtMarkbookUnitsList.LineCountExpression = () => 50;
			wtMarkbookUnitsList.EmptyMessageExpression = () => "";
			wt_WebBlockInstance22 = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTileIconText) FindControl("wt_WebBlockInstance22");
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssMarkbookUnitsListListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcVisible", varLcVisible, false);
			if (IsAjaxRequest) {
				recListMarkbookUnitsList_Rebuild((ssMarkbookUnitsListListDataBound ? wtMarkbookUnitsList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtMarkbookUnitsList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtMarkbookUnitsList_list", wtMarkbookUnitsList_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				varLcVisible = (bool) ViewStateAttributes.GetFromViewState("varLcVisible", false);
				recListMarkbookUnitsList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KlQjM9UP_nk67ep4YNJi0gA";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTileIconText.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingAssessments.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingTasks.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("lQjM9UP+nk67ep4YNJi0gA"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandOnUnitContainerClick</code> that represents the Service Studio screen action
		///  <code>OnUnitContainerClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnUnitContainerClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcVisible = (!varLcVisible); // Visible = notVisible
				// Refresh Widget (wtIconExpand)
				((OSPageViewState) Page).AjaxRefresh(Utils.getSelectedControlInRecordWidget(wtMarkbookUnitsList, "wtIconExpand"), "None", StoreViewState);
				// Refresh Widget (wtContentContainer)
				((OSPageViewState) Page).AjaxRefresh(Utils.getSelectedControlInRecordWidget(wtMarkbookUnitsList, "wtContentContainer"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void recListMarkbookUnitsList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtMarkbookUnitsList
				ssMarkbookUnitsListList = inParamMarkbookUnits;
				ssMarkbookUnitsListListDoDataBind = false;
				ssMarkbookUnitsListListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListMarkbookUnitsList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssMarkbookUnitsListList.Length > 0) {
					ssMarkbookUnitsListList.CurrentRec = ssMarkbookUnitsListList[ssMarkbookUnitsListList.CurrentRowNumber];
				}
				if (ssMarkbookUnitsListList.Length > e.SelectedIndex) {
					ssMarkbookUnitsListList.CurrentRec = ssMarkbookUnitsListList[e.SelectedIndex];
					ssMarkbookUnitsListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListMarkbookUnitsList_Store(object dataItem, int index) {
			STMarkbookUnitsStructure tmprec = (STMarkbookUnitsStructure) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssUnitCode == "" ?(object) null: tmprec.ssUnitCode);
			tmpFields.Add(tmprec.ssUnitTitle == "" ?(object) null: tmprec.ssUnitTitle);
			tmpFields.Add(tmprec.ssUnitCompleted == false?(object) null: tmprec.ssUnitCompleted);
			tmpFields.Add(tmprec.ssUnitGrade == "" ?(object) null: tmprec.ssUnitGrade);
			tmpFields.Add(tmprec.ssUnitMarks == 0.0M?(object) null: tmprec.ssUnitMarks);
			tmpFields.Add(tmprec.ssUnitDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssUnitDateCompleted);

			#region store tmprec.ssMarkbookAssessments.

			int tmpcurrentrownumber_ssMarkbookAssessments = tmprec.ssMarkbookAssessments.CurrentRowNumber;
			bool tmpeof_ssMarkbookAssessments = tmprec.ssMarkbookAssessments.Eof;
			ArrayList store_ssMarkbookAssessments = new ArrayList();

			// Write the needed fields of tmprec.ssMarkbookAssessments to the store_ssMarkbookAssessments
			if (!tmprec.ssMarkbookAssessments.Empty) {
				try {
					tmprec.ssMarkbookAssessments.StartIteration();

					while (!tmprec.ssMarkbookAssessments.Eof) {
						ArrayList tmpFields_ssMarkbookAssessments = new ArrayList();
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentID == 0?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentID);
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentCode == "" ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentCode);
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentTitle == "" ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentTitle);
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentCompleted == false?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentCompleted);
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentGrade == "" ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentGrade);
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentMarks == 0.0M?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentMarks);
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateSubmitted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateSubmitted);
						tmpFields_ssMarkbookAssessments.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateMarked == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssAssessmentDateMarked);

						#region store tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.

						int tmpcurrentrownumber_ssMarkbookAssessments_ssMarkbookTasksList = tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRowNumber;
						bool tmpeof_ssMarkbookAssessments_ssMarkbookTasksList = tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Eof;
						ArrayList store_ssMarkbookAssessments_ssMarkbookTasksList = new ArrayList();

						// Write the needed fields of tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList to the store_ssMarkbookAssessments_ssMarkbookTasksList
						if (!tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Empty) {
							try {
								tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.StartIteration();

								while (!tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Eof) {
									ArrayList tmpFields_ssMarkbookAssessments_ssMarkbookTasksList = new ArrayList();
									tmpFields_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskID == 0?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskID);
									tmpFields_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCode == "" ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCode);
									tmpFields_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskName == "" ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskName);
									tmpFields_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCompleted == false?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskCompleted);
									tmpFields_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskGrade == "" ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskGrade);
									tmpFields_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.CurrentRec.ssTaskDateCompleted);
									store_ssMarkbookAssessments_ssMarkbookTasksList.Add(tmpFields_ssMarkbookAssessments_ssMarkbookTasksList);
									tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.Advance();
								}
							} finally {
								tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.EndIteration();
							}
						}

						tmpFields_ssMarkbookAssessments.Add(store_ssMarkbookAssessments_ssMarkbookTasksList);

						#endregion


						#region store tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList runtime properties state.

						tmpFields_ssMarkbookAssessments.Add(tmpcurrentrownumber_ssMarkbookAssessments_ssMarkbookTasksList == 0?(object) null: tmpcurrentrownumber_ssMarkbookAssessments_ssMarkbookTasksList);
						tmpFields_ssMarkbookAssessments.Add(tmpeof_ssMarkbookAssessments_ssMarkbookTasksList == false?(object) null: tmpeof_ssMarkbookAssessments_ssMarkbookTasksList);
						tmprec.ssMarkbookAssessments.CurrentRec.ssMarkbookTasksList.RestoreRecordListState(tmpcurrentrownumber_ssMarkbookAssessments_ssMarkbookTasksList, tmpeof_ssMarkbookAssessments_ssMarkbookTasksList);

						#endregion

						store_ssMarkbookAssessments.Add(tmpFields_ssMarkbookAssessments);
						tmprec.ssMarkbookAssessments.Advance();
					}
				} finally {
					tmprec.ssMarkbookAssessments.EndIteration();
				}
			}

			tmpFields.Add(store_ssMarkbookAssessments);

			#endregion


			#region store tmprec.ssMarkbookAssessments runtime properties state.

			tmpFields.Add(tmpcurrentrownumber_ssMarkbookAssessments == 0?(object) null: tmpcurrentrownumber_ssMarkbookAssessments);
			tmpFields.Add(tmpeof_ssMarkbookAssessments == false?(object) null: tmpeof_ssMarkbookAssessments);
			tmprec.ssMarkbookAssessments.RestoreRecordListState(tmpcurrentrownumber_ssMarkbookAssessments, tmpeof_ssMarkbookAssessments);

			#endregion


			#region store tmprec.ssMarkbookTasks.

			int tmpcurrentrownumber_ssMarkbookTasks = tmprec.ssMarkbookTasks.CurrentRowNumber;
			bool tmpeof_ssMarkbookTasks = tmprec.ssMarkbookTasks.Eof;
			ArrayList store_ssMarkbookTasks = new ArrayList();

			// Write the needed fields of tmprec.ssMarkbookTasks to the store_ssMarkbookTasks
			if (!tmprec.ssMarkbookTasks.Empty) {
				try {
					tmprec.ssMarkbookTasks.StartIteration();

					while (!tmprec.ssMarkbookTasks.Eof) {
						ArrayList tmpFields_ssMarkbookTasks = new ArrayList();
						tmpFields_ssMarkbookTasks.Add(tmprec.ssMarkbookTasks.CurrentRec.ssTaskID == 0?(object) null: tmprec.ssMarkbookTasks.CurrentRec.ssTaskID);
						tmpFields_ssMarkbookTasks.Add(tmprec.ssMarkbookTasks.CurrentRec.ssTaskCode == "" ?(object) null: tmprec.ssMarkbookTasks.CurrentRec.ssTaskCode);
						tmpFields_ssMarkbookTasks.Add(tmprec.ssMarkbookTasks.CurrentRec.ssTaskName == "" ?(object) null: tmprec.ssMarkbookTasks.CurrentRec.ssTaskName);
						tmpFields_ssMarkbookTasks.Add(tmprec.ssMarkbookTasks.CurrentRec.ssTaskCompleted == false?(object) null: tmprec.ssMarkbookTasks.CurrentRec.ssTaskCompleted);
						tmpFields_ssMarkbookTasks.Add(tmprec.ssMarkbookTasks.CurrentRec.ssTaskGrade == "" ?(object) null: tmprec.ssMarkbookTasks.CurrentRec.ssTaskGrade);
						tmpFields_ssMarkbookTasks.Add(tmprec.ssMarkbookTasks.CurrentRec.ssTaskDateCompleted == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssMarkbookTasks.CurrentRec.ssTaskDateCompleted);
						store_ssMarkbookTasks.Add(tmpFields_ssMarkbookTasks);
						tmprec.ssMarkbookTasks.Advance();
					}
				} finally {
					tmprec.ssMarkbookTasks.EndIteration();
				}
			}

			tmpFields.Add(store_ssMarkbookTasks);

			#endregion


			#region store tmprec.ssMarkbookTasks runtime properties state.

			tmpFields.Add(tmpcurrentrownumber_ssMarkbookTasks == 0?(object) null: tmpcurrentrownumber_ssMarkbookTasks);
			tmpFields.Add(tmpeof_ssMarkbookTasks == false?(object) null: tmpeof_ssMarkbookTasks);
			tmprec.ssMarkbookTasks.RestoreRecordListState(tmpcurrentrownumber_ssMarkbookTasks, tmpeof_ssMarkbookTasks);

			#endregion

			if (index < wtMarkbookUnitsList_storage.Count) {
				wtMarkbookUnitsList_storage[index] = tmpFields;
			} else {
				wtMarkbookUnitsList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListMarkbookUnitsList_Restore() {

			#region fetch ssMarkbookUnitsListList.

			// Read the needed fields of ssMarkbookUnitsListList from storewtMarkbookUnitsList_list
			ssMarkbookUnitsListList = new RLMarkbookUnitsList();
			ArrayList storewtMarkbookUnitsList_list;
			storewtMarkbookUnitsList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtMarkbookUnitsList_list", null);
			if (storewtMarkbookUnitsList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtMarkbookUnitsList_list in storewtMarkbookUnitsList_list) {
					if (tmpFieldswtMarkbookUnitsList_list != null) {
						// Aux current record variable
						STMarkbookUnitsStructure tmpAuxCurrentRecordwtMarkbookUnitsList_list = new STMarkbookUnitsStructure(null);
						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssUnitCode = (string) (tmpFieldswtMarkbookUnitsList_list[0] == null ? "": tmpFieldswtMarkbookUnitsList_list[0]);

						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssUnitTitle = (string) (tmpFieldswtMarkbookUnitsList_list[1] == null ? "": tmpFieldswtMarkbookUnitsList_list[1]);

						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssUnitCompleted = (bool) (tmpFieldswtMarkbookUnitsList_list[2] == null ? false: tmpFieldswtMarkbookUnitsList_list[2]);

						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssUnitGrade = (string) (tmpFieldswtMarkbookUnitsList_list[3] == null ? "": tmpFieldswtMarkbookUnitsList_list[3]);

						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssUnitMarks = (decimal) (tmpFieldswtMarkbookUnitsList_list[4] == null ? 0.0M: tmpFieldswtMarkbookUnitsList_list[4]);

						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssUnitDateCompleted = (DateTime) (tmpFieldswtMarkbookUnitsList_list[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtMarkbookUnitsList_list[5]);


						#region fetch tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookAssessments.

						// Read the needed fields of tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookAssessments from storewtMarkbookUnitsList_list_ssMarkbookAssessments
						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookAssessments = new RLMarkbookAssessmentsList();
						ArrayList storewtMarkbookUnitsList_list_ssMarkbookAssessments;
						storewtMarkbookUnitsList_list_ssMarkbookAssessments = (ArrayList) tmpFieldswtMarkbookUnitsList_list[6];

						if (storewtMarkbookUnitsList_list_ssMarkbookAssessments == null) {
							return;
						} else {

							foreach(ArrayList tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments in storewtMarkbookUnitsList_list_ssMarkbookAssessments) {
								if (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments != null) {
									// Aux current record variable
									STMarkbookAssessmentsStructure tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments = new STMarkbookAssessmentsStructure(null);
									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentID = (int) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[0] == null ? 0: tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[0]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentCode = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[1] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[1]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentTitle = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[2] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[2]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentCompleted = (bool) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[3] == null ? false: tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[3]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentGrade = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[4] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[4]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentMarks = (decimal) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[5] == null ? 0.0M: tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[5]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentDateSubmitted = (DateTime) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[6] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[6]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssAssessmentDateMarked = (DateTime) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[7] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[7]);


									#region fetch tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssMarkbookTasksList.

									// Read the needed fields of tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssMarkbookTasksList from storewtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList
									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssMarkbookTasksList = new RLMarkbookTasksList();
									ArrayList storewtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList;
									storewtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList = (ArrayList) tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[8];

									if (storewtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList == null) {
										return;
									} else {

										foreach(ArrayList tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList in storewtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList) {
											if (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList != null) {
												// Aux current record variable
												STMarkbookTasksStructure tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList = new STMarkbookTasksStructure(null);
												tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskID = (int) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[0] == null ? 0: tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[0]);

												tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskCode = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[1] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[1]);

												tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskName = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[2] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[2]);

												tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskCompleted = (bool) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[3] == null ? false: tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[3]);

												tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskGrade = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[4] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[4]);

												tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList.ssTaskDateCompleted = (DateTime) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList[5]);

												tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssMarkbookTasksList.Append(tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList);
											}
										}
									}
									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssMarkbookTasksList.CurrentRowNumber = -1;
									#endregion


									#region fetch tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssMarkbookTasksList runtime properties state.

									int tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList;
									tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList = (int) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[9] == null ? 0: tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[9]);

									bool tmpeofwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList;
									tmpeofwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList = (bool) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[10] == null ? false: tmpFieldswtMarkbookUnitsList_list_ssMarkbookAssessments[10]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments.ssMarkbookTasksList.RestoreRecordListState(tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList, tmpeofwtMarkbookUnitsList_list_ssMarkbookAssessments_ssMarkbookTasksList);

									#endregion

									tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookAssessments.Append(tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookAssessments);
								}
							}
						}
						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookAssessments.CurrentRowNumber = -1;
						#endregion


						#region fetch tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookAssessments runtime properties state.

						int tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookAssessments;
						tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookAssessments = (int) (tmpFieldswtMarkbookUnitsList_list[7] == null ? 0: tmpFieldswtMarkbookUnitsList_list[7]);

						bool tmpeofwtMarkbookUnitsList_list_ssMarkbookAssessments;
						tmpeofwtMarkbookUnitsList_list_ssMarkbookAssessments = (bool) (tmpFieldswtMarkbookUnitsList_list[8] == null ? false: tmpFieldswtMarkbookUnitsList_list[8]);

						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookAssessments.RestoreRecordListState(tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookAssessments, tmpeofwtMarkbookUnitsList_list_ssMarkbookAssessments);

						#endregion


						#region fetch tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookTasks.

						// Read the needed fields of tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookTasks from storewtMarkbookUnitsList_list_ssMarkbookTasks
						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookTasks = new RLMarkbookTasksList();
						ArrayList storewtMarkbookUnitsList_list_ssMarkbookTasks;
						storewtMarkbookUnitsList_list_ssMarkbookTasks = (ArrayList) tmpFieldswtMarkbookUnitsList_list[9];

						if (storewtMarkbookUnitsList_list_ssMarkbookTasks == null) {
							return;
						} else {

							foreach(ArrayList tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks in storewtMarkbookUnitsList_list_ssMarkbookTasks) {
								if (tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks != null) {
									// Aux current record variable
									STMarkbookTasksStructure tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks = new STMarkbookTasksStructure(null);
									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks.ssTaskID = (int) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[0] == null ? 0: tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[0]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks.ssTaskCode = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[1] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[1]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks.ssTaskName = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[2] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[2]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks.ssTaskCompleted = (bool) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[3] == null ? false: tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[3]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks.ssTaskGrade = (string) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[4] == null ? "": tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[4]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks.ssTaskDateCompleted = (DateTime) (tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtMarkbookUnitsList_list_ssMarkbookTasks[5]);

									tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookTasks.Append(tmpAuxCurrentRecordwtMarkbookUnitsList_list_ssMarkbookTasks);
								}
							}
						}
						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookTasks.CurrentRowNumber = -1;
						#endregion


						#region fetch tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookTasks runtime properties state.

						int tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookTasks;
						tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookTasks = (int) (tmpFieldswtMarkbookUnitsList_list[10] == null ? 0: tmpFieldswtMarkbookUnitsList_list[10]);

						bool tmpeofwtMarkbookUnitsList_list_ssMarkbookTasks;
						tmpeofwtMarkbookUnitsList_list_ssMarkbookTasks = (bool) (tmpFieldswtMarkbookUnitsList_list[11] == null ? false: tmpFieldswtMarkbookUnitsList_list[11]);

						tmpAuxCurrentRecordwtMarkbookUnitsList_list.ssMarkbookTasks.RestoreRecordListState(tmpcurrentrownumberwtMarkbookUnitsList_list_ssMarkbookTasks, tmpeofwtMarkbookUnitsList_list_ssMarkbookTasks);

						#endregion

						ssMarkbookUnitsListList.Append(tmpAuxCurrentRecordwtMarkbookUnitsList_list);
					}
				}
			}
			ssMarkbookUnitsListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssMarkbookUnitsListList runtime properties state.


			if (storewtMarkbookUnitsList_list.Count > 0) {
				ssMarkbookUnitsListList.RestoreRecordListState(storewtMarkbookUnitsList_list.Count - 1, false);
			} else {
				ssMarkbookUnitsListList.CurrentRowNumber = 0;
			}

			#endregion

			wtMarkbookUnitsList_storage = storewtMarkbookUnitsList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListMarkbookUnitsList_Clear(object sender, EventArgs e) {
			wtMarkbookUnitsList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListMarkbookUnitsList_Rebuild(int startIndex, int lineCount) {
			if (ssMarkbookUnitsListList.Length != -1) {
				wtMarkbookUnitsList_storage.Clear();
				for (int i=startIndex; i<ssMarkbookUnitsListList.Data.Count && i<startIndex+lineCount; i++) {
					recListMarkbookUnitsList_Store(ssMarkbookUnitsListList.Data[i], wtMarkbookUnitsList_storage.Count);
				}
			}
		}
		public void recListMarkbookUnitsList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtMarkbookUnitsList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLMarkbookUnitsList getWtMarkbookUnitsListList() {
			if (ssMarkbookUnitsListListDoDataBind) {
				recListMarkbookUnitsList_onDataBinding(this, null);
			}

			return ssMarkbookUnitsListList;
		}
		public void cntContentContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = ("margin-top: 5px;border: solid; font-size: 14px;  \r\n    border: solid 1px #DADADA;\r\n    padding: 10px;\r\n    border-radius: 3px;\r\n    -moz-box-shadow: 0px -2px 17px #000000;\r\n    -webkit-box-shadow: 0px -2px 17px #000000;\r\n    box-shadow: 0px -2px 17px #000000;" + ((varLcVisible) ?("background-color: cornsilk;"):("background-color: white;")));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntContentContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentContainer)
		/// </summary>
		/// <returns>The Visible State of wtContentContainer</returns>
		public bool cntContentContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntUnitContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntUnitContainer_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntUnitContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top: 5px;border: solid; font-size: 14px; cursor: pointer; background-color: white;\r\n    border: solid 1px #DADADA;\r\n    padding: 10px;\r\n    border-radius: 3px;\r\n    -moz-box-shadow: 0px -2px 17px #000000;\r\n    -webkit-box-shadow: 0px -2px 17px #000000;\r\n    box-shadow: 0px -2px 17px #000000;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntUnitContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtUnitContainer
		/// </summary>
		public void cntUnitContainer_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnUnitContainerClick(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtUnitContainer)
		/// </summary>
		/// <returns>The Visible State of wtUnitContainer</returns>
		public bool cntUnitContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTileIconText widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTileIconText) sender;
				widget.inParamBackgroundColor = ((getWtMarkbookUnitsListList().CurrentRec.ssUnitCompleted) ?(ENColorEntity.GetRecordByKey(ObjectKey.Parse("Vb6gNZNDuUOJ6xRCMAbHDA")).ssBackground):(ENColorEntity.GetRecordByKey(ObjectKey.Parse("ABZq+r_6aUaUgZk08PA6Jg")).ssBackground));
				widget.inParamIcon = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
				widget.inParamTooltipText = "";
				widget.inParamSize = ENSizesEntity.GetRecordByKey(ObjectKey.Parse("AJpwrHXbXkq6c2V2OvTPrQ")).ssType;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = pqnsfCStQkuzA11Iqw30Ew) Expression: "Unit : " +
		///  MarkbookUnitsList.List.Current.UnitCode + " - " + MarkbookUnitsList.List.Current.UnitTitle
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression11() {
			return ((("Unit : " +getWtMarkbookUnitsListList().CurrentRec.ssUnitCode) + " - ") +getWtMarkbookUnitsListList().CurrentRec.ssUnitTitle);
		}
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:white";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void expression_InlineExpression5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression5_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression5_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "style";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = c+mOSH0o5EmcyhzpRfTRhQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return ((getWtMarkbookUnitsListList().CurrentRec.ssUnitCompleted) ?(("Unit marked as completed on " +BuiltInFunction.FormatFullDate(Convert.ToDateTime(getWtMarkbookUnitsListList().CurrentRec.ssUnitDateCompleted.ToString("yyyy-M-d")), "-"))):("Unit not yet completed."));
		}
		/// <summary>
		/// Function to dump expression (Key = Wd79RvEaFUKnrXKTZjYGqQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return ((getWtMarkbookUnitsListList().CurrentRec.ssUnitCompleted) ?((((getWtMarkbookUnitsListList().CurrentRec.ssUnitGrade!= "")) ?(getWtMarkbookUnitsListList().CurrentRec.ssUnitGrade):(OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.RemoveTrailingZeros(Convert.ToString(getWtMarkbookUnitsListList().CurrentRec.ssUnitMarks, FormatInfo.Number), FormatInfo.Number)))):(""));
		}
		/// <summary>
		/// Function to dump expression (Key = MBYSmKM3s0yhpZWi+sxrbA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression17() {
			return ((getWtMarkbookUnitsListList().CurrentRec.ssUnitCompleted) ?("Grade / Mark"):("Unit not yet completed."));
		}
		public void cntIconExpand_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntIconExpand_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntIconExpand_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:block;float:right;cursor:pointer;margin-right:3px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntIconExpand_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtIconExpand)
		/// </summary>
		/// <returns>The Visible State of wtIconExpand</returns>
		public bool cntIconExpand_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If30_hasRun=false;
		bool if_wt_If30_evalResult;
		public bool if_wt_If30() {
			if (if_wt_If30_hasRun) {
				if_wt_If30_hasRun = false;
				return if_wt_If30_evalResult;
			}
			if_wt_If30_hasRun = true;
			if_wt_If30_evalResult = varLcVisible;
			return if_wt_If30_evalResult;
		}

		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:#2c3e50";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container29_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("lONIeezZcEq91R_t0lfWaQ")).ssClass;
				widget.inParamSize = ENIconSizeEntity.GetRecordByKey(ObjectKey.Parse("oKKDWUUxF0u1zqd+FXTuhQ")).ssClass;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:#2c3e50";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Ksi11unkKkSD65nEu1eIYA")).ssClass;
				widget.inParamSize = ENIconSizeEntity.GetRecordByKey(ObjectKey.Parse("oKKDWUUxF0u1zqd+FXTuhQ")).ssClass;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntAssessmentsContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntAssessmentsContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntAssessmentsContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntAssessmentsContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAssessmentsContainer)
		/// </summary>
		/// <returns>The Visible State of wtAssessmentsContainer</returns>
		public bool cntAssessmentsContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcVisible;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingAssessments widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingAssessments) sender;
				widget.inParamMarkbookAssessmentsList = getWtMarkbookUnitsListList().CurrentRec.ssMarkbookAssessments;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTaskContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTaskContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTaskContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "background-color:white;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    border-color: #DADADA;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntTaskContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTaskContainer)
		/// </summary>
		/// <returns>The Visible State of wtTaskContainer</returns>
		public bool cntTaskContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcVisible;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container8_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:5px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container8_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = FkvCgOXVlUKrm0N_T1LSgQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression12() {
			return ((getWtMarkbookUnitsListList().CurrentRec.ssMarkbookTasks.Empty) ?(""):("Tasks linked to this Unit : "));
		}
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingTasks widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTrackingTasks) sender;
				widget.inParamMarkbookTasksList = getWtMarkbookUnitsListList().CurrentRec.ssMarkbookTasks;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandOnUnitContainerClick {
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KlQjM9UP_nk67ep4YNJi0gA";
			}
		}
		public override string JavaScriptFileName {
			get {
				return AppRelativeVirtualPath.Replace(".ascx", string.Empty) + ".js" + AppUtils.Instance.CacheInvalidationSuffix;
			}
		}
	}

}
