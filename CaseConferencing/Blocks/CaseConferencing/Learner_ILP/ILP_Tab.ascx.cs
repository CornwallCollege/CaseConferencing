/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_ILP {
	public abstract class WBlkILP_Tab: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcSelectedTab</code> that represents the Service Studio local variable
		///  <code>SelectedTab</code> <p>Description: 1 - Target ; 2 - Tutorial ; 3 - CareerAim</p>
		/// </summary>
		int varLcSelectedTab = 0;

		/// <summary>
		/// Variable <code>varLcDummyREcord</code> that represents the Service Studio local variable
		///  <code>DummyREcord</code> <p>Description: </p>
		/// </summary>
		RCLearnerCategoryCoursesRecord varLcDummyREcord = new RCLearnerCategoryCoursesRecord(null);

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container59;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container52;
		protected OutSystems.HubEdition.WebWidgets.Container wtMenuTab;
		protected OutSystems.HubEdition.WebWidgets.Container wtTargets5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		protected OutSystems.HubEdition.WebWidgets.Container wtCareerAims;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21T;

		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wtTutorial2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		/// <summary>
		/// Variable "True" if the Widget wt_If57
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If57T;

		/// <summary>
		/// Variable "True" if the Widget wt_If57
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If57F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wtMarkbookTracking;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wtContentArea;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container53;
		/// <summary>
		/// Variable "True" if the Widget wt_If49
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If49T;

		/// <summary>
		/// Variable "True" if the Widget wt_If49
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If49F;
		protected OutSystems.HubEdition.WebWidgets.Container wtAims;
		/// <summary>
		/// Variable "True" if the Widget wt_If31
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If31T;

		/// <summary>
		/// Variable "True" if the Widget wt_If31
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If31F;
		protected OutSystems.HubEdition.WebWidgets.Container wtTutorial;
		/// <summary>
		/// Variable "True" if the Widget wt_If1
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If1T;

		/// <summary>
		/// Variable "True" if the Widget wt_If1
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If1F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		protected OutSystems.HubEdition.WebWidgets.Container wtMath;
		protected OutSystems.HubEdition.WebWidgets.Container wtTargets;
		private RLLearnerCategoryCoursesRecordList _ssListRecords1List = new RLLearnerCategoryCoursesRecordList();
		public RLLearnerCategoryCoursesRecordList ssListRecords1List {
			get {
				return _ssListRecords1List; 
			}
			set {
				_ssListRecords1List = value;
				wtListRecords1.DataSource = value;
				ssListRecords1ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords1;
		public ArrayList wtListRecords1_storage = new ArrayList();
		protected bool ssListRecords1List_notUsedYet = true;
		protected bool ssListRecords1ListDoDataBind;
		protected bool ssListRecords1ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtEnglish;
		protected OutSystems.HubEdition.WebWidgets.Container wtTargets2;
		private RLLearnerCategoryCoursesRecordList _ssListRecords2List = new RLLearnerCategoryCoursesRecordList();
		public RLLearnerCategoryCoursesRecordList ssListRecords2List {
			get {
				return _ssListRecords2List; 
			}
			set {
				_ssListRecords2List = value;
				wtListRecords2.DataSource = value;
				ssListRecords2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords2;
		public ArrayList wtListRecords2_storage = new ArrayList();
		protected bool ssListRecords2List_notUsedYet = true;
		protected bool ssListRecords2ListDoDataBind;
		protected bool ssListRecords2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistProgramme;
		protected OutSystems.HubEdition.WebWidgets.Container wtTargets3;
		private RLLearnerCategoryCoursesRecordList _ssListRecords3List = new RLLearnerCategoryCoursesRecordList();
		public RLLearnerCategoryCoursesRecordList ssListRecords3List {
			get {
				return _ssListRecords3List; 
			}
			set {
				_ssListRecords3List = value;
				wtListRecords3.DataSource = value;
				ssListRecords3ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords3;
		public ArrayList wtListRecords3_storage = new ArrayList();
		protected bool ssListRecords3List_notUsedYet = true;
		protected bool ssListRecords3ListDoDataBind;
		protected bool ssListRecords3ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpecialistMLW;
		protected OutSystems.HubEdition.WebWidgets.Container wtTargets4;
		private RLLearnerCategoryCoursesRecordList _ssListRecords4List = new RLLearnerCategoryCoursesRecordList();
		public RLLearnerCategoryCoursesRecordList ssListRecords4List {
			get {
				return _ssListRecords4List; 
			}
			set {
				_ssListRecords4List = value;
				wtListRecords4.DataSource = value;
				ssListRecords4ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords4;
		public ArrayList wtListRecords4_storage = new ArrayList();
		protected bool ssListRecords4List_notUsedYet = true;
		protected bool ssListRecords4ListDoDataBind;
		protected bool ssListRecords4ListDataBound;
		/// <summary>
		/// Variable "True" if the Widget wt_If64
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If64T;

		/// <summary>
		/// Variable "True" if the Widget wt_If64
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If64F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container76;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLLearnerCategoryCoursesRecordList queryResGetCoursesMLW_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesMLW_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		RLLearnerCategoryCoursesRecordList queryResGetCoursesMath_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesMath_outParamCount = 0;
		RLLearnerCategoryCoursesRecordList queryResGetCoursesVOC_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesVOC_outParamCount = 0;
		RLTutorialRecordList queryResGetTutorialsByStudent_outParamList = new RLTutorialRecordList();
		int queryResGetTutorialsByStudent_outParamCount = 0;
		RLLearnerCategoryCoursesRecordList queryResGetCoursesEnglish_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesEnglish_outParamCount = 0;
		RLStudentCareerAimRecordList queryResGetStudentCareerAimsByStudent_outParamList = new RLStudentCareerAimRecordList();
		int queryResGetStudentCareerAimsByStudent_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("oDZDk7vbjky0HYuBDlfjVg")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType==BuiltInFunction.NullIdentifier())) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							if (OSPage.IsAjaxRequest) {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								Response.BufferOutput = true;
								Response.Redirect(sURL, true);
							}
							return;

						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return;

						}
					}
				} else {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							if (OSPage.IsAjaxRequest) {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								Response.BufferOutput = true;
								Response.Redirect(sURL, true);
							}
							return;

						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return;

						}
					}
				}

			} else {
				varLcSelectedTab = 1; // SelectedTab = 1
				// Query QueryGetCoursesMath
				int QueryGetCoursesMath_maxRecords = Math.Max(wtListRecords1.StartIndex + wtListRecords1.LineCount + 1, 0);
				queryResGetCoursesMath_outParamList = FuncssPreparation.QueryGetCoursesMath(heContext, QueryGetCoursesMath_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesMath_outParamCount, inParamStudentReference
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("9J+4M6ZeU0+g4qKAzSFbVg")).ssId
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
				);
				if ((queryResGetCoursesMath_outParamCount==0)) {
					// ListAppend
					ExtendedActions.ListAppend(heContext, queryResGetCoursesMath_outParamList, varLcDummyREcord);

				}
				// Query QueryGetCoursesEnglish
				int QueryGetCoursesEnglish_maxRecords = Math.Max(wtListRecords2.StartIndex + wtListRecords2.LineCount + 1, 0);
				queryResGetCoursesEnglish_outParamList = FuncssPreparation.QueryGetCoursesEnglish(heContext, QueryGetCoursesEnglish_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesEnglish_outParamCount, inParamStudentReference
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("hh0WWQ2FF0acLTzRV4EL3Q")).ssId
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
				);
				if ((queryResGetCoursesEnglish_outParamCount==0)) {
					// ListAppend2
					ExtendedActions.ListAppend(heContext, queryResGetCoursesEnglish_outParamList, varLcDummyREcord);

				}
				// Query QueryGetCoursesVOC
				int QueryGetCoursesVOC_maxRecords = Math.Max(wtListRecords3.StartIndex + wtListRecords3.LineCount + 1, 0);
				queryResGetCoursesVOC_outParamList = FuncssPreparation.QueryGetCoursesVOC(heContext, QueryGetCoursesVOC_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesVOC_outParamCount, inParamStudentReference
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
				);
				if ((queryResGetCoursesVOC_outParamCount==0)) {
					// ListAppend3
					ExtendedActions.ListAppend(heContext, queryResGetCoursesVOC_outParamList, varLcDummyREcord);

				}
				// Query QueryGetCoursesMLW
				int QueryGetCoursesMLW_maxRecords = Math.Max(wtListRecords4.StartIndex + wtListRecords4.LineCount + 1, 0);
				queryResGetCoursesMLW_outParamList = FuncssPreparation.QueryGetCoursesMLW(heContext, QueryGetCoursesMLW_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesMLW_outParamCount, inParamStudentReference
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("iy5u49fNYkGR3K77QLSz4g")).ssId
				, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
				);
				if ((queryResGetCoursesMLW_outParamCount==0)) {
					// ListAppend4
					ExtendedActions.ListAppend(heContext, queryResGetCoursesMLW_outParamList, varLcDummyREcord);

				}
				// Query datasetGetStudentCareerAimsByStudent
				int datasetGetStudentCareerAimsByStudent_maxRecords = 1;
				if (datasetGetStudentCareerAimsByStudent_maxRecords < 1) datasetGetStudentCareerAimsByStudent_maxRecords = 1;
				queryResGetStudentCareerAimsByStudent_outParamList = FuncssPreparation.datasetGetStudentCareerAimsByStudent(heContext, datasetGetStudentCareerAimsByStudent_maxRecords, IterationMultiplicity.Never, out queryResGetStudentCareerAimsByStudent_outParamCount, inParamStudentReference
				);
				// Query datasetGetTutorialsByStudent
				int datasetGetTutorialsByStudent_maxRecords = 0;
				queryResGetTutorialsByStudent_outParamList = FuncssPreparation.datasetGetTutorialsByStudent(heContext, datasetGetTutorialsByStudent_maxRecords, IterationMultiplicity.Never, out queryResGetTutorialsByStudent_outParamCount, inParamStudentReference
				);

			}
		}
		static WBlkILP_Tab() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtListRecords1.StartIndexExpression = () => 0;
			wtListRecords1.LineCountExpression = () => 50;
			wtListRecords2.StartIndexExpression = () => 0;
			wtListRecords2.LineCountExpression = () => 50;
			wtListRecords3.StartIndexExpression = () => 0;
			wtListRecords3.LineCountExpression = () => 50;
			wtListRecords4.StartIndexExpression = () => 0;
			wtListRecords4.LineCountExpression = () => 50;
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssListRecords1ListDoDataBind = true;
					ssListRecords2ListDoDataBind = true;
					ssListRecords3ListDoDataBind = true;
					ssListRecords4ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetCoursesMLW_outParamList.

			int tmpcurrentrownumberqueryResGetCoursesMLW_outParamList = queryResGetCoursesMLW_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCoursesMLW_outParamList = queryResGetCoursesMLW_outParamList.Eof;
			ArrayList storequeryResGetCoursesMLW_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCoursesMLW_outParamList to the storequeryResGetCoursesMLW_outParamList
			if (!queryResGetCoursesMLW_outParamList.Empty) {
				try {
					queryResGetCoursesMLW_outParamList.StartIteration();

					while (!queryResGetCoursesMLW_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCoursesMLW_outParamList = new ArrayList();
						tmpFieldsqueryResGetCoursesMLW_outParamList.Add(queryResGetCoursesMLW_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName == "" ?(object) null: queryResGetCoursesMLW_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName);
						tmpFieldsqueryResGetCoursesMLW_outParamList.Add(queryResGetCoursesMLW_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode == "" ?(object) null: queryResGetCoursesMLW_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode);
						storequeryResGetCoursesMLW_outParamList.Add(tmpFieldsqueryResGetCoursesMLW_outParamList);
						queryResGetCoursesMLW_outParamList.Advance();
					}
				} finally {
					queryResGetCoursesMLW_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCoursesMLW_outParamList", storequeryResGetCoursesMLW_outParamList, null);

			#endregion


			#region store queryResGetCoursesMLW_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCoursesMLW_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCoursesMLW_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCoursesMLW_outParamList_eof", tmpeofqueryResGetCoursesMLW_outParamList, false);
			queryResGetCoursesMLW_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesMLW_outParamList, tmpeofqueryResGetCoursesMLW_outParamList);

			#endregion


			#region store queryResGetCoursesMath_outParamList.

			int tmpcurrentrownumberqueryResGetCoursesMath_outParamList = queryResGetCoursesMath_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCoursesMath_outParamList = queryResGetCoursesMath_outParamList.Eof;
			ArrayList storequeryResGetCoursesMath_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCoursesMath_outParamList to the storequeryResGetCoursesMath_outParamList
			if (!queryResGetCoursesMath_outParamList.Empty) {
				try {
					queryResGetCoursesMath_outParamList.StartIteration();

					while (!queryResGetCoursesMath_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCoursesMath_outParamList = new ArrayList();
						tmpFieldsqueryResGetCoursesMath_outParamList.Add(queryResGetCoursesMath_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName == "" ?(object) null: queryResGetCoursesMath_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName);
						tmpFieldsqueryResGetCoursesMath_outParamList.Add(queryResGetCoursesMath_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode == "" ?(object) null: queryResGetCoursesMath_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode);
						storequeryResGetCoursesMath_outParamList.Add(tmpFieldsqueryResGetCoursesMath_outParamList);
						queryResGetCoursesMath_outParamList.Advance();
					}
				} finally {
					queryResGetCoursesMath_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCoursesMath_outParamList", storequeryResGetCoursesMath_outParamList, null);

			#endregion


			#region store queryResGetCoursesMath_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCoursesMath_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCoursesMath_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCoursesMath_outParamList_eof", tmpeofqueryResGetCoursesMath_outParamList, false);
			queryResGetCoursesMath_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesMath_outParamList, tmpeofqueryResGetCoursesMath_outParamList);

			#endregion


			#region store queryResGetCoursesVOC_outParamList.

			int tmpcurrentrownumberqueryResGetCoursesVOC_outParamList = queryResGetCoursesVOC_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCoursesVOC_outParamList = queryResGetCoursesVOC_outParamList.Eof;
			ArrayList storequeryResGetCoursesVOC_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCoursesVOC_outParamList to the storequeryResGetCoursesVOC_outParamList
			if (!queryResGetCoursesVOC_outParamList.Empty) {
				try {
					queryResGetCoursesVOC_outParamList.StartIteration();

					while (!queryResGetCoursesVOC_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCoursesVOC_outParamList = new ArrayList();
						tmpFieldsqueryResGetCoursesVOC_outParamList.Add(queryResGetCoursesVOC_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName == "" ?(object) null: queryResGetCoursesVOC_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName);
						tmpFieldsqueryResGetCoursesVOC_outParamList.Add(queryResGetCoursesVOC_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode == "" ?(object) null: queryResGetCoursesVOC_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode);
						storequeryResGetCoursesVOC_outParamList.Add(tmpFieldsqueryResGetCoursesVOC_outParamList);
						queryResGetCoursesVOC_outParamList.Advance();
					}
				} finally {
					queryResGetCoursesVOC_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCoursesVOC_outParamList", storequeryResGetCoursesVOC_outParamList, null);

			#endregion


			#region store queryResGetCoursesVOC_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCoursesVOC_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCoursesVOC_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCoursesVOC_outParamList_eof", tmpeofqueryResGetCoursesVOC_outParamList, false);
			queryResGetCoursesVOC_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesVOC_outParamList, tmpeofqueryResGetCoursesVOC_outParamList);

			#endregion


			#region store queryResGetTutorialsByStudent_outParamList.

			int tmpcurrentrownumberqueryResGetTutorialsByStudent_outParamList = queryResGetTutorialsByStudent_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetTutorialsByStudent_outParamList = queryResGetTutorialsByStudent_outParamList.Eof;
			ArrayList storequeryResGetTutorialsByStudent_outParamList = new ArrayList();

			// Write the needed fields of queryResGetTutorialsByStudent_outParamList to the storequeryResGetTutorialsByStudent_outParamList
			if (!queryResGetTutorialsByStudent_outParamList.Empty) {
				try {
					queryResGetTutorialsByStudent_outParamList.StartIteration();

					while (!queryResGetTutorialsByStudent_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetTutorialsByStudent_outParamList = new ArrayList();
						tmpFieldsqueryResGetTutorialsByStudent_outParamList.Add(queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedAt == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedAt);
						tmpFieldsqueryResGetTutorialsByStudent_outParamList.Add(queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedBy == 0?(object) null: queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedBy);
						tmpFieldsqueryResGetTutorialsByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, true, true, false, false
						}
						))));
						tmpFieldsqueryResGetTutorialsByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, false, false, true, true
						}
						))));
						storequeryResGetTutorialsByStudent_outParamList.Add(tmpFieldsqueryResGetTutorialsByStudent_outParamList);
						queryResGetTutorialsByStudent_outParamList.Advance();
					}
				} finally {
					queryResGetTutorialsByStudent_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetTutorialsByStudent_outParamList", storequeryResGetTutorialsByStudent_outParamList, null);

			#endregion


			#region store queryResGetTutorialsByStudent_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetTutorialsByStudent_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetTutorialsByStudent_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetTutorialsByStudent_outParamList_eof", tmpeofqueryResGetTutorialsByStudent_outParamList, false);
			queryResGetTutorialsByStudent_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetTutorialsByStudent_outParamList, tmpeofqueryResGetTutorialsByStudent_outParamList);

			#endregion


			#region store queryResGetCoursesEnglish_outParamList.

			int tmpcurrentrownumberqueryResGetCoursesEnglish_outParamList = queryResGetCoursesEnglish_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCoursesEnglish_outParamList = queryResGetCoursesEnglish_outParamList.Eof;
			ArrayList storequeryResGetCoursesEnglish_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCoursesEnglish_outParamList to the storequeryResGetCoursesEnglish_outParamList
			if (!queryResGetCoursesEnglish_outParamList.Empty) {
				try {
					queryResGetCoursesEnglish_outParamList.StartIteration();

					while (!queryResGetCoursesEnglish_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCoursesEnglish_outParamList = new ArrayList();
						tmpFieldsqueryResGetCoursesEnglish_outParamList.Add(queryResGetCoursesEnglish_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName == "" ?(object) null: queryResGetCoursesEnglish_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName);
						tmpFieldsqueryResGetCoursesEnglish_outParamList.Add(queryResGetCoursesEnglish_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode == "" ?(object) null: queryResGetCoursesEnglish_outParamList.CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode);
						storequeryResGetCoursesEnglish_outParamList.Add(tmpFieldsqueryResGetCoursesEnglish_outParamList);
						queryResGetCoursesEnglish_outParamList.Advance();
					}
				} finally {
					queryResGetCoursesEnglish_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCoursesEnglish_outParamList", storequeryResGetCoursesEnglish_outParamList, null);

			#endregion


			#region store queryResGetCoursesEnglish_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCoursesEnglish_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCoursesEnglish_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCoursesEnglish_outParamList_eof", tmpeofqueryResGetCoursesEnglish_outParamList, false);
			queryResGetCoursesEnglish_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesEnglish_outParamList, tmpeofqueryResGetCoursesEnglish_outParamList);

			#endregion


			#region store queryResGetStudentCareerAimsByStudent_outParamList.

			int tmpcurrentrownumberqueryResGetStudentCareerAimsByStudent_outParamList = queryResGetStudentCareerAimsByStudent_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentCareerAimsByStudent_outParamList = queryResGetStudentCareerAimsByStudent_outParamList.Eof;
			ArrayList storequeryResGetStudentCareerAimsByStudent_outParamList = new ArrayList();

			// Write the needed fields of queryResGetStudentCareerAimsByStudent_outParamList to the storequeryResGetStudentCareerAimsByStudent_outParamList
			if (!queryResGetStudentCareerAimsByStudent_outParamList.Empty) {
				try {
					queryResGetStudentCareerAimsByStudent_outParamList.StartIteration();

					while (!queryResGetStudentCareerAimsByStudent_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList = new ArrayList();
						tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList.Add(queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssDestination == "" ?(object) null: queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssDestination);
						tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList.Add(queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedBy == 0?(object) null: queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedBy);
						tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList.Add(queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedOn);
						tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, true, true, false, false, false
						}
						))));
						tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, false, false, true, true, true
						}
						))));
						storequeryResGetStudentCareerAimsByStudent_outParamList.Add(tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList);
						queryResGetStudentCareerAimsByStudent_outParamList.Advance();
					}
				} finally {
					queryResGetStudentCareerAimsByStudent_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetStudentCareerAimsByStudent_outParamList", storequeryResGetStudentCareerAimsByStudent_outParamList, null);

			#endregion


			#region store queryResGetStudentCareerAimsByStudent_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetStudentCareerAimsByStudent_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentCareerAimsByStudent_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentCareerAimsByStudent_outParamList_eof", tmpeofqueryResGetStudentCareerAimsByStudent_outParamList, false);
			queryResGetStudentCareerAimsByStudent_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentCareerAimsByStudent_outParamList, tmpeofqueryResGetStudentCareerAimsByStudent_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcSelectedTab", varLcSelectedTab, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingName", varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingName, "");
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingCode", varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingCode, "");
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedUnits", varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedUnits, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalUnits", varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalUnits, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedTargets", varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedTargets, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalTargets", varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalTargets, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssVisible", varLcDummyREcord.ssSTLearnerCategoryCourses.ssVisible, false);
			if (IsAjaxRequest) {
				recListListRecords1_Rebuild((ssListRecords1ListDataBound ? wtListRecords1.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords1.LineCount);
			}
			if (IsAjaxRequest) {
				recListListRecords2_Rebuild((ssListRecords2ListDataBound ? wtListRecords2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords2.LineCount);
			}
			if (IsAjaxRequest) {
				recListListRecords3_Rebuild((ssListRecords3ListDataBound ? wtListRecords3.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords3.LineCount);
			}
			if (IsAjaxRequest) {
				recListListRecords4_Rebuild((ssListRecords4ListDataBound ? wtListRecords4.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords4.LineCount);
			}
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetCoursesMLW_outParamList.

				// Read the needed fields of queryResGetCoursesMLW_outParamList from storequeryResGetCoursesMLW_outParamList
				queryResGetCoursesMLW_outParamList = new RLLearnerCategoryCoursesRecordList();
				ArrayList storequeryResGetCoursesMLW_outParamList;
				storequeryResGetCoursesMLW_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCoursesMLW_outParamList", null);
				if (storequeryResGetCoursesMLW_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCoursesMLW_outParamList in storequeryResGetCoursesMLW_outParamList) {
						if (tmpFieldsqueryResGetCoursesMLW_outParamList != null) {
							// Aux current record variable
							RCLearnerCategoryCoursesRecord tmpAuxCurrentRecordqueryResGetCoursesMLW_outParamList = new RCLearnerCategoryCoursesRecord(null);
							tmpAuxCurrentRecordqueryResGetCoursesMLW_outParamList.ssSTLearnerCategoryCourses.ssOfferingName = (string) (tmpFieldsqueryResGetCoursesMLW_outParamList[0] == null ? "": tmpFieldsqueryResGetCoursesMLW_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCoursesMLW_outParamList.ssSTLearnerCategoryCourses.ssOfferingCode = (string) (tmpFieldsqueryResGetCoursesMLW_outParamList[1] == null ? "": tmpFieldsqueryResGetCoursesMLW_outParamList[1]);

							queryResGetCoursesMLW_outParamList.Append(tmpAuxCurrentRecordqueryResGetCoursesMLW_outParamList);
						}
					}
				}
				queryResGetCoursesMLW_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCoursesMLW_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCoursesMLW_outParamList;
				tmpcurrentrownumberqueryResGetCoursesMLW_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCoursesMLW_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCoursesMLW_outParamList;
				tmpeofqueryResGetCoursesMLW_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCoursesMLW_outParamList_eof", false);
				queryResGetCoursesMLW_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesMLW_outParamList, tmpeofqueryResGetCoursesMLW_outParamList);

				#endregion


				#region fetch queryResGetCoursesMath_outParamList.

				// Read the needed fields of queryResGetCoursesMath_outParamList from storequeryResGetCoursesMath_outParamList
				queryResGetCoursesMath_outParamList = new RLLearnerCategoryCoursesRecordList();
				ArrayList storequeryResGetCoursesMath_outParamList;
				storequeryResGetCoursesMath_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCoursesMath_outParamList", null);
				if (storequeryResGetCoursesMath_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCoursesMath_outParamList in storequeryResGetCoursesMath_outParamList) {
						if (tmpFieldsqueryResGetCoursesMath_outParamList != null) {
							// Aux current record variable
							RCLearnerCategoryCoursesRecord tmpAuxCurrentRecordqueryResGetCoursesMath_outParamList = new RCLearnerCategoryCoursesRecord(null);
							tmpAuxCurrentRecordqueryResGetCoursesMath_outParamList.ssSTLearnerCategoryCourses.ssOfferingName = (string) (tmpFieldsqueryResGetCoursesMath_outParamList[0] == null ? "": tmpFieldsqueryResGetCoursesMath_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCoursesMath_outParamList.ssSTLearnerCategoryCourses.ssOfferingCode = (string) (tmpFieldsqueryResGetCoursesMath_outParamList[1] == null ? "": tmpFieldsqueryResGetCoursesMath_outParamList[1]);

							queryResGetCoursesMath_outParamList.Append(tmpAuxCurrentRecordqueryResGetCoursesMath_outParamList);
						}
					}
				}
				queryResGetCoursesMath_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCoursesMath_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCoursesMath_outParamList;
				tmpcurrentrownumberqueryResGetCoursesMath_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCoursesMath_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCoursesMath_outParamList;
				tmpeofqueryResGetCoursesMath_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCoursesMath_outParamList_eof", false);
				queryResGetCoursesMath_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesMath_outParamList, tmpeofqueryResGetCoursesMath_outParamList);

				#endregion


				#region fetch queryResGetCoursesVOC_outParamList.

				// Read the needed fields of queryResGetCoursesVOC_outParamList from storequeryResGetCoursesVOC_outParamList
				queryResGetCoursesVOC_outParamList = new RLLearnerCategoryCoursesRecordList();
				ArrayList storequeryResGetCoursesVOC_outParamList;
				storequeryResGetCoursesVOC_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCoursesVOC_outParamList", null);
				if (storequeryResGetCoursesVOC_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCoursesVOC_outParamList in storequeryResGetCoursesVOC_outParamList) {
						if (tmpFieldsqueryResGetCoursesVOC_outParamList != null) {
							// Aux current record variable
							RCLearnerCategoryCoursesRecord tmpAuxCurrentRecordqueryResGetCoursesVOC_outParamList = new RCLearnerCategoryCoursesRecord(null);
							tmpAuxCurrentRecordqueryResGetCoursesVOC_outParamList.ssSTLearnerCategoryCourses.ssOfferingName = (string) (tmpFieldsqueryResGetCoursesVOC_outParamList[0] == null ? "": tmpFieldsqueryResGetCoursesVOC_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCoursesVOC_outParamList.ssSTLearnerCategoryCourses.ssOfferingCode = (string) (tmpFieldsqueryResGetCoursesVOC_outParamList[1] == null ? "": tmpFieldsqueryResGetCoursesVOC_outParamList[1]);

							queryResGetCoursesVOC_outParamList.Append(tmpAuxCurrentRecordqueryResGetCoursesVOC_outParamList);
						}
					}
				}
				queryResGetCoursesVOC_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCoursesVOC_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCoursesVOC_outParamList;
				tmpcurrentrownumberqueryResGetCoursesVOC_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCoursesVOC_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCoursesVOC_outParamList;
				tmpeofqueryResGetCoursesVOC_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCoursesVOC_outParamList_eof", false);
				queryResGetCoursesVOC_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesVOC_outParamList, tmpeofqueryResGetCoursesVOC_outParamList);

				#endregion


				#region fetch queryResGetTutorialsByStudent_outParamList.

				// Read the needed fields of queryResGetTutorialsByStudent_outParamList from storequeryResGetTutorialsByStudent_outParamList
				queryResGetTutorialsByStudent_outParamList = new RLTutorialRecordList();
				ArrayList storequeryResGetTutorialsByStudent_outParamList;
				storequeryResGetTutorialsByStudent_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetTutorialsByStudent_outParamList", null);
				if (storequeryResGetTutorialsByStudent_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetTutorialsByStudent_outParamList in storequeryResGetTutorialsByStudent_outParamList) {
						if (tmpFieldsqueryResGetTutorialsByStudent_outParamList != null) {
							// Aux current record variable
							RCTutorialRecord tmpAuxCurrentRecordqueryResGetTutorialsByStudent_outParamList = new RCTutorialRecord(null);
							tmpAuxCurrentRecordqueryResGetTutorialsByStudent_outParamList.ssENTutorial.ssCreatedAt = (DateTime) (tmpFieldsqueryResGetTutorialsByStudent_outParamList[0] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetTutorialsByStudent_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetTutorialsByStudent_outParamList.ssENTutorial.ssCreatedBy = (int) (tmpFieldsqueryResGetTutorialsByStudent_outParamList[1] == null ? 0: tmpFieldsqueryResGetTutorialsByStudent_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetTutorialsByStudent_outParamList.ssENTutorial.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetTutorialsByStudent_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetTutorialsByStudent_outParamList.ssENTutorial.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetTutorialsByStudent_outParamList[3]);

							queryResGetTutorialsByStudent_outParamList.Append(tmpAuxCurrentRecordqueryResGetTutorialsByStudent_outParamList);
						}
					}
				}
				queryResGetTutorialsByStudent_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetTutorialsByStudent_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetTutorialsByStudent_outParamList;
				tmpcurrentrownumberqueryResGetTutorialsByStudent_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetTutorialsByStudent_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetTutorialsByStudent_outParamList;
				tmpeofqueryResGetTutorialsByStudent_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetTutorialsByStudent_outParamList_eof", false);
				queryResGetTutorialsByStudent_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetTutorialsByStudent_outParamList, tmpeofqueryResGetTutorialsByStudent_outParamList);

				#endregion


				#region fetch queryResGetCoursesEnglish_outParamList.

				// Read the needed fields of queryResGetCoursesEnglish_outParamList from storequeryResGetCoursesEnglish_outParamList
				queryResGetCoursesEnglish_outParamList = new RLLearnerCategoryCoursesRecordList();
				ArrayList storequeryResGetCoursesEnglish_outParamList;
				storequeryResGetCoursesEnglish_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCoursesEnglish_outParamList", null);
				if (storequeryResGetCoursesEnglish_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCoursesEnglish_outParamList in storequeryResGetCoursesEnglish_outParamList) {
						if (tmpFieldsqueryResGetCoursesEnglish_outParamList != null) {
							// Aux current record variable
							RCLearnerCategoryCoursesRecord tmpAuxCurrentRecordqueryResGetCoursesEnglish_outParamList = new RCLearnerCategoryCoursesRecord(null);
							tmpAuxCurrentRecordqueryResGetCoursesEnglish_outParamList.ssSTLearnerCategoryCourses.ssOfferingName = (string) (tmpFieldsqueryResGetCoursesEnglish_outParamList[0] == null ? "": tmpFieldsqueryResGetCoursesEnglish_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCoursesEnglish_outParamList.ssSTLearnerCategoryCourses.ssOfferingCode = (string) (tmpFieldsqueryResGetCoursesEnglish_outParamList[1] == null ? "": tmpFieldsqueryResGetCoursesEnglish_outParamList[1]);

							queryResGetCoursesEnglish_outParamList.Append(tmpAuxCurrentRecordqueryResGetCoursesEnglish_outParamList);
						}
					}
				}
				queryResGetCoursesEnglish_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCoursesEnglish_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCoursesEnglish_outParamList;
				tmpcurrentrownumberqueryResGetCoursesEnglish_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCoursesEnglish_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCoursesEnglish_outParamList;
				tmpeofqueryResGetCoursesEnglish_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCoursesEnglish_outParamList_eof", false);
				queryResGetCoursesEnglish_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCoursesEnglish_outParamList, tmpeofqueryResGetCoursesEnglish_outParamList);

				#endregion


				#region fetch queryResGetStudentCareerAimsByStudent_outParamList.

				// Read the needed fields of queryResGetStudentCareerAimsByStudent_outParamList from storequeryResGetStudentCareerAimsByStudent_outParamList
				queryResGetStudentCareerAimsByStudent_outParamList = new RLStudentCareerAimRecordList();
				ArrayList storequeryResGetStudentCareerAimsByStudent_outParamList;
				storequeryResGetStudentCareerAimsByStudent_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetStudentCareerAimsByStudent_outParamList", null);
				if (storequeryResGetStudentCareerAimsByStudent_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList in storequeryResGetStudentCareerAimsByStudent_outParamList) {
						if (tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList != null) {
							// Aux current record variable
							RCStudentCareerAimRecord tmpAuxCurrentRecordqueryResGetStudentCareerAimsByStudent_outParamList = new RCStudentCareerAimRecord(null);
							tmpAuxCurrentRecordqueryResGetStudentCareerAimsByStudent_outParamList.ssENStudentCareerAim.ssDestination = (string) (tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[0] == null ? "": tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetStudentCareerAimsByStudent_outParamList.ssENStudentCareerAim.ssCreatedBy = (int) (tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[1] == null ? 0: tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetStudentCareerAimsByStudent_outParamList.ssENStudentCareerAim.ssCreatedOn = (DateTime) (tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[2] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetStudentCareerAimsByStudent_outParamList.ssENStudentCareerAim.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetStudentCareerAimsByStudent_outParamList.ssENStudentCareerAim.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentCareerAimsByStudent_outParamList[4]);

							queryResGetStudentCareerAimsByStudent_outParamList.Append(tmpAuxCurrentRecordqueryResGetStudentCareerAimsByStudent_outParamList);
						}
					}
				}
				queryResGetStudentCareerAimsByStudent_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetStudentCareerAimsByStudent_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetStudentCareerAimsByStudent_outParamList;
				tmpcurrentrownumberqueryResGetStudentCareerAimsByStudent_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentCareerAimsByStudent_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentCareerAimsByStudent_outParamList;
				tmpeofqueryResGetStudentCareerAimsByStudent_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentCareerAimsByStudent_outParamList_eof", false);
				queryResGetStudentCareerAimsByStudent_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentCareerAimsByStudent_outParamList, tmpeofqueryResGetStudentCareerAimsByStudent_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcSelectedTab = (int) ViewStateAttributes.GetFromViewState("varLcSelectedTab", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingName = (string) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingName", "");
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingCode = (string) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingCode", "");
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedUnits = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedUnits", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalUnits = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalUnits", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedTargets = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedTargets", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalTargets = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalTargets", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssVisible = (bool) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssVisible", false);
				recListListRecords1_Restore();
				recListListRecords2_Restore();
				recListListRecords3_Restore();
				recListListRecords4_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.K0sfuKre6TUqxnEDun5a7Dw";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/Learner_ILP/ILP_Tab.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\Learner_ILP\\ILP_Tab.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\Learner_ILP\\ILP_Tab.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkCareerAim_List.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTutorials.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTracking.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("0sfuKre6TUqxnEDun5a7Dw"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvSelectTab: VarsBag {
			public int inParamTab;
			public lcvSelectTab(int inParamTab) {
				this.inParamTab = inParamTab;
			}
		}
		/// <summary>
		/// Action <code>CommandSelectTab</code> that represents the Service Studio screen action
		///  <code>SelectTab</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelectTab(HeContext heContext, int inParamTab) {
			CheckPermissions(heContext);
			lcvSelectTab localVars = new lcvSelectTab(inParamTab);
			try {
				varLcSelectedTab = localVars.inParamTab; // SelectedTab = Tab
				// Refresh Widget (wtMenuTab)
				((OSPageViewState) Page).AjaxRefresh(wtMenuTab, "None", StoreViewState);
				// Refresh Widget (wtContentArea)
				ssListRecords1ListDoDataBind = true;
				ssListRecords2ListDoDataBind = true;
				ssListRecords3ListDoDataBind = true;
				ssListRecords4ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtContentArea, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetStudentCareerAimsByStudent
				{
					int datasetGetStudentCareerAimsByStudent_maxRecords = 1;
					if (datasetGetStudentCareerAimsByStudent_maxRecords < 1) datasetGetStudentCareerAimsByStudent_maxRecords = 1;
					queryResGetStudentCareerAimsByStudent_outParamList = FuncssPreparation.datasetGetStudentCareerAimsByStudent(heContext, datasetGetStudentCareerAimsByStudent_maxRecords, IterationMultiplicity.Never, out queryResGetStudentCareerAimsByStudent_outParamCount, inParamStudentReference
					);
				}
				// Query datasetGetTutorialsByStudent
				{
					int datasetGetTutorialsByStudent_maxRecords = 0;
					queryResGetTutorialsByStudent_outParamList = FuncssPreparation.datasetGetTutorialsByStudent(heContext, datasetGetTutorialsByStudent_maxRecords, IterationMultiplicity.Never, out queryResGetTutorialsByStudent_outParamCount, inParamStudentReference
					);
				}
				// Refresh Widget (wtMenuTab)
				((OSPageViewState) Page).AjaxRefresh(wtMenuTab, "None", StoreViewState);
				// Refresh Widget (wtContentArea)
				ssListRecords1ListDoDataBind = true;
				ssListRecords2ListDoDataBind = true;
				ssListRecords3ListDoDataBind = true;
				ssListRecords4ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtContentArea, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container59_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container59_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container59_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container59_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container59)
		/// </summary>
		/// <returns>The Visible State of wt_Container59</returns>
		public bool cnt_Container59_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container50_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container52_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container52_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container52_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container52)
		/// </summary>
		/// <returns>The Visible State of wt_Container52</returns>
		public bool cnt_Container52_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntMenuTab_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntMenuTab_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntMenuTab_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntMenuTab_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMenuTab)
		/// </summary>
		/// <returns>The Visible State of wtMenuTab</returns>
		public bool cntMenuTab_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTargets5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTargets5_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTargets5_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==1)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==1)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem"));
				if (!cntTargets5_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtTargets5
		/// </summary>
		public void cntTargets5_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 1)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTargets5)
		/// </summary>
		/// <returns>The Visible State of wtTargets5</returns>
		public bool cntTargets5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container42_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container42_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("x_v_kGkKLUSh1XiKU_Gydg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = Bv6pKho6Sk+gQZCrmN6P7g) Expression: "Targets"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression11() {
			return "Targets";
		}
		public void cntCareerAims_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntCareerAims_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntCareerAims_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==3)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==3)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntCareerAims_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtCareerAims
		/// </summary>
		public void cntCareerAims_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 3)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtCareerAims)
		/// </summary>
		/// <returns>The Visible State of wtCareerAims</returns>
		public bool cntCareerAims_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container36_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("pfgOsTSwukqAbMPczbeFBw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = CErA8lblvEqKFDR_ncxTFw) Expression: "Career Aim " + internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression71() {
			return ("Career Aim " + (((queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssDestination!=BuiltInFunction.NullTextIdentifier())) ?((("(" +Functions.ssGetDestinations(heContext, queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssDestination).ssENDestinations.ssLabel) + ")")):("")));
		}
		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container45_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container45_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If21_hasRun=false;
		bool if_wt_If21_evalResult;
		public bool if_wt_If21() {
			if (if_wt_If21_hasRun) {
				if_wt_If21_hasRun = false;
				return if_wt_If21_evalResult;
			}
			if_wt_If21_hasRun = true;
			if_wt_If21_evalResult = (queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If21_evalResult;
		}

		/// <summary>
		/// Function to dump expression (Key = oaz7oJRQ7UKEYlSvku+RMA) Expression: "last career aim by " +
		///  internalIf + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression40() {
			return (("last career aim by " + (((queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedBy!=BuiltInFunction.NullIdentifier())) ?(Functions.ssGetUser(heContext, queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedBy).ssENUser.ssName):(""))) + " on ");
		}
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetStudentCareerAimsByStudent_outParamList.CurrentRec.ssENStudentCareerAim.ssCreatedOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTutorial2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTutorial2_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTutorial2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==2)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==2)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntTutorial2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtTutorial2
		/// </summary>
		public void cntTutorial2_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 2)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTutorial2)
		/// </summary>
		/// <returns>The Visible State of wtTutorial2</returns>
		public bool cntTutorial2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("iPW89yOBIkeBhYYNAg8wgg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = zD7zY4B+qkyJMt2ZaVhbXA) Expression: "1 : 1 Tutorial"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression25() {
			return "1 : 1 Tutorial";
		}
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If57_hasRun=false;
		bool if_wt_If57_evalResult;
		public bool if_wt_If57() {
			if (if_wt_If57_hasRun) {
				if_wt_If57_hasRun = false;
				return if_wt_If57_evalResult;
			}
			if_wt_If57_hasRun = true;
			if_wt_If57_evalResult = (queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If57_evalResult;
		}

		/// <summary>
		/// Function to dump expression (Key = zsShjoAUlkqcRidMFOokmw) Expression: "last note by " + internalIf
		///  + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression35() {
			return (("last note by " + (((queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedBy!=BuiltInFunction.NullIdentifier())) ?(Functions.ssGetUser(heContext, queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedBy).ssENUser.ssName):(""))) + " on ");
		}
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance73_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetTutorialsByStudent_outParamList.CurrentRec.ssENTutorial.ssCreatedAt.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntMarkbookTracking_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntMarkbookTracking_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntMarkbookTracking_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==4)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==4)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntMarkbookTracking_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtMarkbookTracking
		/// </summary>
		public void cntMarkbookTracking_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 4)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMarkbookTracking)
		/// </summary>
		/// <returns>The Visible State of wtMarkbookTracking</returns>
		public bool cntMarkbookTracking_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 8B+6_hI4VU6yG3i6vQkNrA) Expression: "Markbook Tracking"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression77() {
			return "Markbook Tracking";
		}
		public void cntContentArea_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentArea_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentArea_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntContentArea_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentArea)
		/// </summary>
		/// <returns>The Visible State of wtContentArea</returns>
		public bool cntContentArea_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container53_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container53_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container53_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container53_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container53)
		/// </summary>
		/// <returns>The Visible State of wt_Container53</returns>
		public bool cnt_Container53_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If49_hasRun=false;
		bool if_wt_If49_evalResult;
		public bool if_wt_If49() {
			if (if_wt_If49_hasRun) {
				if_wt_If49_hasRun = false;
				return if_wt_If49_evalResult;
			}
			if_wt_If49_hasRun = true;
			if_wt_If49_evalResult = (varLcSelectedTab==3);
			return if_wt_If49_evalResult;
		}

		public void cntAims_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntAims_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntAims_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntAims_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAims)
		/// </summary>
		/// <returns>The Visible State of wtAims</returns>
		public bool cntAims_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkCareerAim_List widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkCareerAim_List) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamIsStudentCareerAim = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance14
		/// </summary>
		public void webBlck_WebBlockInstance14_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void webBlckLearnerCareer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkCareerAim_List widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkCareerAim_List) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamIsStudentCareerAim = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wtLearnerCareer
		/// </summary>
		public void webBlckLearnerCareer_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If31_hasRun=false;
		bool if_wt_If31_evalResult;
		public bool if_wt_If31() {
			if (if_wt_If31_hasRun) {
				if_wt_If31_hasRun = false;
				return if_wt_If31_evalResult;
			}
			if_wt_If31_hasRun = true;
			if_wt_If31_evalResult = (varLcSelectedTab==2);
			return if_wt_If31_evalResult;
		}

		public void cntTutorial_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTutorial_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTutorial_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTutorial_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTutorial)
		/// </summary>
		/// <returns>The Visible State of wtTutorial</returns>
		public bool cntTutorial_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance67_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTutorials widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTutorials) sender;
				widget.inParamStudentReference = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance67
		/// </summary>
		public void webBlck_WebBlockInstance67_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If1_hasRun=false;
		bool if_wt_If1_evalResult;
		public bool if_wt_If1() {
			if (if_wt_If1_hasRun) {
				if_wt_If1_hasRun = false;
				return if_wt_If1_evalResult;
			}
			if_wt_If1_hasRun = true;
			if_wt_If1_evalResult = (varLcSelectedTab==1);
			return if_wt_If1_evalResult;
		}

		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container44_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntMath_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntMath_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntMath_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntMath_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMath)
		/// </summary>
		/// <returns>The Visible State of wtMath</returns>
		public bool cntMath_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTargets_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTargets_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTargets_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTargets_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTargets)
		/// </summary>
		/// <returns>The Visible State of wtTargets</returns>
		public bool cntTargets_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords1
				ssListRecords1List = queryResGetCoursesMath_outParamList;
				ssListRecords1ListDoDataBind = false;
				ssListRecords1ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords1_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords1List.Length > 0) {
					ssListRecords1List.CurrentRec = ssListRecords1List[ssListRecords1List.CurrentRowNumber];
				}
				if (ssListRecords1List.Length > e.SelectedIndex) {
					ssListRecords1List.CurrentRec = ssListRecords1List[e.SelectedIndex];
					ssListRecords1List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords1_Store(object dataItem, int index) {
			return "";
		}
		public void recListListRecords1_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords1_Clear(object sender, EventArgs e) {
			wtListRecords1_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords1_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords1List.Length != -1) {
				wtListRecords1_storage.Clear();
				for (int i=startIndex; i<ssListRecords1List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords1_Store(ssListRecords1List.Data[i], wtListRecords1_storage.Count);
				}
			}
		}
		public void recListListRecords1_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords1 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLLearnerCategoryCoursesRecordList getWtListRecords1List() {
			if (ssListRecords1ListDoDataBind) {
				recListListRecords1_onDataBinding(this, null);
			}

			return ssListRecords1List;
		}
		public void webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamCategoryId = ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("9J+4M6ZeU0+g4qKAzSFbVg")).ssId;
				widget.inParamOfferingCode = getWtListRecords1List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode;
				widget.inParamOfferingName = getWtListRecords1List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance10
		/// </summary>
		public void webBlck_WebBlockInstance10_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntEnglish_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntEnglish_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntEnglish_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntEnglish_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtEnglish)
		/// </summary>
		/// <returns>The Visible State of wtEnglish</returns>
		public bool cntEnglish_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTargets2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTargets2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTargets2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTargets2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTargets2)
		/// </summary>
		/// <returns>The Visible State of wtTargets2</returns>
		public bool cntTargets2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords2
				ssListRecords2List = queryResGetCoursesEnglish_outParamList;
				ssListRecords2ListDoDataBind = false;
				ssListRecords2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords2List.Length > 0) {
					ssListRecords2List.CurrentRec = ssListRecords2List[ssListRecords2List.CurrentRowNumber];
				}
				if (ssListRecords2List.Length > e.SelectedIndex) {
					ssListRecords2List.CurrentRec = ssListRecords2List[e.SelectedIndex];
					ssListRecords2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords2_Store(object dataItem, int index) {
			return "";
		}
		public void recListListRecords2_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords2_Clear(object sender, EventArgs e) {
			wtListRecords2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords2_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords2List.Length != -1) {
				wtListRecords2_storage.Clear();
				for (int i=startIndex; i<ssListRecords2List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords2_Store(ssListRecords2List.Data[i], wtListRecords2_storage.Count);
				}
			}
		}
		public void recListListRecords2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLLearnerCategoryCoursesRecordList getWtListRecords2List() {
			if (ssListRecords2ListDoDataBind) {
				recListListRecords2_onDataBinding(this, null);
			}

			return ssListRecords2List;
		}
		public void webBlck_WebBlockInstance38_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamCategoryId = ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("hh0WWQ2FF0acLTzRV4EL3Q")).ssId;
				widget.inParamOfferingCode = getWtListRecords2List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode;
				widget.inParamOfferingName = getWtListRecords2List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance38
		/// </summary>
		public void webBlck_WebBlockInstance38_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntSpecialistProgramme_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSpecialistProgramme_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSpecialistProgramme_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSpecialistProgramme_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistProgramme)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistProgramme</returns>
		public bool cntSpecialistProgramme_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTargets3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTargets3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTargets3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTargets3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTargets3)
		/// </summary>
		/// <returns>The Visible State of wtTargets3</returns>
		public bool cntTargets3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords3
				ssListRecords3List = queryResGetCoursesVOC_outParamList;
				ssListRecords3ListDoDataBind = false;
				ssListRecords3ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords3_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords3List.Length > 0) {
					ssListRecords3List.CurrentRec = ssListRecords3List[ssListRecords3List.CurrentRowNumber];
				}
				if (ssListRecords3List.Length > e.SelectedIndex) {
					ssListRecords3List.CurrentRec = ssListRecords3List[e.SelectedIndex];
					ssListRecords3List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords3_Store(object dataItem, int index) {
			return "";
		}
		public void recListListRecords3_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords3_Clear(object sender, EventArgs e) {
			wtListRecords3_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords3_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords3List.Length != -1) {
				wtListRecords3_storage.Clear();
				for (int i=startIndex; i<ssListRecords3List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords3_Store(ssListRecords3List.Data[i], wtListRecords3_storage.Count);
				}
			}
		}
		public void recListListRecords3_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords3 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLLearnerCategoryCoursesRecordList getWtListRecords3List() {
			if (ssListRecords3ListDoDataBind) {
				recListListRecords3_onDataBinding(this, null);
			}

			return ssListRecords3List;
		}
		public void webBlck_WebBlockInstance47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamCategoryId = ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId;
				widget.inParamOfferingCode = getWtListRecords3List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode;
				widget.inParamOfferingName = getWtListRecords3List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance47
		/// </summary>
		public void webBlck_WebBlockInstance47_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntSpecialistMLW_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSpecialistMLW_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSpecialistMLW_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSpecialistMLW_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSpecialistMLW)
		/// </summary>
		/// <returns>The Visible State of wtSpecialistMLW</returns>
		public bool cntSpecialistMLW_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTargets4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTargets4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTargets4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTargets4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTargets4)
		/// </summary>
		/// <returns>The Visible State of wtTargets4</returns>
		public bool cntTargets4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords4
				ssListRecords4List = queryResGetCoursesMLW_outParamList;
				ssListRecords4ListDoDataBind = false;
				ssListRecords4ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords4_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords4List.Length > 0) {
					ssListRecords4List.CurrentRec = ssListRecords4List[ssListRecords4List.CurrentRowNumber];
				}
				if (ssListRecords4List.Length > e.SelectedIndex) {
					ssListRecords4List.CurrentRec = ssListRecords4List[e.SelectedIndex];
					ssListRecords4List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords4_Store(object dataItem, int index) {
			return "";
		}
		public void recListListRecords4_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords4_Clear(object sender, EventArgs e) {
			wtListRecords4_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords4_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords4List.Length != -1) {
				wtListRecords4_storage.Clear();
				for (int i=startIndex; i<ssListRecords4List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords4_Store(ssListRecords4List.Data[i], wtListRecords4_storage.Count);
				}
			}
		}
		public void recListListRecords4_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords4 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLLearnerCategoryCoursesRecordList getWtListRecords4List() {
			if (ssListRecords4ListDoDataBind) {
				recListListRecords4_onDataBinding(this, null);
			}

			return ssListRecords4List;
		}
		public void webBlck_WebBlockInstance34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkTargets_List) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamCategoryId = ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("iy5u49fNYkGR3K77QLSz4g")).ssId;
				widget.inParamOfferingCode = getWtListRecords4List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingCode;
				widget.inParamOfferingName = getWtListRecords4List().CurrentRec.ssSTLearnerCategoryCourses.ssOfferingName;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance34
		/// </summary>
		public void webBlck_WebBlockInstance34_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If64_hasRun=false;
		bool if_wt_If64_evalResult;
		public bool if_wt_If64() {
			if (if_wt_If64_hasRun) {
				if_wt_If64_hasRun = false;
				return if_wt_If64_evalResult;
			}
			if_wt_If64_hasRun = true;
			if_wt_If64_evalResult = (varLcSelectedTab==4);
			return if_wt_If64_evalResult;
		}

		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container29_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTracking widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkMarkbookTracking) sender;
				widget.inParamStudentReference = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container76_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container76_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container76_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container76_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container76)
		/// </summary>
		/// <returns>The Visible State of wt_Container76</returns>
		public bool cnt_Container76_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public static class FuncCommandSelectTab {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetCoursesMLW" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesMLW(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {ListRecords4}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMLW.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMLW.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMLW.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMLW.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMLW.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMLW.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesMLW in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesMLW in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesMLW in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCoursesMath" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesMath(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {ListRecords1}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    INNER JOIN  {Group} ON  {Target}.[OFFERINGCODE] =  {Group}.[GROUPNAME]  " +
				 "    INNER JOIN  {Student_Group} ON  {Student_Group}.[STUDENTREFERENCE] = @qpstStudentReference AND  {Student_Group}.[GROUPID] =  {Group}.[ID]  " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active'  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMath.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMath.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMath.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMath.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMath.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesMath.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesMath in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       INNER JOIN {Group} ON {Target}.[OfferingCode] = {Group}.[GroupName]      INNER JOIN {Student_Group} ON {Student_Group}.[StudentReference] = @StudentReference AND {Student_Group}.[GroupId] = {Group}.[Id]      WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      AND {Student_Group}.[EnrolmentStatus] = 'Active'      group by {T ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesMath in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       INNER JOIN {Group} ON {Target}.[OfferingCode] = {Group}.[GroupName]      INNER JOIN {Student_Group} ON {Student_Group}.[StudentReference] = @StudentReference AND {Student_Group}.[GroupId] = {Group}.[Id]      WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      AND {Student_Group}.[EnrolmentStatus] = 'Active'      group by {T ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesMath in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       INNER JOIN {Group} ON {Target}.[OfferingCode] = {Group}.[GroupName]      INNER JOIN {Student_Group} ON {Student_Group}.[StudentReference] = @StudentReference AND {Student_Group}.[GroupId] = {Group}.[Id]      WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      AND {Student_Group}.[EnrolmentStatus] = 'Active'      group by {T ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCoursesVOC" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesVOC(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {ListRecords3}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesVOC.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesVOC.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesVOC.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesVOC.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesVOC.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesVOC.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesVOC in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesVOC in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesVOC in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetTutorialsByStudent" of Action "Preparation"
			/// </summary>
			public static RLTutorialRecordList datasetGetTutorialsByStudent(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query PWS0P2n5N0O1sLV8jbBzcQ Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENTutorial.[CREATEDAT] o4, ENTutorial.[CREATEDBY] o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {Tutorial} ENTutorial");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENTutorial.[STUDENT] = @qpstP) AND (ENTutorial.[STUDENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENTutorial.[STUDENT] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENTutorial.[DATE] DESC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLTutorialRecordList outParamList = new RLTutorialRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, false, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLTutorialRecordList _tmp = new RLTutorialRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetTutorialsByStudent.List");
						outParamList = (RLTutorialRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetTutorialsByStudent.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLTutorialRecordList _tmp = new RLTutorialRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetTutorialsByStudent.List");
							outParamList = (RLTutorialRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetTutorialsByStudent.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCoursesEnglish" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesEnglish(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {ListRecords2}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesEnglish.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesEnglish.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesEnglish.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesEnglish.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Learner_ILP.ILP_Tab.Preparation.GetCoursesEnglish.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetCoursesEnglish.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesEnglish in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesEnglish in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesEnglish in Preparation in ILP_Tab in Learner_ILP in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetStudentCareerAimsByStudent" of Action "Preparation"
			/// </summary>
			public static RLStudentCareerAimRecordList datasetGetStudentCareerAimsByStudent(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query _mGYVfeGdkm_dSK8osbW6A Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENStudentCareerAim.[DESTINATION] o3, NULL o4, NULL o5, ENStudentCareerAim.[CREATEDBY] o6, ENStudentCareerAim.[CREATEDON] o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {StudentCareerAim} ENStudentCareerAim");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENStudentCareerAim.[STUDENT] = @qpstP) AND (ENStudentCareerAim.[STUDENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENStudentCareerAim.[STUDENT] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENStudentCareerAim.[DATE] DESC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentCareerAimRecordList outParamList = new RLStudentCareerAimRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentCareerAimRecordList _tmp = new RLStudentCareerAimRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetStudentCareerAimsByStudent.List");
						outParamList = (RLStudentCareerAimRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetStudentCareerAimsByStudent.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentCareerAimRecordList _tmp = new RLStudentCareerAimRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.ILP_Tab.Preparation.GetStudentCareerAimsByStudent.List");
							outParamList = (RLStudentCareerAimRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.ILP_Tab.Preparation.GetStudentCareerAimsByStudent.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.K0sfuKre6TUqxnEDun5a7Dw";
			}
		}
	}

}
