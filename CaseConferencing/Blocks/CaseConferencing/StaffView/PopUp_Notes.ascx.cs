/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowStaffView {
	public abstract class WBlkPopUp_Notes: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamRAGStatusId. Description:
		/// </summary>
		public string inParamRAGStatusId = "";
		/// <summary>
		/// Screen Input Parameter inParamVisible. Description:
		/// </summary>
		public bool inParamVisible = false;
		/// <summary>
		/// Screen Input Parameter inParamtop. Description:
		/// </summary>
		public decimal inParamtop = 0.0M;
		/// <summary>
		/// Screen Input Parameter inParamleft. Description:
		/// </summary>
		public decimal inParamleft = 0.0M;
		/// <summary>
		/// Variable <code>varLcCurrentTab</code> that represents the Service Studio local variable
		///  <code>CurrentTab</code> <p>Description: </p>
		/// </summary>
		int varLcCurrentTab = 1;

		/// <summary>
		/// Variable <code>varLcNotes_Clear</code> that represents the Service Studio local variable
		///  <code>Notes_Clear</code> <p>Description: </p>
		/// </summary>
		RCNoteRecord varLcNotes_Clear = new RCNoteRecord(null);

		/// <summary>
		/// Variable <code>varLcNotes_List</code> that represents the Service Studio local variable
		///  <code>Notes_List</code> <p>Description: </p>
		/// </summary>
		RLUserNoteNoteTypeRecordList varLcNotes_List = new RLUserNoteNoteTypeRecordList();

		/// <summary>
		/// Variable wtPopUpNote
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopUp wtPopUpNote;
		protected OutSystems.HubEdition.WebWidgets.Container wtTabWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container65;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperContent;
		/// <summary>
		/// Variable "True" if the Widget wt_If57
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If57T;

		/// <summary>
		/// Variable "True" if the Widget wt_If57
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If57F;
		protected OutSystems.HubEdition.WebWidgets.Container wtHistory;
		protected OutSystems.HubEdition.WebWidgets.Container wtCurrentRAG2;
		private RLUserNoteNoteTypeRecordList _ssRAGLastChanges_ListList = new RLUserNoteNoteTypeRecordList();
		public RLUserNoteNoteTypeRecordList ssRAGLastChanges_ListList {
			get {
				return _ssRAGLastChanges_ListList; 
			}
			set {
				_ssRAGLastChanges_ListList = value;
				wtRAGLastChanges_List.DataSource = value;
				ssRAGLastChanges_ListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtRAGLastChanges_List;
		public ArrayList wtRAGLastChanges_List_storage = new ArrayList();
		protected bool ssRAGLastChanges_ListList_notUsedYet = true;
		protected bool ssRAGLastChanges_ListListDoDataBind;
		protected bool ssRAGLastChanges_ListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		/// <summary>
		/// Variable "True" if the Widget wt_If71
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If71T;

		/// <summary>
		/// Variable "True" if the Widget wt_If71
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If71F;
		protected OutSystems.HubEdition.WebWidgets.Container wtCurrentRAGSTatus2;
		/// <summary>
		/// Variable (wtDeleteNote) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtDeleteNote;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container46;
		protected OutSystems.HubEdition.WebWidgets.Container wtDescriptionWrapper2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container76;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container39;
		/// <summary>
		/// Variable "True" if the Widget wt_If69
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If69T;

		/// <summary>
		/// Variable "True" if the Widget wt_If69
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If69F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container25;
		/// <summary>
		/// Variable (wt_Link77) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link77;
		/// <summary>
		/// Variable "True" if the Widget wt_If63
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If63T;

		/// <summary>
		/// Variable "True" if the Widget wt_If63
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If63F;
		protected OutSystems.HubEdition.WebWidgets.Container wtEditContent;
		protected OutSystems.HubEdition.WebWidgets.Container wtOverview2;
		protected OutSystems.HubEdition.WebWidgets.Container wtDescription;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container74;
		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17T;

		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		/// <summary>
		/// Variable (wtlnkAtt) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtlnkAtt;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		/// <summary>
		/// Variable (wt_Link27) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link27;
		protected OutSystems.HubEdition.WebWidgets.Container wtResponsible2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container68;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtNoteDescriptionValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtNoteDescriptionValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container83;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCNoteRecord ssNotesEditRecord = new RCNoteRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtNotesEdit_Valid() {
			bool res = true;
			return res;
		}

		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLUserNoteNoteTypeRecordList queryResGetNotesByStudentId2_outParamList = new RLUserNoteNoteTypeRecordList();
		int queryResGetNotesByStudentId2_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("XPJq2_qtMkKqX9AHK05XJg")).ssId, out resUserCheck_outParamPermissionType);
			if (inParamVisible) {
				if ((resUserCheck_outParamPermissionType==BuiltInFunction.NullIdentifier())) {
					// Invisible
					inParamVisible = false; // Visible = False
					varLcCurrentTab = 1; // CurrentTab = 1

				} else {
					// Query datasetGetNotesByStudentId2
					int datasetGetNotesByStudentId2_maxRecords = 5;
					if (datasetGetNotesByStudentId2_maxRecords < 1) datasetGetNotesByStudentId2_maxRecords = 1;
					queryResGetNotesByStudentId2_outParamList = FuncssPreparation.datasetGetNotesByStudentId2(heContext, datasetGetNotesByStudentId2_maxRecords, IterationMultiplicity.Multiple, out queryResGetNotesByStudentId2_outParamCount, inParamStudentReference
					);
					// ListClear2
					ExtendedActions.ListClear(heContext, varLcNotes_List);
					// ListAppendAll2
					ExtendedActions.ListAppendAll(heContext, varLcNotes_List, queryResGetNotesByStudentId2_outParamList);
					ssNotesEditRecord.ssENNote = ((ENNoteEntityRecord) varLcNotes_Clear); // NotesEdit.Record.Note = Notes_Clear
					varLcCurrentTab = ((queryResGetNotesByStudentId2_outParamList.Empty) ?(2):(1)); // CurrentTab = internalIf

				}

			}
		}
		static WBlkPopUp_Notes() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtPopUpNote = (ssCaseConferencing.Flows.FlowCommon.WBlkPopUp) FindControl("wtPopUpNote");
			wtTabWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTabWrapper");
			wt_Container33 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container33");
			wt_Container14 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container14");
			wt_Container49 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container49");
			wt_Container65 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container65");
			wtWrapperContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtWrapperContent");
			wtHistory = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtHistory");
			wtCurrentRAG2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtCurrentRAG2");
			wtRAGLastChanges_List = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtRAGLastChanges_List");
			wtRAGLastChanges_List.StartIndexExpression = () => 0;
			wtRAGLastChanges_List.LineCountExpression = () => 5;
			if (this.wtDeleteNote != null) {
				this.wtDeleteNote.Click += new System.EventHandler(this.wtDeleteNote_Click);
			}
			if (this.wt_Link77 != null) {
				this.wt_Link77.Click += new System.EventHandler(this.wt_Link77_Click);
			}
			wtEditContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtEditContent");
			wtOverview2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtOverview2");
			wtDescription = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDescription");
			wt_Container74 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container74");
			wt_Container19 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container19");
			wtlnkAtt = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wtlnkAtt");
			wt_Container45 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container45");
			wt_Link27 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link27");
			if (this.wt_Link27 != null) {
				this.wt_Link27.Click += new System.EventHandler(this.wt_Link27_Click);
			}
			wtResponsible2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtResponsible2");
			wt_Container68 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container68");
			wt_Container41 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container41");
			wt_Container83 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container83");
			wt_Container24 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container24");
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			wt_Container47 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container47");
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					if (bindEditRecords) {
						wtNotesEdit_onDataBindingDataSource(this.FindControl("wtNotesEdit"), null);
					}
					ssRAGLastChanges_ListListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(this, "wtNoteDescription", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("resUserCheck_outParamPermissionType", resUserCheck_outParamPermissionType, 0);
			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("inParamVisible", inParamVisible, false);
			ViewStateAttributes.SetInViewState("inParamtop", inParamtop, 0.0M);
			ViewStateAttributes.SetInViewState("inParamleft", inParamleft, 0.0M);
			ViewStateAttributes.SetInViewState("varLcCurrentTab", varLcCurrentTab, 0);
			ViewStateAttributes.SetInViewState("varLcNotes_Clear_ssENNote_ssId", varLcNotes_Clear.ssENNote.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcNotes_Clear_ssENNote_ssDescription", varLcNotes_Clear.ssENNote.ssDescription, "");
			ViewStateAttributes.SetInViewState("varLcNotes_Clear_ssENNote_ssDocumentId", varLcNotes_Clear.ssENNote.ssDocumentId, 0);
			ViewStateAttributes.SetInViewState("varLcNotes_Clear_ssENNote_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcNotes_Clear.ssENNote.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, true, false, false, false, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcNotes_Clear_ssENNote_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcNotes_Clear.ssENNote.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, false, true, true, true, false
			}
			)))), null);

			#region store varLcNotes_List.

			int tmpcurrentrownumbervarLcNotes_List = varLcNotes_List.CurrentRowNumber;
			bool tmpeofvarLcNotes_List = varLcNotes_List.Eof;
			ArrayList storevarLcNotes_List = new ArrayList();

			// Write the needed fields of varLcNotes_List to the storevarLcNotes_List
			if (!varLcNotes_List.Empty) {
				try {
					varLcNotes_List.StartIteration();

					while (!varLcNotes_List.Eof) {
						ArrayList tmpFieldsvarLcNotes_List = new ArrayList();
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssId == 0?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssId);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssName == "" ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssName);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssUsername == "" ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssUsername);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssPassword == "" ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssPassword);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssEmail == "" ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssEmail);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssMobilePhone == "" ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssMobilePhone);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssExternal_Id == "" ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssExternal_Id);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssCreation_Date == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssCreation_Date);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssLast_Login == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssLast_Login);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENUser.ssIs_Active == false?(object) null: varLcNotes_List.CurrentRec.ssENUser.ssIs_Active);
						tmpFieldsvarLcNotes_List.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcNotes_List.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsvarLcNotes_List.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcNotes_List.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssId == 0?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssId);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssStudentId == "" ?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssStudentId);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssNoteTypeId == "" ?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssNoteTypeId);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssDescription == "" ?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssDescription);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssCreatedBy == 0?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssCreatedBy);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssDate);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssIsActive == false?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssIsActive);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNote.ssDocumentId == 0?(object) null: varLcNotes_List.CurrentRec.ssENNote.ssDocumentId);
						tmpFieldsvarLcNotes_List.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcNotes_List.CurrentRec.ssENNote.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsvarLcNotes_List.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcNotes_List.CurrentRec.ssENNote.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNoteType.ssId == "" ?(object) null: varLcNotes_List.CurrentRec.ssENNoteType.ssId);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNoteType.ssLabel == "" ?(object) null: varLcNotes_List.CurrentRec.ssENNoteType.ssLabel);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNoteType.ssOrder == 0?(object) null: varLcNotes_List.CurrentRec.ssENNoteType.ssOrder);
						tmpFieldsvarLcNotes_List.Add(varLcNotes_List.CurrentRec.ssENNoteType.ssIs_Active == false?(object) null: varLcNotes_List.CurrentRec.ssENNoteType.ssIs_Active);
						tmpFieldsvarLcNotes_List.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcNotes_List.CurrentRec.ssENNoteType.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true
						}
						))));
						tmpFieldsvarLcNotes_List.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcNotes_List.CurrentRec.ssENNoteType.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false
						}
						))));
						storevarLcNotes_List.Add(tmpFieldsvarLcNotes_List);
						varLcNotes_List.Advance();
					}
				} finally {
					varLcNotes_List.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcNotes_List", storevarLcNotes_List, null);

			#endregion


			#region store varLcNotes_List runtime properties state.

			ViewStateAttributes.SetInViewState("varLcNotes_List_currentrownumber", tmpcurrentrownumbervarLcNotes_List, 0);
			ViewStateAttributes.SetInViewState("varLcNotes_List_eof", tmpeofvarLcNotes_List, false);
			varLcNotes_List.RestoreRecordListState(tmpcurrentrownumbervarLcNotes_List, tmpeofvarLcNotes_List);

			#endregion

			if (IsAjaxRequest) {
				recListRAGLastChanges_List_Rebuild((ssRAGLastChanges_ListListDataBound ? wtRAGLastChanges_List.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRAGLastChanges_List.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtRAGLastChanges_List_list", wtRAGLastChanges_List_storage, null);
			ViewStateAttributes.SetInViewState("wtNoteDescription_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtNotesEdit_record_ssENNote_ssId", ssNotesEditRecord.ssENNote.ssId, 0);
			ViewStateAttributes.SetInViewState("wtNotesEdit_record_ssENNote_ssDescription", ssNotesEditRecord.ssENNote.ssDescription, "");
			ViewStateAttributes.SetInViewState("wtNotesEdit_record_ssENNote_ssDocumentId", ssNotesEditRecord.ssENNote.ssDocumentId, 0);
			ViewStateAttributes.SetInViewState("wtNotesEdit_record_ssENNote_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssNotesEditRecord.ssENNote.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, true, false, false, false, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtNotesEdit_record_ssENNote_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssNotesEditRecord.ssENNote.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, false, true, true, true, false
			}
			)))), null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				resUserCheck_outParamPermissionType = (int) ViewStateAttributes.GetFromViewState("resUserCheck_outParamPermissionType", 0);
				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				inParamVisible = (bool) ViewStateAttributes.GetFromViewState("inParamVisible", false);
				inParamtop = (decimal) ViewStateAttributes.GetFromViewState("inParamtop", 0.0M);
				inParamleft = (decimal) ViewStateAttributes.GetFromViewState("inParamleft", 0.0M);
				varLcCurrentTab = (int) ViewStateAttributes.GetFromViewState("varLcCurrentTab", 0);
				varLcNotes_Clear.ssENNote.ssId = (int) ViewStateAttributes.GetFromViewState("varLcNotes_Clear_ssENNote_ssId", 0);
				varLcNotes_Clear.ssENNote.ssDescription = (string) ViewStateAttributes.GetFromViewState("varLcNotes_Clear_ssENNote_ssDescription", "");
				varLcNotes_Clear.ssENNote.ssDocumentId = (int) ViewStateAttributes.GetFromViewState("varLcNotes_Clear_ssENNote_ssDocumentId", 0);
				varLcNotes_Clear.ssENNote.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcNotes_Clear_ssENNote_ChangedAttributes", null));
				varLcNotes_Clear.ssENNote.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcNotes_Clear_ssENNote_OptimizedAttributes", null));

				#region fetch varLcNotes_List.

				// Read the needed fields of varLcNotes_List from storevarLcNotes_List
				varLcNotes_List = new RLUserNoteNoteTypeRecordList();
				ArrayList storevarLcNotes_List;
				storevarLcNotes_List = (ArrayList) ViewStateAttributes.GetFromViewState("varLcNotes_List", null);
				if (storevarLcNotes_List == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcNotes_List in storevarLcNotes_List) {
						if (tmpFieldsvarLcNotes_List != null) {
							// Aux current record variable
							RCUserNoteNoteTypeRecord tmpAuxCurrentRecordvarLcNotes_List = new RCUserNoteNoteTypeRecord(null);
							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssId = (int) (tmpFieldsvarLcNotes_List[0] == null ? 0: tmpFieldsvarLcNotes_List[0]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssName = (string) (tmpFieldsvarLcNotes_List[1] == null ? "": tmpFieldsvarLcNotes_List[1]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssUsername = (string) (tmpFieldsvarLcNotes_List[2] == null ? "": tmpFieldsvarLcNotes_List[2]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssPassword = (string) (tmpFieldsvarLcNotes_List[3] == null ? "": tmpFieldsvarLcNotes_List[3]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssEmail = (string) (tmpFieldsvarLcNotes_List[4] == null ? "": tmpFieldsvarLcNotes_List[4]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssMobilePhone = (string) (tmpFieldsvarLcNotes_List[5] == null ? "": tmpFieldsvarLcNotes_List[5]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssExternal_Id = (string) (tmpFieldsvarLcNotes_List[6] == null ? "": tmpFieldsvarLcNotes_List[6]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssCreation_Date = (DateTime) (tmpFieldsvarLcNotes_List[7] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcNotes_List[7]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssLast_Login = (DateTime) (tmpFieldsvarLcNotes_List[8] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcNotes_List[8]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ssIs_Active = (bool) (tmpFieldsvarLcNotes_List[9] == null ? false: tmpFieldsvarLcNotes_List[9]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcNotes_List[10]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcNotes_List[11]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssId = (int) (tmpFieldsvarLcNotes_List[12] == null ? 0: tmpFieldsvarLcNotes_List[12]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssStudentId = (string) (tmpFieldsvarLcNotes_List[13] == null ? "": tmpFieldsvarLcNotes_List[13]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssNoteTypeId = (string) (tmpFieldsvarLcNotes_List[14] == null ? "": tmpFieldsvarLcNotes_List[14]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssDescription = (string) (tmpFieldsvarLcNotes_List[15] == null ? "": tmpFieldsvarLcNotes_List[15]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssCreatedBy = (int) (tmpFieldsvarLcNotes_List[16] == null ? 0: tmpFieldsvarLcNotes_List[16]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssDate = (DateTime) (tmpFieldsvarLcNotes_List[17] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcNotes_List[17]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssIsActive = (bool) (tmpFieldsvarLcNotes_List[18] == null ? false: tmpFieldsvarLcNotes_List[18]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ssDocumentId = (int) (tmpFieldsvarLcNotes_List[19] == null ? 0: tmpFieldsvarLcNotes_List[19]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcNotes_List[20]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNote.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcNotes_List[21]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNoteType.ssId = (string) (tmpFieldsvarLcNotes_List[22] == null ? "": tmpFieldsvarLcNotes_List[22]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNoteType.ssLabel = (string) (tmpFieldsvarLcNotes_List[23] == null ? "": tmpFieldsvarLcNotes_List[23]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNoteType.ssOrder = (int) (tmpFieldsvarLcNotes_List[24] == null ? 0: tmpFieldsvarLcNotes_List[24]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNoteType.ssIs_Active = (bool) (tmpFieldsvarLcNotes_List[25] == null ? false: tmpFieldsvarLcNotes_List[25]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNoteType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcNotes_List[26]);

							tmpAuxCurrentRecordvarLcNotes_List.ssENNoteType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcNotes_List[27]);

							varLcNotes_List.Append(tmpAuxCurrentRecordvarLcNotes_List);
						}
					}
				}
				varLcNotes_List.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcNotes_List runtime properties state.

				int tmpcurrentrownumbervarLcNotes_List;
				tmpcurrentrownumbervarLcNotes_List = (int) ViewStateAttributes.GetFromViewState("varLcNotes_List_currentrownumber", 0);
				bool tmpeofvarLcNotes_List;
				tmpeofvarLcNotes_List = (bool) ViewStateAttributes.GetFromViewState("varLcNotes_List_eof", false);
				varLcNotes_List.RestoreRecordListState(tmpcurrentrownumbervarLcNotes_List, tmpeofvarLcNotes_List);

				#endregion

				recListRAGLastChanges_List_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wtNoteDescription")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtNoteDescription_Mandatory", false);
				ssNotesEditRecord.ssENNote.ssId = (int) ViewStateAttributes.GetFromViewState("wtNotesEdit_record_ssENNote_ssId", 0);
				ssNotesEditRecord.ssENNote.ssDescription = (string) ViewStateAttributes.GetFromViewState("wtNotesEdit_record_ssENNote_ssDescription", "");
				ssNotesEditRecord.ssENNote.ssDocumentId = (int) ViewStateAttributes.GetFromViewState("wtNotesEdit_record_ssENNote_ssDocumentId", 0);
				ssNotesEditRecord.ssENNote.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtNotesEdit_record_ssENNote_ChangedAttributes", null));
				ssNotesEditRecord.ssENNote.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtNotesEdit_record_ssENNote_OptimizedAttributes", null));
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wtNoteDescription");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wtNoteDescription");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.Ko1Bna54u8kqP14pZxT3YWA";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopUp.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("o1Bna54u8kqP14pZxT3YWA"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvDelete: VarsBag {
			public int resStudentLog_Create_outParamStudentLogId = 0;

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvDelete() {
			}
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDelete localVars = new lcvDelete();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)) ==ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("tEyHYiOBgEe6CLwwmz5WoQ")).ssId)) {
					getWtRAGLastChanges_ListList().CurrentRec.ssENNote.ssIsActive = false; // RAGLastChanges_List.List.Current.Note.IsActive = False
					// UpdateNote
					ExtendedActions.UpdateNote(heContext, getWtRAGLastChanges_ListList().CurrentRec.ssENNote.ChangedAttributes, ((RCNoteRecord) getWtRAGLastChanges_ListList().CurrentRec.ssENNote));
					// Query datasetGetNotesByStudentId2
					{
						int datasetGetNotesByStudentId2_maxRecords = 5;
						if (datasetGetNotesByStudentId2_maxRecords < 1) datasetGetNotesByStudentId2_maxRecords = 1;
						queryResGetNotesByStudentId2_outParamList = FuncssPreparation.datasetGetNotesByStudentId2(heContext, datasetGetNotesByStudentId2_maxRecords, IterationMultiplicity.Multiple, out queryResGetNotesByStudentId2_outParamCount, inParamStudentReference
						);
					}
					// Refresh Widget (wtRAGLastChanges_List)
					ssRAGLastChanges_ListListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtRAGLastChanges_List, "None", StoreViewState);
					// StudentLog_Create
					Actions.ActionStudentLog_Create(heContext, inParamStudentReference, ((int) Global.App.OsContext.Session["UserID"]), "Note Deleted", ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("A+sXoW97oUOE1mLOhGU9Kw")).ssLogType, getWtRAGLastChanges_ListList().CurrentRec.ssENNote.ssDescription, BuiltInFunction.NullTextIdentifier(), false, 0, "Note Deleted", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
					// ExceptionFeedbackMessage2
					Actions.ActionFeedback_Message(heContext, "Note Deleted", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// Update Screen
					return true;

				} else {
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvAddDocument: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvAddDocument() {
			}
		}
		/// <summary>
		/// Action <code>CommandAddDocument</code> that represents the Service Studio screen action
		///  <code>AddDocument</code> <p> Description: </p>
		/// </summary>
		private bool CommandAddDocument(HeContext heContext) {
			CheckPermissions(heContext);
			lcvAddDocument localVars = new lcvAddDocument();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				ssNotesEditRecord.ssENNote.ssDocumentId = BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)); // NotesEdit.Record.Note.DocumentId = IntegerToEntityRefInteger
				// Refresh Widget (wtEditContent)
				((OSPageViewState) Page).AjaxRefresh(wtEditContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public int resStudentLog_Create_outParamStudentLogId = 0;

			public int resCreateOrUpdateNote_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				if ((ssNotesEditRecord.ssENNote.ssDescription== "")) {
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, "You need to insert the description", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
					// Update Screen
					return true;

				} else {
					ssNotesEditRecord.ssENNote.ssStudentId = inParamStudentReference; // NotesEdit.Record.Note.StudentId = StudentReference
					ssNotesEditRecord.ssENNote.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // NotesEdit.Record.Note.CreatedBy = UserID
					ssNotesEditRecord.ssENNote.ssDate = BuiltInFunction.CurrDateTime(); // NotesEdit.Record.Note.Date = CurrDateTime
					ssNotesEditRecord.ssENNote.ssNoteTypeId = ENNoteTypeEntity.GetRecordByKey(ObjectKey.Parse("PUt2v8eZ3kqW3qOFK2fXJw")).ssId; // NotesEdit.Record.Note.NoteTypeId = Note
					// CreateOrUpdateNote
					ExtendedActions.CreateOrUpdateNote(heContext, ssNotesEditRecord.ChangedAttributes, ssNotesEditRecord, out localVars.resCreateOrUpdateNote_outParamId);
					// StudentLog_Create
					Actions.ActionStudentLog_Create(heContext, inParamStudentReference, ((int) Global.App.OsContext.Session["UserID"]), "New Note", ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("A+sXoW97oUOE1mLOhGU9Kw")).ssLogType, ssNotesEditRecord.ssENNote.ssDescription, BuiltInFunction.NullTextIdentifier(), false, 0, "Note", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
					// Invisible
					inParamVisible = false; // Visible = False
					varLcCurrentTab = 1; // CurrentTab = 1
					// NotifyWidget
					ExtendedActions.NotifyWidget(heContext, RuntimeID, "");
					// Refresh Widget (wtPopUpNote)
					ssRAGLastChanges_ListListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtPopUpNote, "None", StoreViewState);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvChangeTab: VarsBag {
			public int inParamTab;
			public lcvChangeTab(int inParamTab) {
				this.inParamTab = inParamTab;
			}
		}
		/// <summary>
		/// Action <code>CommandChangeTab</code> that represents the Service Studio screen action
		///  <code>ChangeTab</code> <p> Description: </p>
		/// </summary>
		private bool CommandChangeTab(HeContext heContext, int inParamTab) {
			CheckPermissions(heContext);
			lcvChangeTab localVars = new lcvChangeTab(inParamTab);
			try {
				varLcCurrentTab = localVars.inParamTab; // CurrentTab = Tab
				ssNotesEditRecord = varLcNotes_Clear; // NotesEdit.Record = Notes_Clear
				// Refresh Widget (wtPopUpNote)
				ssRAGLastChanges_ListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtPopUpNote, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDownload: VarsBag {
			public int inParamDocumentID;
			public RLDocumentsRecordList queryResGetDocumentById_outParamList = new RLDocumentsRecordList();
			public int queryResGetDocumentById_outParamCount = 0;

			public lcvDownload(int inParamDocumentID) {
				this.inParamDocumentID = inParamDocumentID;
			}
		}
		/// <summary>
		/// Action <code>CommandDownload</code> that represents the Service Studio screen action
		///  <code>Download</code> <p> Description: </p>
		/// </summary>
		private bool CommandDownload(HeContext heContext, int inParamDocumentID) {
			CheckPermissions(heContext);
			lcvDownload localVars = new lcvDownload(inParamDocumentID);
			try {
				// Query datasetGetDocumentById
				int datasetGetDocumentById_maxRecords = 0;
				localVars.queryResGetDocumentById_outParamList = FuncCommandDownload.datasetGetDocumentById(heContext, datasetGetDocumentById_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetDocumentById_outParamCount, localVars.inParamDocumentID
				);
				// Download Download5
				Response.ClearContent();
				string md5Hash_Download5;
				md5Hash_Download5 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData);
				Response.ContentType = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssType;
				Response.AppendHeader("ETag", "\"" + md5Hash_Download5 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download5);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload5 = RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentName);
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload5 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload5);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload5+ "\"");
				byte[] downloadDownload5FileContent = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData;

				if (downloadDownload5FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssType;
						file_info.Second = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentName));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload5FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload5FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "PopUp_Notes", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void webBlckPopUpNote_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkPopUp widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopUp) sender;
				widget.inParamVisible = inParamVisible;
				widget.inParamWidth = 500;
				widget.inParamHeight = 0;
				widget.inParamTop = (inParamtop+26M);
				widget.inParamLeft = inParamleft;
				widget.inParamBottom = (-1);
				widget.inParamRight = (-1);
				widget.inParamArrowLeft = (-1);
				widget.inParamArrowRight = (-1);
				widget.inParamArrowTop = (-1);
				widget.inParamArrowBottom = (-1);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTabWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTabWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTabWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "height:30px;text-align: left;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntTabWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTabWrapper)
		/// </summary>
		/// <returns>The Visible State of wtTabWrapper</returns>
		public bool cntTabWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container33_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((WebControl) sender).CssClass = (((varLcCurrentTab==1)) ?("TabEnabled"):("TabDisabled"));
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 225px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container33_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container33
		/// </summary>
		public void cnt_Container33_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandChangeTab(heContext
				, 1)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "height:100%;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container14_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container14_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("v8O5VJfAtEuGAFl1unUekw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = J+1E8MQmjEGz6IDvPgKGVQ) Expression: "Notes"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression81() {
			return "Notes";
		}
		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container49_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((WebControl) sender).CssClass = (((varLcCurrentTab==2)) ?("TabEnabled"):("TabDisabled"));
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 225px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container49_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container49
		/// </summary>
		public void cnt_Container49_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandChangeTab(heContext
				, 2)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (resUserCheck_outParamPermissionType==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "height:100%;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container65_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container65_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container65_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container65)
		/// </summary>
		/// <returns>The Visible State of wt_Container65</returns>
		public bool cnt_Container65_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = jHxT2DYEn0+05Ufdm9hvWg) Expression: "New Note"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression73() {
			return "New Note";
		}
		public void cntWrapperContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "border: 1px solid #E8E8E8;text-align:left;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperContent)
		/// </summary>
		/// <returns>The Visible State of wtWrapperContent</returns>
		public bool cntWrapperContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If57_hasRun=false;
		bool if_wt_If57_evalResult;
		public bool if_wt_If57() {
			if (if_wt_If57_hasRun) {
				if_wt_If57_hasRun = false;
				return if_wt_If57_evalResult;
			}
			if_wt_If57_hasRun = true;
			if_wt_If57_evalResult = (varLcCurrentTab==1);
			return if_wt_If57_evalResult;
		}

		public void cntHistory_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntHistory_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntHistory_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:21px;color:#757575;font-size: 12px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntHistory_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtHistory)
		/// </summary>
		/// <returns>The Visible State of wtHistory</returns>
		public bool cntHistory_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntCurrentRAG2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntCurrentRAG2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntCurrentRAG2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:15px;font-weight: bold;float:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntCurrentRAG2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtCurrentRAG2)
		/// </summary>
		/// <returns>The Visible State of wtCurrentRAG2</returns>
		public bool cntCurrentRAG2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListRAGLastChanges_List_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtRAGLastChanges_List
				ssRAGLastChanges_ListList = varLcNotes_List;
				ssRAGLastChanges_ListListDoDataBind = false;
				ssRAGLastChanges_ListListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListRAGLastChanges_List_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssRAGLastChanges_ListList.Length > 0) {
					ssRAGLastChanges_ListList.CurrentRec = ssRAGLastChanges_ListList[ssRAGLastChanges_ListList.CurrentRowNumber];
				}
				if (ssRAGLastChanges_ListList.Length > e.SelectedIndex) {
					ssRAGLastChanges_ListList.CurrentRec = ssRAGLastChanges_ListList[e.SelectedIndex];
					ssRAGLastChanges_ListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListRAGLastChanges_List_Store(object dataItem, int index) {
			RCUserNoteNoteTypeRecord tmprec = (RCUserNoteNoteTypeRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENNote.ssId == 0?(object) null: tmprec.ssENNote.ssId);
			tmpFields.Add(tmprec.ssENNote.ssDescription == "" ?(object) null: tmprec.ssENNote.ssDescription);
			tmpFields.Add(tmprec.ssENNote.ssIsActive == false?(object) null: tmprec.ssENNote.ssIsActive);
			tmpFields.Add(tmprec.ssENNote.ssDocumentId == 0?(object) null: tmprec.ssENNote.ssDocumentId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENNote.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, true, false, false, true, true
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENNote.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, false, true, true, false, false
			}
			))));
			if (index < wtRAGLastChanges_List_storage.Count) {
				wtRAGLastChanges_List_storage[index] = tmpFields;
			} else {
				wtRAGLastChanges_List_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListRAGLastChanges_List_Restore() {

			#region fetch ssRAGLastChanges_ListList.

			// Read the needed fields of ssRAGLastChanges_ListList from storewtRAGLastChanges_List_list
			ssRAGLastChanges_ListList = new RLUserNoteNoteTypeRecordList();
			ArrayList storewtRAGLastChanges_List_list;
			storewtRAGLastChanges_List_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtRAGLastChanges_List_list", null);
			if (storewtRAGLastChanges_List_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtRAGLastChanges_List_list in storewtRAGLastChanges_List_list) {
					if (tmpFieldswtRAGLastChanges_List_list != null) {
						// Aux current record variable
						RCUserNoteNoteTypeRecord tmpAuxCurrentRecordwtRAGLastChanges_List_list = new RCUserNoteNoteTypeRecord(null);
						tmpAuxCurrentRecordwtRAGLastChanges_List_list.ssENNote.ssId = (int) (tmpFieldswtRAGLastChanges_List_list[0] == null ? 0: tmpFieldswtRAGLastChanges_List_list[0]);

						tmpAuxCurrentRecordwtRAGLastChanges_List_list.ssENNote.ssDescription = (string) (tmpFieldswtRAGLastChanges_List_list[1] == null ? "": tmpFieldswtRAGLastChanges_List_list[1]);

						tmpAuxCurrentRecordwtRAGLastChanges_List_list.ssENNote.ssIsActive = (bool) (tmpFieldswtRAGLastChanges_List_list[2] == null ? false: tmpFieldswtRAGLastChanges_List_list[2]);

						tmpAuxCurrentRecordwtRAGLastChanges_List_list.ssENNote.ssDocumentId = (int) (tmpFieldswtRAGLastChanges_List_list[3] == null ? 0: tmpFieldswtRAGLastChanges_List_list[3]);

						tmpAuxCurrentRecordwtRAGLastChanges_List_list.ssENNote.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRAGLastChanges_List_list[4]);

						tmpAuxCurrentRecordwtRAGLastChanges_List_list.ssENNote.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRAGLastChanges_List_list[5]);

						ssRAGLastChanges_ListList.Append(tmpAuxCurrentRecordwtRAGLastChanges_List_list);
					}
				}
			}
			ssRAGLastChanges_ListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssRAGLastChanges_ListList runtime properties state.


			if (storewtRAGLastChanges_List_list.Count > 0) {
				ssRAGLastChanges_ListList.RestoreRecordListState(storewtRAGLastChanges_List_list.Count - 1, false);
			} else {
				ssRAGLastChanges_ListList.CurrentRowNumber = 0;
			}

			#endregion

			wtRAGLastChanges_List_storage = storewtRAGLastChanges_List_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListRAGLastChanges_List_Clear(object sender, EventArgs e) {
			wtRAGLastChanges_List_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListRAGLastChanges_List_Rebuild(int startIndex, int lineCount) {
			if (ssRAGLastChanges_ListList.Length != -1) {
				wtRAGLastChanges_List_storage.Clear();
				for (int i=startIndex; i<ssRAGLastChanges_ListList.Data.Count && i<startIndex+lineCount; i++) {
					recListRAGLastChanges_List_Store(ssRAGLastChanges_ListList.Data[i], wtRAGLastChanges_List_storage.Count);
				}
			}
		}
		public void recListRAGLastChanges_List_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtRAGLastChanges_List widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLUserNoteNoteTypeRecordList getWtRAGLastChanges_ListList() {
			if (ssRAGLastChanges_ListListDoDataBind) {
				recListRAGLastChanges_List_onDataBinding(this, null);
			}

			return ssRAGLastChanges_ListList;
		}
		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left: -5px;margin-bottom:15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If71_hasRun=false;
		bool if_wt_If71_evalResult;
		public bool if_wt_If71() {
			if (if_wt_If71_hasRun) {
				if_wt_If71_hasRun = false;
				return if_wt_If71_evalResult;
			}
			if_wt_If71_hasRun = true;
			if_wt_If71_evalResult = (resUserCheck_outParamPermissionType==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			return if_wt_If71_evalResult;
		}

		public void cntCurrentRAGSTatus2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntCurrentRAGSTatus2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntCurrentRAGSTatus2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:30px;font-size: 16px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntCurrentRAGSTatus2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtCurrentRAGSTatus2)
		/// </summary>
		/// <returns>The Visible State of wtCurrentRAGSTatus2</returns>
		public bool cntCurrentRAGSTatus2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void lnkDeleteNote_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtDeleteNote_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				// go to target page
				{

					if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "+L4obEsQgUqurALQQBplBQ";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add("Are you sure you wish to delete this note?");
						screenParameters.Add("Delete Note?");
						screenParameters.Add(ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId);
						screenParameters.Add(true);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_ConfirmationMessage"] = screenParameters;
						string sURLQuery = "MessageText=" + System.Web.HttpUtility.UrlEncode("Are you sure you wish to delete this note?") + "&" +
						 "Title=" + System.Web.HttpUtility.UrlEncode("Delete Note?") + "&" +
						 "ConfirmationMessageButtons=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId)) + "&" +
						 "EscapeMessageText=" + System.Web.HttpUtility.UrlEncode("True");
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Popup_ConfirmationMessage.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return;

					} else {
						string sURLQuery = "MessageText=" + System.Web.HttpUtility.UrlEncode("Are you sure you wish to delete this note?") + "&" +
						 "Title=" + System.Web.HttpUtility.UrlEncode("Delete Note?") + "&" +
						 "ConfirmationMessageButtons=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId)) + "&" +
						 "EscapeMessageText=" + System.Web.HttpUtility.UrlEncode("True");
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Popup_ConfirmationMessage.aspx" + sURLQuery;
						((OSPage) Page).ClearErrorHandler();
						Response.BufferOutput = true;
						if (!OSPage.IsAjaxRequest) {
							Response.Redirect(sURL);
						} else {
							((OSPageViewState) Page).RedirectLocation = sURL;
						}
						return;

					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtDeleteNote)
		/// </summary>
		/// <returns>title of the Link (wtDeleteNote)</returns>
		public string
		lnkDeleteNote_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDeleteNote)
		/// </summary>
		/// <returns>The Visible State of wtDeleteNote</returns>
		public bool lnkDeleteNote_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtDeleteNote)
		/// </summary>
		/// <returns>The Enabled State of wtDeleteNote</returns>
		public bool lnkDeleteNote_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container46_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container46_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("title", "Delete Note" .ToString());
				if (!cnt_Container46_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container46)
		/// </summary>
		/// <returns>The Visible State of wt_Container46</returns>
		public bool cnt_Container46_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance55_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtRAGLastChanges_List, "wtDeleteNote").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance55
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance55_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandDelete(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntDescriptionWrapper2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDescriptionWrapper2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDescriptionWrapper2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:inline-block;width:400px;;height:125px;border: 1px solid #E8E8E8;overflow-y: auto;margin-left: 15px;color: #6F6A6A;font-size: 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntDescriptionWrapper2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDescriptionWrapper2)
		/// </summary>
		/// <returns>The Visible State of wtDescriptionWrapper2</returns>
		public bool cntDescriptionWrapper2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight: 500;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableRow32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableRow32_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableRow32_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width:170px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell60_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell60_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell60_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width:196px;padding: 1px 3px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = iexLZ4KY3USMvEO3YCgkZg) Expression:
		///  Notes_List.Current.Note.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression36() {
			return varLcNotes_List.CurrentRec.ssENNote.ssDescription;
		}
		public void cnt_Container76_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container76_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container76_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color: #9C9898;font-size: 11px;font-weight:100;margin-left:36px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container76_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container76)
		/// </summary>
		/// <returns>The Visible State of wt_Container76</returns>
		public bool cnt_Container76_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = FuLrPorJREiO2jt_19cEKw) Expression: Notes_List.Current.User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			return varLcNotes_List.CurrentRec.ssENUser.ssName;
		}
		public void cnt_Container39_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container39_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container39_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color: #9C9898;font-size: 11px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container39_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container39)
		/// </summary>
		/// <returns>The Visible State of wt_Container39</returns>
		public bool cnt_Container39_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(varLcNotes_List.CurrentRec.ssENNote.ssDate.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If69_hasRun=false;
		bool if_wt_If69_evalResult;
		public bool if_wt_If69() {
			if (if_wt_If69_hasRun) {
				if_wt_If69_hasRun = false;
				return if_wt_If69_evalResult;
			}
			if_wt_If69_hasRun = true;
			if_wt_If69_evalResult = (getWtRAGLastChanges_ListList().CurrentRec.ssENNote.ssDocumentId!=BuiltInFunction.NullIdentifier());
			return if_wt_If69_evalResult;
		}

		public void cnt_Container25_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container25_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container25_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container25_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container25)
		/// </summary>
		/// <returns>The Visible State of wt_Container25</returns>
		public bool cnt_Container25_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link77_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDownload(heContext, getWtRAGLastChanges_ListList().CurrentRec.ssENNote.ssDocumentId)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link77)
		/// </summary>
		/// <returns>title of the Link (wt_Link77)</returns>
		public string
		lnk_Link77_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link77)
		/// </summary>
		/// <returns>The Visible State of wt_Link77</returns>
		public bool lnk_Link77_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link77)
		/// </summary>
		/// <returns>The Enabled State of wt_Link77</returns>
		public bool lnk_Link77_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = wqjysgimXUiumYryu6D_5g) Expression:
		///  GetDocuments(RAGLastChanges_List.List.Current.Note.DocumentId).Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression62() {
			return Functions.ssGetDocuments(heContext, getWtRAGLastChanges_ListList().CurrentRec.ssENNote.ssDocumentId).ssENDocuments.ssDocumentName;
		}
		bool if_wt_If63_hasRun=false;
		bool if_wt_If63_evalResult;
		public bool if_wt_If63() {
			if (if_wt_If63_hasRun) {
				if_wt_If63_hasRun = false;
				return if_wt_If63_evalResult;
			}
			if_wt_If63_hasRun = true;
			if_wt_If63_evalResult = (varLcCurrentTab==2);
			return if_wt_If63_evalResult;
		}

		public void cntEditContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntEditContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntEditContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntEditContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtEditContent)
		/// </summary>
		/// <returns>The Visible State of wtEditContent</returns>
		public bool cntEditContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntOverview2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntOverview2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntOverview2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:21px;color:#757575;font-size: 12px;text-align: left;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntOverview2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtOverview2)
		/// </summary>
		/// <returns>The Visible State of wtOverview2</returns>
		public bool cntOverview2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntDescription_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDescription_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDescription_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:5px;font-weight: bold;font-size: 13px;margin-top:0px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntDescription_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDescription)
		/// </summary>
		/// <returns>The Visible State of wtDescription</returns>
		public bool cntDescription_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Text53_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Text53_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Text53_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-weight: bold;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container74_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container74_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container74_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container74_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container74)
		/// </summary>
		/// <returns>The Visible State of wt_Container74</returns>
		public bool cnt_Container74_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If17_hasRun=false;
		bool if_wt_If17_evalResult;
		public bool if_wt_If17() {
			if (if_wt_If17_hasRun) {
				if_wt_If17_hasRun = false;
				return if_wt_If17_evalResult;
			}
			if_wt_If17_hasRun = true;
			if_wt_If17_evalResult = (ssNotesEditRecord.ssENNote.ssDocumentId==BuiltInFunction.NullIdentifier());
			return if_wt_If17_evalResult;
		}

		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtlnkAtt)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtlnkAtt)</returns>
		public string lnklnkAtt_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("EnableDocumentViewingRestrictions", System.Web.HttpUtility.UrlEncode("False", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("DocumentType", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENDocumentTypeEntity.GetRecordByKey(ObjectKey.Parse("+hSn1uizLkSyzCJpmnsMEg")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_AttachDocument", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtlnkAtt)
		/// </summary>
		/// <returns>title of the Link (wtlnkAtt)</returns>
		public string
		lnklnkAtt_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Visible State of wtlnkAtt</returns>
		public bool lnklnkAtt_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Enabled State of wtlnkAtt</returns>
		public bool lnklnkAtt_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance38_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtlnkAtt.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance38
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance38_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandAddDocument(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container45_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container45_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link27_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDownload(heContext, ssNotesEditRecord.ssENNote.ssDocumentId)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link27)
		/// </summary>
		/// <returns>title of the Link (wt_Link27)</returns>
		public string
		lnk_Link27_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link27)
		/// </summary>
		/// <returns>The Visible State of wt_Link27</returns>
		public bool lnk_Link27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link27)
		/// </summary>
		/// <returns>The Enabled State of wt_Link27</returns>
		public bool lnk_Link27_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = xz0O0FrHVEKweH0NXzrBzA) Expression:
		///  GetDocuments(NotesEdit.Record.Note.DocumentId).Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression72() {
			return Functions.ssGetDocuments(heContext, ssNotesEditRecord.ssENNote.ssDocumentId).ssENDocuments.ssDocumentName;
		}
		public void cntResponsible2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntResponsible2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntResponsible2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntResponsible2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtResponsible2)
		/// </summary>
		/// <returns>The Visible State of wtResponsible2</returns>
		public bool cntResponsible2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container68_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container68_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:inline;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container68_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container68)
		/// </summary>
		/// <returns>The Visible State of wt_Container68</returns>
		public bool cnt_Container68_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void inputwtNoteDescription_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwtNoteDescription_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwtNoteDescription_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color: #6F6A6A;font-size: 15px;padding: 1px 6px;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtNoteDescription_input_value() {
			if (("" !=ssNotesEditRecord.ssENNote.ssDescription)) {
				return ssNotesEditRecord.ssENNote.ssDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtNoteDescription");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssNotesEditRecord.ssENNote.ssDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtNoteDescription_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssNotesEditRecord.ssENNote.ssDescription = ""; 
				} else {
					ssNotesEditRecord.ssENNote.ssDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssNotesEditRecord.ssENNote.ssDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtNoteDescription)
		/// </summary>
		/// <returns>The Visible State of wtNoteDescription</returns>
		public bool inputwtNoteDescription_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtNoteDescription)
		/// </summary>
		/// <returns>The Enabled State of wtNoteDescription</returns>
		public bool inputwtNoteDescription_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtNoteDescription)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtNoteDescription</returns>
		public bool inputwtNoteDescription_isMandatory() {
			return false;
		}

		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container41_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container41_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container83_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container83_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container83_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container83_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container83)
		/// </summary>
		/// <returns>The Visible State of wt_Container83</returns>
		public bool cnt_Container83_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void Hunspell_webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
				widget.inParamTextInputId = this.FindControl("wtNoteDescription").ClientID;
				widget.inParamExtraStyle = "";
				widget.inParamInPopupWindow = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container24_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance48_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon widget = (ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon) sender;
				widget.inParamTextInputId = this.FindControl("wtNoteDescription").ClientID;
				widget.inParamAutoCompleteType = ENAutoCompleteBankTypeEntity.GetRecordByKey(ObjectKey.Parse("yIIEjmZFg06I5+2WSAtQug")).ssId;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container47_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container47_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container47
		/// </summary>
		public void cnt_Container47_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSave(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance56_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wtNotesEdit_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wtNotesEdit_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wtNotesEdit_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wtNotesEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
		}
		public static class FuncCommandDelete {
		}
		public static class FuncCommandAddDocument {
		}
		public static class FuncCommandSave {
		}
		public static class FuncCommandChangeTab {
		}
		public static class FuncCommandDownload {

			/// <summary>
			/// Query Function "GetDocumentById" of Action "Download"
			/// </summary>
			public static RLDocumentsRecordList datasetGetDocumentById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: True
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 3));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENDocuments.[TYPE] o2, ENDocuments.[DOCUMENTNAME] o3, ENDocuments.[DOCUMENTDATA] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {Documents} ENDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENDocuments.[ID] = @qpinP) AND (ENDocuments.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENDocuments.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENDocuments.[TYPE] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDocumentsRecordList outParamList = new RLDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.PopUp_Notes.Download.GetDocumentById.List");
						outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.PopUp_Notes.Download.GetDocumentById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 3) {
						RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.PopUp_Notes.Download.GetDocumentById.List");
							outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.PopUp_Notes.Download.GetDocumentById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncssPreparation {

			private static void datasetGetNotesByStudentId2ReadDB(ref RCUserNoteNoteTypeRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENNote.Read(r, ref index);
				rec.ssENNoteType.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetNotesByStudentId2" of Action "Preparation"
			/// </summary>
			public static RLUserNoteNoteTypeRecordList datasetGetNotesByStudentId2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query x826O4V7U06MUwF_qD0cRw Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENNote.[ID] o1, ENNote.[STUDENTID] o2, ENNote.[NOTETYPEID] o3, ENNote.[DESCRIPTION] o4, ENNote.[CREATEDBY] o5, ENNote.[DATE] o6, ENNote.[ISACTIVE] o7, ENNote.[DOCUMENTID] o8, ENNoteType.[ID] o9, ENNoteType.[LABEL] o10, ENNoteType.[ORDER] o11, ENNoteType.[IS_ACTIVE] o12, ENUser.[ID] o13, ENUser.[NAME] o14, ENUser.[USERNAME] o15, ENUser.[PASSWORD] o16, ENUser.[EMAIL] o17, ENUser.[MOBILEPHONE] o18, ENUser.[EXTERNAL_ID] o19, ENUser.[CREATION_DATE] o20, ENUser.[LAST_LOGIN] o21, ENUser.[IS_ACTIVE] o22");
				fromBuilder.Append(" FROM (({NoteType} ENNoteType Inner JOIN {Note} ENNote ON (ENNote.[NOTETYPEID] = ENNoteType.[ID]))  Inner JOIN {User} ENUser ON (ENNote.[CREATEDBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENNote.[STUDENTID] = @qpstP) AND (ENNote.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENNote.[STUDENTID] IS NULL)");
				}
				whereBuilder.Append(" AND (ENNote.[ISACTIVE] = 1)");
				orderByBuilder.Append(" ORDER BY ENNote.[DATE] DESC , ENNote.[ID] DESC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserNoteNoteTypeRecordList outParamList = new RLUserNoteNoteTypeRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetNotesByStudentId2ReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserNoteNoteTypeRecordList _tmp = new RLUserNoteNoteTypeRecordList();
					_tmp.AlternateReadDBMethod = datasetGetNotesByStudentId2ReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.PopUp_Notes.Preparation.GetNotesByStudentId2.List");
						outParamList = (RLUserNoteNoteTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.PopUp_Notes.Preparation.GetNotesByStudentId2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserNoteNoteTypeRecordList _tmp = new RLUserNoteNoteTypeRecordList();
						_tmp.AlternateReadDBMethod = datasetGetNotesByStudentId2ReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.PopUp_Notes.Preparation.GetNotesByStudentId2.List");
							outParamList = (RLUserNoteNoteTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.PopUp_Notes.Preparation.GetNotesByStudentId2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wtTabWrapper") {
				return wtPopUpNote.wtPopupContent.FindControl("wtTabWrapper");
			}
			if (id == "wt_Container33") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container33");
			}
			if (id == "wt_Table16") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Table16");
			}
			if (id == "wt_TableRow43") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableRow43");
			}
			if (id == "wt_TableCell7") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableCell7");
			}
			if (id == "wt_Container14") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container14");
			}
			if (id == "RichWidgets_wt_WebBlockInstance44") {
				return wtPopUpNote.wtPopupContent.FindControl("RichWidgets_wt_WebBlockInstance44");
			}
			if (id == "wt_InlineExpression81") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_InlineExpression81");
			}
			if (id == "wt_Container49") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container49");
			}
			if (id == "wt_Table50") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Table50");
			}
			if (id == "wt_TableRow42") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableRow42");
			}
			if (id == "wt_TableCell67") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableCell67");
			}
			if (id == "wt_Container65") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container65");
			}
			if (id == "RichWidgets_wt_WebBlockInstance52") {
				return wtPopUpNote.wtPopupContent.FindControl("RichWidgets_wt_WebBlockInstance52");
			}
			if (id == "wt_InlineExpression73") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_InlineExpression73");
			}
			if (id == "wtWrapperContent") {
				return wtPopUpNote.wtPopupContent.FindControl("wtWrapperContent");
			}
			if (id == "wt_If57") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If57");
			}
			if (id == "wt_If57T") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If57T");
			}
			if (id == "wtHistory") {
				return wtPopUpNote.wtPopupContent.FindControl("wtHistory");
			}
			if (id == "wtCurrentRAG2") {
				return wtPopUpNote.wtPopupContent.FindControl("wtCurrentRAG2");
			}
			if (id == "wtRAGLastChanges_List") {
				return wtPopUpNote.wtPopupContent.FindControl("wtRAGLastChanges_List");
			}
			if (id == "wt_If57F") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If57F");
			}
			if (id == "wt_If63") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If63");
			}
			if (id == "wt_If63T") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If63T");
			}
			if (id == "wtEditContent") {
				return wtPopUpNote.wtPopupContent.FindControl("wtEditContent");
			}
			if (id == "wtOverview2") {
				return wtPopUpNote.wtPopupContent.FindControl("wtOverview2");
			}
			if (id == "wtDescription") {
				return wtPopUpNote.wtPopupContent.FindControl("wtDescription");
			}
			if (id == "wt_Text53") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Text53");
			}
			if (id == "wt_Container74") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container74");
			}
			if (id == "wt_If17") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If17");
			}
			if (id == "wt_If17T") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If17T");
			}
			if (id == "wt_Container19") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container19");
			}
			if (id == "wtlnkAtt") {
				return wtPopUpNote.wtPopupContent.FindControl("wtlnkAtt");
			}
			if (id == "wt_Text79") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Text79");
			}
			if (id == "RichWidgets_wt_WebBlockInstance38") {
				return wtPopUpNote.wtPopupContent.FindControl("RichWidgets_wt_WebBlockInstance38");
			}
			if (id == "wt_If17F") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If17F");
			}
			if (id == "wt_Container45") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container45");
			}
			if (id == "wt_Link27") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Link27");
			}
			if (id == "wt_InlineExpression72") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_InlineExpression72");
			}
			if (id == "wtResponsible2") {
				return wtPopUpNote.wtPopupContent.FindControl("wtResponsible2");
			}
			if (id == "wt_Container68") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container68");
			}
			if (id == "wtNoteDescription") {
				return wtPopUpNote.wtPopupContent.FindControl("wtNoteDescription");
			}
			if (id == "wt_Container41") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container41");
			}
			if (id == "wt_Table18") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Table18");
			}
			if (id == "wt_TableRow70") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableRow70");
			}
			if (id == "wt_TableCell58") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableCell58");
			}
			if (id == "wt_Container83") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container83");
			}
			if (id == "Hunspell_wt_WebBlockInstance23") {
				return wtPopUpNote.wtPopupContent.FindControl("Hunspell_wt_WebBlockInstance23");
			}
			if (id == "wt_Container24") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container24");
			}
			if (id == "wt_WebBlockInstance48") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_WebBlockInstance48");
			}
			if (id == "wt_TableCell61") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_TableCell61");
			}
			if (id == "wt_Container11") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container11");
			}
			if (id == "wt_Container47") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Container47");
			}
			if (id == "RichWidgets_wt_WebBlockInstance56") {
				return wtPopUpNote.wtPopupContent.FindControl("RichWidgets_wt_WebBlockInstance56");
			}
			if (id == "wt_Text6") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_Text6");
			}
			if (id == "wtNotesEdit") {
				return wtPopUpNote.wtPopupContent.FindControl("wtNotesEdit");
			}
			if (id == "wt_If63F") {
				return wtPopUpNote.wtPopupContent.FindControl("wt_If63F");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.Ko1Bna54u8kqP14pZxT3YWA";
			}
		}
	}

}
