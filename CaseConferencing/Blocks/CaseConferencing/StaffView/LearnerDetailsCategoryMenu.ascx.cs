/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowStaffView {
	public abstract class WBlkLearnerDetailsCategoryMenu: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamCategoryId. Description:
		/// </summary>
		public int inParamCategoryId = BuiltInFunction.NullIdentifier();
		/// <summary>
		/// Screen Input Parameter inParamOfferingCode. Description:
		/// </summary>
		public string inParamOfferingCode = "";
		/// <summary>
		/// Screen Input Parameter inParamShowOfferings. Description:
		/// </summary>
		public bool inParamShowOfferings = false;
		/// <summary>
		/// Screen Input Parameter inParamShowUnit. Description:
		/// </summary>
		public bool inParamShowUnit = false;
		/// <summary>
		/// Screen Input Parameter inParamShowTarget. Description:
		/// </summary>
		public bool inParamShowTarget = false;
		/// <summary>
		/// Screen Input Parameter inParamShorttermRAG. Description:
		/// </summary>
		public string inParamShorttermRAG = "";
		/// <summary>
		/// Screen Input Parameter inParamOverallRAG. Description:
		/// </summary>
		public string inParamOverallRAG = "";
		/// <summary>
		/// Screen Input Parameter inParamCompletedUnits. Description:
		/// </summary>
		public int inParamCompletedUnits = 0;
		/// <summary>
		/// Screen Input Parameter inParamTotalUnits. Description:
		/// </summary>
		public int inParamTotalUnits = 0;
		/// <summary>
		/// Screen Input Parameter inParamActiveMenu. Description:
		/// </summary>
		public bool inParamActiveMenu = false;
		/// <summary>
		/// Screen Input Parameter inParamFromLearnerList. Description:
		/// </summary>
		public bool inParamFromLearnerList = false;
		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Screen Input Parameter inParamSessionID. Description:
		/// </summary>
		public int inParamSessionID = 0;
		/// <summary>
		/// Screen Input Parameter inParamHasActiveEnrolments. Description:
		/// </summary>
		public bool inParamHasActiveEnrolments = false;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		static WBlkLearnerDetailsCategoryMenu() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("inParamCategoryId", inParamCategoryId, 0);
			ViewStateAttributes.SetInViewState("inParamFromLearnerList", inParamFromLearnerList, false);
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("inParamSessionID", inParamSessionID, 0);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				inParamCategoryId = (int) ViewStateAttributes.GetFromViewState("inParamCategoryId", 0);
				inParamFromLearnerList = (bool) ViewStateAttributes.GetFromViewState("inParamFromLearnerList", false);
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				inParamSessionID = (int) ViewStateAttributes.GetFromViewState("inParamSessionID", 0);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KYG6zQ7Yrdk6XbEntFXuHtg";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("YG6zQ7Yrdk6XbEntFXuHtg"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandOnClickCategory</code> that represents the Service Studio screen action
		///  <code>OnClickCategory</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClickCategory(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Destination = LearnerDetailCategory

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "ST49SJPkk0KUfZ+RKyI+Gw";
							ArrayList screenParameters = new ArrayList();
							screenParameters.Add(inParamStudentReference);
							screenParameters.Add(inParamCategoryId);
							screenParameters.Add(inParamSessionID);
							screenParameters.Add(inParamCourseCode);
							screenParameters.Add(inParamFromLearnerList);
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailCategory"] = screenParameters;
							string sURLQuery = "StudentReference=" + System.Web.HttpUtility.UrlEncode(inParamStudentReference) + "&" +
							 "CategoryId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCategoryId)) + "&" +
							 "SessionID=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamSessionID)) + "&" +
							 "CourseCode=" + System.Web.HttpUtility.UrlEncode(inParamCourseCode) + "&" +
							 "FromLearnerList=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamFromLearnerList));
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "LearnerDetailCategory.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						} else {
							string sURLQuery = "StudentReference=" + System.Web.HttpUtility.UrlEncode(inParamStudentReference) + "&" +
							 "CategoryId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCategoryId)) + "&" +
							 "SessionID=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamSessionID)) + "&" +
							 "CourseCode=" + System.Web.HttpUtility.UrlEncode(inParamCourseCode) + "&" +
							 "FromLearnerList=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamFromLearnerList));
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "LearnerDetailCategory.aspx" + sURLQuery;
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return false;

						}
					}
				} else {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "ST49SJPkk0KUfZ+RKyI+Gw";
							ArrayList screenParameters = new ArrayList();
							screenParameters.Add(inParamStudentReference);
							screenParameters.Add(inParamCategoryId);
							screenParameters.Add(inParamSessionID);
							screenParameters.Add(inParamCourseCode);
							screenParameters.Add(inParamFromLearnerList);
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailCategory"] = screenParameters;
							Server.Transfer("LearnerDetailCategory.aspx");
							return false;

						} else {
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "ST49SJPkk0KUfZ+RKyI+Gw";
							ArrayList screenParameters = new ArrayList();
							screenParameters.Add(inParamStudentReference);
							screenParameters.Add(inParamCategoryId);
							screenParameters.Add(inParamSessionID);
							screenParameters.Add(inParamCourseCode);
							screenParameters.Add(inParamFromLearnerList);
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailCategory"] = screenParameters;
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "LearnerDetailCategory.aspx" + sURLQuery;
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return false;

						}
					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "cursor:pointer;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = ((inParamActiveMenu) ?("LearnerDetailsMenuEntryActive"):("LearnerDetailsMenuEntry"));
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container4
		/// </summary>
		public void cnt_Container4_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClickCategory(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container8_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((WebControl) sender).CssClass = ((inParamHasActiveEnrolments) ?((((inParamShorttermRAG==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId)) ?("LearnerDetailsMenuRAGGreen"):((((inParamShorttermRAG==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId)) ?("LearnerDetailsMenuRAGAmber"):((((inParamShorttermRAG==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId)) ?("LearnerDetailsMenuRAGRed"):("LearnerDetailsMenuRAGBlue"))))))):("LearnerDetailsMenuRAGSilver")) + " OSInline";
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:inline-block;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container8_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;top:-3px;display:inline-block;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = mr9143CJNEaPhPk_MmbkdQ) Expression:
		///  GetCategory(CategoryId).Category.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression9() {
			return Functions.ssGetCategory(heContext, inParamCategoryId).ssENCategory.ssLabel;
		}
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = oyTvcBXQckKCbjwmRK5c9A) Expression: CompletedUnits + "/" +
		///  TotalUnits
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression6() {
			return ((Convert.ToString(inParamCompletedUnits) + "/") +Convert.ToString(inParamTotalUnits));
		}
		public static class FuncCommandOnClickCategory {
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KYG6zQ7Yrdk6XbEntFXuHtg";
			}
		}
	}

}
