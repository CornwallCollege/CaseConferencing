/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkSIAS_Tab: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamSelectedTab. Description: 1 - Initial Assessement ; 2 - Support Needs
		///  ; 3 - Support
		/// </summary>
		public int inParamSelectedTab = 1;
		/// <summary>
		/// Variable <code>varLcLearningSupportID</code> that represents the Service Studio local variable
		///  <code>LearningSupportID</code> <p>Description: </p>
		/// </summary>
		int varLcLearningSupportID = 0;

		/// <summary>
		/// Variable <code>varLcDummyLearningSupportRecord</code> that represents the Service Studio local
		///  variable <code>DummyLearningSupportRecord</code> <p>Description: </p>
		/// </summary>
		RCLearningSupportRecord varLcDummyLearningSupportRecord = new RCLearningSupportRecord(null);

		/// <summary>
		/// Variable <code>varLcIsNew</code> that represents the Service Studio local variable
		///  <code>IsNew</code> <p>Description: </p>
		/// </summary>
		bool varLcIsNew = false;

		/// <summary>
		/// Variable <code>varLcRiskAssessmentID</code> that represents the Service Studio local variable
		///  <code>RiskAssessmentID</code> <p>Description: </p>
		/// </summary>
		int varLcRiskAssessmentID = 0;

		/// <summary>
		/// Variable <code>varLcIsNewRiskAssessment</code> that represents the Service Studio local variable
		///  <code>IsNewRiskAssessment</code> <p>Description: </p>
		/// </summary>
		bool varLcIsNewRiskAssessment = false;

		/// <summary>
		/// Variable <code>varLcIsLoading</code> that represents the Service Studio local variable
		///  <code>IsLoading</code> <p>Description: </p>
		/// </summary>
		bool varLcIsLoading = false;

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container91;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container88;
		protected OutSystems.HubEdition.WebWidgets.Container wtMenuTab;
		protected OutSystems.HubEdition.WebWidgets.Container wtInitialAssessment;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container89;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wtQualsOnEntry;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container58;
		protected OutSystems.HubEdition.WebWidgets.Container wtSupportNeeds2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container67;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container108;
		/// <summary>
		/// Variable "True" if the Widget wt_If98
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If98T;

		/// <summary>
		/// Variable "True" if the Widget wt_If98
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If98F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container54;
		/// <summary>
		/// Variable "True" if the Widget wt_If93
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If93T;

		/// <summary>
		/// Variable "True" if the Widget wt_If93
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If93F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container118;
		/// <summary>
		/// Variable "True" if the Widget wt_If48
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If48T;

		/// <summary>
		/// Variable "True" if the Widget wt_If48
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If48F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container56;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container102;
		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23T;

		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23F;
		private RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList _ssListRecords1List = new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
		public RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList ssListRecords1List {
			get {
				return _ssListRecords1List; 
			}
			set {
				_ssListRecords1List = value;
				wtListRecords1.DataSource = value;
				ssListRecords1ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords1;
		public ArrayList wtListRecords1_storage = new ArrayList();
		protected bool ssListRecords1List_notUsedYet = true;
		protected bool ssListRecords1ListDoDataBind;
		protected bool ssListRecords1ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtSupport3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container111;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container86;
		/// <summary>
		/// Variable (wtCreateLink2) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtCreateLink2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container109;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container117;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container106;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container110;
		private RLLearningSupportLearningSupportTypesRecordList _ssListMenuList = new RLLearningSupportLearningSupportTypesRecordList();
		public RLLearningSupportLearningSupportTypesRecordList ssListMenuList {
			get {
				return _ssListMenuList; 
			}
			set {
				_ssListMenuList = value;
				wtListMenu.DataSource = value;
				ssListMenuListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListMenu;
		public ArrayList wtListMenu_storage = new ArrayList();
		protected bool ssListMenuList_notUsedYet = true;
		protected bool ssListMenuListDoDataBind;
		protected bool ssListMenuListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container112;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		protected OutSystems.HubEdition.WebWidgets.Container wtRiskAssessment;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container114;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		/// <summary>
		/// Variable (wtCreateLink3) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtCreateLink3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container97;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container115;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container103;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		private RLRiskAssessmentRiskAssessmentKeepInformedRecordList _ssListMenu2List = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
		public RLRiskAssessmentRiskAssessmentKeepInformedRecordList ssListMenu2List {
			get {
				return _ssListMenu2List; 
			}
			set {
				_ssListMenu2List = value;
				wtListMenu2.DataSource = value;
				ssListMenu2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListMenu2;
		public ArrayList wtListMenu2_storage = new ArrayList();
		protected bool ssListMenu2List_notUsedYet = true;
		protected bool ssListMenu2ListDoDataBind;
		protected bool ssListMenu2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container34;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container120;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container121;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container38;
		/// <summary>
		/// Variable (wt_Link7) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link7;
		protected OutSystems.HubEdition.WebWidgets.Container wtPastoralSupport;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container101;
		protected OutSystems.HubEdition.WebWidgets.Container wtContentArea;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container76;
		/// <summary>
		/// Variable "True" if the Widget wt_If46
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If46T;

		/// <summary>
		/// Variable "True" if the Widget wt_If46
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If46F;
		protected OutSystems.HubEdition.WebWidgets.Container wtInitialAssessement;
		/// <summary>
		/// Variable "True" if the Widget wt_If55
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If55T;

		/// <summary>
		/// Variable "True" if the Widget wt_If55
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If55F;
		/// <summary>
		/// Variable "True" if the Widget wt_If49
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If49T;

		/// <summary>
		/// Variable "True" if the Widget wt_If49
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If49F;
		protected OutSystems.HubEdition.WebWidgets.Container wtSupport;
		protected OutSystems.HubEdition.WebWidgets.Container wtSupportNeeds;
		/// <summary>
		/// Variable "True" if the Widget wt_If66
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If66T;

		/// <summary>
		/// Variable "True" if the Widget wt_If66
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If66F;
		protected OutSystems.HubEdition.WebWidgets.Container wtLearningSupportContainer;
		/// <summary>
		/// Variable "True" if the Widget wt_If82
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If82T;

		/// <summary>
		/// Variable "True" if the Widget wt_If82
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If82F;
		/// <summary>
		/// Variable "True" if the Widget wt_If20
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If20T;

		/// <summary>
		/// Variable "True" if the Widget wt_If20
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If20F;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLRiskAssessmentRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentsByStudentReference_outParamList = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
		int queryResGetRiskAssessmentsByStudentReference_outParamCount = 0;
		RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList queryResGetSIASSupportNeedsByStudentId_outParamList = new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
		int queryResGetSIASSupportNeedsByStudentId_outParamCount = 0;
		RLSIASSupportRecordList queryResGetSIASSupportsByStudentId_outParamList = new RLSIASSupportRecordList();
		int queryResGetSIASSupportsByStudentId_outParamCount = 0;
		RLLearningSupportLearningSupportTypesRecordList queryResGetLearningSupports_outParamList = new RLLearningSupportLearningSupportTypesRecordList();
		int queryResGetLearningSupports_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("BdSwjq8l9Uut8VgU4iW3KQ")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType==BuiltInFunction.NullIdentifier())) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							if (OSPage.IsAjaxRequest) {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								Response.BufferOutput = true;
								Response.Redirect(sURL, true);
							}
							return;

						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return;

						}
					}
				} else {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							if (OSPage.IsAjaxRequest) {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								Response.BufferOutput = true;
								Response.Redirect(sURL, true);
							}
							return;

						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return;

						}
					}
				}

			} else {
				// Query datasetGetSIASSupportNeedsByStudentId
				int datasetGetSIASSupportNeedsByStudentId_maxRecords = Math.Max(wtListRecords1.StartIndex + wtListRecords1.LineCount + 1, 0);
				queryResGetSIASSupportNeedsByStudentId_outParamList = FuncssPreparation.datasetGetSIASSupportNeedsByStudentId(heContext, datasetGetSIASSupportNeedsByStudentId_maxRecords, IterationMultiplicity.Multiple, out queryResGetSIASSupportNeedsByStudentId_outParamCount, inParamStudentReference
				);
				// Query datasetGetSIASSupportsByStudentId
				int datasetGetSIASSupportsByStudentId_maxRecords = 0;
				queryResGetSIASSupportsByStudentId_outParamList = FuncssPreparation.datasetGetSIASSupportsByStudentId(heContext, datasetGetSIASSupportsByStudentId_maxRecords, IterationMultiplicity.Never, out queryResGetSIASSupportsByStudentId_outParamCount, inParamStudentReference
				);
				// Query datasetGetLearningSupports
				int datasetGetLearningSupports_maxRecords = Math.Max(wtListMenu.StartIndex + wtListMenu.LineCount + 1, 0);
				queryResGetLearningSupports_outParamList = FuncssPreparation.datasetGetLearningSupports(heContext, datasetGetLearningSupports_maxRecords, IterationMultiplicity.Multiple, out queryResGetLearningSupports_outParamCount, inParamStudentReference
				);
				// Query datasetGetRiskAssessmentsByStudentReference
				int datasetGetRiskAssessmentsByStudentReference_maxRecords = Math.Max(wtListMenu2.StartIndex + wtListMenu2.LineCount + 1, 0);
				queryResGetRiskAssessmentsByStudentReference_outParamList = FuncssPreparation.datasetGetRiskAssessmentsByStudentReference(heContext, datasetGetRiskAssessmentsByStudentReference_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentsByStudentReference_outParamCount, Functions.ssCheckSuperUserRole(heContext, ((int) Global.App.OsContext.Session["UserID"]))
				, ((int) Global.App.OsContext.Session["UserID"])
				, inParamStudentReference
				);

			}
		}
		static WBlkSIAS_Tab() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtListRecords1.StartIndexExpression = () => 0;
			wtListRecords1.LineCountExpression = () => 50;
			wtListRecords1.EmptyMessageExpression = () => "No items to show...";
			if (this.wtCreateLink2 != null) {
				this.wtCreateLink2.Click += new System.EventHandler(this.wtCreateLink2_Click);
			}
			wtListMenu.StartIndexExpression = () => 0;
			wtListMenu.LineCountExpression = () => 50;
			if (this.wtCreateLink3 != null) {
				this.wtCreateLink3.Click += new System.EventHandler(this.wtCreateLink3_Click);
			}
			wtListMenu2.StartIndexExpression = () => 0;
			wtListMenu2.LineCountExpression = () => 50;
			if (this.wt_Link7 != null) {
				this.wt_Link7.Click += new System.EventHandler(this.wt_Link7_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssListRecords1ListDoDataBind = true;
					ssListMenuListDoDataBind = true;
					ssListMenu2ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetRiskAssessmentsByStudentReference_outParamList.

			int tmpcurrentrownumberqueryResGetRiskAssessmentsByStudentReference_outParamList = queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRiskAssessmentsByStudentReference_outParamList = queryResGetRiskAssessmentsByStudentReference_outParamList.Eof;
			ArrayList storequeryResGetRiskAssessmentsByStudentReference_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRiskAssessmentsByStudentReference_outParamList to the storequeryResGetRiskAssessmentsByStudentReference_outParamList
			if (!queryResGetRiskAssessmentsByStudentReference_outParamList.Empty) {
				try {
					queryResGetRiskAssessmentsByStudentReference_outParamList.StartIteration();

					while (!queryResGetRiskAssessmentsByStudentReference_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList = new ArrayList();
						tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList.Add(queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRec.ssENRiskAssessment.ssId == 0?(object) null: queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRec.ssENRiskAssessment.ssId);
						tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList.Add(queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRec.ssENRiskAssessment.ssLastUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRec.ssENRiskAssessment.ssLastUpdatedOn);
						tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRec.ssENRiskAssessment.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRec.ssENRiskAssessment.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false
						}
						))));
						storequeryResGetRiskAssessmentsByStudentReference_outParamList.Add(tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList);
						queryResGetRiskAssessmentsByStudentReference_outParamList.Advance();
					}
				} finally {
					queryResGetRiskAssessmentsByStudentReference_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentsByStudentReference_outParamList", storequeryResGetRiskAssessmentsByStudentReference_outParamList, null);

			#endregion


			#region store queryResGetRiskAssessmentsByStudentReference_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentsByStudentReference_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRiskAssessmentsByStudentReference_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentsByStudentReference_outParamList_eof", tmpeofqueryResGetRiskAssessmentsByStudentReference_outParamList, false);
			queryResGetRiskAssessmentsByStudentReference_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentsByStudentReference_outParamList, tmpeofqueryResGetRiskAssessmentsByStudentReference_outParamList);

			#endregion


			#region store queryResGetSIASSupportNeedsByStudentId_outParamList.

			int tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList = queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList = queryResGetSIASSupportNeedsByStudentId_outParamList.Eof;
			ArrayList storequeryResGetSIASSupportNeedsByStudentId_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSIASSupportNeedsByStudentId_outParamList to the storequeryResGetSIASSupportNeedsByStudentId_outParamList
			if (!queryResGetSIASSupportNeedsByStudentId_outParamList.Empty) {
				try {
					queryResGetSIASSupportNeedsByStudentId_outParamList.StartIteration();

					while (!queryResGetSIASSupportNeedsByStudentId_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList = new ArrayList();
						tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList.Add(queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSupportNeeds.ssLabel == "" ?(object) null: queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSupportNeeds.ssLabel);
						tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSupportNeeds.ChangedAttributes, new BitArray(new bool[] {
							false, true, false, false
						}
						))));
						tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSupportNeeds.OptimizedAttributes, new BitArray(new bool[] {
							true, false, true, true
						}
						))));
						storequeryResGetSIASSupportNeedsByStudentId_outParamList.Add(tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList);
						queryResGetSIASSupportNeedsByStudentId_outParamList.Advance();
					}
				} finally {
					queryResGetSIASSupportNeedsByStudentId_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportNeedsByStudentId_outParamList", storequeryResGetSIASSupportNeedsByStudentId_outParamList, null);

			#endregion


			#region store queryResGetSIASSupportNeedsByStudentId_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_eof", tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList, false);
			queryResGetSIASSupportNeedsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList, tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList);

			#endregion


			#region store queryResGetSIASSupportsByStudentId_outParamList.

			int tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList = queryResGetSIASSupportsByStudentId_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSIASSupportsByStudentId_outParamList = queryResGetSIASSupportsByStudentId_outParamList.Eof;
			ArrayList storequeryResGetSIASSupportsByStudentId_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSIASSupportsByStudentId_outParamList to the storequeryResGetSIASSupportsByStudentId_outParamList
			if (!queryResGetSIASSupportsByStudentId_outParamList.Empty) {
				try {
					queryResGetSIASSupportsByStudentId_outParamList.StartIteration();

					while (!queryResGetSIASSupportsByStudentId_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList = new ArrayList();
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType1 == 0?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType1);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType2 == 0?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType2);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType3 == 0?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType3);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, true, true, true, true
						}
						))));
						storequeryResGetSIASSupportsByStudentId_outParamList.Add(tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList);
						queryResGetSIASSupportsByStudentId_outParamList.Advance();
					}
				} finally {
					queryResGetSIASSupportsByStudentId_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportsByStudentId_outParamList", storequeryResGetSIASSupportsByStudentId_outParamList, null);

			#endregion


			#region store queryResGetSIASSupportsByStudentId_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportsByStudentId_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSIASSupportsByStudentId_outParamList_eof", tmpeofqueryResGetSIASSupportsByStudentId_outParamList, false);
			queryResGetSIASSupportsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList, tmpeofqueryResGetSIASSupportsByStudentId_outParamList);

			#endregion


			#region store queryResGetLearningSupports_outParamList.

			int tmpcurrentrownumberqueryResGetLearningSupports_outParamList = queryResGetLearningSupports_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetLearningSupports_outParamList = queryResGetLearningSupports_outParamList.Eof;
			ArrayList storequeryResGetLearningSupports_outParamList = new ArrayList();

			// Write the needed fields of queryResGetLearningSupports_outParamList to the storequeryResGetLearningSupports_outParamList
			if (!queryResGetLearningSupports_outParamList.Empty) {
				try {
					queryResGetLearningSupports_outParamList.StartIteration();

					while (!queryResGetLearningSupports_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetLearningSupports_outParamList = new ArrayList();
						tmpFieldsqueryResGetLearningSupports_outParamList.Add(queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupport.ssId == 0?(object) null: queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupport.ssId);
						tmpFieldsqueryResGetLearningSupports_outParamList.Add(queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupport.ssReviewDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupport.ssReviewDate);
						tmpFieldsqueryResGetLearningSupports_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupport.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, false, true, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetLearningSupports_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupport.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, true, false, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetLearningSupports_outParamList.Add(queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupportTypes.ssLabel == "" ?(object) null: queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupportTypes.ssLabel);
						tmpFieldsqueryResGetLearningSupports_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupportTypes.ChangedAttributes, new BitArray(new bool[] {
							false, true, false, false
						}
						))));
						tmpFieldsqueryResGetLearningSupports_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetLearningSupports_outParamList.CurrentRec.ssENLearningSupportTypes.OptimizedAttributes, new BitArray(new bool[] {
							true, false, true, true
						}
						))));
						storequeryResGetLearningSupports_outParamList.Add(tmpFieldsqueryResGetLearningSupports_outParamList);
						queryResGetLearningSupports_outParamList.Advance();
					}
				} finally {
					queryResGetLearningSupports_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetLearningSupports_outParamList", storequeryResGetLearningSupports_outParamList, null);

			#endregion


			#region store queryResGetLearningSupports_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetLearningSupports_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetLearningSupports_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetLearningSupports_outParamList_eof", tmpeofqueryResGetLearningSupports_outParamList, false);
			queryResGetLearningSupports_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetLearningSupports_outParamList, tmpeofqueryResGetLearningSupports_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("inParamSelectedTab", inParamSelectedTab, 0);
			ViewStateAttributes.SetInViewState("varLcLearningSupportID", varLcLearningSupportID, 0);
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssId", varLcDummyLearningSupportRecord.ssENLearningSupport.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLearningSupportType", varLcDummyLearningSupportRecord.ssENLearningSupport.ssLearningSupportType, 0);
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssOtherDescription", varLcDummyLearningSupportRecord.ssENLearningSupport.ssOtherDescription, "");
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssCommencementDate", varLcDummyLearningSupportRecord.ssENLearningSupport.ssCommencementDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssReviewDate", varLcDummyLearningSupportRecord.ssENLearningSupport.ssReviewDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLeadProfessional", varLcDummyLearningSupportRecord.ssENLearningSupport.ssLeadProfessional, 0);
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLocationOfOriginal", varLcDummyLearningSupportRecord.ssENLearningSupport.ssLocationOfOriginal, "");
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssNotes", varLcDummyLearningSupportRecord.ssENLearningSupport.ssNotes, "");
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLastUpdatedBy", varLcDummyLearningSupportRecord.ssENLearningSupport.ssLastUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLastUpdatedOn", varLcDummyLearningSupportRecord.ssENLearningSupport.ssLastUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcDummyLearningSupportRecord.ssENLearningSupport.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, false, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcDummyLearningSupportRecord.ssENLearningSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, true, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcIsNew", varLcIsNew, false);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentID", varLcRiskAssessmentID, 0);
			ViewStateAttributes.SetInViewState("varLcIsNewRiskAssessment", varLcIsNewRiskAssessment, false);
			ViewStateAttributes.SetInViewState("varLcIsLoading", varLcIsLoading, false);
			if (IsAjaxRequest) {
				recListListRecords1_Rebuild((ssListRecords1ListDataBound ? wtListRecords1.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords1.LineCount);
			}
			if (IsAjaxRequest) {
				recListListMenu_Rebuild((ssListMenuListDataBound ? wtListMenu.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListMenu.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListMenu_list", wtListMenu_storage, null);
			if (IsAjaxRequest) {
				recListListMenu2_Rebuild((ssListMenu2ListDataBound ? wtListMenu2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListMenu2.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListMenu2_list", wtListMenu2_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetRiskAssessmentsByStudentReference_outParamList.

				// Read the needed fields of queryResGetRiskAssessmentsByStudentReference_outParamList from storequeryResGetRiskAssessmentsByStudentReference_outParamList
				queryResGetRiskAssessmentsByStudentReference_outParamList = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
				ArrayList storequeryResGetRiskAssessmentsByStudentReference_outParamList;
				storequeryResGetRiskAssessmentsByStudentReference_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentsByStudentReference_outParamList", null);
				if (storequeryResGetRiskAssessmentsByStudentReference_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList in storequeryResGetRiskAssessmentsByStudentReference_outParamList) {
						if (tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList != null) {
							// Aux current record variable
							RCRiskAssessmentRiskAssessmentKeepInformedRecord tmpAuxCurrentRecordqueryResGetRiskAssessmentsByStudentReference_outParamList = new RCRiskAssessmentRiskAssessmentKeepInformedRecord(null);
							tmpAuxCurrentRecordqueryResGetRiskAssessmentsByStudentReference_outParamList.ssENRiskAssessment.ssId = (int) (tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList[0] == null ? 0: tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentsByStudentReference_outParamList.ssENRiskAssessment.ssLastUpdatedOn = (DateTime) (tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList[1] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentsByStudentReference_outParamList.ssENRiskAssessment.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentsByStudentReference_outParamList.ssENRiskAssessment.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentsByStudentReference_outParamList[3]);

							queryResGetRiskAssessmentsByStudentReference_outParamList.Append(tmpAuxCurrentRecordqueryResGetRiskAssessmentsByStudentReference_outParamList);
						}
					}
				}
				queryResGetRiskAssessmentsByStudentReference_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRiskAssessmentsByStudentReference_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRiskAssessmentsByStudentReference_outParamList;
				tmpcurrentrownumberqueryResGetRiskAssessmentsByStudentReference_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentsByStudentReference_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRiskAssessmentsByStudentReference_outParamList;
				tmpeofqueryResGetRiskAssessmentsByStudentReference_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentsByStudentReference_outParamList_eof", false);
				queryResGetRiskAssessmentsByStudentReference_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentsByStudentReference_outParamList, tmpeofqueryResGetRiskAssessmentsByStudentReference_outParamList);

				#endregion


				#region fetch queryResGetSIASSupportNeedsByStudentId_outParamList.

				// Read the needed fields of queryResGetSIASSupportNeedsByStudentId_outParamList from storequeryResGetSIASSupportNeedsByStudentId_outParamList
				queryResGetSIASSupportNeedsByStudentId_outParamList = new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
				ArrayList storequeryResGetSIASSupportNeedsByStudentId_outParamList;
				storequeryResGetSIASSupportNeedsByStudentId_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportNeedsByStudentId_outParamList", null);
				if (storequeryResGetSIASSupportNeedsByStudentId_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList in storequeryResGetSIASSupportNeedsByStudentId_outParamList) {
						if (tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList != null) {
							// Aux current record variable
							RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList = new RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord(null);
							tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList.ssENSupportNeeds.ssLabel = (string) (tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[0] == null ? "": tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList.ssENSupportNeeds.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList.ssENSupportNeeds.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[2]);

							queryResGetSIASSupportNeedsByStudentId_outParamList.Append(tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList);
						}
					}
				}
				queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSIASSupportNeedsByStudentId_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList;
				tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList;
				tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_eof", false);
				queryResGetSIASSupportNeedsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList, tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList);

				#endregion


				#region fetch queryResGetSIASSupportsByStudentId_outParamList.

				// Read the needed fields of queryResGetSIASSupportsByStudentId_outParamList from storequeryResGetSIASSupportsByStudentId_outParamList
				queryResGetSIASSupportsByStudentId_outParamList = new RLSIASSupportRecordList();
				ArrayList storequeryResGetSIASSupportsByStudentId_outParamList;
				storequeryResGetSIASSupportsByStudentId_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportsByStudentId_outParamList", null);
				if (storequeryResGetSIASSupportsByStudentId_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList in storequeryResGetSIASSupportsByStudentId_outParamList) {
						if (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList != null) {
							// Aux current record variable
							RCSIASSupportRecord tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList = new RCSIASSupportRecord(null);
							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssSupportType1 = (int) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[0] == null ? 0: tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssSupportType2 = (int) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[1] == null ? 0: tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssSupportType3 = (int) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[2] == null ? 0: tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[4]);

							queryResGetSIASSupportsByStudentId_outParamList.Append(tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList);
						}
					}
				}
				queryResGetSIASSupportsByStudentId_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSIASSupportsByStudentId_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList;
				tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportsByStudentId_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSIASSupportsByStudentId_outParamList;
				tmpeofqueryResGetSIASSupportsByStudentId_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportsByStudentId_outParamList_eof", false);
				queryResGetSIASSupportsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList, tmpeofqueryResGetSIASSupportsByStudentId_outParamList);

				#endregion


				#region fetch queryResGetLearningSupports_outParamList.

				// Read the needed fields of queryResGetLearningSupports_outParamList from storequeryResGetLearningSupports_outParamList
				queryResGetLearningSupports_outParamList = new RLLearningSupportLearningSupportTypesRecordList();
				ArrayList storequeryResGetLearningSupports_outParamList;
				storequeryResGetLearningSupports_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetLearningSupports_outParamList", null);
				if (storequeryResGetLearningSupports_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetLearningSupports_outParamList in storequeryResGetLearningSupports_outParamList) {
						if (tmpFieldsqueryResGetLearningSupports_outParamList != null) {
							// Aux current record variable
							RCLearningSupportLearningSupportTypesRecord tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList = new RCLearningSupportLearningSupportTypesRecord(null);
							tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList.ssENLearningSupport.ssId = (int) (tmpFieldsqueryResGetLearningSupports_outParamList[0] == null ? 0: tmpFieldsqueryResGetLearningSupports_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList.ssENLearningSupport.ssReviewDate = (DateTime) (tmpFieldsqueryResGetLearningSupports_outParamList[1] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetLearningSupports_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList.ssENLearningSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupports_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList.ssENLearningSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupports_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList.ssENLearningSupportTypes.ssLabel = (string) (tmpFieldsqueryResGetLearningSupports_outParamList[4] == null ? "": tmpFieldsqueryResGetLearningSupports_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList.ssENLearningSupportTypes.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupports_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList.ssENLearningSupportTypes.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupports_outParamList[6]);

							queryResGetLearningSupports_outParamList.Append(tmpAuxCurrentRecordqueryResGetLearningSupports_outParamList);
						}
					}
				}
				queryResGetLearningSupports_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetLearningSupports_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetLearningSupports_outParamList;
				tmpcurrentrownumberqueryResGetLearningSupports_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetLearningSupports_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetLearningSupports_outParamList;
				tmpeofqueryResGetLearningSupports_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetLearningSupports_outParamList_eof", false);
				queryResGetLearningSupports_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetLearningSupports_outParamList, tmpeofqueryResGetLearningSupports_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				inParamSelectedTab = (int) ViewStateAttributes.GetFromViewState("inParamSelectedTab", 0);
				varLcLearningSupportID = (int) ViewStateAttributes.GetFromViewState("varLcLearningSupportID", 0);
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssId = (int) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssId", 0);
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssLearningSupportType = (int) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLearningSupportType", 0);
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssOtherDescription = (string) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssOtherDescription", "");
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssCommencementDate = (DateTime) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssCommencementDate", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssReviewDate = (DateTime) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssLeadProfessional = (int) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLeadProfessional", 0);
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssLocationOfOriginal = (string) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLocationOfOriginal", "");
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssNotes = (string) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssNotes", "");
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssLastUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLastUpdatedBy", 0);
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssLastUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ssLastUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcDummyLearningSupportRecord.ssENLearningSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_ChangedAttributes", null));
				varLcDummyLearningSupportRecord.ssENLearningSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcDummyLearningSupportRecord_ssENLearningSupport_OptimizedAttributes", null));
				varLcIsNew = (bool) ViewStateAttributes.GetFromViewState("varLcIsNew", false);
				varLcRiskAssessmentID = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentID", 0);
				varLcIsNewRiskAssessment = (bool) ViewStateAttributes.GetFromViewState("varLcIsNewRiskAssessment", false);
				varLcIsLoading = (bool) ViewStateAttributes.GetFromViewState("varLcIsLoading", false);
				recListListRecords1_Restore();
				recListListMenu_Restore();
				recListListMenu2_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KtCluxfvnUEimrSYLYCBGxg";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/Learner_InitialAssessment/SIAS_Tab.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\SIAS_Tab.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\SIAS_Tab.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_InitialAssessment.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_QualsOnEntry.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_Support.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_SupportNeeds.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_LearningSupport.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_RiskAssessment.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_PastoralSupport.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("tCluxfvnUEimrSYLYCBGxg"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandSelectReportId</code> that represents the Service Studio screen action
		///  <code>SelectReportId</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelectReportId(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcLearningSupportID = getWtListMenuList().CurrentRec.ssENLearningSupport.ssId; // LearningSupportID = ListMenu.List.Current.LearningSupport.Id
				varLcIsNew = false; // IsNew = False
				// Refresh Widget (wtListMenu)
				ssListMenuListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListMenu, "None", StoreViewState);
				// Refresh Widget (wtLearningSupportContainer)
				((OSPageViewState) Page).AjaxRefresh(wtLearningSupportContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetSIASSupportNeedsByStudentId
				{
					int datasetGetSIASSupportNeedsByStudentId_maxRecords = Math.Max(wtListRecords1.StartIndex + wtListRecords1.LineCount + 1, 0);
					queryResGetSIASSupportNeedsByStudentId_outParamList = FuncssPreparation.datasetGetSIASSupportNeedsByStudentId(heContext, datasetGetSIASSupportNeedsByStudentId_maxRecords, IterationMultiplicity.Multiple, out queryResGetSIASSupportNeedsByStudentId_outParamCount, inParamStudentReference
					);
				}
				// Query datasetGetSIASSupportsByStudentId
				{
					int datasetGetSIASSupportsByStudentId_maxRecords = 0;
					queryResGetSIASSupportsByStudentId_outParamList = FuncssPreparation.datasetGetSIASSupportsByStudentId(heContext, datasetGetSIASSupportsByStudentId_maxRecords, IterationMultiplicity.Never, out queryResGetSIASSupportsByStudentId_outParamCount, inParamStudentReference
					);
				}
				// Query datasetGetLearningSupports
				{
					int datasetGetLearningSupports_maxRecords = Math.Max(wtListMenu.StartIndex + wtListMenu.LineCount + 1, 0);
					queryResGetLearningSupports_outParamList = FuncssPreparation.datasetGetLearningSupports(heContext, datasetGetLearningSupports_maxRecords, IterationMultiplicity.Multiple, out queryResGetLearningSupports_outParamCount, inParamStudentReference
					);
				}
				// Query datasetGetRiskAssessmentsByStudentReference
				{
					int datasetGetRiskAssessmentsByStudentReference_maxRecords = Math.Max(wtListMenu2.StartIndex + wtListMenu2.LineCount + 1, 0);
					queryResGetRiskAssessmentsByStudentReference_outParamList = FuncssPreparation.datasetGetRiskAssessmentsByStudentReference(heContext, datasetGetRiskAssessmentsByStudentReference_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentsByStudentReference_outParamCount, Functions.ssCheckSuperUserRole(heContext, ((int) Global.App.OsContext.Session["UserID"]))
					, ((int) Global.App.OsContext.Session["UserID"])
					, inParamStudentReference
					);
				}
				// Refresh Widget (wtMenuTab)
				ssListRecords1ListDoDataBind = true;
				ssListMenuListDoDataBind = true;
				ssListMenu2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtMenuTab, "None", StoreViewState);
				// Refresh Widget (wtContentArea)
				((OSPageViewState) Page).AjaxRefresh(wtContentArea, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDeleteRiskAssessment: VarsBag {
			public int inParamRiskAssessmentID2;
			public RLRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new RLRiskAssessmentKeepInformedRecordList();
			public int queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount = 0;

			public RLRiskAssessmentExternalContactsRecordList queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = new RLRiskAssessmentExternalContactsRecordList();
			public int queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount = 0;

			public RLRiskAssessmentManagementOfSupportRecordList queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = new RLRiskAssessmentManagementOfSupportRecordList();
			public int queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount = 0;

			public RLRiskAssessementRisksRecordList queryResGetRiskAssessementRisksByRiskAssessment_outParamList = new RLRiskAssessementRisksRecordList();
			public int queryResGetRiskAssessementRisksByRiskAssessment_outParamCount = 0;

			public lcvDeleteRiskAssessment(int inParamRiskAssessmentID2) {
				this.inParamRiskAssessmentID2 = inParamRiskAssessmentID2;
			}
		}
		/// <summary>
		/// Action <code>CommandDeleteRiskAssessment</code> that represents the Service Studio screen action
		///  <code>DeleteRiskAssessment</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteRiskAssessment(HeContext heContext, int inParamRiskAssessmentID2) {
			CheckPermissions(heContext);
			lcvDeleteRiskAssessment localVars = new lcvDeleteRiskAssessment(inParamRiskAssessmentID2);
			try {
				// Query datasetGetRiskAssessementRisksByRiskAssessment
				int datasetGetRiskAssessementRisksByRiskAssessment_maxRecords = 0;
				localVars.queryResGetRiskAssessementRisksByRiskAssessment_outParamList = FuncCommandDeleteRiskAssessment.datasetGetRiskAssessementRisksByRiskAssessment(heContext, datasetGetRiskAssessementRisksByRiskAssessment_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRiskAssessementRisksByRiskAssessment_outParamCount, localVars.inParamRiskAssessmentID2
				);
				// Foreach GetRiskAssessementRisksByRiskAssessment.List
				localVars.queryResGetRiskAssessementRisksByRiskAssessment_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetRiskAssessementRisksByRiskAssessment_outParamList.Eof) {
						// DeleteRiskAssessementRisks
						ExtendedActions.DeleteRiskAssessementRisks(heContext, localVars.queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessementRisks.ssId);
						localVars.queryResGetRiskAssessementRisksByRiskAssessment_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetRiskAssessementRisksByRiskAssessment_outParamList.EndIteration();
				}
				// Query datasetGetRiskAssessmentExternalContactsByRiskAssessment
				int datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords = 0;
				localVars.queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = FuncCommandDeleteRiskAssessment.datasetGetRiskAssessmentExternalContactsByRiskAssessment(heContext, datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount, localVars.inParamRiskAssessmentID2
				);
				// Foreach GetRiskAssessmentExternalContactsByRiskAssessment.List
				localVars.queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Eof) {
						// DeleteRiskAssessmentExternalContacts
						ExtendedActions.DeleteRiskAssessmentExternalContacts(heContext, localVars.queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentExternalContacts.ssId);
						localVars.queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.EndIteration();
				}
				// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment
				int datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords = 0;
				localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = FuncCommandDeleteRiskAssessment.datasetGetRiskAssessmentKeepInformedsByRiskAssessment(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount, localVars.inParamRiskAssessmentID2
				);
				// Foreach GetRiskAssessmentKeepInformedsByRiskAssessment.List
				localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Eof) {
						// DeleteRiskAssessmentKeepInformed
						ExtendedActions.DeleteRiskAssessmentKeepInformed(heContext, localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssId);
						localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.EndIteration();
				}
				// Query datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm
				int datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords = 0;
				localVars.queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = FuncCommandDeleteRiskAssessment.datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(heContext, datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount, localVars.inParamRiskAssessmentID2
				);
				// Foreach GetRiskAssessmentManagementOfSupportsByRiskAssessm.List
				localVars.queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Eof) {
						// DeleteRiskAssessmentManagementOfSupport
						ExtendedActions.DeleteRiskAssessmentManagementOfSupport(heContext, localVars.queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRec.ssENRiskAssessmentManagementOfSupport.ssId);
						localVars.queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.EndIteration();
				}
				// DeleteRiskAssessment
				ExtendedActions.DeleteRiskAssessment(heContext, localVars.inParamRiskAssessmentID2);
				// Query datasetGetRiskAssessmentsByStudentReference
				{
					int datasetGetRiskAssessmentsByStudentReference_maxRecords = Math.Max(wtListMenu2.StartIndex + wtListMenu2.LineCount + 1, 0);
					queryResGetRiskAssessmentsByStudentReference_outParamList = FuncssPreparation.datasetGetRiskAssessmentsByStudentReference(heContext, datasetGetRiskAssessmentsByStudentReference_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentsByStudentReference_outParamCount, Functions.ssCheckSuperUserRole(heContext, ((int) Global.App.OsContext.Session["UserID"]))
					, ((int) Global.App.OsContext.Session["UserID"])
					, inParamStudentReference
					);
				}
				// Refresh Widget (wtMenuTab)
				ssListRecords1ListDoDataBind = true;
				ssListMenuListDoDataBind = true;
				ssListMenu2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtMenuTab, "None", StoreViewState);
				localVars.inParamRiskAssessmentID2 = BuiltInFunction.NullIdentifier(); // RiskAssessmentID2 = NullIdentifier
				// Refresh Widget (wtRiskAssessmentArea)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtRiskAssessmentArea"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvNewRecord: VarsBag {
			public int resCreateLearningSupport_outParamId = 0;

			public lcvNewRecord() {
			}
		}
		/// <summary>
		/// Action <code>CommandNewRecord</code> that represents the Service Studio screen action
		///  <code>NewRecord</code> <p> Description: </p>
		/// </summary>
		private bool CommandNewRecord(HeContext heContext) {
			CheckPermissions(heContext);
			lcvNewRecord localVars = new lcvNewRecord();
			try {
				varLcDummyLearningSupportRecord.ssENLearningSupport.ssStudentID = inParamStudentReference; // DummyLearningSupportRecord.LearningSupport.StudentID = StudentReference
				// CreateLearningSupport
				ExtendedActions.CreateLearningSupport(heContext, varLcDummyLearningSupportRecord, out localVars.resCreateLearningSupport_outParamId);
				varLcLearningSupportID = localVars.resCreateLearningSupport_outParamId; // LearningSupportID = CreateLearningSupport.Id
				// Query datasetGetLearningSupports
				{
					int datasetGetLearningSupports_maxRecords = Math.Max(wtListMenu.StartIndex + wtListMenu.LineCount + 1, 0);
					queryResGetLearningSupports_outParamList = FuncssPreparation.datasetGetLearningSupports(heContext, datasetGetLearningSupports_maxRecords, IterationMultiplicity.Multiple, out queryResGetLearningSupports_outParamCount, inParamStudentReference
					);
				}
				// Refresh Widget (wtListMenu)
				ssListMenuListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListMenu, "None", StoreViewState);
				varLcIsNew = true; // IsNew = True
				// Refresh Widget (wtLearningSupportContainer)
				((OSPageViewState) Page).AjaxRefresh(wtLearningSupportContainer, "None", StoreViewState);
				varLcIsNew = false; // IsNew = False
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSelectTab: VarsBag {
			public int inParamTab;
			public lcvSelectTab(int inParamTab) {
				this.inParamTab = inParamTab;
			}
		}
		/// <summary>
		/// Action <code>CommandSelectTab</code> that represents the Service Studio screen action
		///  <code>SelectTab</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelectTab(HeContext heContext, int inParamTab) {
			CheckPermissions(heContext);
			lcvSelectTab localVars = new lcvSelectTab(inParamTab);
			try {
				inParamSelectedTab = localVars.inParamTab; // SelectedTab = Tab
				// Refresh Widget (wtMenuTab)
				ssListRecords1ListDoDataBind = true;
				ssListMenuListDoDataBind = true;
				ssListMenu2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtMenuTab, "None", StoreViewState);
				// Refresh Widget (wtContentArea)
				((OSPageViewState) Page).AjaxRefresh(wtContentArea, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandSelectRiskAssessment</code> that represents the Service Studio screen action
		///  <code>SelectRiskAssessment</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelectRiskAssessment(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcRiskAssessmentID = getWtListMenu2List().CurrentRec.ssENRiskAssessment.ssId; // RiskAssessmentID = ListMenu2.List.Current.RiskAssessment.Id
				varLcIsNewRiskAssessment = false; // IsNewRiskAssessment = False
				varLcIsLoading = true; // IsLoading = True
				// Refresh Widget (wtRiskAssessmentArea)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtRiskAssessmentArea"), "None", StoreViewState);
				varLcIsLoading = false; // IsLoading = False
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandNewRiskAssessmentRecord</code> that represents the Service Studio screen action
		///  <code>NewRiskAssessmentRecord</code> <p> Description: </p>
		/// </summary>
		private bool CommandNewRiskAssessmentRecord(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcIsNewRiskAssessment = true; // IsNewRiskAssessment = True
				varLcIsLoading = true; // IsLoading = True
				// Refresh Widget (wtRiskAssessmentArea)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtRiskAssessmentArea"), "None", StoreViewState);
				varLcIsNewRiskAssessment = false; // IsNewRiskAssessment = False
				varLcIsLoading = false; // IsLoading = False
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container30_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container30_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container91_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container91_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container91_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container91_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container91)
		/// </summary>
		/// <returns>The Visible State of wt_Container91</returns>
		public bool cnt_Container91_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container88_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container88_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container88_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container88_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container88)
		/// </summary>
		/// <returns>The Visible State of wt_Container88</returns>
		public bool cnt_Container88_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntMenuTab_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntMenuTab_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntMenuTab_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntMenuTab_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMenuTab)
		/// </summary>
		/// <returns>The Visible State of wtMenuTab</returns>
		public bool cntMenuTab_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntInitialAssessment_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntInitialAssessment_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntInitialAssessment_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((inParamSelectedTab==1)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((inParamSelectedTab==1)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem"));
				if (!cntInitialAssessment_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtInitialAssessment
		/// </summary>
		public void cntInitialAssessment_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 1)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtInitialAssessment)
		/// </summary>
		/// <returns>The Visible State of wtInitialAssessment</returns>
		public bool cntInitialAssessment_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container89_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container89_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container89_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container89_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container89)
		/// </summary>
		/// <returns>The Visible State of wt_Container89</returns>
		public bool cnt_Container89_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance90_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("x_v_kGkKLUSh1XiKU_Gydg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = DdNRkW3iN0GnMBPLPoHH+A) Expression: "Initial Assessment"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression75() {
			return "Initial Assessment";
		}
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntQualsOnEntry_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntQualsOnEntry_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntQualsOnEntry_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((inParamSelectedTab==2)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((inParamSelectedTab==2)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntQualsOnEntry_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtQualsOnEntry
		/// </summary>
		public void cntQualsOnEntry_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 2)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtQualsOnEntry)
		/// </summary>
		/// <returns>The Visible State of wtQualsOnEntry</returns>
		public bool cntQualsOnEntry_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container58_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container58_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container58_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container58_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container58)
		/// </summary>
		/// <returns>The Visible State of wt_Container58</returns>
		public bool cnt_Container58_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("tD89gwpkFEyl4LnwdeU5OA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 4z21Lrz8002HzWgHXN9yoQ) Expression: "Qualifications On Entry"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression28() {
			return "Qualifications On Entry";
		}
		public void cntSupportNeeds2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSupportNeeds2_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSupportNeeds2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((inParamSelectedTab==3)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((inParamSelectedTab==3)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntSupportNeeds2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtSupportNeeds2
		/// </summary>
		public void cntSupportNeeds2_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 3)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSupportNeeds2)
		/// </summary>
		/// <returns>The Visible State of wtSupportNeeds2</returns>
		public bool cntSupportNeeds2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container67_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container67_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container67_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container67_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container67)
		/// </summary>
		/// <returns>The Visible State of wt_Container67</returns>
		public bool cnt_Container67_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance104_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("pfgOsTSwukqAbMPczbeFBw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 92zY3gdSiEymEo+8SWGJmA) Expression: "Support"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression113() {
			return "Support";
		}
		public void cnt_Container108_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container108_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container108_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container108_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container108)
		/// </summary>
		/// <returns>The Visible State of wt_Container108</returns>
		public bool cnt_Container108_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If98_hasRun=false;
		bool if_wt_If98_evalResult;
		public bool if_wt_If98() {
			if (if_wt_If98_hasRun) {
				if_wt_If98_hasRun = false;
				return if_wt_If98_evalResult;
			}
			if_wt_If98_hasRun = true;
			if_wt_If98_evalResult = (queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType1!=BuiltInFunction.NullIdentifier());
			return if_wt_If98_evalResult;
		}

		public void cnt_Container54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container54_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container54_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container54_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container54)
		/// </summary>
		/// <returns>The Visible State of wt_Container54</returns>
		public bool cnt_Container54_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = TaFyDs5uTEGEdez6Rn8U9g) Expression:
		///  GetSIASSupportType(GetSIASSupportsByStudentId.List.Current.SIASSupport.SupportType1).SIASSupportTyp
		/// e.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression11() {
			return Functions.ssGetSIASSupportType(heContext, queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType1).ssENSIASSupportType.ssLabel;
		}
		bool if_wt_If93_hasRun=false;
		bool if_wt_If93_evalResult;
		public bool if_wt_If93() {
			if (if_wt_If93_hasRun) {
				if_wt_If93_hasRun = false;
				return if_wt_If93_evalResult;
			}
			if_wt_If93_hasRun = true;
			if_wt_If93_evalResult = (queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType2!=BuiltInFunction.NullIdentifier());
			return if_wt_If93_evalResult;
		}

		public void cnt_Container118_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container118_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container118_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container118_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container118)
		/// </summary>
		/// <returns>The Visible State of wt_Container118</returns>
		public bool cnt_Container118_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = TI255GJrtUKhXcYUMx5ekQ) Expression:
		///  GetSIASSupportType(GetSIASSupportsByStudentId.List.Current.SIASSupport.SupportType2).SIASSupportTyp
		/// e.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression116() {
			return Functions.ssGetSIASSupportType(heContext, queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType2).ssENSIASSupportType.ssLabel;
		}
		bool if_wt_If48_hasRun=false;
		bool if_wt_If48_evalResult;
		public bool if_wt_If48() {
			if (if_wt_If48_hasRun) {
				if_wt_If48_hasRun = false;
				return if_wt_If48_evalResult;
			}
			if_wt_If48_hasRun = true;
			if_wt_If48_evalResult = (queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType3!=BuiltInFunction.NullIdentifier());
			return if_wt_If48_evalResult;
		}

		public void cnt_Container56_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container56_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container56_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container56_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container56)
		/// </summary>
		/// <returns>The Visible State of wt_Container56</returns>
		public bool cnt_Container56_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = KurCrxsZUUKvoQH2gGmPng) Expression:
		///  GetSIASSupportType(GetSIASSupportsByStudentId.List.Current.SIASSupport.SupportType3).SIASSupportTyp
		/// e.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression92() {
			return Functions.ssGetSIASSupportType(heContext, queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType3).ssENSIASSupportType.ssLabel;
		}
		public void cnt_Container102_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container102_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container102_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container102_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container102)
		/// </summary>
		/// <returns>The Visible State of wt_Container102</returns>
		public bool cnt_Container102_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If23_hasRun=false;
		bool if_wt_If23_evalResult;
		public bool if_wt_If23() {
			if (if_wt_If23_hasRun) {
				if_wt_If23_hasRun = false;
				return if_wt_If23_evalResult;
			}
			if_wt_If23_hasRun = true;
			if_wt_If23_evalResult = (!queryResGetSIASSupportNeedsByStudentId_outParamList.Empty);
			return if_wt_If23_evalResult;
		}

		public void recListListRecords1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords1
				ssListRecords1List = queryResGetSIASSupportNeedsByStudentId_outParamList;
				ssListRecords1ListDoDataBind = false;
				ssListRecords1ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords1_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords1List.Length > 0) {
					ssListRecords1List.CurrentRec = ssListRecords1List[ssListRecords1List.CurrentRowNumber];
				}
				if (ssListRecords1List.Length > e.SelectedIndex) {
					ssListRecords1List.CurrentRec = ssListRecords1List[e.SelectedIndex];
					ssListRecords1List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords1_Store(object dataItem, int index) {
			return "";
		}
		public void recListListRecords1_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords1_Clear(object sender, EventArgs e) {
			wtListRecords1_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords1_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords1List.Length != -1) {
				wtListRecords1_storage.Clear();
				for (int i=startIndex; i<ssListRecords1List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords1_Store(ssListRecords1List.Data[i], wtListRecords1_storage.Count);
				}
			}
		}
		public void recListListRecords1_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords1 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList getWtListRecords1List() {
			if (ssListRecords1ListDoDataBind) {
				recListListRecords1_onDataBinding(this, null);
			}

			return ssListRecords1List;
		}
		/// <summary>
		/// Function to dump expression (Key = iswohg8qSkaoqUAFNkIvFA) Expression: "- " +
		///  ListRecords1.List.Current.SupportNeeds.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression70() {
			return ("- " +getWtListRecords1List().CurrentRec.ssENSupportNeeds.ssLabel);
		}
		public void cntSupport3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSupport3_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSupport3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((inParamSelectedTab==4)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((inParamSelectedTab==4)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntSupport3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtSupport3
		/// </summary>
		public void cntSupport3_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 4)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSupport3)
		/// </summary>
		/// <returns>The Visible State of wtSupport3</returns>
		public bool cntSupport3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container111_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container111_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container111_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container111_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container111)
		/// </summary>
		/// <returns>The Visible State of wt_Container111</returns>
		public bool cnt_Container111_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container86_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container86_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container86_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container86_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container86)
		/// </summary>
		/// <returns>The Visible State of wt_Container86</returns>
		public bool cnt_Container86_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkCreateLink2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnkCreateLink2_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnkCreateLink2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtCreateLink2_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandNewRecord(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtCreateLink2)
		/// </summary>
		/// <returns>title of the Link (wtCreateLink2)</returns>
		public string
		lnkCreateLink2_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCreateLink2)
		/// </summary>
		/// <returns>The Visible State of wtCreateLink2</returns>
		public bool lnkCreateLink2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtCreateLink2)
		/// </summary>
		/// <returns>The Enabled State of wtCreateLink2</returns>
		public bool lnkCreateLink2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container109_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container109_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container109_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top: -50px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container109_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container109)
		/// </summary>
		/// <returns>The Visible State of wt_Container109</returns>
		public bool cnt_Container109_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (Functions.rssespaceuserpermissions_ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("vImxExMxAEOfJ_77HQ0yAw")).ssId) ==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("AKN6u1xOiEiC455XrqaERw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container117_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container117_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container117_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container117_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container117)
		/// </summary>
		/// <returns>The Visible State of wt_Container117</returns>
		public bool cnt_Container117_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container106_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container106_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container106_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container106_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container106)
		/// </summary>
		/// <returns>The Visible State of wt_Container106</returns>
		public bool cnt_Container106_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return getWtListMenuList().Empty;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = K_wZSKVPY0mEPu5ASV5zkA) Expression: "No Learning Support
		///  Records"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression40() {
			return "No Learning Support Records";
		}
		public void cnt_Container110_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container110_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container110_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container110_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container110)
		/// </summary>
		/// <returns>The Visible State of wt_Container110</returns>
		public bool cnt_Container110_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListMenu_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListMenu
				ssListMenuList = queryResGetLearningSupports_outParamList;
				ssListMenuListDoDataBind = false;
				ssListMenuListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListMenu_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListMenuList.Length > 0) {
					ssListMenuList.CurrentRec = ssListMenuList[ssListMenuList.CurrentRowNumber];
				}
				if (ssListMenuList.Length > e.SelectedIndex) {
					ssListMenuList.CurrentRec = ssListMenuList[e.SelectedIndex];
					ssListMenuList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListMenu_Store(object dataItem, int index) {
			RCLearningSupportLearningSupportTypesRecord tmprec = (RCLearningSupportLearningSupportTypesRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENLearningSupport.ssId == 0?(object) null: tmprec.ssENLearningSupport.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENLearningSupport.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENLearningSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true
			}
			))));
			if (index < wtListMenu_storage.Count) {
				wtListMenu_storage[index] = tmpFields;
			} else {
				wtListMenu_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListMenu_Restore() {

			#region fetch ssListMenuList.

			// Read the needed fields of ssListMenuList from storewtListMenu_list
			ssListMenuList = new RLLearningSupportLearningSupportTypesRecordList();
			ArrayList storewtListMenu_list;
			storewtListMenu_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListMenu_list", null);
			if (storewtListMenu_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListMenu_list in storewtListMenu_list) {
					if (tmpFieldswtListMenu_list != null) {
						// Aux current record variable
						RCLearningSupportLearningSupportTypesRecord tmpAuxCurrentRecordwtListMenu_list = new RCLearningSupportLearningSupportTypesRecord(null);
						tmpAuxCurrentRecordwtListMenu_list.ssENLearningSupport.ssId = (int) (tmpFieldswtListMenu_list[0] == null ? 0: tmpFieldswtListMenu_list[0]);

						tmpAuxCurrentRecordwtListMenu_list.ssENLearningSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListMenu_list[1]);

						tmpAuxCurrentRecordwtListMenu_list.ssENLearningSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListMenu_list[2]);

						ssListMenuList.Append(tmpAuxCurrentRecordwtListMenu_list);
					}
				}
			}
			ssListMenuList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListMenuList runtime properties state.


			if (storewtListMenu_list.Count > 0) {
				ssListMenuList.RestoreRecordListState(storewtListMenu_list.Count - 1, false);
			} else {
				ssListMenuList.CurrentRowNumber = 0;
			}

			#endregion

			wtListMenu_storage = storewtListMenu_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListMenu_Clear(object sender, EventArgs e) {
			wtListMenu_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListMenu_Rebuild(int startIndex, int lineCount) {
			if (ssListMenuList.Length != -1) {
				wtListMenu_storage.Clear();
				for (int i=startIndex; i<ssListMenuList.Data.Count && i<startIndex+lineCount; i++) {
					recListListMenu_Store(ssListMenuList.Data[i], wtListMenu_storage.Count);
				}
			}
		}
		public void recListListMenu_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListMenu widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLLearningSupportLearningSupportTypesRecordList getWtListMenuList() {
			if (ssListMenuListDoDataBind) {
				recListListMenu_onDataBinding(this, null);
			}

			return ssListMenuList;
		}
		public void cnt_Container112_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container112_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container112_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((getWtListMenuList().CurrentRec.ssENLearningSupport.ssId==varLcLearningSupportID)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((getWtListMenuList().CurrentRec.ssENLearningSupport.ssId==varLcLearningSupportID)) ?("SafeguardingReportMenuItemSelectedCard"):("SafeguardingReportMenuItem"));
				if (!cnt_Container112_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container112
		/// </summary>
		public void cnt_Container112_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectReportId(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container112)
		/// </summary>
		/// <returns>The Visible State of wt_Container112</returns>
		public bool cnt_Container112_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance62_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = HhPeMo4wRkGYCed4NgCxyA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression31() {
			return (((getWtListMenuList().CurrentRec.ssENLearningSupportTypes.ssLabel== "")) ?("New Record"):(getWtListMenuList().CurrentRec.ssENLearningSupportTypes.ssLabel));
		}
		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container44_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((getWtListMenuList().CurrentRec.ssENLearningSupport.ssReviewDate==BuiltInFunction.NullDate())) ?(false):(true));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = Ly76mFlmFU6_GhZaU0NRRQ) Expression: "Review Date : " +
		///  Format_DateTime(ListMenu.List.Current.LearningSupport.ReviewDate, "dd MMM yyyy")
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression79() {
			return ("Review Date : " +Functions.rssextensiontext_ActionFormat_DateTime(heContext, getWtListMenuList().CurrentRec.ssENLearningSupport.ssReviewDate, "dd MMM yyyy"));
		}
		public void cntRiskAssessment_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntRiskAssessment_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntRiskAssessment_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((inParamSelectedTab==5)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((inParamSelectedTab==5)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntRiskAssessment_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtRiskAssessment
		/// </summary>
		public void cntRiskAssessment_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 5)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtRiskAssessment)
		/// </summary>
		/// <returns>The Visible State of wtRiskAssessment</returns>
		public bool cntRiskAssessment_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container114_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container114_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container114_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container114_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container114)
		/// </summary>
		/// <returns>The Visible State of wt_Container114</returns>
		public bool cnt_Container114_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance81_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("udf3KzMThUu3S4Cv7YMEqA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = Lzh9PnN+IkSDIDiubhNNHw) Expression: "Risk Assessment &
		///  Individual Student Support Plan"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression35() {
			return "Risk Assessment & Individual Student Support Plan";
		}
		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container17_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container17_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkCreateLink3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnkCreateLink3_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnkCreateLink3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtCreateLink3_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandNewRiskAssessmentRecord(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtCreateLink3)
		/// </summary>
		/// <returns>title of the Link (wtCreateLink3)</returns>
		public string
		lnkCreateLink3_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCreateLink3)
		/// </summary>
		/// <returns>The Visible State of wtCreateLink3</returns>
		public bool lnkCreateLink3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtCreateLink3)
		/// </summary>
		/// <returns>The Enabled State of wtCreateLink3</returns>
		public bool lnkCreateLink3_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container97_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container97_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container97_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top: -30px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container97_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container97)
		/// </summary>
		/// <returns>The Visible State of wt_Container97</returns>
		public bool cnt_Container97_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance87_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("AKN6u1xOiEiC455XrqaERw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container115_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container115_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container115_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container115_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container115)
		/// </summary>
		/// <returns>The Visible State of wt_Container115</returns>
		public bool cnt_Container115_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container13_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container13_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container103_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container103_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container103_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container103_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container103)
		/// </summary>
		/// <returns>The Visible State of wt_Container103</returns>
		public bool cnt_Container103_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return getWtListMenu2List().Empty;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 9M8Moawd5Uq2WN_AJKRpkA) Expression: "No Risk Assessments Exist"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression84() {
			return "No Risk Assessments Exist";
		}
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container5_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container5_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListMenu2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListMenu2
				ssListMenu2List = queryResGetRiskAssessmentsByStudentReference_outParamList;
				ssListMenu2ListDoDataBind = false;
				ssListMenu2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListMenu2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListMenu2List.Length > 0) {
					ssListMenu2List.CurrentRec = ssListMenu2List[ssListMenu2List.CurrentRowNumber];
				}
				if (ssListMenu2List.Length > e.SelectedIndex) {
					ssListMenu2List.CurrentRec = ssListMenu2List[e.SelectedIndex];
					ssListMenu2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListMenu2_Store(object dataItem, int index) {
			RCRiskAssessmentRiskAssessmentKeepInformedRecord tmprec = (RCRiskAssessmentRiskAssessmentKeepInformedRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENRiskAssessment.ssId == 0?(object) null: tmprec.ssENRiskAssessment.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRiskAssessment.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRiskAssessment.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			if (index < wtListMenu2_storage.Count) {
				wtListMenu2_storage[index] = tmpFields;
			} else {
				wtListMenu2_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListMenu2_Restore() {

			#region fetch ssListMenu2List.

			// Read the needed fields of ssListMenu2List from storewtListMenu2_list
			ssListMenu2List = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
			ArrayList storewtListMenu2_list;
			storewtListMenu2_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListMenu2_list", null);
			if (storewtListMenu2_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListMenu2_list in storewtListMenu2_list) {
					if (tmpFieldswtListMenu2_list != null) {
						// Aux current record variable
						RCRiskAssessmentRiskAssessmentKeepInformedRecord tmpAuxCurrentRecordwtListMenu2_list = new RCRiskAssessmentRiskAssessmentKeepInformedRecord(null);
						tmpAuxCurrentRecordwtListMenu2_list.ssENRiskAssessment.ssId = (int) (tmpFieldswtListMenu2_list[0] == null ? 0: tmpFieldswtListMenu2_list[0]);

						tmpAuxCurrentRecordwtListMenu2_list.ssENRiskAssessment.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListMenu2_list[1]);

						tmpAuxCurrentRecordwtListMenu2_list.ssENRiskAssessment.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListMenu2_list[2]);

						ssListMenu2List.Append(tmpAuxCurrentRecordwtListMenu2_list);
					}
				}
			}
			ssListMenu2List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListMenu2List runtime properties state.


			if (storewtListMenu2_list.Count > 0) {
				ssListMenu2List.RestoreRecordListState(storewtListMenu2_list.Count - 1, false);
			} else {
				ssListMenu2List.CurrentRowNumber = 0;
			}

			#endregion

			wtListMenu2_storage = storewtListMenu2_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListMenu2_Clear(object sender, EventArgs e) {
			wtListMenu2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListMenu2_Rebuild(int startIndex, int lineCount) {
			if (ssListMenu2List.Length != -1) {
				wtListMenu2_storage.Clear();
				for (int i=startIndex; i<ssListMenu2List.Data.Count && i<startIndex+lineCount; i++) {
					recListListMenu2_Store(ssListMenu2List.Data[i], wtListMenu2_storage.Count);
				}
			}
		}
		public void recListListMenu2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListMenu2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRiskAssessmentRiskAssessmentKeepInformedRecordList getWtListMenu2List() {
			if (ssListMenu2ListDoDataBind) {
				recListListMenu2_onDataBinding(this, null);
			}

			return ssListMenu2List;
		}
		public void cnt_Container34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container34_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container34_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((getWtListMenu2List().CurrentRec.ssENRiskAssessment.ssId==varLcRiskAssessmentID)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((getWtListMenu2List().CurrentRec.ssENRiskAssessment.ssId==varLcRiskAssessmentID)) ?("SafeguardingReportMenuItemSelectedCard"):("SafeguardingReportMenuItem"));
				if (!cnt_Container34_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container34
		/// </summary>
		public void cnt_Container34_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectRiskAssessment(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container34)
		/// </summary>
		/// <returns>The Visible State of wt_Container34</returns>
		public bool cnt_Container34_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container120_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container120_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container120_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container120_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container120)
		/// </summary>
		/// <returns>The Visible State of wt_Container120</returns>
		public bool cnt_Container120_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = tXvIXwF_zU+nTnfd0E6TiQ) Expression: "Risk Assessment"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression47() {
			return "Risk Assessment";
		}
		public void cnt_Container121_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container121_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container121_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container121_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container121)
		/// </summary>
		/// <returns>The Visible State of wt_Container121</returns>
		public bool cnt_Container121_isVisible() {
			return true;
		}

		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = o5s4zGv_QUaMzuqKR51bYQ) Expression: "Created : " +
		///  Format_DateTime(ListMenu2.List.Current.RiskAssessment.LastUpdatedOn, "dd MMM yyyy")
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression107() {
			return ("Created : " +Functions.rssextensiontext_ActionFormat_DateTime(heContext, getWtListMenu2List().CurrentRec.ssENRiskAssessment.ssLastUpdatedOn, "dd MMM yyyy"));
		}
		public void cnt_Container38_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container38_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container38_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container38_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container38)
		/// </summary>
		/// <returns>The Visible State of wt_Container38</returns>
		public bool cnt_Container38_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link7_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeleteRiskAssessment(heContext, getWtListMenu2List().CurrentRec.ssENRiskAssessment.ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link7)
		/// </summary>
		/// <returns>title of the Link (wt_Link7)</returns>
		public string
		lnk_Link7_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link7)
		/// </summary>
		/// <returns>The Visible State of wt_Link7</returns>
		public bool lnk_Link7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link7)
		/// </summary>
		/// <returns>The Enabled State of wt_Link7</returns>
		public bool lnk_Link7_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntPastoralSupport_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntPastoralSupport_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntPastoralSupport_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((inParamSelectedTab==6)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((inParamSelectedTab==6)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntPastoralSupport_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtPastoralSupport
		/// </summary>
		public void cntPastoralSupport_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 6)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPastoralSupport)
		/// </summary>
		/// <returns>The Visible State of wtPastoralSupport</returns>
		public bool cntPastoralSupport_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container101_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container101_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container101_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container101_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container101)
		/// </summary>
		/// <returns>The Visible State of wt_Container101</returns>
		public bool cnt_Container101_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("tD89gwpkFEyl4LnwdeU5OA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = +fv8gdZ5qEScBLcujLgijw) Expression: "Pastoral Support"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression68() {
			return "Pastoral Support";
		}
		public void cntContentArea_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentArea_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentArea_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntContentArea_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentArea)
		/// </summary>
		/// <returns>The Visible State of wtContentArea</returns>
		public bool cntContentArea_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container76_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container76_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container76_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container76_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container76)
		/// </summary>
		/// <returns>The Visible State of wt_Container76</returns>
		public bool cnt_Container76_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If46_hasRun=false;
		bool if_wt_If46_evalResult;
		public bool if_wt_If46() {
			if (if_wt_If46_hasRun) {
				if_wt_If46_hasRun = false;
				return if_wt_If46_evalResult;
			}
			if_wt_If46_hasRun = true;
			if_wt_If46_evalResult = (inParamSelectedTab==1);
			return if_wt_If46_evalResult;
		}

		public void cntInitialAssessement_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntInitialAssessement_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntInitialAssessement_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntInitialAssessement_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtInitialAssessement)
		/// </summary>
		/// <returns>The Visible State of wtInitialAssessement</returns>
		public bool cntInitialAssessement_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance37_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_InitialAssessment widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_InitialAssessment) sender;
				widget.inParamStudentReference = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance37
		/// </summary>
		public void webBlck_WebBlockInstance37_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If55_hasRun=false;
		bool if_wt_If55_evalResult;
		public bool if_wt_If55() {
			if (if_wt_If55_hasRun) {
				if_wt_If55_hasRun = false;
				return if_wt_If55_evalResult;
			}
			if_wt_If55_hasRun = true;
			if_wt_If55_evalResult = (inParamSelectedTab==2);
			return if_wt_If55_evalResult;
		}

		public void webBlck_WebBlockInstance57_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_QualsOnEntry widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_QualsOnEntry) sender;
				widget.inParamStudentReference = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If49_hasRun=false;
		bool if_wt_If49_evalResult;
		public bool if_wt_If49() {
			if (if_wt_If49_hasRun) {
				if_wt_If49_hasRun = false;
				return if_wt_If49_evalResult;
			}
			if_wt_If49_hasRun = true;
			if_wt_If49_evalResult = (inParamSelectedTab==3);
			return if_wt_If49_evalResult;
		}

		public void cntSupport_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSupport_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSupport_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSupport_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSupport)
		/// </summary>
		/// <returns>The Visible State of wtSupport</returns>
		public bool cntSupport_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance25_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_Support widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_Support) sender;
				widget.inParamStudentReference = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance25
		/// </summary>
		public void webBlck_WebBlockInstance25_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntSupportNeeds_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSupportNeeds_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSupportNeeds_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSupportNeeds_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSupportNeeds)
		/// </summary>
		/// <returns>The Visible State of wtSupportNeeds</returns>
		public bool cntSupportNeeds_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_SupportNeeds widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_SupportNeeds) sender;
				widget.inParamStudentReference = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance6
		/// </summary>
		public void webBlck_WebBlockInstance6_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If66_hasRun=false;
		bool if_wt_If66_evalResult;
		public bool if_wt_If66() {
			if (if_wt_If66_hasRun) {
				if_wt_If66_hasRun = false;
				return if_wt_If66_evalResult;
			}
			if_wt_If66_hasRun = true;
			if_wt_If66_evalResult = (inParamSelectedTab==4);
			return if_wt_If66_evalResult;
		}

		public void cntLearningSupportContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLearningSupportContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLearningSupportContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLearningSupportContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLearningSupportContainer)
		/// </summary>
		/// <returns>The Visible State of wtLearningSupportContainer</returns>
		public bool cntLearningSupportContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance94_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_LearningSupport widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_LearningSupport) sender;
				widget.inParamLearningSupportID = varLcLearningSupportID;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamIsNew = varLcIsNew;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance94
		/// </summary>
		public void webBlck_WebBlockInstance94_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If82_hasRun=false;
		bool if_wt_If82_evalResult;
		public bool if_wt_If82() {
			if (if_wt_If82_hasRun) {
				if_wt_If82_hasRun = false;
				return if_wt_If82_evalResult;
			}
			if_wt_If82_hasRun = true;
			if_wt_If82_evalResult = (inParamSelectedTab==5);
			return if_wt_If82_evalResult;
		}

		public void webBlckRiskAssessmentArea_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_RiskAssessment widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_RiskAssessment) sender;
				widget.inParamRiskAssessmentID = varLcRiskAssessmentID;
				widget.inParamIsEdit = false;
				widget.inParamIsNewRiskAssessment = varLcIsNewRiskAssessment;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamIsLoading = varLcIsLoading;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wtRiskAssessmentArea
		/// </summary>
		public void webBlckRiskAssessmentArea_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If20_hasRun=false;
		bool if_wt_If20_evalResult;
		public bool if_wt_If20() {
			if (if_wt_If20_hasRun) {
				if_wt_If20_hasRun = false;
				return if_wt_If20_evalResult;
			}
			if_wt_If20_hasRun = true;
			if_wt_If20_evalResult = (inParamSelectedTab==6);
			return if_wt_If20_evalResult;
		}

		public void webBlck_WebBlockInstance96_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_PastoralSupport widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkTAB_PastoralSupport) sender;
				widget.inParamStudentReference = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandSelectReportId {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandDeleteRiskAssessment {

			/// <summary>
			/// Query Function "GetRiskAssessmentKeepInformedsByRiskAssessment" of Action "DeleteRiskAssessment"
			/// </summary>
			public static RLRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentKeepInformedsByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessmentKeepInformed.[ID] o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentKeepInformedRecordList outParamList = new RLRiskAssessmentKeepInformedRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentKeepInformedRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList = (RLRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentKeepInformedRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList = (RLRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentExternalContactsByRiskAssessment" of Action "DeleteRiskAssessment"
			/// </summary>
			public static RLRiskAssessmentExternalContactsRecordList datasetGetRiskAssessmentExternalContactsByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessmentExternalContacts.[ID] o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {RiskAssessmentExternalContacts} ENRiskAssessmentExternalContacts");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentExternalContacts.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentExternalContacts.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentExternalContacts.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentExternalContactsRecordList outParamList = new RLRiskAssessmentExternalContactsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentExternalContactsRecordList _tmp = new RLRiskAssessmentExternalContactsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentExternalContactsByRiskAssessment.List");
						outParamList = (RLRiskAssessmentExternalContactsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentExternalContactsByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentExternalContactsRecordList _tmp = new RLRiskAssessmentExternalContactsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentExternalContactsByRiskAssessment.List");
							outParamList = (RLRiskAssessmentExternalContactsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentExternalContactsByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentManagementOfSupportsByRiskAssessm" of Action
			///  "DeleteRiskAssessment"
			/// </summary>
			public static RLRiskAssessmentManagementOfSupportRecordList datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessmentManagementOfSupport.[ID] o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {RiskAssessmentManagementOfSupport} ENRiskAssessmentManagementOfSupport");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentManagementOfSupportRecordList outParamList = new RLRiskAssessmentManagementOfSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentManagementOfSupportRecordList _tmp = new RLRiskAssessmentManagementOfSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
						outParamList = (RLRiskAssessmentManagementOfSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentManagementOfSupportRecordList _tmp = new RLRiskAssessmentManagementOfSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
							outParamList = (RLRiskAssessmentManagementOfSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessementRisksByRiskAssessment" of Action "DeleteRiskAssessment"
			/// </summary>
			public static RLRiskAssessementRisksRecordList datasetGetRiskAssessementRisksByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessementRisks.[ID] o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {RiskAssessementRisks} ENRiskAssessementRisks");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessementRisks.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessementRisks.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessementRisks.[RISKASSESSMENT] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENRiskAssessementRisks.[RISK] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessementRisksRecordList outParamList = new RLRiskAssessementRisksRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessementRisksRecordList _tmp = new RLRiskAssessementRisksRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessementRisksByRiskAssessment.List");
						outParamList = (RLRiskAssessementRisksRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessementRisksByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessementRisksRecordList _tmp = new RLRiskAssessementRisksRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessementRisksByRiskAssessment.List");
							outParamList = (RLRiskAssessementRisksRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.DeleteRiskAssessment.GetRiskAssessementRisksByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandNewRecord {
		}
		public static class FuncCommandSelectTab {
		}
		public static class FuncCommandSelectRiskAssessment {
		}
		public static class FuncCommandNewRiskAssessmentRecord {
		}
		public static class FuncssPreparation {

			private static void datasetGetRiskAssessmentsByStudentReferenceReadDB(ref RCRiskAssessmentRiskAssessmentKeepInformedRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRiskAssessment.Read(r, ref index);
				rec.ssENRiskAssessmentKeepInformed.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRiskAssessmentsByStudentReference" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, bool qpboP, int qpinP1, string qpstP2) {
				// Query Iterations: Multiple {ListMenu2}
				// Refresh Query CFyN3ZUuq0muyNiHFOpBZg Iterations: Multiple {ListMenu2}
				// Refresh Query CstHFFMGdU2NQkzSzEUv_A Iterations: Multiple {ListMenu2}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessment.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, ENRiskAssessment.[LASTUPDATEDON] o22, NULL o23, NULL o24, NULL o25");
				fromBuilder.Append(" FROM ({RiskAssessment} ENRiskAssessment Left JOIN {RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed ON (ENRiskAssessment.[ID] = ENRiskAssessmentKeepInformed.[RISKASSESSMENT])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP2.Trim() != "") {
					whereBuilder.Append("((ENRiskAssessment.[STUDENTREFERENCE] = @qpstP2) AND (ENRiskAssessment.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP2", DbType.String, qpstP2);
				} else {
					whereBuilder.Append("(ENRiskAssessment.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (((");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[USER] = @qpinP1) AND (ENRiskAssessmentKeepInformed.[USER] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[USER] IS NULL)");
				}
				whereBuilder.Append(" OR ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENRiskAssessment.[CREATEDBY] = @qpinP1) AND (ENRiskAssessment.[CREATEDBY] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENRiskAssessment.[CREATEDBY] IS NULL)");
				}
				whereBuilder.Append(") OR ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENRiskAssessment.[RISKASSESSMENTCOMPLETEDBY] = @qpinP1) AND (ENRiskAssessment.[RISKASSESSMENTCOMPLETEDBY] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENRiskAssessment.[RISKASSESSMENTCOMPLETEDBY] IS NULL)");
				}
				whereBuilder.Append(") OR (@qpboP = 1))");
				orderByBuilder.Append(" ORDER BY ENRiskAssessment.[LEADSTAFFMEMBER] ASC ");
				sqlCmd.CreateParameterWithoutReplacements("@qpboP", DbType.Boolean, qpboP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentRiskAssessmentKeepInformedRecordList outParamList = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentsByStudentReferenceReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsByStudentReferenceReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetRiskAssessmentsByStudentReference.List");
						outParamList = (RLRiskAssessmentRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetRiskAssessmentsByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsByStudentReferenceReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetRiskAssessmentsByStudentReference.List");
							outParamList = (RLRiskAssessmentRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetRiskAssessmentsByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetSIASSupportNeedsByStudentIdReadDB(ref RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENSIASSupportNeed.Read(r, ref index);
				rec.ssENSIASSupportNeeds.Read(r, ref index);
				rec.ssENSupportNeeds.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetSIASSupportNeedsByStudentId" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList datasetGetSIASSupportNeedsByStudentId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Multiple {ListRecords1}
				// Refresh Query 7lwUWcuAE0O+9Gjh_htbtQ Iterations: Multiple {ListRecords1}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, ENSupportNeeds.[LABEL] o12, NULL o13, NULL o14");
				fromBuilder.Append(" FROM (({SIASSupportNeeds} ENSIASSupportNeeds Inner JOIN {SIASSupportNeed} ENSIASSupportNeed ON (ENSIASSupportNeed.[SUPPORTNEEDS] = ENSIASSupportNeeds.[ID]))  Right JOIN {SupportNeeds} ENSupportNeeds ON (ENSIASSupportNeed.[SUPPORTNEEDID] = ENSupportNeeds.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupportNeeds.[STUDENTID] = @qpstP) AND (ENSIASSupportNeeds.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupportNeeds.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList outParamList = new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetSIASSupportNeedsByStudentIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList _tmp = new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetSIASSupportNeedsByStudentIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportNeedsByStudentId.List");
						outParamList = (RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportNeedsByStudentId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList _tmp = new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetSIASSupportNeedsByStudentIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportNeedsByStudentId.List");
							outParamList = (RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportNeedsByStudentId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSIASSupportsByStudentId" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportRecordList datasetGetSIASSupportsByStudentId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query lf1FfrNSD0yEJI0R9U02bw Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENSIASSupport.[SUPPORTTYPE1] o3, ENSIASSupport.[SUPPORTTYPE2] o4, ENSIASSupport.[SUPPORTTYPE3] o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {SIASSupport} ENSIASSupport");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupport.[STUDENTID] = @qpstP) AND (ENSIASSupport.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupport.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportRecordList outParamList = new RLSIASSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false, false, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportsByStudentId.List");
						outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportsByStudentId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportsByStudentId.List");
							outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetSIASSupportsByStudentId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetLearningSupportsReadDB(ref RCLearningSupportLearningSupportTypesRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENLearningSupport.Read(r, ref index);
				rec.ssENLearningSupportTypes.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetLearningSupports" of Action "Preparation"
			/// </summary>
			public static RLLearningSupportLearningSupportTypesRecordList datasetGetLearningSupports(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Multiple {ListMenu}
				// Refresh Query kHFQNhW_KE2qMsjb8EPivw Iterations: Multiple {ListMenu}
				// Refresh Query xFdy+plliUeD96UkZVwCEA Iterations: Multiple {ListMenu}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENLearningSupport.[ID] o1, NULL o2, NULL o3, NULL o4, ENLearningSupport.[REVIEWDATE] o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, ENLearningSupportTypes.[LABEL] o13, NULL o14, NULL o15");
				fromBuilder.Append(" FROM ({LearningSupport} ENLearningSupport Left JOIN {LearningSupportTypes} ENLearningSupportTypes ON (ENLearningSupport.[LEARNINGSUPPORTTYPE] = ENLearningSupportTypes.[ID])) ");
				whereBuilder.Append(" WHERE (ENLearningSupport.[STUDENTID] = ((isnull(@qpstP, ''))))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLLearningSupportLearningSupportTypesRecordList outParamList = new RLLearningSupportLearningSupportTypesRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetLearningSupportsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLLearningSupportLearningSupportTypesRecordList _tmp = new RLLearningSupportLearningSupportTypesRecordList();
					_tmp.AlternateReadDBMethod = datasetGetLearningSupportsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetLearningSupports.List");
						outParamList = (RLLearningSupportLearningSupportTypesRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetLearningSupports.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLLearningSupportLearningSupportTypesRecordList _tmp = new RLLearningSupportLearningSupportTypesRecordList();
						_tmp.AlternateReadDBMethod = datasetGetLearningSupportsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetLearningSupports.List");
							outParamList = (RLLearningSupportLearningSupportTypesRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.SIAS_Tab.Preparation.GetLearningSupports.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KtCluxfvnUEimrSYLYCBGxg";
			}
		}
	}

}
