/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkTAB_LearningSupport: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamLearningSupportID. Description:
		/// </summary>
		public int inParamLearningSupportID = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamIsNew. Description:
		/// </summary>
		public bool inParamIsNew = false;
		/// <summary>
		/// Variable <code>varLcIsEdit</code> that represents the Service Studio local variable
		///  <code>IsEdit</code> <p>Description: </p>
		/// </summary>
		bool varLcIsEdit = false;

		/// <summary>
		/// Variable <code>varLcLearningSupportDocument</code> that represents the Service Studio local
		///  variable <code>LearningSupportDocument</code> <p>Description: </p>
		/// </summary>
		RCLearningSupportDocumentsRecord varLcLearningSupportDocument = new RCLearningSupportDocumentsRecord(null);

		/// <summary>
		/// Variable "True" if the Widget wt_If54
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If54T;

		/// <summary>
		/// Variable "True" if the Widget wt_If54
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If54F;
		protected OutSystems.HubEdition.WebWidgets.Container wtLogContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container58;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container74;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		/// <summary>
		/// Variable (wtEditLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEditLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		/// <summary>
		/// Variable (wtDeleteLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtDeleteLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container84;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container51;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		protected OutSystems.HubEdition.WebWidgets.Container wtLearningSupportType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container40;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container79;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox72ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox72 = new SelectRtWidget();
		RLLearningSupportTypesRecordList Rt_wt_ComboBox72_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtOtherSupportTypeDescription;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container64;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container53;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input30ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input30ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtLeadProfessional;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container90;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox3ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox3 = new SelectRtWidget();
		RLUserRecordList Rt_wt_ComboBox3_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtLocationofOriginal;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container75;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input63ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input63ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtCommencementDate;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container87;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container52;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtCommencementDateInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtCommencementDateInputValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtReviewDate;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container83;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtReviewDateInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtReviewDateInputValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtNotes;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container69;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtNotesCommentsValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtNotesCommentsValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.Container wtSaveCancelButtons;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container88;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCLearningSupportRecord ssEditRecord1Record = new RCLearningSupportRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtEditRecord1_Valid() {
			bool res = true;
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container89;
		/// <summary>
		/// Variable (wtSave) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtSave;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container96;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container71;
		/// <summary>
		/// Variable (wt_Link95) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link95;
		protected OutSystems.HubEdition.WebWidgets.Container wtAttachedDocumentsContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container66;
		private RLDocumentsLearningSupportDocumentsRecordList _ssAttachedDocumentsListList = new RLDocumentsLearningSupportDocumentsRecordList();
		public RLDocumentsLearningSupportDocumentsRecordList ssAttachedDocumentsListList {
			get {
				return _ssAttachedDocumentsListList; 
			}
			set {
				_ssAttachedDocumentsListList = value;
				wtAttachedDocumentsList.DataSource = value;
				ssAttachedDocumentsListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtAttachedDocumentsList;
		public ArrayList wtAttachedDocumentsList_storage = new ArrayList();
		protected bool ssAttachedDocumentsListList_notUsedYet = true;
		protected bool ssAttachedDocumentsListListDoDataBind;
		protected bool ssAttachedDocumentsListListDataBound;
		/// <summary>
		/// Variable "True" if the Widget wt_If37
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If37T;

		/// <summary>
		/// Variable "True" if the Widget wt_If37
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If37F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container82;
		/// <summary>
		/// Variable (wt_Link68) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link68;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container46;
		/// <summary>
		/// Variable (wt_Link81) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link81;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container73;
		/// <summary>
		/// Variable (wtAttachDocument) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtAttachDocument;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		int resUserCheck_outParamPermissionType = 0;
		RLLearningSupportLearningSupportTypesRecordList queryResGetLearningSupportById_outParamList = new RLLearningSupportLearningSupportTypesRecordList();
		int queryResGetLearningSupportById_outParamCount = 0;
		RLDocumentsLearningSupportDocumentsRecordList queryResGetLearningSupportDocumentsByLearningSupportID_outParamList = new RLDocumentsLearningSupportDocumentsRecordList();
		int queryResGetLearningSupportDocumentsByLearningSupportID_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			if (inParamIsNew) {
				varLcIsEdit = true; // IsEdit = True

			}
			// Query datasetGetLearningSupportById
			int datasetGetLearningSupportById_maxRecords = 0;
			queryResGetLearningSupportById_outParamList = FuncssPreparation.datasetGetLearningSupportById(heContext, datasetGetLearningSupportById_maxRecords, IterationMultiplicity.Never, out queryResGetLearningSupportById_outParamCount, inParamLearningSupportID
			);
			ssEditRecord1Record.ssENLearningSupport = queryResGetLearningSupportById_outParamList.CurrentRec.ssENLearningSupport; // EditRecord1.Record.LearningSupport = GetLearningSupportById.List.Current.LearningSupport
			// Query datasetGetLearningSupportDocumentsByLearningSupportID
			int datasetGetLearningSupportDocumentsByLearningSupportID_maxRecords = Math.Max(wtAttachedDocumentsList.StartIndex + wtAttachedDocumentsList.LineCount + 1, 0);
			queryResGetLearningSupportDocumentsByLearningSupportID_outParamList = FuncssPreparation.datasetGetLearningSupportDocumentsByLearningSupportID(heContext, datasetGetLearningSupportDocumentsByLearningSupportID_maxRecords, IterationMultiplicity.Multiple, out queryResGetLearningSupportDocumentsByLearningSupportID_outParamCount, inParamLearningSupportID
			);
			inParamIsNew = false; // IsNew = False
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("vImxExMxAEOfJ_77HQ0yAw")).ssId, out resUserCheck_outParamPermissionType);
		}
		static WBlkTAB_LearningSupport() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wtEditLink != null) {
				this.wtEditLink.Click += new System.EventHandler(this.wtEditLink_Click);
			}
			if (this.wtSave != null) {
				this.wtSave.Click += new System.EventHandler(this.wtSave_Click);
			}
			if (this.wt_Link95 != null) {
				this.wt_Link95.Click += new System.EventHandler(this.wt_Link95_Click);
			}
			wtAttachedDocumentsList.StartIndexExpression = () => 0;
			wtAttachedDocumentsList.LineCountExpression = () => 50;
			wtAttachedDocumentsList.EmptyMessageExpression = () => "No documents attached or you do not have permissions to view them...";
			if (this.wt_Link68 != null) {
				this.wt_Link68.Click += new System.EventHandler(this.wt_Link68_Click);
			}
			if (this.wt_Link81 != null) {
				this.wt_Link81.Click += new System.EventHandler(this.wt_Link81_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					if (bindEditRecords) {
						wtEditRecord1_onDataBindingDataSource(this.FindControl("wtEditRecord1"), null);
					}
					ssAttachedDocumentsListListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox72", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wt_Input30", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox3", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wt_Input63", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtCommencementDateInput", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtReviewDateInput", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtNotesComments", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("resUserCheck_outParamPermissionType", resUserCheck_outParamPermissionType, 0);

			#region store queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.

			int tmpcurrentrownumberqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList = queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList = queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Eof;
			ArrayList storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList = new ArrayList();

			// Write the needed fields of queryResGetLearningSupportDocumentsByLearningSupportID_outParamList to the storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList
			if (!queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Empty) {
				try {
					queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.StartIteration();

					while (!queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList = new ArrayList();
						tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENDocuments.ssId == 0?(object) null: queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENDocuments.ssId);
						tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENDocuments.ssDocumentName == "" ?(object) null: queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENDocuments.ssDocumentName);
						tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENLearningSupportDocuments.ssId == 0?(object) null: queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENLearningSupportDocuments.ssId);
						tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENLearningSupportDocuments.ChangedAttributes, new BitArray(new bool[] {
							true, false, false
						}
						))));
						tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRec.ssENLearningSupportDocuments.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true
						}
						))));
						storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Add(tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList);
						queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Advance();
					}
				} finally {
					queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetLearningSupportDocumentsByLearningSupportID_outParamList", storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList, null);

			#endregion


			#region store queryResGetLearningSupportDocumentsByLearningSupportID_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetLearningSupportDocumentsByLearningSupportID_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetLearningSupportDocumentsByLearningSupportID_outParamList_eof", tmpeofqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList, false);
			queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList, tmpeofqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamLearningSupportID", inParamLearningSupportID, 0);
			ViewStateAttributes.SetInViewState("varLcIsEdit", varLcIsEdit, false);
			ViewStateAttributes.SetInViewState("varLcLearningSupportDocument_ssENLearningSupportDocuments_ssId", varLcLearningSupportDocument.ssENLearningSupportDocuments.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcLearningSupportDocument_ssENLearningSupportDocuments_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcLearningSupportDocument.ssENLearningSupportDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcLearningSupportDocument_ssENLearningSupportDocuments_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcLearningSupportDocument.ssENLearningSupportDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wt_ComboBox72_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox72")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input30_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input30")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox3_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox3")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input63_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input63")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtCommencementDateInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtCommencementDateInput")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtReviewDateInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtReviewDateInput")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtNotesComments_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtNotesComments")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssId", ssEditRecord1Record.ssENLearningSupport.ssId, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssLearningSupportType", ssEditRecord1Record.ssENLearningSupport.ssLearningSupportType, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssOtherDescription", ssEditRecord1Record.ssENLearningSupport.ssOtherDescription, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssCommencementDate", ssEditRecord1Record.ssENLearningSupport.ssCommencementDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssReviewDate", ssEditRecord1Record.ssENLearningSupport.ssReviewDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssLeadProfessional", ssEditRecord1Record.ssENLearningSupport.ssLeadProfessional, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssLocationOfOriginal", ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssStudentID", ssEditRecord1Record.ssENLearningSupport.ssStudentID, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssNotes", ssEditRecord1Record.ssENLearningSupport.ssNotes, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssLastUpdatedBy", ssEditRecord1Record.ssENLearningSupport.ssLastUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ssLastUpdatedOn", ssEditRecord1Record.ssENLearningSupport.ssLastUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssEditRecord1Record.ssENLearningSupport.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENLearningSupport_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssEditRecord1Record.ssENLearningSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, false, false, false, false
			}
			)))), null);
			if (IsAjaxRequest) {
				recListAttachedDocumentsList_Rebuild((ssAttachedDocumentsListListDataBound ? wtAttachedDocumentsList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtAttachedDocumentsList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtAttachedDocumentsList_list", wtAttachedDocumentsList_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				resUserCheck_outParamPermissionType = (int) ViewStateAttributes.GetFromViewState("resUserCheck_outParamPermissionType", 0);

				#region fetch queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.

				// Read the needed fields of queryResGetLearningSupportDocumentsByLearningSupportID_outParamList from storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList
				queryResGetLearningSupportDocumentsByLearningSupportID_outParamList = new RLDocumentsLearningSupportDocumentsRecordList();
				ArrayList storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList;
				storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetLearningSupportDocumentsByLearningSupportID_outParamList", null);
				if (storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList in storequeryResGetLearningSupportDocumentsByLearningSupportID_outParamList) {
						if (tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList != null) {
							// Aux current record variable
							RCDocumentsLearningSupportDocumentsRecord tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList = new RCDocumentsLearningSupportDocumentsRecord(null);
							tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.ssENDocuments.ssId = (int) (tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[0] == null ? 0: tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.ssENDocuments.ssDocumentName = (string) (tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[1] == null ? "": tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.ssENLearningSupportDocuments.ssId = (int) (tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[4] == null ? 0: tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.ssENLearningSupportDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList.ssENLearningSupportDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList[6]);

							queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Append(tmpAuxCurrentRecordqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList);
						}
					}
				}
				queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetLearningSupportDocumentsByLearningSupportID_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList;
				tmpcurrentrownumberqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetLearningSupportDocumentsByLearningSupportID_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList;
				tmpeofqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetLearningSupportDocumentsByLearningSupportID_outParamList_eof", false);
				queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList, tmpeofqueryResGetLearningSupportDocumentsByLearningSupportID_outParamList);

				#endregion

				inParamLearningSupportID = (int) ViewStateAttributes.GetFromViewState("inParamLearningSupportID", 0);
				varLcIsEdit = (bool) ViewStateAttributes.GetFromViewState("varLcIsEdit", false);
				varLcLearningSupportDocument.ssENLearningSupportDocuments.ssId = (int) ViewStateAttributes.GetFromViewState("varLcLearningSupportDocument_ssENLearningSupportDocuments_ssId", 0);
				varLcLearningSupportDocument.ssENLearningSupportDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcLearningSupportDocument_ssENLearningSupportDocuments_ChangedAttributes", null));
				varLcLearningSupportDocument.ssENLearningSupportDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcLearningSupportDocument_ssENLearningSupportDocuments_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox72")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox72_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input30")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input30_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox3")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox3_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input63")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input63_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtCommencementDateInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtCommencementDateInput_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtReviewDateInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtReviewDateInput_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtNotesComments")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtNotesComments_Mandatory", false);
				ssEditRecord1Record.ssENLearningSupport.ssId = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssId", 0);
				ssEditRecord1Record.ssENLearningSupport.ssLearningSupportType = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssLearningSupportType", 0);
				ssEditRecord1Record.ssENLearningSupport.ssOtherDescription = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssOtherDescription", "");
				ssEditRecord1Record.ssENLearningSupport.ssCommencementDate = (DateTime) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssCommencementDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssEditRecord1Record.ssENLearningSupport.ssReviewDate = (DateTime) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssEditRecord1Record.ssENLearningSupport.ssLeadProfessional = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssLeadProfessional", 0);
				ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssLocationOfOriginal", "");
				ssEditRecord1Record.ssENLearningSupport.ssStudentID = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssStudentID", "");
				ssEditRecord1Record.ssENLearningSupport.ssNotes = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssNotes", "");
				ssEditRecord1Record.ssENLearningSupport.ssLastUpdatedBy = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssLastUpdatedBy", 0);
				ssEditRecord1Record.ssENLearningSupport.ssLastUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ssLastUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				ssEditRecord1Record.ssENLearningSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_ChangedAttributes", null));
				ssEditRecord1Record.ssENLearningSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENLearningSupport_OptimizedAttributes", null));
				recListAttachedDocumentsList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wt_Input30");
			ControlVisibility.StoreChildControlVisibility("wt_Input63");
			ControlVisibility.StoreChildControlVisibility("wtCommencementDateInput");
			ControlVisibility.StoreChildControlVisibility("wtReviewDateInput");
			ControlVisibility.StoreChildControlVisibility("wtNotesComments");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wt_Input30");
			ControlVisibility.RestoreChildControlVisibility("wt_Input63");
			ControlVisibility.RestoreChildControlVisibility("wtCommencementDateInput");
			ControlVisibility.RestoreChildControlVisibility("wtReviewDateInput");
			ControlVisibility.RestoreChildControlVisibility("wtNotesComments");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KlgEbY__Wv0im8hIChvKFCw";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/Learner_InitialAssessment/TAB_LearningSupport.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_LearningSupport.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_LearningSupport.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("lgEbY_+Wv0im8hIChvKFCw"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvDownloadDocument: VarsBag {
			public RLDocumentsRecordList queryResGetDocumentById_outParamList = new RLDocumentsRecordList();
			public int queryResGetDocumentById_outParamCount = 0;

			public lcvDownloadDocument() {
			}
		}
		/// <summary>
		/// Action <code>CommandDownloadDocument</code> that represents the Service Studio screen action
		///  <code>DownloadDocument</code> <p> Description: </p>
		/// </summary>
		private bool CommandDownloadDocument(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDownloadDocument localVars = new lcvDownloadDocument();
			try {
				// Query datasetGetDocumentById
				int datasetGetDocumentById_maxRecords = 0;
				localVars.queryResGetDocumentById_outParamList = FuncCommandDownloadDocument.datasetGetDocumentById(heContext, datasetGetDocumentById_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetDocumentById_outParamCount, getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssId
				);
				// Download Download4
				Response.ClearContent();
				string md5Hash_Download4;
				md5Hash_Download4 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData);
				Response.ContentType = "application/octet-stream";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download4 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download4);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload4 = RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentName);
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload4 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload4);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload4+ "\"");
				byte[] downloadDownload4FileContent = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData;

				if (downloadDownload4FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/octet-stream";
						file_info.Second = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentName));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload4FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload4FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "TAB_LearningSupport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcIsEdit = (!varLcIsEdit); // IsEdit = notIsEdit
				// Refresh Me
				ssAttachedDocumentsListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDeleteAttachedDocument: VarsBag {
			public RLRoleDocumentPermissionsRecordList queryResGetRoleDocumentPermissionsByDocumentID_outParamList = new RLRoleDocumentPermissionsRecordList();
			public int queryResGetRoleDocumentPermissionsByDocumentID_outParamCount = 0;

			public lcvDeleteAttachedDocument() {
			}
		}
		/// <summary>
		/// Action <code>CommandDeleteAttachedDocument</code> that represents the Service Studio screen action
		///  <code>DeleteAttachedDocument</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteAttachedDocument(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDeleteAttachedDocument localVars = new lcvDeleteAttachedDocument();
			try {
				// Query datasetGetRoleDocumentPermissionsByDocumentID
				int datasetGetRoleDocumentPermissionsByDocumentID_maxRecords = 0;
				localVars.queryResGetRoleDocumentPermissionsByDocumentID_outParamList = FuncCommandDeleteAttachedDocument.datasetGetRoleDocumentPermissionsByDocumentID(heContext, datasetGetRoleDocumentPermissionsByDocumentID_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRoleDocumentPermissionsByDocumentID_outParamCount, getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssId
				);
				// Foreach GetRoleDocumentPermissionsByDocumentID.List
				localVars.queryResGetRoleDocumentPermissionsByDocumentID_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetRoleDocumentPermissionsByDocumentID_outParamList.Eof) {
						// DeleteRoleDocumentPermissions
						ExtendedActions.DeleteRoleDocumentPermissions(heContext, localVars.queryResGetRoleDocumentPermissionsByDocumentID_outParamList.CurrentRec.ssENRoleDocumentPermissions.ssId);
						localVars.queryResGetRoleDocumentPermissionsByDocumentID_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetRoleDocumentPermissionsByDocumentID_outParamList.EndIteration();
				}
				// DeleteLearningSupportDocuments
				ExtendedActions.DeleteLearningSupportDocuments(heContext, getWtAttachedDocumentsListList().CurrentRec.ssENLearningSupportDocuments.ssId);
				// DeleteDocuments
				ExtendedActions.DeleteDocuments(heContext, getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssId);
				// Query datasetGetLearningSupportDocumentsByLearningSupportID
				{
					int datasetGetLearningSupportDocumentsByLearningSupportID_maxRecords = Math.Max(wtAttachedDocumentsList.StartIndex + wtAttachedDocumentsList.LineCount + 1, 0);
					queryResGetLearningSupportDocumentsByLearningSupportID_outParamList = FuncssPreparation.datasetGetLearningSupportDocumentsByLearningSupportID(heContext, datasetGetLearningSupportDocumentsByLearningSupportID_maxRecords, IterationMultiplicity.Multiple, out queryResGetLearningSupportDocumentsByLearningSupportID_outParamCount, inParamLearningSupportID
					);
				}
				// Refresh Widget (wtAttachedDocumentsContainer)
				ssAttachedDocumentsListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtAttachedDocumentsContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandEdit</code> that represents the Service Studio screen action <code>Edit</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandEdit(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcIsEdit = (!varLcIsEdit); // IsEdit = notIsEdit
				// Refresh Me
				ssAttachedDocumentsListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public int resCreateOrUpdateLearningSupport_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				// CreateOrUpdateLearningSupport
				ExtendedActions.CreateOrUpdateLearningSupport(heContext, ssEditRecord1Record.ChangedAttributes, ssEditRecord1Record, out localVars.resCreateOrUpdateLearningSupport_outParamId);
				varLcIsEdit = false; // IsEdit = False
				// Refresh Widget (wtLogContent)
				ssAttachedDocumentsListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtLogContent, "None", StoreViewState);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "Saved");
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Refresh Widget (wtOtherSupportTypeDescription)
				((OSPageViewState) Page).AjaxRefresh(wtOtherSupportTypeDescription, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDelete: VarsBag {
			public RLLearningSupportDocumentsRecordList queryResGetLearningSupportDocumentsByLearningSupportID2_outParamList = new RLLearningSupportDocumentsRecordList();
			public int queryResGetLearningSupportDocumentsByLearningSupportID2_outParamCount = 0;

			public lcvDelete() {
			}
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDelete localVars = new lcvDelete();
			try {
				// Query datasetGetLearningSupportDocumentsByLearningSupportID2
				int datasetGetLearningSupportDocumentsByLearningSupportID2_maxRecords = 0;
				localVars.queryResGetLearningSupportDocumentsByLearningSupportID2_outParamList = FuncCommandDelete.datasetGetLearningSupportDocumentsByLearningSupportID2(heContext, datasetGetLearningSupportDocumentsByLearningSupportID2_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetLearningSupportDocumentsByLearningSupportID2_outParamCount, inParamLearningSupportID
				);
				// Foreach GetLearningSupportDocumentsByLearningSupportID2.List
				localVars.queryResGetLearningSupportDocumentsByLearningSupportID2_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetLearningSupportDocumentsByLearningSupportID2_outParamList.Eof) {
						// DeleteLearningSupportDocuments
						ExtendedActions.DeleteLearningSupportDocuments(heContext, localVars.queryResGetLearningSupportDocumentsByLearningSupportID2_outParamList.CurrentRec.ssENLearningSupportDocuments.ssId);
						localVars.queryResGetLearningSupportDocumentsByLearningSupportID2_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetLearningSupportDocumentsByLearningSupportID2_outParamList.EndIteration();
				}
				// DeleteLearningSupport
				ExtendedActions.DeleteLearningSupport(heContext, inParamLearningSupportID);
				inParamLearningSupportID = BuiltInFunction.NullIdentifier(); // LearningSupportID = NullIdentifier
				// Refresh Me
				ssAttachedDocumentsListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "Refresh");
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnNotify: VarsBag {
			public int resCreateOrUpdateLearningSupportDocuments_outParamId = 0;

			public int resCreateOrUpdateLearningSupport_outParamId = 0;

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvOnNotify() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotify localVars = new lcvOnNotify();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((ssEditRecord1Record.ssENLearningSupport.ssId==BuiltInFunction.NullIdentifier())) {
					queryResGetLearningSupportById_outParamList.CurrentRec.ssENLearningSupport.ssStudentID = inParamStudentReference; // GetLearningSupportById.List.Current.LearningSupport.StudentID = StudentReference
					// CreateOrUpdateLearningSupport
					ExtendedActions.CreateOrUpdateLearningSupport(heContext, ssEditRecord1Record.ChangedAttributes, ssEditRecord1Record, out localVars.resCreateOrUpdateLearningSupport_outParamId);
					varLcLearningSupportDocument.ssENLearningSupportDocuments.ssDocumentID = BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)); // LearningSupportDocument.LearningSupportDocuments.DocumentID = IntegerToEntityRefInteger
					varLcLearningSupportDocument.ssENLearningSupportDocuments.ssLearningSupportID = localVars.resCreateOrUpdateLearningSupport_outParamId; // LearningSupportDocument.LearningSupportDocuments.LearningSupportID = CreateOrUpdateLearningSupport.Id
					ssEditRecord1Record.ssENLearningSupport.ssId = localVars.resCreateOrUpdateLearningSupport_outParamId; // EditRecord1.Record.LearningSupport.Id = CreateOrUpdateLearningSupport.Id

				} else {
					varLcLearningSupportDocument.ssENLearningSupportDocuments.ssLearningSupportID = ssEditRecord1Record.ssENLearningSupport.ssId; // LearningSupportDocument.LearningSupportDocuments.LearningSupportID = EditRecord1.Record.LearningSupport.Id

				}
				varLcLearningSupportDocument.ssENLearningSupportDocuments.ssDocumentID = BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)); // LearningSupportDocument.LearningSupportDocuments.DocumentID = IntegerToEntityRefInteger
				// CreateOrUpdateLearningSupportDocuments
				ExtendedActions.CreateOrUpdateLearningSupportDocuments(heContext, varLcLearningSupportDocument.ChangedAttributes, varLcLearningSupportDocument, out localVars.resCreateOrUpdateLearningSupportDocuments_outParamId);
				// Query datasetGetLearningSupportDocumentsByLearningSupportID
				{
					int datasetGetLearningSupportDocumentsByLearningSupportID_maxRecords = Math.Max(wtAttachedDocumentsList.StartIndex + wtAttachedDocumentsList.LineCount + 1, 0);
					queryResGetLearningSupportDocumentsByLearningSupportID_outParamList = FuncssPreparation.datasetGetLearningSupportDocumentsByLearningSupportID(heContext, datasetGetLearningSupportDocumentsByLearningSupportID_maxRecords, IterationMultiplicity.Multiple, out queryResGetLearningSupportDocumentsByLearningSupportID_outParamCount, inParamLearningSupportID
					);
				}
				// Refresh Widget (wtAttachedDocumentsContainer)
				ssAttachedDocumentsListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtAttachedDocumentsContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		bool if_wt_If54_hasRun=false;
		bool if_wt_If54_evalResult;
		public bool if_wt_If54() {
			if (if_wt_If54_hasRun) {
				if_wt_If54_hasRun = false;
				return if_wt_If54_evalResult;
			}
			if_wt_If54_hasRun = true;
			if_wt_If54_evalResult = (queryResGetLearningSupportById_outParamList.CurrentRec.ssENLearningSupport.ssId!=BuiltInFunction.NullIdentifier());
			return if_wt_If54_evalResult;
		}

		public void cntLogContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLogContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLogContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLogContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLogContent)
		/// </summary>
		/// <returns>The Visible State of wtLogContent</returns>
		public bool cntLogContent_isVisible() {
			return true;
		}

		public void cnt_Container58_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container58_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container58_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding: 15px; font-size: 18px;text-shadow: 0px 1px 2px #dadada;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container58_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container58)
		/// </summary>
		/// <returns>The Visible State of wt_Container58</returns>
		public bool cnt_Container58_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container33_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container33_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container74_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container74_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container74_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container74_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container74)
		/// </summary>
		/// <returns>The Visible State of wt_Container74</returns>
		public bool cnt_Container74_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container42_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:-7px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container42_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (resUserCheck_outParamPermissionType==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkEditLink_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEditLink_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandEdit(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEditLink)
		/// </summary>
		/// <returns>title of the Link (wtEditLink)</returns>
		public string
		lnkEditLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditLink)
		/// </summary>
		/// <returns>The Visible State of wtEditLink</returns>
		public bool lnkEditLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditLink)
		/// </summary>
		/// <returns>The Enabled State of wtEditLink</returns>
		public bool lnkEditLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtDeleteLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtDeleteLink)</returns>
		public string lnkDeleteLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("MessageText", System.Web.HttpUtility.UrlEncode("Are you sure you wish to delete this learning support record?", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ConfirmationMessageButtons", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("Title", System.Web.HttpUtility.UrlEncode("Delete Learning Support Record", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ConfirmationMessage", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtDeleteLink)
		/// </summary>
		/// <returns>title of the Link (wtDeleteLink)</returns>
		public string
		lnkDeleteLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDeleteLink)
		/// </summary>
		/// <returns>The Visible State of wtDeleteLink</returns>
		public bool lnkDeleteLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtDeleteLink)
		/// </summary>
		/// <returns>The Enabled State of wtDeleteLink</returns>
		public bool lnkDeleteLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container84_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container84_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container84_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container84_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container84)
		/// </summary>
		/// <returns>The Visible State of wt_Container84</returns>
		public bool cnt_Container84_isVisible() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtDeleteLink.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance2
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance2_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandDelete(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "style";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container51_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container51_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container51_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container51_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container51)
		/// </summary>
		/// <returns>The Visible State of wt_Container51</returns>
		public bool cnt_Container51_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container61_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container61_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntLearningSupportType_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLearningSupportType_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLearningSupportType_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLearningSupportType_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLearningSupportType)
		/// </summary>
		/// <returns>The Visible State of wtLearningSupportType</returns>
		public bool cntLearningSupportType_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container40_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container40_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container40_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container40_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container40)
		/// </summary>
		/// <returns>The Visible State of wt_Container40</returns>
		public bool cnt_Container40_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container79_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container79_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container79_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container79_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container79)
		/// </summary>
		/// <returns>The Visible State of wt_Container79</returns>
		public bool cnt_Container79_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox72_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox72_reclist == null) {
					using(Transaction wt_ComboBox72_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox72_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENLearningSupportTypesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wt_ComboBox72_sqlCmd = wt_ComboBox72_trans.CreateCommand(wt_ComboBox72_sql);
						Rt_wt_ComboBox72_sqlCmd.CreateParameter("@Selection", ssEditRecord1Record.ssENLearningSupport.ssLearningSupportType);
						Rt_wt_ComboBox72_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox72_reclist = new RLLearningSupportTypesRecordList();
						Rt_wt_ComboBox72_reclist.Transaction = wt_ComboBox72_trans;
						Rt_wt_ComboBox72_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox72_sqlCmd, Rt_wt_ComboBox72_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox72_reclist = (RLLearningSupportTypesRecordList) Rt_wt_ComboBox72_reclist.Duplicate();
					}
				}
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("Select Support Type", "__ossli_Select"));
				if (Rt_wt_ComboBox72.SpecialListVal == "Select")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				Rt_wt_ComboBox72_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox72_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox72_reclist.CurrentRec.ssENLearningSupportTypes.ssLabel, Convert.ToString(Rt_wt_ComboBox72_reclist.CurrentRec.ssENLearningSupportTypes.ssId)));
						if (ssEditRecord1Record.ssENLearningSupport.ssLearningSupportType == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox72_reclist.CurrentRec.ssENLearningSupportTypes.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox72_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox72_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox72
		/// </summary>
		public void sel_ComboBox72_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox72_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox72.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssEditRecord1Record.ssENLearningSupport.ssLearningSupportType = 0;
			}
			else {
				Rt_wt_ComboBox72.SpecialListVal = "";
				try {
					ssEditRecord1Record.ssENLearningSupport.ssLearningSupportType = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox72)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox72</returns>
		public bool sel_ComboBox72_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox72)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox72</returns>
		public bool sel_ComboBox72_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox72)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox72</returns>
		public bool sel_ComboBox72_isMandatory() {
			return true;
		}

		public void cntOtherSupportTypeDescription_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntOtherSupportTypeDescription_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntOtherSupportTypeDescription_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntOtherSupportTypeDescription_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtOtherSupportTypeDescription)
		/// </summary>
		/// <returns>The Visible State of wtOtherSupportTypeDescription</returns>
		public bool cntOtherSupportTypeDescription_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((ssEditRecord1Record.ssENLearningSupport.ssLearningSupportType==ENLearningSupportTypesEntity.GetRecordByKey(ObjectKey.Parse("ILyjRg8gKU2kaLSmLTG0OA")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container64_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container64_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container64_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container64_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container64)
		/// </summary>
		/// <returns>The Visible State of wt_Container64</returns>
		public bool cnt_Container64_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container53_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container53_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container53_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container53_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container53)
		/// </summary>
		/// <returns>The Visible State of wt_Container53</returns>
		public bool cnt_Container53_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input30_input_value() {
			if (("" !=ssEditRecord1Record.ssENLearningSupport.ssOtherDescription)) {
				return ssEditRecord1Record.ssENLearningSupport.ssOtherDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input30");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENLearningSupport.ssOtherDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input30_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENLearningSupport.ssOtherDescription = ""; 
				} else {
					ssEditRecord1Record.ssENLearningSupport.ssOtherDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENLearningSupport.ssOtherDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input30)
		/// </summary>
		/// <returns>The Visible State of wt_Input30</returns>
		public bool inputwt_Input30_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input30)
		/// </summary>
		/// <returns>The Enabled State of wt_Input30</returns>
		public bool inputwt_Input30_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input30)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input30</returns>
		public bool inputwt_Input30_isMandatory() {
			return true;
		}

		public void cntLeadProfessional_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLeadProfessional_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLeadProfessional_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLeadProfessional_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLeadProfessional)
		/// </summary>
		/// <returns>The Visible State of wtLeadProfessional</returns>
		public bool cntLeadProfessional_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container15_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container15_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container90_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container90_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container90_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container90_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container90)
		/// </summary>
		/// <returns>The Visible State of wt_Container90</returns>
		public bool cnt_Container90_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox3_reclist == null) {
					using(Transaction wt_ComboBox3_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox3_sql = "SELECT [ID], [NAME], NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL FROM " + ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [NAME]";
						Command Rt_wt_ComboBox3_sqlCmd = wt_ComboBox3_trans.CreateCommand(wt_ComboBox3_sql);
						Rt_wt_ComboBox3_sqlCmd.CreateParameter("@Selection", ssEditRecord1Record.ssENLearningSupport.ssLeadProfessional);
						Rt_wt_ComboBox3_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox3_reclist = new RLUserRecordList();
						Rt_wt_ComboBox3_reclist.Transaction = wt_ComboBox3_trans;
						Rt_wt_ComboBox3_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(11, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox3_sqlCmd, Rt_wt_ComboBox3_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox3_reclist = (RLUserRecordList) Rt_wt_ComboBox3_reclist.Duplicate();
					}
				}
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("Select Lead Professional", "__ossli_SelectLeadProfessional"));
				if (Rt_wt_ComboBox3.SpecialListVal == "SelectLeadProfessional")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				Rt_wt_ComboBox3_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox3_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox3_reclist.CurrentRec.ssENUser.ssName, Convert.ToString(Rt_wt_ComboBox3_reclist.CurrentRec.ssENUser.ssId)));
						if (ssEditRecord1Record.ssENLearningSupport.ssLeadProfessional == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox3_reclist.CurrentRec.ssENUser.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox3_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox3_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox3_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox3.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssEditRecord1Record.ssENLearningSupport.ssLeadProfessional = 0;
			}
			else {
				Rt_wt_ComboBox3.SpecialListVal = "";
				try {
					ssEditRecord1Record.ssENLearningSupport.ssLeadProfessional = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox3)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox3</returns>
		public bool sel_ComboBox3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox3)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox3</returns>
		public bool sel_ComboBox3_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox3)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox3</returns>
		public bool sel_ComboBox3_isMandatory() {
			return true;
		}

		public void cntLocationofOriginal_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLocationofOriginal_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLocationofOriginal_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLocationofOriginal_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLocationofOriginal)
		/// </summary>
		/// <returns>The Visible State of wtLocationofOriginal</returns>
		public bool cntLocationofOriginal_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container24_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container75_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container75_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container75_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container75_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container75)
		/// </summary>
		/// <returns>The Visible State of wt_Container75</returns>
		public bool cnt_Container75_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input63_input_value() {
			if (("" !=ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal)) {
				return ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input63");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input63_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal = ""; 
				} else {
					ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENLearningSupport.ssLocationOfOriginal = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input63)
		/// </summary>
		/// <returns>The Visible State of wt_Input63</returns>
		public bool inputwt_Input63_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input63)
		/// </summary>
		/// <returns>The Enabled State of wt_Input63</returns>
		public bool inputwt_Input63_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input63)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input63</returns>
		public bool inputwt_Input63_isMandatory() {
			return true;
		}

		public void cntCommencementDate_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntCommencementDate_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntCommencementDate_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntCommencementDate_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtCommencementDate)
		/// </summary>
		/// <returns>The Visible State of wtCommencementDate</returns>
		public bool cntCommencementDate_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container87_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container87_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container87_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container87_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container87)
		/// </summary>
		/// <returns>The Visible State of wt_Container87</returns>
		public bool cnt_Container87_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container52_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container52_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container52_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container52)
		/// </summary>
		/// <returns>The Visible State of wt_Container52</returns>
		public bool cnt_Container52_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtCommencementDateInput_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssEditRecord1Record.ssENLearningSupport.ssCommencementDate)) {
				return ssEditRecord1Record.ssENLearningSupport.ssCommencementDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtCommencementDateInput");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssEditRecord1Record.ssENLearningSupport.ssCommencementDate)) {
						return "";
					}
					return ssEditRecord1Record.ssENLearningSupport.ssCommencementDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtCommencementDateInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENLearningSupport.ssCommencementDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssEditRecord1Record.ssENLearningSupport.ssCommencementDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENLearningSupport.ssCommencementDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtCommencementDateInput)
		/// </summary>
		/// <returns>The Visible State of wtCommencementDateInput</returns>
		public bool inputwtCommencementDateInput_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtCommencementDateInput)
		/// </summary>
		/// <returns>The Enabled State of wtCommencementDateInput</returns>
		public bool inputwtCommencementDateInput_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtCommencementDateInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtCommencementDateInput</returns>
		public bool inputwtCommencementDateInput_isMandatory() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
				widget.inParamInputWidgetId = this.FindControl("wtCommencementDateInput").ClientID;
				widget.inParamMinYear = -1;
				widget.inParamMaxYear = -1;
				widget.inParamAlign = "Bl";
				widget.inParamSingleClick = true;
				widget.inParamShowWeekNumbers = false;
				widget.inParamUpdateOnCloseOnly = false;
				widget.inParamShowOthers = false;
				widget.inParamFirstDay = 0;
				widget.inParamShowTime = false;
				widget.inParamShow24HourFormat = true;
				widget.inParamReuseCalendarObject = false;
				widget.inParamInitialDate = BuiltInFunction.CurrDate();
				widget.inParamDateFormat = "";
				widget.inParamSpecialDays = "";
				widget.inParamOnUpdate = "";
				widget.inParamFlatStyle = false;
				widget.inParamButtonWidgetId = "";
				widget.inParamYearStep = 2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntReviewDate_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntReviewDate_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntReviewDate_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntReviewDate_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtReviewDate)
		/// </summary>
		/// <returns>The Visible State of wtReviewDate</returns>
		public bool cntReviewDate_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container83_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container83_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container83_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container83_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container83)
		/// </summary>
		/// <returns>The Visible State of wt_Container83</returns>
		public bool cnt_Container83_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtReviewDateInput_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssEditRecord1Record.ssENLearningSupport.ssReviewDate)) {
				return ssEditRecord1Record.ssENLearningSupport.ssReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtReviewDateInput");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssEditRecord1Record.ssENLearningSupport.ssReviewDate)) {
						return "";
					}
					return ssEditRecord1Record.ssENLearningSupport.ssReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtReviewDateInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENLearningSupport.ssReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssEditRecord1Record.ssENLearningSupport.ssReviewDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENLearningSupport.ssReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtReviewDateInput)
		/// </summary>
		/// <returns>The Visible State of wtReviewDateInput</returns>
		public bool inputwtReviewDateInput_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtReviewDateInput)
		/// </summary>
		/// <returns>The Enabled State of wtReviewDateInput</returns>
		public bool inputwtReviewDateInput_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtReviewDateInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtReviewDateInput</returns>
		public bool inputwtReviewDateInput_isMandatory() {
			return true;
		}

		public void RichWidgets_webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
				widget.inParamInputWidgetId = this.FindControl("wtReviewDateInput").ClientID;
				widget.inParamMinYear = -1;
				widget.inParamMaxYear = -1;
				widget.inParamAlign = "Bl";
				widget.inParamSingleClick = true;
				widget.inParamShowWeekNumbers = false;
				widget.inParamUpdateOnCloseOnly = false;
				widget.inParamShowOthers = false;
				widget.inParamFirstDay = 0;
				widget.inParamShowTime = false;
				widget.inParamShow24HourFormat = true;
				widget.inParamReuseCalendarObject = false;
				widget.inParamInitialDate = BuiltInFunction.CurrDate();
				widget.inParamDateFormat = "";
				widget.inParamSpecialDays = "";
				widget.inParamOnUpdate = "";
				widget.inParamFlatStyle = false;
				widget.inParamButtonWidgetId = "";
				widget.inParamYearStep = 2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntNotes_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntNotes_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntNotes_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntNotes_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNotes)
		/// </summary>
		/// <returns>The Visible State of wtNotes</returns>
		public bool cntNotes_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container69_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container69_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container69_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container69_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container69)
		/// </summary>
		/// <returns>The Visible State of wt_Container69</returns>
		public bool cnt_Container69_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtNotesComments_input_value() {
			if (("" !=ssEditRecord1Record.ssENLearningSupport.ssNotes)) {
				return ssEditRecord1Record.ssENLearningSupport.ssNotes;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtNotesComments");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENLearningSupport.ssNotes;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtNotesComments_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENLearningSupport.ssNotes = ""; 
				} else {
					ssEditRecord1Record.ssENLearningSupport.ssNotes = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENLearningSupport.ssNotes = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtNotesComments)
		/// </summary>
		/// <returns>The Visible State of wtNotesComments</returns>
		public bool inputwtNotesComments_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtNotesComments)
		/// </summary>
		/// <returns>The Enabled State of wtNotesComments</returns>
		public bool inputwtNotesComments_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtNotesComments)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtNotesComments</returns>
		public bool inputwtNotesComments_isMandatory() {
			return false;
		}

		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void Hunspell_webBlck_WebBlockInstance94_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
				widget.inParamTextInputId = this.FindControl("wtNotesComments").ClientID;
				widget.inParamExtraStyle = "";
				widget.inParamInPopupWindow = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntSaveCancelButtons_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSaveCancelButtons_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSaveCancelButtons_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSaveCancelButtons_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSaveCancelButtons)
		/// </summary>
		/// <returns>The Visible State of wtSaveCancelButtons</returns>
		public bool cntSaveCancelButtons_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container88_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container88_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container88_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container88_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container88)
		/// </summary>
		/// <returns>The Visible State of wt_Container88</returns>
		public bool cnt_Container88_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wtEditRecord1_onDataBindingDataSource(object sender, System.EventArgs e) {
		}
		public void cnt_Container89_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container89_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container89_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container89_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container89)
		/// </summary>
		/// <returns>The Visible State of wt_Container89</returns>
		public bool cnt_Container89_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (resUserCheck_outParamPermissionType==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkSave_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtSave_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
				if (CommandSave(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtSave)
		/// </summary>
		/// <returns>title of the Link (wtSave)</returns>
		public string
		lnkSave_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSave)
		/// </summary>
		/// <returns>The Visible State of wtSave</returns>
		public bool lnkSave_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSave)
		/// </summary>
		/// <returns>The Enabled State of wtSave</returns>
		public bool lnkSave_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container96_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container96_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container96_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container96_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container96)
		/// </summary>
		/// <returns>The Visible State of wt_Container96</returns>
		public bool cnt_Container96_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("KWHNbVoiY0i7rCt0vNrlbA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container71_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container71_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container71_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:7px;margin-left:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container71_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container71)
		/// </summary>
		/// <returns>The Visible State of wt_Container71</returns>
		public bool cnt_Container71_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link95_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnk_Link95_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnk_Link95_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:#666;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link95_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandCancel(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link95)
		/// </summary>
		/// <returns>title of the Link (wt_Link95)</returns>
		public string
		lnk_Link95_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link95)
		/// </summary>
		/// <returns>The Visible State of wt_Link95</returns>
		public bool lnk_Link95_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link95)
		/// </summary>
		/// <returns>The Enabled State of wt_Link95</returns>
		public bool lnk_Link95_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntAttachedDocumentsContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntAttachedDocumentsContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntAttachedDocumentsContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 258px;  min-height: 270px;  padding: 10px 20px 10px 20px;  border-style: solid;  border-width: 1px;  border-radius: 8px; border-color:#CCCCCC;position:relative";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntAttachedDocumentsContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAttachedDocumentsContainer)
		/// </summary>
		/// <returns>The Visible State of wtAttachedDocumentsContainer</returns>
		public bool cntAttachedDocumentsContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container50_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Text67_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Text67_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Text67_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-size:16px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container66_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container66_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container66_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container66_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container66)
		/// </summary>
		/// <returns>The Visible State of wt_Container66</returns>
		public bool cnt_Container66_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!getWtAttachedDocumentsListList().Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListAttachedDocumentsList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtAttachedDocumentsList
				ssAttachedDocumentsListList = queryResGetLearningSupportDocumentsByLearningSupportID_outParamList;
				ssAttachedDocumentsListListDoDataBind = false;
				ssAttachedDocumentsListListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListAttachedDocumentsList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssAttachedDocumentsListList.Length > 0) {
					ssAttachedDocumentsListList.CurrentRec = ssAttachedDocumentsListList[ssAttachedDocumentsListList.CurrentRowNumber];
				}
				if (ssAttachedDocumentsListList.Length > e.SelectedIndex) {
					ssAttachedDocumentsListList.CurrentRec = ssAttachedDocumentsListList[e.SelectedIndex];
					ssAttachedDocumentsListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListAttachedDocumentsList_Store(object dataItem, int index) {
			RCDocumentsLearningSupportDocumentsRecord tmprec = (RCDocumentsLearningSupportDocumentsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENDocuments.ssId == 0?(object) null: tmprec.ssENDocuments.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssENLearningSupportDocuments.ssId == 0?(object) null: tmprec.ssENLearningSupportDocuments.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENLearningSupportDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENLearningSupportDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			))));
			if (index < wtAttachedDocumentsList_storage.Count) {
				wtAttachedDocumentsList_storage[index] = tmpFields;
			} else {
				wtAttachedDocumentsList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListAttachedDocumentsList_Restore() {

			#region fetch ssAttachedDocumentsListList.

			// Read the needed fields of ssAttachedDocumentsListList from storewtAttachedDocumentsList_list
			ssAttachedDocumentsListList = new RLDocumentsLearningSupportDocumentsRecordList();
			ArrayList storewtAttachedDocumentsList_list;
			storewtAttachedDocumentsList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtAttachedDocumentsList_list", null);
			if (storewtAttachedDocumentsList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtAttachedDocumentsList_list in storewtAttachedDocumentsList_list) {
					if (tmpFieldswtAttachedDocumentsList_list != null) {
						// Aux current record variable
						RCDocumentsLearningSupportDocumentsRecord tmpAuxCurrentRecordwtAttachedDocumentsList_list = new RCDocumentsLearningSupportDocumentsRecord(null);
						tmpAuxCurrentRecordwtAttachedDocumentsList_list.ssENDocuments.ssId = (int) (tmpFieldswtAttachedDocumentsList_list[0] == null ? 0: tmpFieldswtAttachedDocumentsList_list[0]);

						tmpAuxCurrentRecordwtAttachedDocumentsList_list.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtAttachedDocumentsList_list[1]);

						tmpAuxCurrentRecordwtAttachedDocumentsList_list.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtAttachedDocumentsList_list[2]);

						tmpAuxCurrentRecordwtAttachedDocumentsList_list.ssENLearningSupportDocuments.ssId = (int) (tmpFieldswtAttachedDocumentsList_list[3] == null ? 0: tmpFieldswtAttachedDocumentsList_list[3]);

						tmpAuxCurrentRecordwtAttachedDocumentsList_list.ssENLearningSupportDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtAttachedDocumentsList_list[4]);

						tmpAuxCurrentRecordwtAttachedDocumentsList_list.ssENLearningSupportDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtAttachedDocumentsList_list[5]);

						ssAttachedDocumentsListList.Append(tmpAuxCurrentRecordwtAttachedDocumentsList_list);
					}
				}
			}
			ssAttachedDocumentsListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssAttachedDocumentsListList runtime properties state.


			if (storewtAttachedDocumentsList_list.Count > 0) {
				ssAttachedDocumentsListList.RestoreRecordListState(storewtAttachedDocumentsList_list.Count - 1, false);
			} else {
				ssAttachedDocumentsListList.CurrentRowNumber = 0;
			}

			#endregion

			wtAttachedDocumentsList_storage = storewtAttachedDocumentsList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListAttachedDocumentsList_Clear(object sender, EventArgs e) {
			wtAttachedDocumentsList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListAttachedDocumentsList_Rebuild(int startIndex, int lineCount) {
			if (ssAttachedDocumentsListList.Length != -1) {
				wtAttachedDocumentsList_storage.Clear();
				for (int i=startIndex; i<ssAttachedDocumentsListList.Data.Count && i<startIndex+lineCount; i++) {
					recListAttachedDocumentsList_Store(ssAttachedDocumentsListList.Data[i], wtAttachedDocumentsList_storage.Count);
				}
			}
		}
		public void recListAttachedDocumentsList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtAttachedDocumentsList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLDocumentsLearningSupportDocumentsRecordList getWtAttachedDocumentsListList() {
			if (ssAttachedDocumentsListListDoDataBind) {
				recListAttachedDocumentsList_onDataBinding(this, null);
			}

			return ssAttachedDocumentsListList;
		}
		bool if_wt_If37_hasRun=false;
		bool if_wt_If37_evalResult;
		public bool if_wt_If37() {
			if (if_wt_If37_hasRun) {
				if_wt_If37_hasRun = false;
				return if_wt_If37_evalResult;
			}
			if_wt_If37_hasRun = true;
			if_wt_If37_evalResult = Functions.ActionCheckRoleCanViewDocument(heContext, getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssId);
			return if_wt_If37_evalResult;
		}

		public void cnt_Container82_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container82_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container82_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container82_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container82)
		/// </summary>
		/// <returns>The Visible State of wt_Container82</returns>
		public bool cnt_Container82_isVisible() {
			return true;
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link68_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDownloadDocument(heContext)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link68)
		/// </summary>
		/// <returns>title of the Link (wt_Link68)</returns>
		public string
		lnk_Link68_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link68)
		/// </summary>
		/// <returns>The Visible State of wt_Link68</returns>
		public bool lnk_Link68_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link68)
		/// </summary>
		/// <returns>The Enabled State of wt_Link68</returns>
		public bool lnk_Link68_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return Functions.ActionCheckRoleCanViewDocument(heContext, getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssId); 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 2q58vJBbNkG3Mihgu8n1sw) Expression:
		///  AttachedDocumentsList.List.Current.Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression60() {
			return getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssDocumentName;
		}
		public void cnt_Container46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container46_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container46_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container46_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container46)
		/// </summary>
		/// <returns>The Visible State of wt_Container46</returns>
		public bool cnt_Container46_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link81_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link81_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeleteAttachedDocument(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link81)
		/// </summary>
		/// <returns>title of the Link (wt_Link81)</returns>
		public string
		lnk_Link81_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link81)
		/// </summary>
		/// <returns>The Visible State of wt_Link81</returns>
		public bool lnk_Link81_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link81)
		/// </summary>
		/// <returns>The Enabled State of wt_Link81</returns>
		public bool lnk_Link81_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance56_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// Function to dump expression (Key = IHlb6nLuCEOpmTozZ1VtQQ) Expression:
		///  AttachedDocumentsList.List.Current.Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression85() {
			return getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssDocumentName;
		}
		public void expression_InlineExpression12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:red;font-weight:bolder;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = uztXLghQdUum9+Qf8mgarw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression12() {
			return ((Functions.ActionCheckRoleCanViewDocument(heContext, getWtAttachedDocumentsListList().CurrentRec.ssENDocuments.ssId)) ?(""):("(*)"));
		}
		public void cnt_Container73_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container73_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container73_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container73_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container73)
		/// </summary>
		/// <returns>The Visible State of wt_Container73</returns>
		public bool cnt_Container73_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtAttachDocument)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtAttachDocument)</returns>
		public string lnkAttachDocument_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("DocumentViewingRestrictionType", System.Web.HttpUtility.UrlEncode("Role", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("EnableDocumentViewingRestrictions", System.Web.HttpUtility.UrlEncode("True", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("DocumentType", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENDocumentTypeEntity.GetRecordByKey(ObjectKey.Parse("_O3l57z3wEqXgTAnf0NMCA")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_AttachDocument", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtAttachDocument)
		/// </summary>
		/// <returns>title of the Link (wtAttachDocument)</returns>
		public string
		lnkAttachDocument_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAttachDocument)
		/// </summary>
		/// <returns>The Visible State of wtAttachDocument</returns>
		public bool lnkAttachDocument_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtAttachDocument)
		/// </summary>
		/// <returns>The Enabled State of wtAttachDocument</returns>
		public bool lnkAttachDocument_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = JiCct2Hj80ihhrMzsUX0pw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression57() {
			return ((queryResGetLearningSupportDocumentsByLearningSupportID_outParamList.Empty) ?("Attach Document"):("Attach Additional Document"));
		}
		public void RichWidgets_webBlck_WebBlockInstance13_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtAttachDocument.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance13
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance13_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container41_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position: absolute; bottom: 5px; left: 5px; right: 5px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container41_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Text10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Text10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Text10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "right:10px;bottom:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandDownloadDocument {

			/// <summary>
			/// Query Function "GetDocumentById" of Action "DownloadDocument"
			/// </summary>
			public static RLDocumentsRecordList datasetGetDocumentById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: True
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 3));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENDocuments.[DOCUMENTNAME] o3, ENDocuments.[DOCUMENTDATA] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {Documents} ENDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENDocuments.[ID] = @qpinP) AND (ENDocuments.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENDocuments.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDocumentsRecordList outParamList = new RLDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.DownloadDocument.GetDocumentById.List");
						outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.DownloadDocument.GetDocumentById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 3) {
						RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.DownloadDocument.GetDocumentById.List");
							outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.DownloadDocument.GetDocumentById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandCancel {
		}
		public static class FuncCommandDeleteAttachedDocument {

			/// <summary>
			/// Query Function "GetRoleDocumentPermissionsByDocumentID" of Action "DeleteAttachedDocument"
			/// </summary>
			public static RLRoleDocumentPermissionsRecordList datasetGetRoleDocumentPermissionsByDocumentID(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRoleDocumentPermissions.[ID] o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {RoleDocumentPermissions} ENRoleDocumentPermissions");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRoleDocumentPermissions.[DOCUMENTID] = @qpinP) AND (ENRoleDocumentPermissions.[DOCUMENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRoleDocumentPermissions.[DOCUMENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRoleDocumentPermissionsRecordList outParamList = new RLRoleDocumentPermissionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRoleDocumentPermissionsRecordList _tmp = new RLRoleDocumentPermissionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.DeleteAttachedDocument.GetRoleDocumentPermissionsByDocumentID.List");
						outParamList = (RLRoleDocumentPermissionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.DeleteAttachedDocument.GetRoleDocumentPermissionsByDocumentID.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRoleDocumentPermissionsRecordList _tmp = new RLRoleDocumentPermissionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.DeleteAttachedDocument.GetRoleDocumentPermissionsByDocumentID.List");
							outParamList = (RLRoleDocumentPermissionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.DeleteAttachedDocument.GetRoleDocumentPermissionsByDocumentID.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandEdit {
		}
		public static class FuncCommandSave {
		}
		public static class FuncCommandOnChange {
		}
		public static class FuncCommandDelete {

			/// <summary>
			/// Query Function "GetLearningSupportDocumentsByLearningSupportID2" of Action "Delete"
			/// </summary>
			public static RLLearningSupportDocumentsRecordList datasetGetLearningSupportDocumentsByLearningSupportID2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENLearningSupportDocuments.[ID] o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {LearningSupportDocuments} ENLearningSupportDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENLearningSupportDocuments.[LEARNINGSUPPORTID] = @qpinP) AND (ENLearningSupportDocuments.[LEARNINGSUPPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENLearningSupportDocuments.[LEARNINGSUPPORTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLLearningSupportDocumentsRecordList outParamList = new RLLearningSupportDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLLearningSupportDocumentsRecordList _tmp = new RLLearningSupportDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.Delete.GetLearningSupportDocumentsByLearningSupportID2.List");
						outParamList = (RLLearningSupportDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.Delete.GetLearningSupportDocumentsByLearningSupportID2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLLearningSupportDocumentsRecordList _tmp = new RLLearningSupportDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.Delete.GetLearningSupportDocumentsByLearningSupportID2.List");
							outParamList = (RLLearningSupportDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.Delete.GetLearningSupportDocumentsByLearningSupportID2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncssPreparation {

			private static void datasetGetLearningSupportByIdReadDB(ref RCLearningSupportLearningSupportTypesRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENLearningSupport.Read(r, ref index);
				rec.ssENLearningSupportTypes.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetLearningSupportById" of Action "Preparation"
			/// </summary>
			public static RLLearningSupportLearningSupportTypesRecordList datasetGetLearningSupportById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENLearningSupport.[ID] o1, ENLearningSupport.[LEARNINGSUPPORTTYPE] o2, ENLearningSupport.[OTHERDESCRIPTION] o3, ENLearningSupport.[COMMENCEMENTDATE] o4, ENLearningSupport.[REVIEWDATE] o5, ENLearningSupport.[LEADPROFESSIONAL] o6, ENLearningSupport.[LOCATIONOFORIGINAL] o7, ENLearningSupport.[STUDENTID] o8, ENLearningSupport.[NOTES] o9, ENLearningSupport.[LASTUPDATEDBY] o10, ENLearningSupport.[LASTUPDATEDON] o11, NULL o12, NULL o13, NULL o14, NULL o15");
				fromBuilder.Append(" FROM ({LearningSupport} ENLearningSupport Left JOIN {LearningSupportTypes} ENLearningSupportTypes ON (ENLearningSupport.[LEARNINGSUPPORTTYPE] = ENLearningSupportTypes.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENLearningSupport.[ID] = @qpinP) AND (ENLearningSupport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENLearningSupport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLLearningSupportLearningSupportTypesRecordList outParamList = new RLLearningSupportLearningSupportTypesRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetLearningSupportByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLLearningSupportLearningSupportTypesRecordList _tmp = new RLLearningSupportLearningSupportTypesRecordList();
					_tmp.AlternateReadDBMethod = datasetGetLearningSupportByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportById.List");
						outParamList = (RLLearningSupportLearningSupportTypesRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLLearningSupportLearningSupportTypesRecordList _tmp = new RLLearningSupportLearningSupportTypesRecordList();
						_tmp.AlternateReadDBMethod = datasetGetLearningSupportByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportById.List");
							outParamList = (RLLearningSupportLearningSupportTypesRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetLearningSupportDocumentsByLearningSupportIDReadDB(ref RCDocumentsLearningSupportDocumentsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENDocuments.Read(r, ref index);
				rec.ssENLearningSupportDocuments.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetLearningSupportDocumentsByLearningSupportID" of Action "Preparation"
			/// </summary>
			public static RLDocumentsLearningSupportDocumentsRecordList datasetGetLearningSupportDocumentsByLearningSupportID(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {AttachedDocumentsList}
				// Refresh Query OD4rx2SblEGJmFXxJNbQoA Iterations: Multiple {AttachedDocumentsList}
				// Refresh Query t9NKp7Z_GEaUN8Pcxfp_ag Iterations: Multiple {AttachedDocumentsList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENDocuments.[ID] o1, NULL o2, ENDocuments.[DOCUMENTNAME] o3, NULL o4, NULL o5, NULL o6, NULL o7, ENLearningSupportDocuments.[ID] o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM ({LearningSupportDocuments} ENLearningSupportDocuments Left JOIN {Documents} ENDocuments ON (ENLearningSupportDocuments.[DOCUMENTID] = ENDocuments.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENLearningSupportDocuments.[LEARNINGSUPPORTID] = @qpinP) AND (ENLearningSupportDocuments.[LEARNINGSUPPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENLearningSupportDocuments.[LEARNINGSUPPORTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDocumentsLearningSupportDocumentsRecordList outParamList = new RLDocumentsLearningSupportDocumentsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetLearningSupportDocumentsByLearningSupportIDReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDocumentsLearningSupportDocumentsRecordList _tmp = new RLDocumentsLearningSupportDocumentsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetLearningSupportDocumentsByLearningSupportIDReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportDocumentsByLearningSupportID.List");
						outParamList = (RLDocumentsLearningSupportDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportDocumentsByLearningSupportID.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLDocumentsLearningSupportDocumentsRecordList _tmp = new RLDocumentsLearningSupportDocumentsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetLearningSupportDocumentsByLearningSupportIDReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportDocumentsByLearningSupportID.List");
							outParamList = (RLDocumentsLearningSupportDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_LearningSupport.Preparation.GetLearningSupportDocumentsByLearningSupportID.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KlgEbY__Wv0im8hIChvKFCw";
			}
		}
	}

}
