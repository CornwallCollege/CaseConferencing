/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkCourse_SIAS_SupporList: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Variable <code>varLcSIASSupportList</code> that represents the Service Studio local variable
		///  <code>SIASSupportList</code> <p>Description: </p>
		/// </summary>
		RLSIAS_SupportRecordList varLcSIASSupportList = new RLSIAS_SupportRecordList();

		/// <summary>
		/// Variable <code>varLcSIASSupport</code> that represents the Service Studio local variable
		///  <code>SIASSupport</code> <p>Description: </p>
		/// </summary>
		RCSIAS_SupportRecord varLcSIASSupport = new RCSIAS_SupportRecord(null);

		protected OutSystems.HubEdition.WebWidgets.Container wtLearnerListWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		private RLSIAS_SupportRecordList _ssLearnerListList = new RLSIAS_SupportRecordList();
		public RLSIAS_SupportRecordList ssLearnerListList {
			get {
				return _ssLearnerListList; 
			}
			set {
				_ssLearnerListList = value;
				wtLearnerList.DataSource = value;
				ssLearnerListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtLearnerList;
		public ArrayList wtLearnerList_storage = new ArrayList();
		protected bool ssLearnerListList_notUsedYet = true;
		protected bool ssLearnerListListDoDataBind;
		protected bool ssLearnerListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		/// <summary>
		/// Variable (wt_Link38) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link38;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox34ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox34 = new SelectRtWidget();
		RLSIASSupportTypeRecordList Rt_wt_ComboBox34_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container35;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox27ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox27 = new SelectRtWidget();
		RLExamConcessionsRecordList Rt_wt_ComboBox27_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container39;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		/// <summary>
		/// Variable (wtPopupNotesLnk) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtPopupNotesLnk;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLSIASSupportTypeRecordList queryResGEtSupportTypes_outParamList = new RLSIASSupportTypeRecordList();
		int queryResGEtSupportTypes_outParamCount = 0;
		RLStudentRecordList queryResGetStudents_outParamList = new RLStudentRecordList();
		int queryResGetStudents_outParamCount = 0;
		RLSIASSupportRecordList queryResGetSIASSupportsByStudentId_outParamList = new RLSIASSupportRecordList();
		int queryResGetSIASSupportsByStudentId_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query QueryGetStudents
			int QueryGetStudents_maxRecords = 0;
			queryResGetStudents_outParamList = FuncssPreparation.QueryGetStudents(heContext, QueryGetStudents_maxRecords, IterationMultiplicity.Single, out queryResGetStudents_outParamCount, inParamCourseCode
			);
			// Foreach GetStudents.List
			queryResGetStudents_outParamList.StartIteration();
			try {
				while (! queryResGetStudents_outParamList.Eof) {
					// ListClear2
					ExtendedActions.ListClear(heContext, varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList);
					// (Student)
					varLcSIASSupport.ssSTSIAS_Support.ssStudent = queryResGetStudents_outParamList.CurrentRec; // SIASSupport.SIAS_Support.Student = GetStudents.List.Current
					// Query datasetGetSIASSupportsByStudentId
					int datasetGetSIASSupportsByStudentId_maxRecords = 1;
					if (datasetGetSIASSupportsByStudentId_maxRecords < 1) datasetGetSIASSupportsByStudentId_maxRecords = 1;
					queryResGetSIASSupportsByStudentId_outParamList = FuncssPreparation.datasetGetSIASSupportsByStudentId(heContext, datasetGetSIASSupportsByStudentId_maxRecords, IterationMultiplicity.Never, out queryResGetSIASSupportsByStudentId_outParamCount, queryResGetStudents_outParamList.CurrentRec.ssENStudent.ssStudentReference
					);
					// (SEt Support)
					varLcSIASSupport.ssSTSIAS_Support.ssSIASSupport = queryResGetSIASSupportsByStudentId_outParamList.CurrentRec; // SIASSupport.SIAS_Support.SIASSupport = GetSIASSupportsByStudentId.List.Current
					// Query QueryGEtSupportTypes
					int QueryGEtSupportTypes_maxRecords = 0;
					queryResGEtSupportTypes_outParamList = FuncssPreparation.QueryGEtSupportTypes(heContext, QueryGEtSupportTypes_maxRecords, IterationMultiplicity.Multiple, out queryResGEtSupportTypes_outParamCount, queryResGetStudents_outParamList.CurrentRec.ssENStudent.ssStudentReference
					);
					// ListAppendAll
					ExtendedActions.ListAppendAll(heContext, varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList, queryResGEtSupportTypes_outParamList);
					// ListAppend
					ExtendedActions.ListAppend(heContext, varLcSIASSupportList, varLcSIASSupport);
					queryResGetStudents_outParamList.Advance();
				}
			} finally {
				queryResGetStudents_outParamList.EndIteration();
			}
		}
		static WBlkCourse_SIAS_SupporList() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtLearnerList.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtLearnerList.ClientID, false, -1);
			wtLearnerList.LineCountExpression = () => 999;
			wtLearnerList.EmptyMessageExpression = () => "No items to show...";
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssLearnerListListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(FindControl("wtLearnerList"), "wt_ComboBox34", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(FindControl("wtLearnerList"), "wt_ComboBox27", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store varLcSIASSupportList.

			int tmpcurrentrownumbervarLcSIASSupportList = varLcSIASSupportList.CurrentRowNumber;
			bool tmpeofvarLcSIASSupportList = varLcSIASSupportList.Eof;
			ArrayList storevarLcSIASSupportList = new ArrayList();

			// Write the needed fields of varLcSIASSupportList to the storevarLcSIASSupportList
			if (!varLcSIASSupportList.Empty) {
				try {
					varLcSIASSupportList.StartIteration();

					while (!varLcSIASSupportList.Eof) {
						ArrayList tmpFieldsvarLcSIASSupportList = new ArrayList();
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssForenames == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssForenames);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssSurname == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssSurname);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentPhotoURL == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentPhotoURL);
						tmpFieldsvarLcSIASSupportList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsvarLcSIASSupportList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssId == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssId);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1 == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2 == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3 == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedOn);
						tmpFieldsvarLcSIASSupportList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedBy == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedBy);
						tmpFieldsvarLcSIASSupportList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsvarLcSIASSupportList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false, false, false, false, false, false
						}
						))));

						#region store varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.

						int tmpcurrentrownumbervarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRowNumber;
						bool tmpeofvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.Eof;
						ArrayList storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = new ArrayList();

						// Write the needed fields of varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList to the storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList
						if (!varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.Empty) {
							try {
								varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.StartIteration();

								while (!varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.Eof) {
									ArrayList tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = new ArrayList();
									tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId);
									tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel == "" ?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel);
									tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssOrder == 0?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssOrder);
									tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssIs_Active == false?(object) null: varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssIs_Active);
									tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ChangedAttributes, new BitArray(new bool[] {
										true, true, true, true
									}
									))));
									tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.OptimizedAttributes, new BitArray(new bool[] {
										false, false, false, false
									}
									))));
									storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.Add(tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList);
									varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.Advance();
								}
							} finally {
								varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.EndIteration();
							}
						}

						tmpFieldsvarLcSIASSupportList.Add(storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList);

						#endregion


						#region store varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList runtime properties state.

						tmpFieldsvarLcSIASSupportList.Add(tmpcurrentrownumbervarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList == 0?(object) null: tmpcurrentrownumbervarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList);
						tmpFieldsvarLcSIASSupportList.Add(tmpeofvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList == false?(object) null: tmpeofvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList);
						varLcSIASSupportList.CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList, tmpeofvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList);

						#endregion

						storevarLcSIASSupportList.Add(tmpFieldsvarLcSIASSupportList);
						varLcSIASSupportList.Advance();
					}
				} finally {
					varLcSIASSupportList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcSIASSupportList", storevarLcSIASSupportList, null);

			#endregion


			#region store varLcSIASSupportList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcSIASSupportList_currentrownumber", tmpcurrentrownumbervarLcSIASSupportList, 0);
			ViewStateAttributes.SetInViewState("varLcSIASSupportList_eof", tmpeofvarLcSIASSupportList, false);
			varLcSIASSupportList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupportList, tmpeofvarLcSIASSupportList);

			#endregion

			ViewStateAttributes.SetInViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSelectedSupportTypeId", varLcSIASSupport.ssSTSIAS_Support.ssSIASSelectedSupportTypeId, 0);

			#region store varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.

			int tmpcurrentrownumbervarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRowNumber;
			bool tmpeofvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.Eof;
			ArrayList storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = new ArrayList();

			// Write the needed fields of varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList to the storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList
			if (!varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.Empty) {
				try {
					varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.StartIteration();

					while (!varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.Eof) {
						ArrayList tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = new ArrayList();
						tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId == 0?(object) null: varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId);
						tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel == "" ?(object) null: varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel);
						tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssOrder == 0?(object) null: varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssOrder);
						tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.Add(varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssIs_Active == false?(object) null: varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssIs_Active);
						tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true
						}
						))));
						tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false
						}
						))));
						storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.Add(tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList);
						varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.Advance();
					}
				} finally {
					varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList", storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList, null);

			#endregion


			#region store varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList_currentrownumber", tmpcurrentrownumbervarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList, 0);
			ViewStateAttributes.SetInViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList_eof", tmpeofvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList, false);
			varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList, tmpeofvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList);

			#endregion

			if (IsAjaxRequest) {
				recListLearnerList_Rebuild((ssLearnerListListDataBound ? wtLearnerList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtLearnerList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtLearnerList_list", wtLearnerList_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch varLcSIASSupportList.

				// Read the needed fields of varLcSIASSupportList from storevarLcSIASSupportList
				varLcSIASSupportList = new RLSIAS_SupportRecordList();
				ArrayList storevarLcSIASSupportList;
				storevarLcSIASSupportList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcSIASSupportList", null);
				if (storevarLcSIASSupportList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcSIASSupportList in storevarLcSIASSupportList) {
						if (tmpFieldsvarLcSIASSupportList != null) {
							// Aux current record variable
							RCSIAS_SupportRecord tmpAuxCurrentRecordvarLcSIASSupportList = new RCSIAS_SupportRecord(null);
							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference = (string) (tmpFieldsvarLcSIASSupportList[0] == null ? "": tmpFieldsvarLcSIASSupportList[0]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssStudent.ssENStudent.ssForenames = (string) (tmpFieldsvarLcSIASSupportList[1] == null ? "": tmpFieldsvarLcSIASSupportList[1]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssStudent.ssENStudent.ssSurname = (string) (tmpFieldsvarLcSIASSupportList[2] == null ? "": tmpFieldsvarLcSIASSupportList[2]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentPhotoURL = (string) (tmpFieldsvarLcSIASSupportList[3] == null ? "": tmpFieldsvarLcSIASSupportList[3]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssStudent.ssENStudent.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportList[4]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssStudent.ssENStudent.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportList[5]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSelectedSupportTypeId = (int) (tmpFieldsvarLcSIASSupportList[6] == null ? 0: tmpFieldsvarLcSIASSupportList[6]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssId = (int) (tmpFieldsvarLcSIASSupportList[7] == null ? 0: tmpFieldsvarLcSIASSupportList[7]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId = (string) (tmpFieldsvarLcSIASSupportList[8] == null ? "": tmpFieldsvarLcSIASSupportList[8]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1 = (int) (tmpFieldsvarLcSIASSupportList[9] == null ? 0: tmpFieldsvarLcSIASSupportList[9]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2 = (int) (tmpFieldsvarLcSIASSupportList[10] == null ? 0: tmpFieldsvarLcSIASSupportList[10]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3 = (int) (tmpFieldsvarLcSIASSupportList[11] == null ? 0: tmpFieldsvarLcSIASSupportList[11]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession = (string) (tmpFieldsvarLcSIASSupportList[12] == null ? "": tmpFieldsvarLcSIASSupportList[12]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes = (string) (tmpFieldsvarLcSIASSupportList[13] == null ? "": tmpFieldsvarLcSIASSupportList[13]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedOn = (DateTime) (tmpFieldsvarLcSIASSupportList[14] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsvarLcSIASSupportList[14]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedBy = (int) (tmpFieldsvarLcSIASSupportList[15] == null ? 0: tmpFieldsvarLcSIASSupportList[15]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportList[16]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportList[17]);


							#region fetch tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupportTypeList.

							// Read the needed fields of tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupportTypeList from storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList
							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupportTypeList = new RLSIASSupportTypeRecordList();
							ArrayList storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList;
							storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = (ArrayList) tmpFieldsvarLcSIASSupportList[18];

							if (storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList == null) {
								return;
							} else {

								foreach(ArrayList tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList in storevarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList) {
									if (tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList != null) {
										// Aux current record variable
										RCSIASSupportTypeRecord tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = new RCSIASSupportTypeRecord(null);
										tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssId = (int) (tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[0] == null ? 0: tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[0]);

										tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssLabel = (string) (tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[1] == null ? "": tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[1]);

										tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssOrder = (int) (tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[2] == null ? 0: tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[2]);

										tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssIs_Active = (bool) (tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[3] == null ? false: tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[3]);

										tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[4]);

										tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList[5]);

										tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupportTypeList.Append(tmpAuxCurrentRecordvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList);
									}
								}
							}
							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRowNumber = -1;
							#endregion


							#region fetch tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupportTypeList runtime properties state.

							int tmpcurrentrownumbervarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList;
							tmpcurrentrownumbervarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = (int) (tmpFieldsvarLcSIASSupportList[19] == null ? 0: tmpFieldsvarLcSIASSupportList[19]);

							bool tmpeofvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList;
							tmpeofvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList = (bool) (tmpFieldsvarLcSIASSupportList[20] == null ? false: tmpFieldsvarLcSIASSupportList[20]);

							tmpAuxCurrentRecordvarLcSIASSupportList.ssSTSIAS_Support.ssSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList, tmpeofvarLcSIASSupportList_ssSTSIAS_Support_ssSIASSupportTypeList);

							#endregion

							varLcSIASSupportList.Append(tmpAuxCurrentRecordvarLcSIASSupportList);
						}
					}
				}
				varLcSIASSupportList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcSIASSupportList runtime properties state.

				int tmpcurrentrownumbervarLcSIASSupportList;
				tmpcurrentrownumbervarLcSIASSupportList = (int) ViewStateAttributes.GetFromViewState("varLcSIASSupportList_currentrownumber", 0);
				bool tmpeofvarLcSIASSupportList;
				tmpeofvarLcSIASSupportList = (bool) ViewStateAttributes.GetFromViewState("varLcSIASSupportList_eof", false);
				varLcSIASSupportList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupportList, tmpeofvarLcSIASSupportList);

				#endregion

				varLcSIASSupport.ssSTSIAS_Support.ssSIASSelectedSupportTypeId = (int) ViewStateAttributes.GetFromViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSelectedSupportTypeId", 0);

				#region fetch varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.

				// Read the needed fields of varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList from storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList
				varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList = new RLSIASSupportTypeRecordList();
				ArrayList storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList;
				storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList", null);
				if (storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList in storevarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList) {
						if (tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList != null) {
							// Aux current record variable
							RCSIASSupportTypeRecord tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = new RCSIASSupportTypeRecord(null);
							tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssId = (int) (tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[0] == null ? 0: tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[0]);

							tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssLabel = (string) (tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[1] == null ? "": tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[1]);

							tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssOrder = (int) (tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[2] == null ? 0: tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[2]);

							tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssIs_Active = (bool) (tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[3] == null ? false: tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[3]);

							tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[4]);

							tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList[5]);

							varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.Append(tmpAuxCurrentRecordvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList);
						}
					}
				}
				varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList runtime properties state.

				int tmpcurrentrownumbervarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList;
				tmpcurrentrownumbervarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = (int) ViewStateAttributes.GetFromViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList_currentrownumber", 0);
				bool tmpeofvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList;
				tmpeofvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList = (bool) ViewStateAttributes.GetFromViewState("varLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList_eof", false);
				varLcSIASSupport.ssSTSIAS_Support.ssSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList, tmpeofvarLcSIASSupport_ssSTSIAS_Support_ssSIASSupportTypeList);

				#endregion

				recListLearnerList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KQjdywDFIXUG7FKM44W62PA";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCourse_SIAS_SupportItems_Edit.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("QjdywDFIXUG7FKM44W62PA"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvOnNotifyDeleteSupport: VarsBag {
			public RLSIASSupportRecordList queryResGetSIASSupportsByStudentId3_outParamList = new RLSIASSupportRecordList();
			public int queryResGetSIASSupportsByStudentId3_outParamCount = 0;

			public RLSIASSupportTypeRecordList queryResGEtSupportTypes2_outParamList = new RLSIASSupportTypeRecordList();
			public int queryResGEtSupportTypes2_outParamCount = 0;

			public lcvOnNotifyDeleteSupport() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotifyDeleteSupport</code> that represents the Service Studio screen action
		///  <code>OnNotifyDeleteSupport</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotifyDeleteSupport(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotifyDeleteSupport localVars = new lcvOnNotifyDeleteSupport();
			try {
				// Query datasetGetSIASSupportsByStudentId3
				int datasetGetSIASSupportsByStudentId3_maxRecords = 1;
				if (datasetGetSIASSupportsByStudentId3_maxRecords < 1) datasetGetSIASSupportsByStudentId3_maxRecords = 1;
				localVars.queryResGetSIASSupportsByStudentId3_outParamList = FuncCommandOnNotifyDeleteSupport.datasetGetSIASSupportsByStudentId3(heContext, datasetGetSIASSupportsByStudentId3_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetSIASSupportsByStudentId3_outParamCount, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId
				);
				// (SEt Support)
				getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport = localVars.queryResGetSIASSupportsByStudentId3_outParamList.CurrentRec; // LearnerList.List.Current.SIAS_Support.SIASSupport = GetSIASSupportsByStudentId3.List.Current
				// Query QueryGEtSupportTypes2
				int QueryGEtSupportTypes2_maxRecords = 0;
				localVars.queryResGEtSupportTypes2_outParamList = FuncCommandOnNotifyDeleteSupport.QueryGEtSupportTypes2(heContext, QueryGEtSupportTypes2_maxRecords, IterationMultiplicity.Multiple, out localVars.queryResGEtSupportTypes2_outParamCount, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId
				);
				// ListClear
				ExtendedActions.ListClear(heContext, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList);
				// ListAppendAll2
				ExtendedActions.ListAppendAll(heContext, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList, localVars.queryResGEtSupportTypes2_outParamList);
				// Refresh Widget (wtLearnerList)
				((OSPageViewState) Page).AjaxRefresh(wtLearnerList, getWtLearnerListList().CurrentRowNumber, "None", "Refresh", false, null, StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnChange: VarsBag {
			public bool inParamIsAddSupport;
			public bool inParamIsNote;
			public RLSIASSupportRecordList queryResGetSIASSupportsByStudentId3_outParamList = new RLSIASSupportRecordList();
			public int queryResGetSIASSupportsByStudentId3_outParamCount = 0;

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public RLSIASSupportTypeRecordList queryResGEtSupportTypes2_outParamList = new RLSIASSupportTypeRecordList();
			public int queryResGEtSupportTypes2_outParamCount = 0;

			public int resCreateOrUpdateSIASSupport_outParamId = 0;

			public lcvOnChange(bool inParamIsAddSupport, bool inParamIsNote) {
				this.inParamIsAddSupport = inParamIsAddSupport;
				this.inParamIsNote = inParamIsNote;
			}
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext, bool inParamIsAddSupport, bool inParamIsNote) {
			CheckPermissions(heContext);
			lcvOnChange localVars = new lcvOnChange(inParamIsAddSupport, inParamIsNote);
			try {
				if (localVars.inParamIsNote) {
					// NotifyWidgetGetMessage
					ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
					getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes = localVars.resNotifyWidgetGetMessage_outParamMessage; // LearnerList.List.Current.SIAS_Support.SIASSupport.SIASSupport.Notes = NotifyWidgetGetMessage.Message

				}
				// (Is new )
				if ((getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssId==BuiltInFunction.NullIdentifier())) {
					getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedOn = BuiltInFunction.CurrDateTime(); // LearnerList.List.Current.SIAS_Support.SIASSupport.SIASSupport.CreatedOn = CurrDateTime
					getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // LearnerList.List.Current.SIAS_Support.SIASSupport.SIASSupport.CreatedBy = UserID
					getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId = getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference; // LearnerList.List.Current.SIAS_Support.SIASSupport.SIASSupport.StudentId =
					// LearnerList.List.Current.SIAS_Support.Student.Student.StudentReference

				}
				// AddSuport
				if ((((localVars.inParamIsAddSupport&&(getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId!=getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1)) && (getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId!=getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2)) && (getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId!=getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3))) {
					// 1
					if ((getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1==BuiltInFunction.NullIdentifier())) {
						// Type 1
						getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1 = getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId; // LearnerList.List.Current.SIAS_Support.SIASSupport.SIASSupport.SupportType1 =
						// LearnerList.List.Current.SIAS_Support.SIASSelectedSupportTypeId

					} else {
						// 2
						if ((getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2==BuiltInFunction.NullIdentifier())) {
							// Type 2
							getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2 = getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId; // LearnerList.List.Current.SIAS_Support.SIASSupport.SIASSupport.SupportType2 =
							// LearnerList.List.Current.SIAS_Support.SIASSelectedSupportTypeId

						} else {
							// 3
							if ((getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3==BuiltInFunction.NullIdentifier())) {
								// Type 3
								getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3 = getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId; // LearnerList.List.Current.SIAS_Support.SIASSupport.SIASSupport.SupportType3 =
								// LearnerList.List.Current.SIAS_Support.SIASSelectedSupportTypeId

							}

						}

					}
					// Clear Selected
					getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId = BuiltInFunction.NullIdentifier(); // LearnerList.List.Current.SIAS_Support.SIASSelectedSupportTypeId = NullIdentifier

				}
				// CreateOrUpdateSIASSupport
				ExtendedActions.CreateOrUpdateSIASSupport(heContext, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ChangedAttributes, ((RCSIASSupportRecord) getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport), out localVars.resCreateOrUpdateSIASSupport_outParamId);
				// Query datasetGetSIASSupportsByStudentId3
				int datasetGetSIASSupportsByStudentId3_maxRecords = 1;
				if (datasetGetSIASSupportsByStudentId3_maxRecords < 1) datasetGetSIASSupportsByStudentId3_maxRecords = 1;
				localVars.queryResGetSIASSupportsByStudentId3_outParamList = FuncCommandOnChange.datasetGetSIASSupportsByStudentId3(heContext, datasetGetSIASSupportsByStudentId3_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetSIASSupportsByStudentId3_outParamCount, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId
				);
				// (SEt Support)
				getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport = localVars.queryResGetSIASSupportsByStudentId3_outParamList.CurrentRec; // LearnerList.List.Current.SIAS_Support.SIASSupport = GetSIASSupportsByStudentId3.List.Current
				// Query QueryGEtSupportTypes2
				int QueryGEtSupportTypes2_maxRecords = 0;
				localVars.queryResGEtSupportTypes2_outParamList = FuncCommandOnChange.QueryGEtSupportTypes2(heContext, QueryGEtSupportTypes2_maxRecords, IterationMultiplicity.Multiple, out localVars.queryResGEtSupportTypes2_outParamCount, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId
				);
				// ListClear
				ExtendedActions.ListClear(heContext, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList);
				// ListAppendAll2
				ExtendedActions.ListAppendAll(heContext, getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList, localVars.queryResGEtSupportTypes2_outParamList);
				// Refresh Widget (wtLearnerList)
				((OSPageViewState) Page).AjaxRefresh(wtLearnerList, getWtLearnerListList().CurrentRowNumber, "None", "Refresh", false, null, StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cntLearnerListWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLearnerListWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLearnerListWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLearnerListWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLearnerListWrapper)
		/// </summary>
		/// <returns>The Visible State of wtLearnerListWrapper</returns>
		public bool cntLearnerListWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container24_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container30_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container30_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container31_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container31_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListLearnerList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtLearnerList
				ssLearnerListList = varLcSIASSupportList;
				ssLearnerListListDoDataBind = false;
				ssLearnerListListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListLearnerList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssLearnerListList.Length > 0) {
					ssLearnerListList.CurrentRec = ssLearnerListList[ssLearnerListList.CurrentRowNumber];
				}
				if (ssLearnerListList.Length > e.SelectedIndex) {
					ssLearnerListList.CurrentRec = ssLearnerListList[e.SelectedIndex];
					ssLearnerListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListLearnerList_Store(object dataItem, int index) {
			RCSIAS_SupportRecord tmprec = (RCSIAS_SupportRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference == "" ?(object) null: tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssForenames == "" ?(object) null: tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssForenames);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssSurname == "" ?(object) null: tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssSurname);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentPhotoURL == "" ?(object) null: tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentPhotoURL);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssSTSIAS_Support.ssStudent.ssENStudent.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssId == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssId);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId == "" ?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1 == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2 == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3 == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession == "" ?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes == "" ?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedOn);
			tmpFields.Add(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedBy == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedBy);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, false, false
			}
			))));

			#region store tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.

			int tmpcurrentrownumber_ssSTSIAS_Support_ssSIASSupportTypeList = tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRowNumber;
			bool tmpeof_ssSTSIAS_Support_ssSIASSupportTypeList = tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.Eof;
			ArrayList store_ssSTSIAS_Support_ssSIASSupportTypeList = new ArrayList();

			// Write the needed fields of tmprec.ssSTSIAS_Support.ssSIASSupportTypeList to the store_ssSTSIAS_Support_ssSIASSupportTypeList
			if (!tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.Empty) {
				try {
					tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.StartIteration();

					while (!tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.Eof) {
						ArrayList tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList = new ArrayList();
						tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList.Add(tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId);
						tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList.Add(tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel == "" ?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel);
						tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList.Add(tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssOrder == 0?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssOrder);
						tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList.Add(tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssIs_Active == false?(object) null: tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssIs_Active);
						tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true
						}
						))));
						tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRec.ssENSIASSupportType.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false
						}
						))));
						store_ssSTSIAS_Support_ssSIASSupportTypeList.Add(tmpFields_ssSTSIAS_Support_ssSIASSupportTypeList);
						tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.Advance();
					}
				} finally {
					tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.EndIteration();
				}
			}

			tmpFields.Add(store_ssSTSIAS_Support_ssSIASSupportTypeList);

			#endregion


			#region store tmprec.ssSTSIAS_Support.ssSIASSupportTypeList runtime properties state.

			tmpFields.Add(tmpcurrentrownumber_ssSTSIAS_Support_ssSIASSupportTypeList == 0?(object) null: tmpcurrentrownumber_ssSTSIAS_Support_ssSIASSupportTypeList);
			tmpFields.Add(tmpeof_ssSTSIAS_Support_ssSIASSupportTypeList == false?(object) null: tmpeof_ssSTSIAS_Support_ssSIASSupportTypeList);
			tmprec.ssSTSIAS_Support.ssSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumber_ssSTSIAS_Support_ssSIASSupportTypeList, tmpeof_ssSTSIAS_Support_ssSIASSupportTypeList);

			#endregion

			if (index < wtLearnerList_storage.Count) {
				wtLearnerList_storage[index] = tmpFields;
			} else {
				wtLearnerList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListLearnerList_Restore() {

			#region fetch ssLearnerListList.

			// Read the needed fields of ssLearnerListList from storewtLearnerList_list
			ssLearnerListList = new RLSIAS_SupportRecordList();
			ArrayList storewtLearnerList_list;
			storewtLearnerList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtLearnerList_list", null);
			if (storewtLearnerList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtLearnerList_list in storewtLearnerList_list) {
					if (tmpFieldswtLearnerList_list != null) {
						// Aux current record variable
						RCSIAS_SupportRecord tmpAuxCurrentRecordwtLearnerList_list = new RCSIAS_SupportRecord(null);
						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference = (string) (tmpFieldswtLearnerList_list[0] == null ? "": tmpFieldswtLearnerList_list[0]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssStudent.ssENStudent.ssForenames = (string) (tmpFieldswtLearnerList_list[1] == null ? "": tmpFieldswtLearnerList_list[1]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssStudent.ssENStudent.ssSurname = (string) (tmpFieldswtLearnerList_list[2] == null ? "": tmpFieldswtLearnerList_list[2]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentPhotoURL = (string) (tmpFieldswtLearnerList_list[3] == null ? "": tmpFieldswtLearnerList_list[3]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssStudent.ssENStudent.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[4]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssStudent.ssENStudent.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[5]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSelectedSupportTypeId = (int) (tmpFieldswtLearnerList_list[6] == null ? 0: tmpFieldswtLearnerList_list[6]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssId = (int) (tmpFieldswtLearnerList_list[7] == null ? 0: tmpFieldswtLearnerList_list[7]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssStudentId = (string) (tmpFieldswtLearnerList_list[8] == null ? "": tmpFieldswtLearnerList_list[8]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType1 = (int) (tmpFieldswtLearnerList_list[9] == null ? 0: tmpFieldswtLearnerList_list[9]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType2 = (int) (tmpFieldswtLearnerList_list[10] == null ? 0: tmpFieldswtLearnerList_list[10]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssSupportType3 = (int) (tmpFieldswtLearnerList_list[11] == null ? 0: tmpFieldswtLearnerList_list[11]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession = (string) (tmpFieldswtLearnerList_list[12] == null ? "": tmpFieldswtLearnerList_list[12]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes = (string) (tmpFieldswtLearnerList_list[13] == null ? "": tmpFieldswtLearnerList_list[13]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedOn = (DateTime) (tmpFieldswtLearnerList_list[14] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtLearnerList_list[14]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssCreatedBy = (int) (tmpFieldswtLearnerList_list[15] == null ? 0: tmpFieldswtLearnerList_list[15]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[16]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[17]);


						#region fetch tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupportTypeList.

						// Read the needed fields of tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupportTypeList from storewtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList
						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupportTypeList = new RLSIASSupportTypeRecordList();
						ArrayList storewtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList;
						storewtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList = (ArrayList) tmpFieldswtLearnerList_list[18];

						if (storewtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList == null) {
							return;
						} else {

							foreach(ArrayList tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList in storewtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList) {
								if (tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList != null) {
									// Aux current record variable
									RCSIASSupportTypeRecord tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList = new RCSIASSupportTypeRecord(null);
									tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssId = (int) (tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[0] == null ? 0: tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[0]);

									tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssLabel = (string) (tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[1] == null ? "": tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[1]);

									tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssOrder = (int) (tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[2] == null ? 0: tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[2]);

									tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ssIs_Active = (bool) (tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[3] == null ? false: tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[3]);

									tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[4]);

									tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList.ssENSIASSupportType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList[5]);

									tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupportTypeList.Append(tmpAuxCurrentRecordwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList);
								}
							}
						}
						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupportTypeList.CurrentRowNumber = -1;
						#endregion


						#region fetch tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupportTypeList runtime properties state.

						int tmpcurrentrownumberwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList;
						tmpcurrentrownumberwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList = (int) (tmpFieldswtLearnerList_list[19] == null ? 0: tmpFieldswtLearnerList_list[19]);

						bool tmpeofwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList;
						tmpeofwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList = (bool) (tmpFieldswtLearnerList_list[20] == null ? false: tmpFieldswtLearnerList_list[20]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTSIAS_Support.ssSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumberwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList, tmpeofwtLearnerList_list_ssSTSIAS_Support_ssSIASSupportTypeList);

						#endregion

						ssLearnerListList.Append(tmpAuxCurrentRecordwtLearnerList_list);
					}
				}
			}
			ssLearnerListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssLearnerListList runtime properties state.


			if (storewtLearnerList_list.Count > 0) {
				ssLearnerListList.RestoreRecordListState(storewtLearnerList_list.Count - 1, false);
			} else {
				ssLearnerListList.CurrentRowNumber = 0;
			}

			#endregion

			wtLearnerList_storage = storewtLearnerList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListLearnerList_Clear(object sender, EventArgs e) {
			wtLearnerList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListLearnerList_Rebuild(int startIndex, int lineCount) {
			if (ssLearnerListList.Length != -1) {
				wtLearnerList_storage.Clear();
				for (int i=startIndex; i<ssLearnerListList.Data.Count && i<startIndex+lineCount; i++) {
					recListLearnerList_Store(ssLearnerListList.Data[i], wtLearnerList_storage.Count);
				}
			}
		}
		public void recListLearnerList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtLearnerList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLSIAS_SupportRecordList getWtLearnerListList() {
			if (ssLearnerListListDoDataBind) {
				recListLearnerList_onDataBinding(this, null);
			}

			return ssLearnerListList;
		}
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "border-left: solid 1px #DADADA;position:relative";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container41_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container41_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void img_Image28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				img_Image28_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string img_Image28_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image28)
		/// </summary>
		/// <returns>URL of the Image (wt_Image28)</returns>
		public string img_Image28_getURL() {
			string url = getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			// remove ascx path from image src
			if (url != null && !url.Contains(":") && !url.StartsWith("/") && !url.StartsWith("\\")) {
				url = "../../../" + url;
			}
			return url; 
		}
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container5_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container5_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link38)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link38)</returns>
		public string lnk_Link38_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsOverview", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link38)
		/// </summary>
		/// <returns>title of the Link (wt_Link38)</returns>
		public string
		lnk_Link38_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link38)
		/// </summary>
		/// <returns>The Visible State of wt_Link38</returns>
		public bool lnk_Link38_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link38)
		/// </summary>
		/// <returns>The Enabled State of wt_Link38</returns>
		public bool lnk_Link38_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 26NfRs1FC0CqsVPR0eYnIA) Expression: ToUpper + ", " +
		///  LearnerList.List.Current.SIAS_Support.Student.Student.Forenames + "("
		/// + LearnerList.List.Current.SIAS_Support.Student.Student.StudentReference + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return (((((BuiltInFunction.ToUpper(getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssSurname) + ", ") +getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssForenames) + "(") +getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference) + ")");
		}
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container22_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "min-height: 65px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container22_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container33_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container33_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox34_reclist == null) {
					using(Transaction wt_ComboBox34_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox34_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENSIASSupportTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wt_ComboBox34_sqlCmd = wt_ComboBox34_trans.CreateCommand(wt_ComboBox34_sql);
						Rt_wt_ComboBox34_sqlCmd.CreateParameter("@Selection", getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId);
						Rt_wt_ComboBox34_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox34_reclist = new RLSIASSupportTypeRecordList();
						Rt_wt_ComboBox34_reclist.Transaction = wt_ComboBox34_trans;
						Rt_wt_ComboBox34_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox34_sqlCmd, Rt_wt_ComboBox34_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox34_reclist = (RLSIASSupportTypeRecordList) Rt_wt_ComboBox34_reclist.Duplicate();
					}
				}
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("Add", "__ossli_0"));
				if (Rt_wt_ComboBox34.SpecialListVal == "0")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				Rt_wt_ComboBox34_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox34_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox34_reclist.CurrentRec.ssENSIASSupportType.ssLabel, Convert.ToString(Rt_wt_ComboBox34_reclist.CurrentRec.ssENSIASSupportType.ssId)));
						if (getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox34_reclist.CurrentRec.ssENSIASSupportType.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox34_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox34_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox34
		/// </summary>
		public void sel_ComboBox34_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				, true, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox34_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			Control parentControl = (Control) sender;
			while (parentControl != null) {
				if (parentControl is IIteratorItem)break;
				parentControl = parentControl.Parent;
			}
			int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
			if (ssLearnerListList.Length > parentControlIndex && parentControlIndex > -1) {
				ssLearnerListList.SetPosition(parentControlIndex);
			} else {
				return;
			}
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId = 0;
			}
			else {
				try {
					getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSelectedSupportTypeId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox34)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox34</returns>
		public bool sel_ComboBox34_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox34)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox34</returns>
		public bool sel_ComboBox34_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox34)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox34</returns>
		public bool sel_ComboBox34_isMandatory() {
			return false;
		}

		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCourse_SIAS_SupportItems_Edit widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCourse_SIAS_SupportItems_Edit) sender;
				widget.inParamSIASSupportTypeList = getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupportTypeList;
				widget.inParamStudentId = getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssStudent.ssENStudent.ssStudentReference;
				widget.inParamWidth = 100;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance9
		/// </summary>
		public void webBlck_WebBlockInstance9_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotifyDeleteSupport(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container35_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container35_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container35_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container35)
		/// </summary>
		/// <returns>The Visible State of wt_Container35</returns>
		public bool cnt_Container35_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell43_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell43_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container14_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container14_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox27_reclist == null) {
					using(Transaction wt_ComboBox27_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox27_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENExamConcessionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wt_ComboBox27_sqlCmd = wt_ComboBox27_trans.CreateCommand(wt_ComboBox27_sql);
						Rt_wt_ComboBox27_sqlCmd.CreateParameter("@Selection", getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession);
						Rt_wt_ComboBox27_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox27_reclist = new RLExamConcessionsRecordList();
						Rt_wt_ComboBox27_reclist.Transaction = wt_ComboBox27_trans;
						Rt_wt_ComboBox27_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox27_sqlCmd, Rt_wt_ComboBox27_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox27_reclist = (RLExamConcessionsRecordList) Rt_wt_ComboBox27_reclist.Duplicate();
					}
				}
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
				if (Rt_wt_ComboBox27.SpecialListVal == "0")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				Rt_wt_ComboBox27_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox27_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox27_reclist.CurrentRec.ssENExamConcessions.ssLabel, Rt_wt_ComboBox27_reclist.CurrentRec.ssENExamConcessions.ssId));
						if (getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession == Convert.ToString(Rt_wt_ComboBox27_reclist.CurrentRec.ssENExamConcessions.ssId)) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox27_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox27_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox27
		/// </summary>
		public void sel_ComboBox27_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				, false, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox27_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			Control parentControl = (Control) sender;
			while (parentControl != null) {
				if (parentControl is IIteratorItem)break;
				parentControl = parentControl.Parent;
			}
			int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
			if (ssLearnerListList.Length > parentControlIndex && parentControlIndex > -1) {
				ssLearnerListList.SetPosition(parentControlIndex);
			} else {
				return;
			}
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession = "";
			}
			else {
				try {
					getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssExamConcession = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox27)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox27</returns>
		public bool sel_ComboBox27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox27)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox27</returns>
		public bool sel_ComboBox27_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox27)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox27</returns>
		public bool sel_ComboBox27_isMandatory() {
			return false;
		}

		public void cnt_Container39_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container39_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container39_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "min-height: 65px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container39_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container39)
		/// </summary>
		/// <returns>The Visible State of wt_Container39</returns>
		public bool cnt_Container39_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-size:12px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell21_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell21_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell21_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container8_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container8_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = vYkbD1r10kq+JfjfAAGF6w) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return (((BuiltInFunction.Length(getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes) >100)) ?((BuiltInFunction.Substr(getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes, 0, 100) + "...")):(getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes));
		}
		public void lnkPopupNotesLnk_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnkPopupNotesLnk_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnkPopupNotesLnk_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtPopupNotesLnk)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtPopupNotesLnk)</returns>
		public string lnkPopupNotesLnk_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("Notes", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_Notes", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtPopupNotesLnk)
		/// </summary>
		/// <returns>title of the Link (wtPopupNotesLnk)</returns>
		public string
		lnkPopupNotesLnk_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPopupNotesLnk)
		/// </summary>
		/// <returns>The Visible State of wtPopupNotesLnk</returns>
		public bool lnkPopupNotesLnk_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtPopupNotesLnk)
		/// </summary>
		/// <returns>The Enabled State of wtPopupNotesLnk</returns>
		public bool lnkPopupNotesLnk_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container45_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("title", getWtLearnerListList().CurrentRec.ssSTSIAS_Support.ssSIASSupport.ssENSIASSupport.ssNotes.ToString());
				if (!cnt_Container45_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("tD89gwpkFEyl4LnwdeU5OA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtLearnerList, "wtPopupNotesLnk").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance3
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance3_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				, false, true)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container36_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public static class FuncCommandOnNotifyDeleteSupport {

			/// <summary>
			/// Query Function "GetSIASSupportsByStudentId3" of Action "OnNotifyDeleteSupport"
			/// </summary>
			public static RLSIASSupportRecordList datasetGetSIASSupportsByStudentId3(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSIASSupport.[ID] o1, ENSIASSupport.[STUDENTID] o2, ENSIASSupport.[SUPPORTTYPE1] o3, ENSIASSupport.[SUPPORTTYPE2] o4, ENSIASSupport.[SUPPORTTYPE3] o5, ENSIASSupport.[EXAMCONCESSION] o6, ENSIASSupport.[NOTES] o7, ENSIASSupport.[CREATEDON] o8, ENSIASSupport.[CREATEDBY] o9");
				fromBuilder.Append(" FROM {SIASSupport} ENSIASSupport");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupport.[STUDENTID] = @qpstP) AND (ENSIASSupport.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupport.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportRecordList outParamList = new RLSIASSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnNotifyDeleteSupport.GetSIASSupportsByStudentId3.List");
						outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnNotifyDeleteSupport.GetSIASSupportsByStudentId3.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnNotifyDeleteSupport.GetSIASSupportsByStudentId3.List");
							outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnNotifyDeleteSupport.GetSIASSupportsByStudentId3.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GEtSupportTypes2" of Action "OnNotifyDeleteSupport"
			/// </summary>
			public static RLSIASSupportTypeRecordList QueryGEtSupportTypes2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentId) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentId", DbType.String, qpstStudentId);
				string advSql = "SELECT  {SIASSupportType}.[ID], {SIASSupportType}.[LABEL], {SIASSupportType}.[ORDER], {SIASSupportType}.[IS_ACTIVE] From  {SIASSupport}   " +
				 "INNER JOIN  {SIASSupportType} ON  {SIASSupport}.[SUPPORTTYPE1] =  {SIASSupportType}.[ID] OR  {SIASSupport}.[SUPPORTTYPE2] =  {SIASSupportType}.[ID] OR  {SIASSupport}.[SUPPORTTYPE3] =  {SIASSupportType}.[ID]  " +
				 "WHERE  {SIASSupport}.[STUDENTID] = @qpstStudentId";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLSIASSupportTypeRecordList outParamList = new RLSIASSupportTypeRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLSIASSupportTypeRecordList _tmp = new RLSIASSupportTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnNotifyDeleteSupport.GEtSupportTypes2.List");
							outParamList = (RLSIASSupportTypeRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnNotifyDeleteSupport.GEtSupportTypes2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnNotifyDeleteSupport.GEtSupportTypes2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtSupportTypes2 in OnNotifyDeleteSupport in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtSupportTypes2 in OnNotifyDeleteSupport in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtSupportTypes2 in OnNotifyDeleteSupport in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
				}
			}
		}
		public static class FuncCommandOnChange {

			/// <summary>
			/// Query Function "GetSIASSupportsByStudentId3" of Action "OnChange"
			/// </summary>
			public static RLSIASSupportRecordList datasetGetSIASSupportsByStudentId3(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSIASSupport.[ID] o1, ENSIASSupport.[STUDENTID] o2, ENSIASSupport.[SUPPORTTYPE1] o3, ENSIASSupport.[SUPPORTTYPE2] o4, ENSIASSupport.[SUPPORTTYPE3] o5, ENSIASSupport.[EXAMCONCESSION] o6, ENSIASSupport.[NOTES] o7, ENSIASSupport.[CREATEDON] o8, ENSIASSupport.[CREATEDBY] o9");
				fromBuilder.Append(" FROM {SIASSupport} ENSIASSupport");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupport.[STUDENTID] = @qpstP) AND (ENSIASSupport.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupport.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportRecordList outParamList = new RLSIASSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnChange.GetSIASSupportsByStudentId3.List");
						outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnChange.GetSIASSupportsByStudentId3.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnChange.GetSIASSupportsByStudentId3.List");
							outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnChange.GetSIASSupportsByStudentId3.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GEtSupportTypes2" of Action "OnChange"
			/// </summary>
			public static RLSIASSupportTypeRecordList QueryGEtSupportTypes2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentId) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentId", DbType.String, qpstStudentId);
				string advSql = "SELECT  {SIASSupportType}.[ID], {SIASSupportType}.[LABEL], {SIASSupportType}.[ORDER], {SIASSupportType}.[IS_ACTIVE] From  {SIASSupport}   " +
				 "INNER JOIN  {SIASSupportType} ON  {SIASSupport}.[SUPPORTTYPE1] =  {SIASSupportType}.[ID] OR  {SIASSupport}.[SUPPORTTYPE2] =  {SIASSupportType}.[ID] OR  {SIASSupport}.[SUPPORTTYPE3] =  {SIASSupportType}.[ID]  " +
				 "WHERE  {SIASSupport}.[STUDENTID] = @qpstStudentId";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLSIASSupportTypeRecordList outParamList = new RLSIASSupportTypeRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLSIASSupportTypeRecordList _tmp = new RLSIASSupportTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnChange.GEtSupportTypes2.List");
							outParamList = (RLSIASSupportTypeRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnChange.GEtSupportTypes2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.OnChange.GEtSupportTypes2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtSupportTypes2 in OnChange in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtSupportTypes2 in OnChange in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtSupportTypes2 in OnChange in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
				}
			}
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GEtSupportTypes" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportTypeRecordList QueryGEtSupportTypes(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentId) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentId", DbType.String, qpstStudentId);
				string advSql = "SELECT  {SIASSupportType}.[ID], {SIASSupportType}.[LABEL], {SIASSupportType}.[ORDER], {SIASSupportType}.[IS_ACTIVE] From  {SIASSupport}   " +
				 "INNER JOIN  {SIASSupportType} ON  {SIASSupport}.[SUPPORTTYPE1] =  {SIASSupportType}.[ID] OR  {SIASSupport}.[SUPPORTTYPE2] =  {SIASSupportType}.[ID] OR  {SIASSupport}.[SUPPORTTYPE3] =  {SIASSupportType}.[ID]  " +
				 "WHERE  {SIASSupport}.[STUDENTID] = @qpstStudentId";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLSIASSupportTypeRecordList outParamList = new RLSIASSupportTypeRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLSIASSupportTypeRecordList _tmp = new RLSIASSupportTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GEtSupportTypes.List");
							outParamList = (RLSIASSupportTypeRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GEtSupportTypes.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GEtSupportTypes.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtSupportTypes in Preparation in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtSupportTypes in Preparation in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtSupportTypes in Preparation in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.* From {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupport}.[SupportType1] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId ): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetStudents" of Action "Preparation"
			/// </summary>
			public static RLStudentRecordList QueryGetStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstCourseCode) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstCourseCode", DbType.String, qpstCourseCode);
				string advSql = "SELECT   " +
				 " {Student}.[STUDENTREFERENCE], {Student}.[FORENAMES], {Student}.[SURNAME], {Student}.[DATEOFBIRTH], {Student}.[GENDER], {Student}.[MAINOFFERINGCODE], {Student}.[MAINOFFERINGNAME], {Student}.[STUDENTPHOTOURL], {Student}.[HOMEADDRESS], {Student}.[HOMEADDRESSPOSTCODE], {Student}.[CURRENTADDRESS], {Student}.[CURRENTADDRESSPOSTCODE], {Student}.[EMAILADDRESS], {Student}.[HOMETELEPHONE], {Student}.[MOBILEPHONE], {Student}.[NEXTOFKINNAME], {Student}.[NEXTOFKINRELATIONSHIP], {Student}.[NEXTOFKINADDRESS], {Student}.[NEXTOFKINPOSTCODE], {Student}.[NEXTOFKINPHONE], {Student}.[PERSONALTUTOR], {Student}.[NEXTOFKINEMAIL], {Student}.[HASCURRENTACTIVEENROLMENT], {Student}.[NETWORKLOGIN], {Student}.[NINUMBER], {Student}.[RESIDENTIALSTATUS], {Student}.[PREVIOUSSCHOOL]  " +
				 "  " +
				 "FROM  {Student}  " +
				 "WHERE  " +
				 "    EXISTS (   " +
				 "        SELECT  {Group}.[ID] FROM  {Group} INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE]   " +
				 "            WHERE  {Group}.[GROUPNAME] = @qpstCourseCode   " +
				 "            AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active'  " +
				 "    )  " +
				 "    " +
				 "ORDER BY  {Student}.[SURNAME],  " +
				 "          {Student}.[FORENAMES]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudentRecordList outParamList = new RLStudentRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentRecordList _tmp = new RLStudentRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GetStudents.List");
							outParamList = (RLStudentRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudents in Preparation in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT   {Student}.*    FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT   {Student}.*    FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in Course_SIAS_SupporList in Learner_InitialAssessment in CaseConferencing (SELECT   {Student}.*    FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetSIASSupportsByStudentId" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportRecordList datasetGetSIASSupportsByStudentId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSIASSupport.[ID] o1, ENSIASSupport.[STUDENTID] o2, ENSIASSupport.[SUPPORTTYPE1] o3, ENSIASSupport.[SUPPORTTYPE2] o4, ENSIASSupport.[SUPPORTTYPE3] o5, ENSIASSupport.[EXAMCONCESSION] o6, ENSIASSupport.[NOTES] o7, ENSIASSupport.[CREATEDON] o8, ENSIASSupport.[CREATEDBY] o9");
				fromBuilder.Append(" FROM {SIASSupport} ENSIASSupport");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupport.[STUDENTID] = @qpstP) AND (ENSIASSupport.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupport.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportRecordList outParamList = new RLSIASSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GetSIASSupportsByStudentId.List");
						outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GetSIASSupportsByStudentId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GetSIASSupportsByStudentId.List");
							outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupporList.Preparation.GetSIASSupportsByStudentId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KQjdywDFIXUG7FKM44W62PA";
			}
		}
	}

}
