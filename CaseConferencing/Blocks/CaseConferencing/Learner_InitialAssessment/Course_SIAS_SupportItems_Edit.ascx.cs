/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkCourse_SIAS_SupportItems_Edit: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamSIASSupportTypeList. Description:
		/// </summary>
		public RLSIASSupportTypeRecordList inParamSIASSupportTypeList = new RLSIASSupportTypeRecordList();
		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Screen Input Parameter inParamWidth. Description:
		/// </summary>
		public int inParamWidth = 0;
		private RLSIASSupportTypeRecordList _ssListRecordsCardsList = new RLSIASSupportTypeRecordList();
		public RLSIASSupportTypeRecordList ssListRecordsCardsList {
			get {
				return _ssListRecordsCardsList; 
			}
			set {
				_ssListRecordsCardsList = value;
				wtListRecordsCards.DataSource = value;
				ssListRecordsCardsListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsCards;
		public ArrayList wtListRecordsCards_storage = new ArrayList();
		protected bool ssListRecordsCardsList_notUsedYet = true;
		protected bool ssListRecordsCardsListDoDataBind;
		protected bool ssListRecordsCardsListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		/// <summary>
		/// Variable wt_WebBlockInstance2
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard wt_WebBlockInstance2;
		/// <summary>
		/// Variable (wt_Link8) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link8;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		static WBlkCourse_SIAS_SupportItems_Edit() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtListRecordsCards.StartIndexExpression = () => 0;
			wtListRecordsCards.LineCountExpression = () => 50;
			wt_WebBlockInstance2 = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard) FindControl("wt_WebBlockInstance2");
			if (this.wt_Link8 != null) {
				this.wt_Link8.Click += new System.EventHandler(this.wt_Link8_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssListRecordsCardsListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentId", inParamStudentId, "");
			if (IsAjaxRequest) {
				recListListRecordsCards_Rebuild((ssListRecordsCardsListDataBound ? wtListRecordsCards.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsCards.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsCards_list", wtListRecordsCards_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				inParamStudentId = (string) ViewStateAttributes.GetFromViewState("inParamStudentId", "");
				recListListRecordsCards_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.K3a_seLuKMUGpybWl0tw61g";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("3a+seLuKMUGpybWl0tw61g"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvDelete: VarsBag {
			public int resCreateOrUpdateSIASSupport_outParamId = 0;

			public RLSIASSupportRecordList queryResGetSIASSupportsByStudentId_outParamList = new RLSIASSupportRecordList();
			public int queryResGetSIASSupportsByStudentId_outParamCount = 0;

			public lcvDelete() {
			}
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDelete localVars = new lcvDelete();
			try {
				// Query datasetGetSIASSupportsByStudentId
				int datasetGetSIASSupportsByStudentId_maxRecords = 0;
				localVars.queryResGetSIASSupportsByStudentId_outParamList = FuncCommandDelete.datasetGetSIASSupportsByStudentId(heContext, datasetGetSIASSupportsByStudentId_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetSIASSupportsByStudentId_outParamCount, inParamStudentId
				);
				// Type 1
				if ((localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType1==getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId)) {
					localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType1 = BuiltInFunction.NullIdentifier(); // GetSIASSupportsByStudentId.List.Current.SIASSupport.SupportType1 = NullIdentifier

				}
				// Type2
				if ((localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType2==getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId)) {
					localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType2 = BuiltInFunction.NullIdentifier(); // GetSIASSupportsByStudentId.List.Current.SIASSupport.SupportType2 = NullIdentifier

				}
				// Type 3
				if ((localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType3==getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId)) {
					localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssSupportType3 = BuiltInFunction.NullIdentifier(); // GetSIASSupportsByStudentId.List.Current.SIASSupport.SupportType3 = NullIdentifier

				}
				// CreateOrUpdateSIASSupport
				ExtendedActions.CreateOrUpdateSIASSupport(heContext, localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetSIASSupportsByStudentId_outParamList.CurrentRec, out localVars.resCreateOrUpdateSIASSupport_outParamId);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, Convert.ToString(getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId));
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void recListListRecordsCards_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecordsCards
				ssListRecordsCardsList = inParamSIASSupportTypeList;
				ssListRecordsCardsListDoDataBind = false;
				ssListRecordsCardsListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecordsCards_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsCardsList.Length > 0) {
					ssListRecordsCardsList.CurrentRec = ssListRecordsCardsList[ssListRecordsCardsList.CurrentRowNumber];
				}
				if (ssListRecordsCardsList.Length > e.SelectedIndex) {
					ssListRecordsCardsList.CurrentRec = ssListRecordsCardsList[e.SelectedIndex];
					ssListRecordsCardsList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsCards_Store(object dataItem, int index) {
			RCSIASSupportTypeRecord tmprec = (RCSIASSupportTypeRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENSIASSupportType.ssId == 0?(object) null: tmprec.ssENSIASSupportType.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENSIASSupportType.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENSIASSupportType.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true
			}
			))));
			if (index < wtListRecordsCards_storage.Count) {
				wtListRecordsCards_storage[index] = tmpFields;
			} else {
				wtListRecordsCards_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsCards_Restore() {

			#region fetch ssListRecordsCardsList.

			// Read the needed fields of ssListRecordsCardsList from storewtListRecordsCards_list
			ssListRecordsCardsList = new RLSIASSupportTypeRecordList();
			ArrayList storewtListRecordsCards_list;
			storewtListRecordsCards_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsCards_list", null);
			if (storewtListRecordsCards_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsCards_list in storewtListRecordsCards_list) {
					if (tmpFieldswtListRecordsCards_list != null) {
						// Aux current record variable
						RCSIASSupportTypeRecord tmpAuxCurrentRecordwtListRecordsCards_list = new RCSIASSupportTypeRecord(null);
						tmpAuxCurrentRecordwtListRecordsCards_list.ssENSIASSupportType.ssId = (int) (tmpFieldswtListRecordsCards_list[0] == null ? 0: tmpFieldswtListRecordsCards_list[0]);

						tmpAuxCurrentRecordwtListRecordsCards_list.ssENSIASSupportType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCards_list[1]);

						tmpAuxCurrentRecordwtListRecordsCards_list.ssENSIASSupportType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCards_list[2]);

						ssListRecordsCardsList.Append(tmpAuxCurrentRecordwtListRecordsCards_list);
					}
				}
			}
			ssListRecordsCardsList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsCardsList runtime properties state.


			if (storewtListRecordsCards_list.Count > 0) {
				ssListRecordsCardsList.RestoreRecordListState(storewtListRecordsCards_list.Count - 1, false);
			} else {
				ssListRecordsCardsList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsCards_storage = storewtListRecordsCards_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsCards_Clear(object sender, EventArgs e) {
			wtListRecordsCards_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsCards_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsCardsList.Length != -1) {
				wtListRecordsCards_storage.Clear();
				for (int i=startIndex; i<ssListRecordsCardsList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsCards_Store(ssListRecordsCardsList.Data[i], wtListRecordsCards_storage.Count);
				}
			}
		}
		public void recListListRecordsCards_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsCards widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLSIASSupportTypeRecordList getWtListRecordsCardsList() {
			if (ssListRecordsCardsListDoDataBind) {
				recListListRecordsCards_onDataBinding(this, null);
			}

			return ssListRecordsCardsList;
		}
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (("line-height:20px;height:35px;min-width:85px;width:" +Convert.ToString(inParamWidth)) + "px;");
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard) sender;
				widget.inParamIsSmall = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 7RBVovwjt0KK0Cg_xY4STQ) Expression:
		///  ListRecordsCards.List.Current.SIASSupportType.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression6() {
			return getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssLabel;
		}
		public void lnk_Link8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnk_Link8_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnk_Link8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:white;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link8_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDelete(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link8)
		/// </summary>
		/// <returns>title of the Link (wt_Link8)</returns>
		public string
		lnk_Link8_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link8)
		/// </summary>
		/// <returns>The Visible State of wt_Link8</returns>
		public bool lnk_Link8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link8)
		/// </summary>
		/// <returns>The Enabled State of wt_Link8</returns>
		public bool lnk_Link8_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandDelete {

			/// <summary>
			/// Query Function "GetSIASSupportsByStudentId" of Action "Delete"
			/// </summary>
			public static RLSIASSupportRecordList datasetGetSIASSupportsByStudentId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSIASSupport.[ID] o1, NULL o2, ENSIASSupport.[SUPPORTTYPE1] o3, ENSIASSupport.[SUPPORTTYPE2] o4, ENSIASSupport.[SUPPORTTYPE3] o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {SIASSupport} ENSIASSupport");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupport.[STUDENTID] = @qpstP) AND (ENSIASSupport.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupport.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportRecordList outParamList = new RLSIASSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false, false, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupportItems_Edit.Delete.GetSIASSupportsByStudentId.List");
						outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupportItems_Edit.Delete.GetSIASSupportsByStudentId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.Course_SIAS_SupportItems_Edit.Delete.GetSIASSupportsByStudentId.List");
							outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.Course_SIAS_SupportItems_Edit.Delete.GetSIASSupportsByStudentId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.K3a_seLuKMUGpybWl0tw61g";
			}
		}
	}

}
