/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkTAB_RiskAssessment: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamRiskAssessmentID. Description:
		/// </summary>
		public int inParamRiskAssessmentID = 0;
		/// <summary>
		/// Screen Input Parameter inParamIsEdit. Description:
		/// </summary>
		public bool inParamIsEdit = false;
		/// <summary>
		/// Screen Input Parameter inParamIsNewRiskAssessment. Description:
		/// </summary>
		public bool inParamIsNewRiskAssessment = false;
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamIsLoading. Description:
		/// </summary>
		public bool inParamIsLoading = false;
		/// <summary>
		/// Variable <code>varLcActiveTab</code> that represents the Service Studio local variable
		///  <code>ActiveTab</code> <p>Description: </p>
		/// </summary>
		int varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("avXIv1WG4UWcoRPTcOjaOw")).ssId;

		/// <summary>
		/// Variable <code>varLcPreviousRiskAssementID</code> that represents the Service Studio local variable
		///  <code>PreviousRiskAssementID</code> <p>Description: </p>
		/// </summary>
		int varLcPreviousRiskAssementID = 0;

		/// <summary>
		/// Variable <code>varLcYesNoID</code> that represents the Service Studio local variable
		///  <code>YesNoID</code> <p>Description: </p>
		/// </summary>
		int varLcYesNoID = 0;

		/// <summary>
		/// Variable <code>varLcNewRisk</code> that represents the Service Studio local variable
		///  <code>NewRisk</code> <p>Description: </p>
		/// </summary>
		string varLcNewRisk = "";

		/// <summary>
		/// Variable <code>varLcAddRisk</code> that represents the Service Studio local variable
		///  <code>AddRisk</code> <p>Description: </p>
		/// </summary>
		bool varLcAddRisk = false;

		/// <summary>
		/// Variable <code>varLcAddExternalContact</code> that represents the Service Studio local variable
		///  <code>AddExternalContact</code> <p>Description: </p>
		/// </summary>
		bool varLcAddExternalContact = false;

		/// <summary>
		/// Variable <code>varLcAddPersonToInform</code> that represents the Service Studio local variable
		///  <code>AddPersonToInform</code> <p>Description: </p>
		/// </summary>
		bool varLcAddPersonToInform = false;

		/// <summary>
		/// Variable <code>varLcManagementOfSupportItem</code> that represents the Service Studio local
		///  variable <code>ManagementOfSupportItem</code> <p>Description: </p>
		/// </summary>
		string varLcManagementOfSupportItem = "";

		/// <summary>
		/// Variable <code>varLcExternalContactItem</code> that represents the Service Studio local variable
		///  <code>ExternalContactItem</code> <p>Description: </p>
		/// </summary>
		string varLcExternalContactItem = "";

		/// <summary>
		/// Variable <code>varLcAddManagementOfSupport</code> that represents the Service Studio local variable
		///  <code>AddManagementOfSupport</code> <p>Description: </p>
		/// </summary>
		bool varLcAddManagementOfSupport = false;

		/// <summary>
		/// Variable <code>varLcRiskAssessmentBlankRecord</code> that represents the Service Studio local
		///  variable <code>RiskAssessmentBlankRecord</code> <p>Description: </p>
		/// </summary>
		ENRiskAssessmentEntityRecord varLcRiskAssessmentBlankRecord = new ENRiskAssessmentEntityRecord(null);

		/// <summary>
		/// Variable <code>varLcRiskAssessmentRiskRecord</code> that represents the Service Studio local
		///  variable <code>RiskAssessmentRiskRecord</code> <p>Description: </p>
		/// </summary>
		ENRiskAssessementRisksEntityRecord varLcRiskAssessmentRiskRecord = new ENRiskAssessementRisksEntityRecord(null);

		/// <summary>
		/// Variable <code>varLcManagementOfSupportRecord</code> that represents the Service Studio local
		///  variable <code>ManagementOfSupportRecord</code> <p>Description: </p>
		/// </summary>
		ENRiskAssessmentManagementOfSupportEntityRecord varLcManagementOfSupportRecord = new ENRiskAssessmentManagementOfSupportEntityRecord(null);

		/// <summary>
		/// Variable <code>varLcExternalContactRecord</code> that represents the Service Studio local variable
		///  <code>ExternalContactRecord</code> <p>Description: </p>
		/// </summary>
		ENRiskAssessmentExternalContactsEntityRecord varLcExternalContactRecord = new ENRiskAssessmentExternalContactsEntityRecord(null);

		/// <summary>
		/// Variable <code>varLcPersonToInformRecord</code> that represents the Service Studio local variable
		///  <code>PersonToInformRecord</code> <p>Description: </p>
		/// </summary>
		ENRiskAssessmentKeepInformedEntityRecord varLcPersonToInformRecord = new ENRiskAssessmentKeepInformedEntityRecord(null);

		/// <summary>
		/// Variable <code>varLcPersonToInformItem</code> that represents the Service Studio local variable
		///  <code>PersonToInformItem</code> <p>Description: </p>
		/// </summary>
		int varLcPersonToInformItem = 0;

		/// <summary>
		/// Variable <code>varLcRiskAssessmentID2</code> that represents the Service Studio local variable
		///  <code>RiskAssessmentID2</code> <p>Description: </p>
		/// </summary>
		int varLcRiskAssessmentID2 = 0;

		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		/// <summary>
		/// Variable "True" if the Widget wt_If179
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If179T;

		/// <summary>
		/// Variable "True" if the Widget wt_If179
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If179F;
		/// <summary>
		/// Variable ThemeProvider_wtTabSection
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkTabsWizard ThemeProvider_wtTabSection;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container196;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab1Title2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container110;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container152;
		/// <summary>
		/// Variable (wt_Link209) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link209;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container97;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab1MainContent;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtStudentSupport_PlanDropDownReasonValidatorRequired;
		protected SelectRtWidget Rt_wtStudentSupport_PlanDropDownReason = new SelectRtWidget();
		RLRiskAssessmentSSPReasonRecordList Rt_wtStudentSupport_PlanDropDownReason_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container255;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input105ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input105ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container198;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container283;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox195ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox195 = new SelectRtWidget();
		RLUser_RoleUserRoleRecordList Rt_wt_ComboBox195_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtNavButtons1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container268;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container248;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container118;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab2Title;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab2MainContent;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox128ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox128 = new SelectRtWidget();
		RLRiskAssessmentSourceOfEvidenceRecordList Rt_wt_ComboBox128_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container80;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input137ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input137ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtComboHasCapacityValidatorRequired;
		protected SelectRtWidget Rt_wtComboHasCapacity = new SelectRtWidget();
		RLYesNoRecordList Rt_wtComboHasCapacity_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container168;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container269;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input218ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input218ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtNavButtons2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container252;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container117;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container154;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container215;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab3Title;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab3MainContent;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox210ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox210 = new SelectRtWidget();
		RLRiskAssessmentWhoIsAtRiskRecordList Rt_wt_ComboBox210_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container257;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input70ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input70ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container158;
		protected OutSystems.HubEdition.WebWidgets.Container wtRiskAssessmentRisksWrapper;
		private RLRiskAssessementRisksRecordList _ssRiskAssessmentRisksList = new RLRiskAssessementRisksRecordList();
		public RLRiskAssessementRisksRecordList ssRiskAssessmentRisksList {
			get {
				return _ssRiskAssessmentRisksList; 
			}
			set {
				_ssRiskAssessmentRisksList = value;
				wtRiskAssessmentRisks.DataSource = value;
				ssRiskAssessmentRisksListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtRiskAssessmentRisks;
		public ArrayList wtRiskAssessmentRisks_storage = new ArrayList();
		protected bool ssRiskAssessmentRisksList_notUsedYet = true;
		protected bool ssRiskAssessmentRisksListDoDataBind;
		protected bool ssRiskAssessmentRisksListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container208;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container112;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container84;
		/// <summary>
		/// Variable (wt_Link240) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link240;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container224;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input57ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input57ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container163;
		protected OutSystems.HubEdition.WebWidgets.Container wtAddRiskLink;
		/// <summary>
		/// Variable (wt_Link125) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link125;
		protected OutSystems.HubEdition.WebWidgets.Container wtNavButtons3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container139;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container83;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container81;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container219;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container235;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab4Title;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab4MainContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container120;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input153ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input153ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container94;
		protected OutSystems.HubEdition.WebWidgets.Container wtRiskAssessmentManagementOfSupportSection;
		private RLRiskAssessmentManagementOfSupportRecordList _ssRiskAssessmentManagementOfSupportList = new RLRiskAssessmentManagementOfSupportRecordList();
		public RLRiskAssessmentManagementOfSupportRecordList ssRiskAssessmentManagementOfSupportList {
			get {
				return _ssRiskAssessmentManagementOfSupportList; 
			}
			set {
				_ssRiskAssessmentManagementOfSupportList = value;
				wtRiskAssessmentManagementOfSupport.DataSource = value;
				ssRiskAssessmentManagementOfSupportListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtRiskAssessmentManagementOfSupport;
		public ArrayList wtRiskAssessmentManagementOfSupport_storage = new ArrayList();
		protected bool ssRiskAssessmentManagementOfSupportList_notUsedYet = true;
		protected bool ssRiskAssessmentManagementOfSupportListDoDataBind;
		protected bool ssRiskAssessmentManagementOfSupportListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container106;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container207;
		/// <summary>
		/// Variable (wt_Link78) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link78;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container151;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input8ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input8ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container234;
		/// <summary>
		/// Variable (wt_Link241) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link241;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container114;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container133;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input162ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input162ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container72;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container194;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input259ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input259ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtNavButtons4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container233;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container35;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container159;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container142;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab5Title;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab5MainContent;
		protected OutSystems.HubEdition.WebWidgets.Container wtExternalContactsSection;
		private RLRiskAssessmentExternalContactsRecordList _ssExternalContactRecordListList = new RLRiskAssessmentExternalContactsRecordList();
		public RLRiskAssessmentExternalContactsRecordList ssExternalContactRecordListList {
			get {
				return _ssExternalContactRecordListList; 
			}
			set {
				_ssExternalContactRecordListList = value;
				wtExternalContactRecordList.DataSource = value;
				ssExternalContactRecordListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtExternalContactRecordList;
		public ArrayList wtExternalContactRecordList_storage = new ArrayList();
		protected bool ssExternalContactRecordListList_notUsedYet = true;
		protected bool ssExternalContactRecordListListDoDataBind;
		protected bool ssExternalContactRecordListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container146;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container216;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container93;
		/// <summary>
		/// Variable (wt_Link276) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link276;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input3ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input3ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container275;
		/// <summary>
		/// Variable (wt_Link197) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link197;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wtWhoToInformSection;
		private RLUserRiskAssessmentKeepInformedRecordList _ssWhoNeedsTobeInformedRecordListList = new RLUserRiskAssessmentKeepInformedRecordList();
		public RLUserRiskAssessmentKeepInformedRecordList ssWhoNeedsTobeInformedRecordListList {
			get {
				return _ssWhoNeedsTobeInformedRecordListList; 
			}
			set {
				_ssWhoNeedsTobeInformedRecordListList = value;
				wtWhoNeedsTobeInformedRecordList.DataSource = value;
				ssWhoNeedsTobeInformedRecordListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtWhoNeedsTobeInformedRecordList;
		public ArrayList wtWhoNeedsTobeInformedRecordList_storage = new ArrayList();
		protected bool ssWhoNeedsTobeInformedRecordListList_notUsedYet = true;
		protected bool ssWhoNeedsTobeInformedRecordListListDoDataBind;
		protected bool ssWhoNeedsTobeInformedRecordListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container113;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container281;
		/// <summary>
		/// Variable (wt_Link50) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container149;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox249ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox249 = new SelectRtWidget();
		RLUser_RoleUserRoleRecordList Rt_wt_ComboBox249_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container140;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container262;
		/// <summary>
		/// Variable (wt_Link203) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link203;
		protected OutSystems.HubEdition.WebWidgets.Container wtNavButtons5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container182;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container73;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container270;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container186;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab6Title;
		protected OutSystems.HubEdition.WebWidgets.Container wtTab6MainContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container145;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container156;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container136;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutumnReviewDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtAutumnReviewDateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSpringReviewDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtSpringReviewDateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSummerReviewDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtSummerReviewDateValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtNavButtons6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container225;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container148;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container230;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container227;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLRiskAssessementRisksRecordList queryResGetRiskAssessementRisksByRiskAssessment_outParamList = new RLRiskAssessementRisksRecordList();
		int queryResGetRiskAssessementRisksByRiskAssessment_outParamCount = 0;
		RLRiskAssessmentManagementOfSupportRecordList queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = new RLRiskAssessmentManagementOfSupportRecordList();
		int queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount = 0;
		RLUser_RoleUserRoleRecordList queryResGetUsersWithUser_Roles_outParamList = new RLUser_RoleUserRoleRecordList();
		int queryResGetUsersWithUser_Roles_outParamCount = 0;
		int resCreateRiskAssessment_outParamId = 0;
		RLRiskAssessmentRecordList queryResGetRiskAssessmentById_outParamList = new RLRiskAssessmentRecordList();
		int queryResGetRiskAssessmentById_outParamCount = 0;
		RLUserRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new RLUserRiskAssessmentKeepInformedRecordList();
		int queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount = 0;
		RLRiskAssessmentExternalContactsRecordList queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = new RLRiskAssessmentExternalContactsRecordList();
		int queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			if (inParamIsLoading) {
				if (inParamIsNewRiskAssessment) {
					varLcRiskAssessmentBlankRecord.ssLastUpdatedOn = BuiltInFunction.CurrDate(); // RiskAssessmentBlankRecord.LastUpdatedOn = CurrDate
					varLcRiskAssessmentBlankRecord.ssStudentReference = BuiltInFunction.TextToEntityRefText(inParamStudentReference); // RiskAssessmentBlankRecord.StudentReference = TextToEntityRefText
					varLcRiskAssessmentBlankRecord.ssRiskAssessmentCompletedBy = ((int) Global.App.OsContext.Session["UserID"]); // RiskAssessmentBlankRecord.RiskAssessmentCompletedBy = UserID
					// CreateRiskAssessment
					ExtendedActions.CreateRiskAssessment(heContext, ((RCRiskAssessmentRecord) varLcRiskAssessmentBlankRecord), out resCreateRiskAssessment_outParamId);
					varLcRiskAssessmentID2 = resCreateRiskAssessment_outParamId; // RiskAssessmentID2 = CreateRiskAssessment.Id

				} else {
					varLcRiskAssessmentID2 = inParamRiskAssessmentID; // RiskAssessmentID2 = RiskAssessmentID

				}
				// Query datasetGetRiskAssessmentById
				int datasetGetRiskAssessmentById_maxRecords = 0;
				queryResGetRiskAssessmentById_outParamList = FuncssPreparation.datasetGetRiskAssessmentById(heContext, datasetGetRiskAssessmentById_maxRecords, IterationMultiplicity.Never, out queryResGetRiskAssessmentById_outParamCount, varLcRiskAssessmentID2
				);
				// Query datasetGetRiskAssessementRisksByRiskAssessment
				int datasetGetRiskAssessementRisksByRiskAssessment_maxRecords = Math.Max(wtRiskAssessmentRisks.StartIndex + wtRiskAssessmentRisks.LineCount + 1, 0);
				queryResGetRiskAssessementRisksByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessementRisksByRiskAssessment(heContext, datasetGetRiskAssessementRisksByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessementRisksByRiskAssessment_outParamCount, varLcRiskAssessmentID2
				);
				// Query datasetGetRiskAssessmentExternalContactsByRiskAssessment
				int datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords = Math.Max(wtExternalContactRecordList.StartIndex + wtExternalContactRecordList.LineCount + 1, 0);
				queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentExternalContactsByRiskAssessment(heContext, datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount, varLcRiskAssessmentID2
				);
				// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment
				int datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords = Math.Max(wtWhoNeedsTobeInformedRecordList.StartIndex + wtWhoNeedsTobeInformedRecordList.LineCount + 1, 0);
				queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedsByRiskAssessment(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount, varLcRiskAssessmentID2
				);
				// Query datasetGetUsersWithUser_Roles
				int datasetGetUsersWithUser_Roles_maxRecords = 0;
				queryResGetUsersWithUser_Roles_outParamList = FuncssPreparation.datasetGetUsersWithUser_Roles(heContext, datasetGetUsersWithUser_Roles_maxRecords, IterationMultiplicity.Multiple, out queryResGetUsersWithUser_Roles_outParamCount);
				// Query datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm
				int datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords = Math.Max(wtRiskAssessmentManagementOfSupport.StartIndex + wtRiskAssessmentManagementOfSupport.LineCount + 1, 0);
				queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = FuncssPreparation.datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(heContext, datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount, varLcRiskAssessmentID2
				);

			}
		}
		static WBlkTAB_RiskAssessment() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wtTabSection = (proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkTabsWizard) FindControl("ThemeProvider_wtTabSection");
			wt_Container196 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container196");
			wtTab1Title2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab1Title2");
			wt_Container110 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container110");
			wt_Container152 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container152");
			wt_Link209 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link209");
			if (this.wt_Link209 != null) {
				this.wt_Link209.Click += new System.EventHandler(this.wt_Link209_Click);
			}
			wt_Container97 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container97");
			wtTab1MainContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab1MainContent");
			wt_Container255 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container255");
			wt_Container198 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container198");
			wt_Container283 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container283");
			wtNavButtons1 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNavButtons1");
			wt_Container6 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container6");
			wt_Container268 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container268");
			wt_Container248 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container248");
			wt_Container118 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container118");
			wtTab2Title = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab2Title");
			wtTab2MainContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab2MainContent");
			wt_Container16 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container16");
			wt_Container80 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container80");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			wt_Container14 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container14");
			wt_Container168 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container168");
			wt_Container269 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container269");
			wtNavButtons2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNavButtons2");
			wt_Container252 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container252");
			wt_Container41 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container41");
			wt_Container117 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container117");
			wt_Container154 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container154");
			wt_Container215 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container215");
			wtTab3Title = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab3Title");
			wtTab3MainContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab3MainContent");
			wt_Container257 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container257");
			wt_Container7 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container7");
			wt_Container158 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container158");
			wtRiskAssessmentRisksWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRiskAssessmentRisksWrapper");
			wtRiskAssessmentRisks = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtRiskAssessmentRisks");
			wtRiskAssessmentRisks.StartIndexExpression = () => 0;
			wtRiskAssessmentRisks.LineCountExpression = () => 50;
			wtRiskAssessmentRisks.EmptyMessageExpression = () => "No risks added";
			if (this.wt_Link240 != null) {
				this.wt_Link240.Click += new System.EventHandler(this.wt_Link240_Click);
			}
			wt_Container224 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container224");
			wt_Container163 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container163");
			wtAddRiskLink = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtAddRiskLink");
			wt_Link125 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link125");
			if (this.wt_Link125 != null) {
				this.wt_Link125.Click += new System.EventHandler(this.wt_Link125_Click);
			}
			wtNavButtons3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNavButtons3");
			wt_Container139 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container139");
			wt_Container83 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container83");
			wt_Container81 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container81");
			wt_Container219 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container219");
			wt_Container235 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container235");
			wtTab4Title = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab4Title");
			wtTab4MainContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab4MainContent");
			wt_Container120 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container120");
			wt_Container94 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container94");
			wtRiskAssessmentManagementOfSupportSection = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRiskAssessmentManagementOfSupportSection");
			wtRiskAssessmentManagementOfSupport = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtRiskAssessmentManagementOfSupport");
			wtRiskAssessmentManagementOfSupport.StartIndexExpression = () => 0;
			wtRiskAssessmentManagementOfSupport.LineCountExpression = () => 50;
			wtRiskAssessmentManagementOfSupport.EmptyMessageExpression = () => "No items to show...";
			if (this.wt_Link78 != null) {
				this.wt_Link78.Click += new System.EventHandler(this.wt_Link78_Click);
			}
			wt_Container151 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container151");
			wt_Container15 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container15");
			wt_Container234 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container234");
			wt_Link241 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link241");
			if (this.wt_Link241 != null) {
				this.wt_Link241.Click += new System.EventHandler(this.wt_Link241_Click);
			}
			wt_Container114 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container114");
			wt_Container133 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container133");
			wt_Container72 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container72");
			wt_Container194 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container194");
			wtNavButtons4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNavButtons4");
			wt_Container44 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container44");
			wt_Container233 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container233");
			wt_Container35 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container35");
			wt_Container159 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container159");
			wt_Container142 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container142");
			wtTab5Title = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab5Title");
			wtTab5MainContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab5MainContent");
			wtExternalContactsSection = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtExternalContactsSection");
			wtExternalContactRecordList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtExternalContactRecordList");
			wtExternalContactRecordList.StartIndexExpression = () => 0;
			wtExternalContactRecordList.LineCountExpression = () => 50;
			wtExternalContactRecordList.EmptyMessageExpression = () => "No External Contacts Added.";
			if (this.wt_Link276 != null) {
				this.wt_Link276.Click += new System.EventHandler(this.wt_Link276_Click);
			}
			wt_Container23 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container23");
			wt_Container32 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container32");
			wt_Container275 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container275");
			wt_Link197 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link197");
			if (this.wt_Link197 != null) {
				this.wt_Link197.Click += new System.EventHandler(this.wt_Link197_Click);
			}
			wt_Container27 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container27");
			wtWhoToInformSection = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtWhoToInformSection");
			wtWhoNeedsTobeInformedRecordList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtWhoNeedsTobeInformedRecordList");
			wtWhoNeedsTobeInformedRecordList.StartIndexExpression = () => 0;
			wtWhoNeedsTobeInformedRecordList.LineCountExpression = () => 50;
			wtWhoNeedsTobeInformedRecordList.EmptyMessageExpression = () => "No persons added...";
			if (this.wt_Link50 != null) {
				this.wt_Link50.Click += new System.EventHandler(this.wt_Link50_Click);
			}
			wt_Container149 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container149");
			wt_Container140 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container140");
			wt_Container262 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container262");
			wt_Link203 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link203");
			if (this.wt_Link203 != null) {
				this.wt_Link203.Click += new System.EventHandler(this.wt_Link203_Click);
			}
			wtNavButtons5 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNavButtons5");
			wt_Container182 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container182");
			wt_Container73 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container73");
			wt_Container61 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container61");
			wt_Container270 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container270");
			wt_Container186 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container186");
			wtTab6Title = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab6Title");
			wtTab6MainContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTab6MainContent");
			wt_Container145 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container145");
			wt_Container156 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container156");
			wt_Container136 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container136");
			wtNavButtons6 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtNavButtons6");
			wt_Container225 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container225");
			wt_Container148 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container148");
			wt_Container230 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container230");
			wt_Container227 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container227");
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssRiskAssessmentRisksListDoDataBind = true;
					ssRiskAssessmentManagementOfSupportListDoDataBind = true;
					ssExternalContactRecordListListDoDataBind = true;
					ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(this, "wtStudentSupport_PlanDropDownReason", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wt_Input105", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox195", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox128", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wt_Input137", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(this, "wtComboHasCapacity", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wt_Input218", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox210", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wt_Input70", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input57", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input153", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input8", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input162", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input259", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input3", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox249", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtAutumnReviewDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtSpringReviewDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtSummerReviewDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetRiskAssessementRisksByRiskAssessment_outParamList.

			int tmpcurrentrownumberqueryResGetRiskAssessementRisksByRiskAssessment_outParamList = queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRiskAssessementRisksByRiskAssessment_outParamList = queryResGetRiskAssessementRisksByRiskAssessment_outParamList.Eof;
			ArrayList storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRiskAssessementRisksByRiskAssessment_outParamList to the storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList
			if (!queryResGetRiskAssessementRisksByRiskAssessment_outParamList.Empty) {
				try {
					queryResGetRiskAssessementRisksByRiskAssessment_outParamList.StartIteration();

					while (!queryResGetRiskAssessementRisksByRiskAssessment_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList = new ArrayList();
						tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.Add(queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessementRisks.ssId == 0?(object) null: queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessementRisks.ssId);
						tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.Add(queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessementRisks.ssRisk == "" ?(object) null: queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessementRisks.ssRisk);
						tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessementRisks.ChangedAttributes, new BitArray(new bool[] {
							true, false, true
						}
						))));
						tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessementRisks.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false
						}
						))));
						storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList.Add(tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList);
						queryResGetRiskAssessementRisksByRiskAssessment_outParamList.Advance();
					}
				} finally {
					queryResGetRiskAssessementRisksByRiskAssessment_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessementRisksByRiskAssessment_outParamList", storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList, null);

			#endregion


			#region store queryResGetRiskAssessementRisksByRiskAssessment_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessementRisksByRiskAssessment_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRiskAssessementRisksByRiskAssessment_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRiskAssessementRisksByRiskAssessment_outParamList_eof", tmpeofqueryResGetRiskAssessementRisksByRiskAssessment_outParamList, false);
			queryResGetRiskAssessementRisksByRiskAssessment_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessementRisksByRiskAssessment_outParamList, tmpeofqueryResGetRiskAssessementRisksByRiskAssessment_outParamList);

			#endregion


			#region store queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.

			int tmpcurrentrownumberqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Eof;
			ArrayList storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList to the storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList
			if (!queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Empty) {
				try {
					queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.StartIteration();

					while (!queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = new ArrayList();
						tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Add(queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRec.ssENRiskAssessmentManagementOfSupport.ssId == 0?(object) null: queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRec.ssENRiskAssessmentManagementOfSupport.ssId);
						tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Add(queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRec.ssENRiskAssessmentManagementOfSupport.ssManagementOfSupport == "" ?(object) null: queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRec.ssENRiskAssessmentManagementOfSupport.ssManagementOfSupport);
						tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRec.ssENRiskAssessmentManagementOfSupport.ChangedAttributes, new BitArray(new bool[] {
							true, false, true
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRec.ssENRiskAssessmentManagementOfSupport.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false
						}
						))));
						storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Add(tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList);
						queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Advance();
					}
				} finally {
					queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList", storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList, null);

			#endregion


			#region store queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList_eof", tmpeofqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList, false);
			queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList, tmpeofqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList);

			#endregion


			#region store queryResGetUsersWithUser_Roles_outParamList.

			int tmpcurrentrownumberqueryResGetUsersWithUser_Roles_outParamList = queryResGetUsersWithUser_Roles_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetUsersWithUser_Roles_outParamList = queryResGetUsersWithUser_Roles_outParamList.Eof;
			ArrayList storequeryResGetUsersWithUser_Roles_outParamList = new ArrayList();

			// Write the needed fields of queryResGetUsersWithUser_Roles_outParamList to the storequeryResGetUsersWithUser_Roles_outParamList
			if (!queryResGetUsersWithUser_Roles_outParamList.Empty) {
				try {
					queryResGetUsersWithUser_Roles_outParamList.StartIteration();

					while (!queryResGetUsersWithUser_Roles_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetUsersWithUser_Roles_outParamList = new ArrayList();
						tmpFieldsqueryResGetUsersWithUser_Roles_outParamList.Add(queryResGetUsersWithUser_Roles_outParamList.CurrentRec.ssENUser.ssId == 0?(object) null: queryResGetUsersWithUser_Roles_outParamList.CurrentRec.ssENUser.ssId);
						tmpFieldsqueryResGetUsersWithUser_Roles_outParamList.Add(queryResGetUsersWithUser_Roles_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetUsersWithUser_Roles_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetUsersWithUser_Roles_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetUsersWithUser_Roles_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, true, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetUsersWithUser_Roles_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetUsersWithUser_Roles_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, false, false, true, true, true, true, true, true, true, true
						}
						))));
						storequeryResGetUsersWithUser_Roles_outParamList.Add(tmpFieldsqueryResGetUsersWithUser_Roles_outParamList);
						queryResGetUsersWithUser_Roles_outParamList.Advance();
					}
				} finally {
					queryResGetUsersWithUser_Roles_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetUsersWithUser_Roles_outParamList", storequeryResGetUsersWithUser_Roles_outParamList, null);

			#endregion


			#region store queryResGetUsersWithUser_Roles_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetUsersWithUser_Roles_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetUsersWithUser_Roles_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetUsersWithUser_Roles_outParamList_eof", tmpeofqueryResGetUsersWithUser_Roles_outParamList, false);
			queryResGetUsersWithUser_Roles_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetUsersWithUser_Roles_outParamList, tmpeofqueryResGetUsersWithUser_Roles_outParamList);

			#endregion


			#region store queryResGetRiskAssessmentById_outParamList.

			int tmpcurrentrownumberqueryResGetRiskAssessmentById_outParamList = queryResGetRiskAssessmentById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRiskAssessmentById_outParamList = queryResGetRiskAssessmentById_outParamList.Eof;
			ArrayList storequeryResGetRiskAssessmentById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRiskAssessmentById_outParamList to the storequeryResGetRiskAssessmentById_outParamList
			if (!queryResGetRiskAssessmentById_outParamList.Empty) {
				try {
					queryResGetRiskAssessmentById_outParamList.StartIteration();

					while (!queryResGetRiskAssessmentById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRiskAssessmentById_outParamList = new ArrayList();
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssId == 0?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssId);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason == 0?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther == "" ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentCompletedBy == 0?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentCompletedBy);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden == 0?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther == "" ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacity == false?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacity);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence == "" ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk == 0?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther == "" ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory == "" ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor == "" ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases == "" ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate);
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true
						}
						))));
						storequeryResGetRiskAssessmentById_outParamList.Add(tmpFieldsqueryResGetRiskAssessmentById_outParamList);
						queryResGetRiskAssessmentById_outParamList.Advance();
					}
				} finally {
					queryResGetRiskAssessmentById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentById_outParamList", storequeryResGetRiskAssessmentById_outParamList, null);

			#endregion


			#region store queryResGetRiskAssessmentById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRiskAssessmentById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentById_outParamList_eof", tmpeofqueryResGetRiskAssessmentById_outParamList, false);
			queryResGetRiskAssessmentById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentById_outParamList, tmpeofqueryResGetRiskAssessmentById_outParamList);

			#endregion


			#region store queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.

			int tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Eof;
			ArrayList storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList to the storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList
			if (!queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Empty) {
				try {
					queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.StartIteration();

					while (!queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new ArrayList();
						tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Add(queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Add(queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssId == 0?(object) null: queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssId);
						tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ChangedAttributes, new BitArray(new bool[] {
							true, false, false
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true
						}
						))));
						storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Add(tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList);
						queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Advance();
					}
				} finally {
					queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList", storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList, null);

			#endregion


			#region store queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList_eof", tmpeofqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList, false);
			queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList, tmpeofqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList);

			#endregion


			#region store queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.

			int tmpcurrentrownumberqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Eof;
			ArrayList storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList to the storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList
			if (!queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Empty) {
				try {
					queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.StartIteration();

					while (!queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = new ArrayList();
						tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Add(queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentExternalContacts.ssId == 0?(object) null: queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentExternalContacts.ssId);
						tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Add(queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentExternalContacts.ssExternalContact == "" ?(object) null: queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentExternalContacts.ssExternalContact);
						tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentExternalContacts.ChangedAttributes, new BitArray(new bool[] {
							true, false, true
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentExternalContacts.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false
						}
						))));
						storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Add(tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList);
						queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Advance();
					}
				} finally {
					queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList", storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList, null);

			#endregion


			#region store queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList_eof", tmpeofqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList, false);
			queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList, tmpeofqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("varLcActiveTab", varLcActiveTab, 0);
			ViewStateAttributes.SetInViewState("varLcYesNoID", varLcYesNoID, 0);
			ViewStateAttributes.SetInViewState("varLcNewRisk", varLcNewRisk, "");
			ViewStateAttributes.SetInViewState("varLcAddRisk", varLcAddRisk, false);
			ViewStateAttributes.SetInViewState("varLcAddExternalContact", varLcAddExternalContact, false);
			ViewStateAttributes.SetInViewState("varLcAddPersonToInform", varLcAddPersonToInform, false);
			ViewStateAttributes.SetInViewState("varLcManagementOfSupportItem", varLcManagementOfSupportItem, "");
			ViewStateAttributes.SetInViewState("varLcExternalContactItem", varLcExternalContactItem, "");
			ViewStateAttributes.SetInViewState("varLcAddManagementOfSupport", varLcAddManagementOfSupport, false);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssId", varLcRiskAssessmentBlankRecord.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssLeadStaffMember", varLcRiskAssessmentBlankRecord.ssLeadStaffMember, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSSPReason", varLcRiskAssessmentBlankRecord.ssRiskAssessmentSSPReason, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSSPReasonOther", varLcRiskAssessmentBlankRecord.ssRiskAssessmentSSPReasonOther, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSourceOfEviden", varLcRiskAssessmentBlankRecord.ssRiskAssessmentSourceOfEviden, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSOEOther", varLcRiskAssessmentBlankRecord.ssRiskAssessmentSOEOther, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssHasCapacity", varLcRiskAssessmentBlankRecord.ssHasCapacity, false);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssHasCapacityEvidence", varLcRiskAssessmentBlankRecord.ssHasCapacityEvidence, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentWhoIsAtRisk", varLcRiskAssessmentBlankRecord.ssRiskAssessmentWhoIsAtRisk, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentWATOther", varLcRiskAssessmentBlankRecord.ssRiskAssessmentWATOther, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssWhatAreTheRisks", varLcRiskAssessmentBlankRecord.ssWhatAreTheRisks, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssHistory", varLcRiskAssessmentBlankRecord.ssHistory, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssMonitor", varLcRiskAssessmentBlankRecord.ssMonitor, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssWhatHappensRiskIncreases", varLcRiskAssessmentBlankRecord.ssWhatHappensRiskIncreases, "");
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssAutumnReviewDate", varLcRiskAssessmentBlankRecord.ssAutumnReviewDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssSpringReviewDate", varLcRiskAssessmentBlankRecord.ssSpringReviewDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssSummerReviewDate", varLcRiskAssessmentBlankRecord.ssSummerReviewDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssCreatedBy", varLcRiskAssessmentBlankRecord.ssCreatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ssLastUpdatedBy", varLcRiskAssessmentBlankRecord.ssLastUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcRiskAssessmentBlankRecord.ChangedAttributes, new BitArray(new bool[] {
				true, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentBlankRecord_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcRiskAssessmentBlankRecord.OptimizedAttributes, new BitArray(new bool[] {
				false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentRiskRecord_ssId", varLcRiskAssessmentRiskRecord.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentRiskRecord_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcRiskAssessmentRiskRecord.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentRiskRecord_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcRiskAssessmentRiskRecord.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcManagementOfSupportRecord_ssId", varLcManagementOfSupportRecord.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcManagementOfSupportRecord_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcManagementOfSupportRecord.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcManagementOfSupportRecord_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcManagementOfSupportRecord.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcExternalContactRecord_ssId", varLcExternalContactRecord.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcExternalContactRecord_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcExternalContactRecord.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcExternalContactRecord_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcExternalContactRecord.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcPersonToInformRecord_ssId", varLcPersonToInformRecord.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcPersonToInformRecord_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcPersonToInformRecord.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcPersonToInformRecord_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcPersonToInformRecord.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcPersonToInformItem", varLcPersonToInformItem, 0);
			ViewStateAttributes.SetInViewState("varLcRiskAssessmentID2", varLcRiskAssessmentID2, 0);
			ViewStateAttributes.SetInViewState("wtStudentSupport_PlanDropDownReason_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtStudentSupport_PlanDropDownReason")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input105_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input105")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox195_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox195")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox128_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox128")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input137_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input137")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtComboHasCapacity_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtComboHasCapacity")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input218_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input218")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox210_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox210")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input70_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input70")).Mandatory, false);
			if (IsAjaxRequest) {
				recListRiskAssessmentRisks_Rebuild((ssRiskAssessmentRisksListDataBound ? wtRiskAssessmentRisks.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRiskAssessmentRisks.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtRiskAssessmentRisks_list", wtRiskAssessmentRisks_storage, null);
			ViewStateAttributes.SetInViewState("wt_Input57_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input57")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input153_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input153")).Mandatory, false);
			if (IsAjaxRequest) {
				recListRiskAssessmentManagementOfSupport_Rebuild((ssRiskAssessmentManagementOfSupportListDataBound ? wtRiskAssessmentManagementOfSupport.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRiskAssessmentManagementOfSupport.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtRiskAssessmentManagementOfSupport_list", wtRiskAssessmentManagementOfSupport_storage, null);
			ViewStateAttributes.SetInViewState("wt_Input8_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input8")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input162_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input162")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input259_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input259")).Mandatory, false);
			if (IsAjaxRequest) {
				recListExternalContactRecordList_Rebuild((ssExternalContactRecordListListDataBound ? wtExternalContactRecordList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtExternalContactRecordList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtExternalContactRecordList_list", wtExternalContactRecordList_storage, null);
			ViewStateAttributes.SetInViewState("wt_Input3_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input3")).Mandatory, false);
			if (IsAjaxRequest) {
				recListWhoNeedsTobeInformedRecordList_Rebuild((ssWhoNeedsTobeInformedRecordListListDataBound ? wtWhoNeedsTobeInformedRecordList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtWhoNeedsTobeInformedRecordList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtWhoNeedsTobeInformedRecordList_list", wtWhoNeedsTobeInformedRecordList_storage, null);
			ViewStateAttributes.SetInViewState("wt_ComboBox249_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox249")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtAutumnReviewDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutumnReviewDate")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtSpringReviewDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSpringReviewDate")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtSummerReviewDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSummerReviewDate")).Mandatory, false);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetRiskAssessementRisksByRiskAssessment_outParamList.

				// Read the needed fields of queryResGetRiskAssessementRisksByRiskAssessment_outParamList from storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList
				queryResGetRiskAssessementRisksByRiskAssessment_outParamList = new RLRiskAssessementRisksRecordList();
				ArrayList storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList;
				storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessementRisksByRiskAssessment_outParamList", null);
				if (storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList in storequeryResGetRiskAssessementRisksByRiskAssessment_outParamList) {
						if (tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList != null) {
							// Aux current record variable
							RCRiskAssessementRisksRecord tmpAuxCurrentRecordqueryResGetRiskAssessementRisksByRiskAssessment_outParamList = new RCRiskAssessementRisksRecord(null);
							tmpAuxCurrentRecordqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.ssENRiskAssessementRisks.ssId = (int) (tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList[0] == null ? 0: tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.ssENRiskAssessementRisks.ssRisk = (string) (tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList[1] == null ? "": tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.ssENRiskAssessementRisks.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRiskAssessementRisksByRiskAssessment_outParamList.ssENRiskAssessementRisks.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessementRisksByRiskAssessment_outParamList[3]);

							queryResGetRiskAssessementRisksByRiskAssessment_outParamList.Append(tmpAuxCurrentRecordqueryResGetRiskAssessementRisksByRiskAssessment_outParamList);
						}
					}
				}
				queryResGetRiskAssessementRisksByRiskAssessment_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRiskAssessementRisksByRiskAssessment_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRiskAssessementRisksByRiskAssessment_outParamList;
				tmpcurrentrownumberqueryResGetRiskAssessementRisksByRiskAssessment_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessementRisksByRiskAssessment_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRiskAssessementRisksByRiskAssessment_outParamList;
				tmpeofqueryResGetRiskAssessementRisksByRiskAssessment_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessementRisksByRiskAssessment_outParamList_eof", false);
				queryResGetRiskAssessementRisksByRiskAssessment_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessementRisksByRiskAssessment_outParamList, tmpeofqueryResGetRiskAssessementRisksByRiskAssessment_outParamList);

				#endregion


				#region fetch queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.

				// Read the needed fields of queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList from storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList
				queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = new RLRiskAssessmentManagementOfSupportRecordList();
				ArrayList storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList;
				storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList", null);
				if (storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList in storequeryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList) {
						if (tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList != null) {
							// Aux current record variable
							RCRiskAssessmentManagementOfSupportRecord tmpAuxCurrentRecordqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = new RCRiskAssessmentManagementOfSupportRecord(null);
							tmpAuxCurrentRecordqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.ssENRiskAssessmentManagementOfSupport.ssId = (int) (tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList[0] == null ? 0: tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.ssENRiskAssessmentManagementOfSupport.ssManagementOfSupport = (string) (tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList[1] == null ? "": tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.ssENRiskAssessmentManagementOfSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.ssENRiskAssessmentManagementOfSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList[3]);

							queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.Append(tmpAuxCurrentRecordqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList);
						}
					}
				}
				queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList;
				tmpcurrentrownumberqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList;
				tmpeofqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList_eof", false);
				queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList, tmpeofqueryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList);

				#endregion


				#region fetch queryResGetUsersWithUser_Roles_outParamList.

				// Read the needed fields of queryResGetUsersWithUser_Roles_outParamList from storequeryResGetUsersWithUser_Roles_outParamList
				queryResGetUsersWithUser_Roles_outParamList = new RLUser_RoleUserRoleRecordList();
				ArrayList storequeryResGetUsersWithUser_Roles_outParamList;
				storequeryResGetUsersWithUser_Roles_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetUsersWithUser_Roles_outParamList", null);
				if (storequeryResGetUsersWithUser_Roles_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetUsersWithUser_Roles_outParamList in storequeryResGetUsersWithUser_Roles_outParamList) {
						if (tmpFieldsqueryResGetUsersWithUser_Roles_outParamList != null) {
							// Aux current record variable
							RCUser_RoleUserRoleRecord tmpAuxCurrentRecordqueryResGetUsersWithUser_Roles_outParamList = new RCUser_RoleUserRoleRecord(null);
							tmpAuxCurrentRecordqueryResGetUsersWithUser_Roles_outParamList.ssENUser.ssId = (int) (tmpFieldsqueryResGetUsersWithUser_Roles_outParamList[0] == null ? 0: tmpFieldsqueryResGetUsersWithUser_Roles_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetUsersWithUser_Roles_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetUsersWithUser_Roles_outParamList[1] == null ? "": tmpFieldsqueryResGetUsersWithUser_Roles_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetUsersWithUser_Roles_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetUsersWithUser_Roles_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetUsersWithUser_Roles_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetUsersWithUser_Roles_outParamList[3]);

							queryResGetUsersWithUser_Roles_outParamList.Append(tmpAuxCurrentRecordqueryResGetUsersWithUser_Roles_outParamList);
						}
					}
				}
				queryResGetUsersWithUser_Roles_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetUsersWithUser_Roles_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetUsersWithUser_Roles_outParamList;
				tmpcurrentrownumberqueryResGetUsersWithUser_Roles_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetUsersWithUser_Roles_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetUsersWithUser_Roles_outParamList;
				tmpeofqueryResGetUsersWithUser_Roles_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetUsersWithUser_Roles_outParamList_eof", false);
				queryResGetUsersWithUser_Roles_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetUsersWithUser_Roles_outParamList, tmpeofqueryResGetUsersWithUser_Roles_outParamList);

				#endregion


				#region fetch queryResGetRiskAssessmentById_outParamList.

				// Read the needed fields of queryResGetRiskAssessmentById_outParamList from storequeryResGetRiskAssessmentById_outParamList
				queryResGetRiskAssessmentById_outParamList = new RLRiskAssessmentRecordList();
				ArrayList storequeryResGetRiskAssessmentById_outParamList;
				storequeryResGetRiskAssessmentById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentById_outParamList", null);
				if (storequeryResGetRiskAssessmentById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRiskAssessmentById_outParamList in storequeryResGetRiskAssessmentById_outParamList) {
						if (tmpFieldsqueryResGetRiskAssessmentById_outParamList != null) {
							// Aux current record variable
							RCRiskAssessmentRecord tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList = new RCRiskAssessmentRecord(null);
							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssId = (int) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[0] == null ? 0: tmpFieldsqueryResGetRiskAssessmentById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssRiskAssessmentSSPReason = (int) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[1] == null ? 0: tmpFieldsqueryResGetRiskAssessmentById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther = (string) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[2] == null ? "": tmpFieldsqueryResGetRiskAssessmentById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssRiskAssessmentCompletedBy = (int) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[3] == null ? 0: tmpFieldsqueryResGetRiskAssessmentById_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden = (int) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[4] == null ? 0: tmpFieldsqueryResGetRiskAssessmentById_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssRiskAssessmentSOEOther = (string) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[5] == null ? "": tmpFieldsqueryResGetRiskAssessmentById_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssHasCapacity = (bool) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[6] == null ? false: tmpFieldsqueryResGetRiskAssessmentById_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssHasCapacityEvidence = (string) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[7] == null ? "": tmpFieldsqueryResGetRiskAssessmentById_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk = (int) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[8] == null ? 0: tmpFieldsqueryResGetRiskAssessmentById_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssRiskAssessmentWATOther = (string) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[9] == null ? "": tmpFieldsqueryResGetRiskAssessmentById_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssHistory = (string) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[10] == null ? "": tmpFieldsqueryResGetRiskAssessmentById_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssMonitor = (string) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[11] == null ? "": tmpFieldsqueryResGetRiskAssessmentById_outParamList[11]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssWhatHappensRiskIncreases = (string) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[12] == null ? "": tmpFieldsqueryResGetRiskAssessmentById_outParamList[12]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssAutumnReviewDate = (DateTime) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[13] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetRiskAssessmentById_outParamList[13]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssSpringReviewDate = (DateTime) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[14] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetRiskAssessmentById_outParamList[14]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ssSummerReviewDate = (DateTime) (tmpFieldsqueryResGetRiskAssessmentById_outParamList[15] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetRiskAssessmentById_outParamList[15]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentById_outParamList[16]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList.ssENRiskAssessment.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentById_outParamList[17]);

							queryResGetRiskAssessmentById_outParamList.Append(tmpAuxCurrentRecordqueryResGetRiskAssessmentById_outParamList);
						}
					}
				}
				queryResGetRiskAssessmentById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRiskAssessmentById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRiskAssessmentById_outParamList;
				tmpcurrentrownumberqueryResGetRiskAssessmentById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRiskAssessmentById_outParamList;
				tmpeofqueryResGetRiskAssessmentById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentById_outParamList_eof", false);
				queryResGetRiskAssessmentById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentById_outParamList, tmpeofqueryResGetRiskAssessmentById_outParamList);

				#endregion


				#region fetch queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.

				// Read the needed fields of queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList from storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList
				queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new RLUserRiskAssessmentKeepInformedRecordList();
				ArrayList storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList;
				storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList", null);
				if (storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList in storequeryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList) {
						if (tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList != null) {
							// Aux current record variable
							RCUserRiskAssessmentKeepInformedRecord tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new RCUserRiskAssessmentKeepInformedRecord(null);
							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[0] == null ? "": tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.ssENRiskAssessmentKeepInformed.ssId = (int) (tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[3] == null ? 0: tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.ssENRiskAssessmentKeepInformed.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.ssENRiskAssessmentKeepInformed.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList[5]);

							queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.Append(tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList);
						}
					}
				}
				queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList;
				tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList;
				tmpeofqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList_eof", false);
				queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList, tmpeofqueryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList);

				#endregion


				#region fetch queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.

				// Read the needed fields of queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList from storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList
				queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = new RLRiskAssessmentExternalContactsRecordList();
				ArrayList storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList;
				storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList", null);
				if (storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList in storequeryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList) {
						if (tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList != null) {
							// Aux current record variable
							RCRiskAssessmentExternalContactsRecord tmpAuxCurrentRecordqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = new RCRiskAssessmentExternalContactsRecord(null);
							tmpAuxCurrentRecordqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.ssENRiskAssessmentExternalContacts.ssId = (int) (tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList[0] == null ? 0: tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.ssENRiskAssessmentExternalContacts.ssExternalContact = (string) (tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList[1] == null ? "": tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.ssENRiskAssessmentExternalContacts.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.ssENRiskAssessmentExternalContacts.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList[3]);

							queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.Append(tmpAuxCurrentRecordqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList);
						}
					}
				}
				queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList;
				tmpcurrentrownumberqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList;
				tmpeofqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList_eof", false);
				queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList, tmpeofqueryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList);

				#endregion

				varLcActiveTab = (int) ViewStateAttributes.GetFromViewState("varLcActiveTab", 0);
				varLcYesNoID = (int) ViewStateAttributes.GetFromViewState("varLcYesNoID", 0);
				varLcNewRisk = (string) ViewStateAttributes.GetFromViewState("varLcNewRisk", "");
				varLcAddRisk = (bool) ViewStateAttributes.GetFromViewState("varLcAddRisk", false);
				varLcAddExternalContact = (bool) ViewStateAttributes.GetFromViewState("varLcAddExternalContact", false);
				varLcAddPersonToInform = (bool) ViewStateAttributes.GetFromViewState("varLcAddPersonToInform", false);
				varLcManagementOfSupportItem = (string) ViewStateAttributes.GetFromViewState("varLcManagementOfSupportItem", "");
				varLcExternalContactItem = (string) ViewStateAttributes.GetFromViewState("varLcExternalContactItem", "");
				varLcAddManagementOfSupport = (bool) ViewStateAttributes.GetFromViewState("varLcAddManagementOfSupport", false);
				varLcRiskAssessmentBlankRecord.ssId = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssId", 0);
				varLcRiskAssessmentBlankRecord.ssLeadStaffMember = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssLeadStaffMember", "");
				varLcRiskAssessmentBlankRecord.ssRiskAssessmentSSPReason = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSSPReason", 0);
				varLcRiskAssessmentBlankRecord.ssRiskAssessmentSSPReasonOther = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSSPReasonOther", "");
				varLcRiskAssessmentBlankRecord.ssRiskAssessmentSourceOfEviden = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSourceOfEviden", 0);
				varLcRiskAssessmentBlankRecord.ssRiskAssessmentSOEOther = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentSOEOther", "");
				varLcRiskAssessmentBlankRecord.ssHasCapacity = (bool) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssHasCapacity", false);
				varLcRiskAssessmentBlankRecord.ssHasCapacityEvidence = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssHasCapacityEvidence", "");
				varLcRiskAssessmentBlankRecord.ssRiskAssessmentWhoIsAtRisk = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentWhoIsAtRisk", 0);
				varLcRiskAssessmentBlankRecord.ssRiskAssessmentWATOther = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssRiskAssessmentWATOther", "");
				varLcRiskAssessmentBlankRecord.ssWhatAreTheRisks = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssWhatAreTheRisks", "");
				varLcRiskAssessmentBlankRecord.ssHistory = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssHistory", "");
				varLcRiskAssessmentBlankRecord.ssMonitor = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssMonitor", "");
				varLcRiskAssessmentBlankRecord.ssWhatHappensRiskIncreases = (string) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssWhatHappensRiskIncreases", "");
				varLcRiskAssessmentBlankRecord.ssAutumnReviewDate = (DateTime) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssAutumnReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcRiskAssessmentBlankRecord.ssSpringReviewDate = (DateTime) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssSpringReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcRiskAssessmentBlankRecord.ssSummerReviewDate = (DateTime) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssSummerReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcRiskAssessmentBlankRecord.ssCreatedBy = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssCreatedBy", 0);
				varLcRiskAssessmentBlankRecord.ssLastUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ssLastUpdatedBy", 0);
				varLcRiskAssessmentBlankRecord.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_ChangedAttributes", null));
				varLcRiskAssessmentBlankRecord.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcRiskAssessmentBlankRecord_OptimizedAttributes", null));
				varLcRiskAssessmentRiskRecord.ssId = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentRiskRecord_ssId", 0);
				varLcRiskAssessmentRiskRecord.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcRiskAssessmentRiskRecord_ChangedAttributes", null));
				varLcRiskAssessmentRiskRecord.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcRiskAssessmentRiskRecord_OptimizedAttributes", null));
				varLcManagementOfSupportRecord.ssId = (int) ViewStateAttributes.GetFromViewState("varLcManagementOfSupportRecord_ssId", 0);
				varLcManagementOfSupportRecord.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcManagementOfSupportRecord_ChangedAttributes", null));
				varLcManagementOfSupportRecord.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcManagementOfSupportRecord_OptimizedAttributes", null));
				varLcExternalContactRecord.ssId = (int) ViewStateAttributes.GetFromViewState("varLcExternalContactRecord_ssId", 0);
				varLcExternalContactRecord.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcExternalContactRecord_ChangedAttributes", null));
				varLcExternalContactRecord.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcExternalContactRecord_OptimizedAttributes", null));
				varLcPersonToInformRecord.ssId = (int) ViewStateAttributes.GetFromViewState("varLcPersonToInformRecord_ssId", 0);
				varLcPersonToInformRecord.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcPersonToInformRecord_ChangedAttributes", null));
				varLcPersonToInformRecord.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcPersonToInformRecord_OptimizedAttributes", null));
				varLcPersonToInformItem = (int) ViewStateAttributes.GetFromViewState("varLcPersonToInformItem", 0);
				varLcRiskAssessmentID2 = (int) ViewStateAttributes.GetFromViewState("varLcRiskAssessmentID2", 0);
				((IWidgetRuntimeProperties) this.FindControl("wtStudentSupport_PlanDropDownReason")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtStudentSupport_PlanDropDownReason_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input105")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input105_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox195")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox195_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox128")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox128_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input137")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input137_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtComboHasCapacity")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtComboHasCapacity_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input218")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input218_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox210")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox210_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input70")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input70_Mandatory", false);
				recListRiskAssessmentRisks_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wt_Input57")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input57_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input153")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input153_Mandatory", false);
				recListRiskAssessmentManagementOfSupport_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wt_Input8")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input8_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input162")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input162_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input259")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input259_Mandatory", false);
				recListExternalContactRecordList_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wt_Input3")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input3_Mandatory", false);
				recListWhoNeedsTobeInformedRecordList_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox249")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox249_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtAutumnReviewDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutumnReviewDate_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtSpringReviewDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSpringReviewDate_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtSummerReviewDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSummerReviewDate_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wt_Input105");
			ControlVisibility.StoreChildControlVisibility("wt_Input137");
			ControlVisibility.StoreChildControlVisibility("wt_Input218");
			ControlVisibility.StoreChildControlVisibility("wt_Input70");
			ControlVisibility.StoreChildControlVisibility("wt_Input57");
			ControlVisibility.StoreChildControlVisibility("wt_Input153");
			ControlVisibility.StoreChildControlVisibility("wt_Input8");
			ControlVisibility.StoreChildControlVisibility("wt_Input162");
			ControlVisibility.StoreChildControlVisibility("wt_Input259");
			ControlVisibility.StoreChildControlVisibility("wt_Input3");
			ControlVisibility.StoreChildControlVisibility("wtAutumnReviewDate");
			ControlVisibility.StoreChildControlVisibility("wtSpringReviewDate");
			ControlVisibility.StoreChildControlVisibility("wtSummerReviewDate");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wt_Input105");
			ControlVisibility.RestoreChildControlVisibility("wt_Input137");
			ControlVisibility.RestoreChildControlVisibility("wt_Input218");
			ControlVisibility.RestoreChildControlVisibility("wt_Input70");
			ControlVisibility.RestoreChildControlVisibility("wt_Input57");
			ControlVisibility.RestoreChildControlVisibility("wt_Input153");
			ControlVisibility.RestoreChildControlVisibility("wt_Input8");
			ControlVisibility.RestoreChildControlVisibility("wt_Input162");
			ControlVisibility.RestoreChildControlVisibility("wt_Input259");
			ControlVisibility.RestoreChildControlVisibility("wt_Input3");
			ControlVisibility.RestoreChildControlVisibility("wtAutumnReviewDate");
			ControlVisibility.RestoreChildControlVisibility("wtSpringReviewDate");
			ControlVisibility.RestoreChildControlVisibility("wtSummerReviewDate");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.K5bQBix5kMUeJJ3iv9JumfQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkTabsWizard.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("5bQBix5kMUeJJ3iv9JumfQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvPrint: VarsBag {
			/// <summary>
			/// Variable <code>varLcURL</code> that represents the Service Studio local variable <code>URL</code>
			///  <p>Description: </p>
			/// </summary>
			public string varLcURL = "";

			public byte[] resGeneratePDF_outParamPDFBinary = new byte[] {};
			public string resGeneratePDF_outParamMessageOutput = "";

			public lcvPrint() {
			}
		}
		/// <summary>
		/// Action <code>CommandPrint</code> that represents the Service Studio screen action
		///  <code>Print</code> <p> Description: </p>
		/// </summary>
		private bool CommandPrint(HeContext heContext) {
			CheckPermissions(heContext);
			lcvPrint localVars = new lcvPrint();
			try {
				localVars.varLcURL = (Functions.ssGetPDFReportType(heContext, ENPDFReportTypeEntity.GetRecordByKey(ObjectKey.Parse("__tPZM82SUqrzMf4LmXZ0g")).ssId).ssENPDFReportType.ssURL+Convert.ToString(queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssId)); // URL = GetPDFReportType(StudentSupportPlan).PDFReportType.URL + GetRiskAssessmentById.List.Current.RiskAssessment.Id
				// GeneratePDF
				Actions.ActionGeneratePDF(heContext, localVars.varLcURL, "", "--orientation landscape", out localVars.resGeneratePDF_outParamPDFBinary, out localVars.resGeneratePDF_outParamMessageOutput);
				// Download Download7
				Response.ClearContent();
				string md5Hash_Download7;
				md5Hash_Download7 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.resGeneratePDF_outParamPDFBinary);
				Response.ContentType = "application/octet-stream";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download7 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download7);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload7 = RuntimePlatformUtils.EscapeFilenameForDownload("StudentSupportPlan.pdf");
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload7 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload7);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload7+ "\"");
				byte[] downloadDownload7FileContent = localVars.resGeneratePDF_outParamPDFBinary;

				if (downloadDownload7FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/octet-stream";
						file_info.Second = localVars.resGeneratePDF_outParamPDFBinary;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload("StudentSupportPlan.pdf"));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload7FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload7FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "TAB_RiskAssessment", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandShowManagementOfSupport</code> that represents the Service Studio screen action
		///  <code>ShowManagementOfSupport</code> <p> Description: </p>
		/// </summary>
		private bool CommandShowManagementOfSupport(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcAddManagementOfSupport = true; // AddManagementOfSupport = True
				// Refresh Widget (wtRiskAssessmentManagementOfSupportSection)
				ssRiskAssessmentManagementOfSupportListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentManagementOfSupportSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvNext: VarsBag {
			public int inParamCurrentTab;
			public lcvNext(int inParamCurrentTab) {
				this.inParamCurrentTab = inParamCurrentTab;
			}
		}
		/// <summary>
		/// Action <code>CommandNext</code> that represents the Service Studio screen action <code>Next</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandNext(HeContext heContext, int inParamCurrentTab) {
			CheckPermissions(heContext);
			lcvNext localVars = new lcvNext(inParamCurrentTab);
			try {
				if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("avXIv1WG4UWcoRPTcOjaOw")).ssId)) {
					varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("G2Uii45UX0ShwQzIkCqqYw")).ssId; // ActiveTab = Tab2

				} else {
					if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("G2Uii45UX0ShwQzIkCqqYw")).ssId)) {
						varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("eJi6gCb3qkGul3Pczs28IQ")).ssId; // ActiveTab = Tab3

					} else {
						if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("eJi6gCb3qkGul3Pczs28IQ")).ssId)) {
							varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("S7hpV6ytl0SPxsAENlFs8g")).ssId; // ActiveTab = Tab4

						} else {
							if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("S7hpV6ytl0SPxsAENlFs8g")).ssId)) {
								varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("HW7xHQFW7ke5H0OO5Oi_pQ")).ssId; // ActiveTab = Tab5

							} else {
								if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("HW7xHQFW7ke5H0OO5Oi_pQ")).ssId)) {
									varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("dMF9PjLsLkuXJfDGk7dH+g")).ssId; // ActiveTab = Tab6

								} else {
									// Update Screen
									return true;

								}

							}

						}

					}

				}
				// Refresh Widget (ThemeProvider_wtTabSection)
				ssRiskAssessmentRisksListDoDataBind = true;
				ssRiskAssessmentManagementOfSupportListDoDataBind = true;
				ssExternalContactRecordListListDoDataBind = true;
				ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(ThemeProvider_wtTabSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandShowExternalContacts</code> that represents the Service Studio screen action
		///  <code>ShowExternalContacts</code> <p> Description: </p>
		/// </summary>
		private bool CommandShowExternalContacts(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcAddExternalContact = true; // AddExternalContact = True
				// Refresh Widget (wtExternalContactsSection)
				ssExternalContactRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtExternalContactsSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvPrevious: VarsBag {
			public int inParamCurrentTab;
			public lcvPrevious(int inParamCurrentTab) {
				this.inParamCurrentTab = inParamCurrentTab;
			}
		}
		/// <summary>
		/// Action <code>CommandPrevious</code> that represents the Service Studio screen action
		///  <code>Previous</code> <p> Description: </p>
		/// </summary>
		private bool CommandPrevious(HeContext heContext, int inParamCurrentTab) {
			CheckPermissions(heContext);
			lcvPrevious localVars = new lcvPrevious(inParamCurrentTab);
			try {
				if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("dMF9PjLsLkuXJfDGk7dH+g")).ssId)) {
					varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("HW7xHQFW7ke5H0OO5Oi_pQ")).ssId; // ActiveTab = Tab5

				} else {
					if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("HW7xHQFW7ke5H0OO5Oi_pQ")).ssId)) {
						varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("S7hpV6ytl0SPxsAENlFs8g")).ssId; // ActiveTab = Tab4

					} else {
						if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("S7hpV6ytl0SPxsAENlFs8g")).ssId)) {
							varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("eJi6gCb3qkGul3Pczs28IQ")).ssId; // ActiveTab = Tab3

						} else {
							if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("eJi6gCb3qkGul3Pczs28IQ")).ssId)) {
								varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("G2Uii45UX0ShwQzIkCqqYw")).ssId; // ActiveTab = Tab2

							} else {
								if ((localVars.inParamCurrentTab==ENTabsEntity.GetRecordByKey(ObjectKey.Parse("G2Uii45UX0ShwQzIkCqqYw")).ssId)) {
									varLcActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("avXIv1WG4UWcoRPTcOjaOw")).ssId; // ActiveTab = Tab1

								} else {
									goto KJ34nvLZNgEOafbXnbzMyoQ;

								}

							}

						}

					}

				}
				// Refresh Widget (ThemeProvider_wtTabSection)
				ssRiskAssessmentRisksListDoDataBind = true;
				ssRiskAssessmentManagementOfSupportListDoDataBind = true;
				ssExternalContactRecordListListDoDataBind = true;
				ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(ThemeProvider_wtTabSection, "None", StoreViewState);
				KJ34nvLZNgEOafbXnbzMyoQ:// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDeleteExternalContact</code> that represents the Service Studio screen action
		///  <code>DeleteExternalContact</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteExternalContact(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteRiskAssessmentExternalContacts
				ExtendedActions.DeleteRiskAssessmentExternalContacts(heContext, getWtExternalContactRecordListList().CurrentRec.ssENRiskAssessmentExternalContacts.ssId);
				// Query datasetGetRiskAssessmentExternalContactsByRiskAssessment
				{
					int datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords = Math.Max(wtExternalContactRecordList.StartIndex + wtExternalContactRecordList.LineCount + 1, 0);
					queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentExternalContactsByRiskAssessment(heContext, datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount, varLcRiskAssessmentID2
					);
				}
				// Refresh Widget (wtExternalContactsSection)
				ssExternalContactRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtExternalContactsSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSaveRiskAssessment: VarsBag {
			public RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList queryResGetRiskAssessmentsWithOrWithoutStudents_outParamList = new RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
			public int queryResGetRiskAssessmentsWithOrWithoutStudents_outParamCount = 0;

			public int resCreateOrUpdateRiskAssessment_outParamId = 0;

			public RLUserRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList = new RLUserRiskAssessmentKeepInformedRecordList();
			public int queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamCount = 0;

			public int resSSPChange_outParamEmailId = 0;
			public lcvSaveRiskAssessment() {
			}
		}
		/// <summary>
		/// Action <code>CommandSaveRiskAssessment</code> that represents the Service Studio screen action
		///  <code>SaveRiskAssessment</code> <p> Description: </p>
		/// </summary>
		private bool CommandSaveRiskAssessment(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSaveRiskAssessment localVars = new lcvSaveRiskAssessment();
			try {
				// CreateOrUpdateRiskAssessment
				ExtendedActions.CreateOrUpdateRiskAssessment(heContext, queryResGetRiskAssessmentById_outParamList.CurrentRec.ChangedAttributes, queryResGetRiskAssessmentById_outParamList.CurrentRec, out localVars.resCreateOrUpdateRiskAssessment_outParamId);
				// Query datasetGetRiskAssessmentsWithOrWithoutStudents
				int datasetGetRiskAssessmentsWithOrWithoutStudents_maxRecords = 0;
				localVars.queryResGetRiskAssessmentsWithOrWithoutStudents_outParamList = FuncCommandSaveRiskAssessment.datasetGetRiskAssessmentsWithOrWithoutStudents(heContext, datasetGetRiskAssessmentsWithOrWithoutStudents_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetRiskAssessmentsWithOrWithoutStudents_outParamCount, localVars.resCreateOrUpdateRiskAssessment_outParamId
				);
				// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment2
				int datasetGetRiskAssessmentKeepInformedsByRiskAssessment2_maxRecords = 0;
				localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList = FuncCommandSaveRiskAssessment.datasetGetRiskAssessmentKeepInformedsByRiskAssessment2(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment2_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamCount, localVars.resCreateOrUpdateRiskAssessment_outParamId
				);
				// Foreach GetRiskAssessmentKeepInformedsByRiskAssessment2.List
				localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList.Eof) {
						// Send Email
						localVars.resSSPChange_outParamEmailId = EmailProcessor.SendEmailRequest("http://" + Settings.Get(Settings.Configs.InternalAddress) + AppUtils.Instance.getImagePath(/*internalAccess*/true) + "SSPChange.aspx?" + "StaffName=" + System.Web.HttpUtility.UrlEncode(localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList.CurrentRec.ssENUser.ssUsername) + "&" +
						 "StudentName=" + System.Web.HttpUtility.UrlEncode(((BuiltInFunction.Trim(localVars.queryResGetRiskAssessmentsWithOrWithoutStudents_outParamList.CurrentRec.ssENStudent.ssForenames) + " ") +BuiltInFunction.Trim(localVars.queryResGetRiskAssessmentsWithOrWithoutStudents_outParamList.CurrentRec.ssENStudent.ssSurname))) + "&" +
						 "StudentReference=" + System.Web.HttpUtility.UrlEncode(localVars.queryResGetRiskAssessmentsWithOrWithoutStudents_outParamList.CurrentRec.ssENStudent.ssStudentReference) + "&" +
						 "URL=" + System.Web.HttpUtility.UrlEncode((("https://apps.cornwall.ac.uk/caseconferencing/LearnerDetailsTabs.aspx?StudentReference=" +localVars.queryResGetRiskAssessmentsWithOrWithoutStudents_outParamList.CurrentRec.ssENStudent.ssStudentReference) + "&ActiveTabId=3&SelectedTab=5")), "", localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList.CurrentRec.ssENUser.ssEmail, "", "", 0, heContext.Session.TenantId, false, EmailProcessor.EmailType.Normal);
						localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetRiskAssessmentKeepInformedsByRiskAssessment2_outParamList.EndIteration();
				}
				varLcRiskAssessmentID2 = BuiltInFunction.NullIdentifier(); // RiskAssessmentID2 = NullIdentifier
				// Refresh Me
				ssRiskAssessmentRisksListDoDataBind = true;
				ssRiskAssessmentManagementOfSupportListDoDataBind = true;
				ssExternalContactRecordListListDoDataBind = true;
				ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "Saved");
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSaveNewRisk: VarsBag {
			public int resCreateOrUpdateRiskAssessementRisks_outParamId = 0;

			public lcvSaveNewRisk() {
			}
		}
		/// <summary>
		/// Action <code>CommandSaveNewRisk</code> that represents the Service Studio screen action
		///  <code>SaveNewRisk</code> <p> Description: </p>
		/// </summary>
		private bool CommandSaveNewRisk(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSaveNewRisk localVars = new lcvSaveNewRisk();
			try {
				varLcRiskAssessmentRiskRecord.ssRiskAssessment = queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssId; // RiskAssessmentRiskRecord.RiskAssessment = GetRiskAssessmentById.List.Current.RiskAssessment.Id
				varLcRiskAssessmentRiskRecord.ssRisk = varLcNewRisk; // RiskAssessmentRiskRecord.Risk = NewRisk
				// CreateOrUpdateRiskAssessementRisks
				ExtendedActions.CreateOrUpdateRiskAssessementRisks(heContext, varLcRiskAssessmentRiskRecord.ChangedAttributes, ((RCRiskAssessementRisksRecord) varLcRiskAssessmentRiskRecord), out localVars.resCreateOrUpdateRiskAssessementRisks_outParamId);
				// CommitTransaction
				ExtendedActions.CommitTransaction(heContext);
				// Query datasetGetRiskAssessementRisksByRiskAssessment
				{
					int datasetGetRiskAssessementRisksByRiskAssessment_maxRecords = Math.Max(wtRiskAssessmentRisks.StartIndex + wtRiskAssessmentRisks.LineCount + 1, 0);
					queryResGetRiskAssessementRisksByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessementRisksByRiskAssessment(heContext, datasetGetRiskAssessementRisksByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessementRisksByRiskAssessment_outParamCount, varLcRiskAssessmentID2
					);
				}
				varLcAddRisk = false; // AddRisk = False
				// Refresh Widget (wtRiskAssessmentRisksWrapper)
				ssRiskAssessmentRisksListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentRisksWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandShowAddNewRisk</code> that represents the Service Studio screen action
		///  <code>ShowAddNewRisk</code> <p> Description: </p>
		/// </summary>
		private bool CommandShowAddNewRisk(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcAddRisk = true; // AddRisk = True
				// Refresh Widget (wtTab3MainContent)
				ssRiskAssessmentRisksListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtTab3MainContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnHasCapacityChange</code> that represents the Service Studio screen action
		///  <code>OnHasCapacityChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnHasCapacityChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacity = (((varLcYesNoID==ENYesNoEntity.GetRecordByKey(ObjectKey.Parse("PrPPkT5+IkKvDPsh9RrKEA")).ssId)) ?(true):(false)); // GetRiskAssessmentById.List.Current.RiskAssessment.HasCapacity = internalIf
				// Refresh Widget (wtTab2MainContent)
				((OSPageViewState) Page).AjaxRefresh(wtTab2MainContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSavePersonToInform: VarsBag {
			public int resCreateOrUpdateRiskAssessmentKeepInformed_outParamId = 0;

			public lcvSavePersonToInform() {
			}
		}
		/// <summary>
		/// Action <code>CommandSavePersonToInform</code> that represents the Service Studio screen action
		///  <code>SavePersonToInform</code> <p> Description: </p>
		/// </summary>
		private bool CommandSavePersonToInform(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSavePersonToInform localVars = new lcvSavePersonToInform();
			try {
				varLcPersonToInformRecord.ssRiskAssessment = queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssId; // PersonToInformRecord.RiskAssessment = GetRiskAssessmentById.List.Current.RiskAssessment.Id
				varLcPersonToInformRecord.ssUser = varLcPersonToInformItem; // PersonToInformRecord.User = PersonToInformItem
				varLcAddPersonToInform = false; // AddPersonToInform = False
				// CreateOrUpdateRiskAssessmentKeepInformed
				ExtendedActions.CreateOrUpdateRiskAssessmentKeepInformed(heContext, varLcPersonToInformRecord.ChangedAttributes, ((RCRiskAssessmentKeepInformedRecord) varLcPersonToInformRecord), out localVars.resCreateOrUpdateRiskAssessmentKeepInformed_outParamId);
				// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment
				{
					int datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords = Math.Max(wtWhoNeedsTobeInformedRecordList.StartIndex + wtWhoNeedsTobeInformedRecordList.LineCount + 1, 0);
					queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedsByRiskAssessment(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount, varLcRiskAssessmentID2
					);
				}
				// Refresh Widget (wtWhoToInformSection)
				ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWhoToInformSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDeletePersonToInform</code> that represents the Service Studio screen action
		///  <code>DeletePersonToInform</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeletePersonToInform(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteRiskAssessmentKeepInformed
				ExtendedActions.DeleteRiskAssessmentKeepInformed(heContext, getWtWhoNeedsTobeInformedRecordListList().CurrentRec.ssENRiskAssessmentKeepInformed.ssId);
				// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment
				{
					int datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords = Math.Max(wtWhoNeedsTobeInformedRecordList.StartIndex + wtWhoNeedsTobeInformedRecordList.LineCount + 1, 0);
					queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedsByRiskAssessment(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount, varLcRiskAssessmentID2
					);
				}
				// Refresh Widget (wtWhoToInformSection)
				ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWhoToInformSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandShowPersonToInform</code> that represents the Service Studio screen action
		///  <code>ShowPersonToInform</code> <p> Description: </p>
		/// </summary>
		private bool CommandShowPersonToInform(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcAddPersonToInform = true; // AddPersonToInform = True
				// Refresh Widget (wtWhoToInformSection)
				ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWhoToInformSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSaveExternalContact: VarsBag {
			public int resCreateOrUpdateRiskAssessmentExternalContacts_outParamId = 0;

			public lcvSaveExternalContact() {
			}
		}
		/// <summary>
		/// Action <code>CommandSaveExternalContact</code> that represents the Service Studio screen action
		///  <code>SaveExternalContact</code> <p> Description: </p>
		/// </summary>
		private bool CommandSaveExternalContact(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSaveExternalContact localVars = new lcvSaveExternalContact();
			try {
				varLcExternalContactRecord.ssRiskAssessment = queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssId; // ExternalContactRecord.RiskAssessment = GetRiskAssessmentById.List.Current.RiskAssessment.Id
				varLcExternalContactRecord.ssExternalContact = varLcExternalContactItem; // ExternalContactRecord.ExternalContact = ExternalContactItem
				varLcAddExternalContact = false; // AddExternalContact = False
				// CreateOrUpdateRiskAssessmentExternalContacts
				ExtendedActions.CreateOrUpdateRiskAssessmentExternalContacts(heContext, varLcExternalContactRecord.ChangedAttributes, ((RCRiskAssessmentExternalContactsRecord) varLcExternalContactRecord), out localVars.resCreateOrUpdateRiskAssessmentExternalContacts_outParamId);
				// Query datasetGetRiskAssessmentExternalContactsByRiskAssessment
				{
					int datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords = Math.Max(wtExternalContactRecordList.StartIndex + wtExternalContactRecordList.LineCount + 1, 0);
					queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentExternalContactsByRiskAssessment(heContext, datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount, varLcRiskAssessmentID2
					);
				}
				// Refresh Widget (wtExternalContactsSection)
				ssExternalContactRecordListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtExternalContactsSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDeleteManagementOfSupport</code> that represents the Service Studio screen
		///  action <code>DeleteManagementOfSupport</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteManagementOfSupport(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteRiskAssessmentManagementOfSupport
				ExtendedActions.DeleteRiskAssessmentManagementOfSupport(heContext, getWtRiskAssessmentManagementOfSupportList().CurrentRec.ssENRiskAssessmentManagementOfSupport.ssId);
				// Query datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm
				{
					int datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords = Math.Max(wtRiskAssessmentManagementOfSupport.StartIndex + wtRiskAssessmentManagementOfSupport.LineCount + 1, 0);
					queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = FuncssPreparation.datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(heContext, datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount, varLcRiskAssessmentID2
					);
				}
				// Refresh Widget (wtRiskAssessmentManagementOfSupportSection)
				ssRiskAssessmentManagementOfSupportListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentManagementOfSupportSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSaveManagementofSupport: VarsBag {
			public int resCreateOrUpdateRiskAssessmentManagementOfSupport_outParamId = 0;

			public lcvSaveManagementofSupport() {
			}
		}
		/// <summary>
		/// Action <code>CommandSaveManagementofSupport</code> that represents the Service Studio screen action
		///  <code>SaveManagementofSupport</code> <p> Description: </p>
		/// </summary>
		private bool CommandSaveManagementofSupport(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSaveManagementofSupport localVars = new lcvSaveManagementofSupport();
			try {
				varLcManagementOfSupportRecord.ssRiskAssessment = queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssId; // ManagementOfSupportRecord.RiskAssessment = GetRiskAssessmentById.List.Current.RiskAssessment.Id
				varLcManagementOfSupportRecord.ssManagementOfSupport = varLcManagementOfSupportItem; // ManagementOfSupportRecord.ManagementOfSupport = ManagementOfSupportItem
				varLcAddManagementOfSupport = false; // AddManagementOfSupport = False
				// CreateOrUpdateRiskAssessmentManagementOfSupport
				ExtendedActions.CreateOrUpdateRiskAssessmentManagementOfSupport(heContext, varLcManagementOfSupportRecord.ChangedAttributes, ((RCRiskAssessmentManagementOfSupportRecord) varLcManagementOfSupportRecord), out localVars.resCreateOrUpdateRiskAssessmentManagementOfSupport_outParamId);
				// Query datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm
				{
					int datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords = Math.Max(wtRiskAssessmentManagementOfSupport.StartIndex + wtRiskAssessmentManagementOfSupport.LineCount + 1, 0);
					queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = FuncssPreparation.datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(heContext, datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount, varLcRiskAssessmentID2
					);
				}
				// Refresh Widget (wtRiskAssessmentManagementOfSupportSection)
				ssRiskAssessmentManagementOfSupportListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentManagementOfSupportSection, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvRefreshTab: VarsBag {
			public int inParamTabChanged;
			public lcvRefreshTab(int inParamTabChanged) {
				this.inParamTabChanged = inParamTabChanged;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshTab</code> that represents the Service Studio screen action
		///  <code>RefreshTab</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshTab(HeContext heContext, int inParamTabChanged) {
			CheckPermissions(heContext);
			lcvRefreshTab localVars = new lcvRefreshTab(inParamTabChanged);
			try {
				if ((localVars.inParamTabChanged==1)) {
					// Refresh Widget (wtTab1MainContent)
					((OSPageViewState) Page).AjaxRefresh(wtTab1MainContent, "None", StoreViewState);

				} else {
					if ((localVars.inParamTabChanged==2)) {
						// Refresh Widget (wtTab2MainContent)
						((OSPageViewState) Page).AjaxRefresh(wtTab2MainContent, "None", StoreViewState);

					} else {
						if ((localVars.inParamTabChanged==3)) {
							// Refresh Widget (wtTab3MainContent)
							ssRiskAssessmentRisksListDoDataBind = true;
							((OSPageViewState) Page).AjaxRefresh(wtTab3MainContent, "None", StoreViewState);

						} else {
							if ((localVars.inParamTabChanged==4)) {
								// Refresh Widget (wtTab4MainContent)
								ssRiskAssessmentManagementOfSupportListDoDataBind = true;
								((OSPageViewState) Page).AjaxRefresh(wtTab4MainContent, "None", StoreViewState);

							} else {
								if ((localVars.inParamTabChanged==5)) {
									// Refresh Widget (wtTab5MainContent)
									ssExternalContactRecordListListDoDataBind = true;
									ssWhoNeedsTobeInformedRecordListListDoDataBind = true;
									((OSPageViewState) Page).AjaxRefresh(wtTab5MainContent, "None", StoreViewState);

								} else {
									if ((localVars.inParamTabChanged==6)) {
										// Refresh Widget (wtTab6MainContent)
										((OSPageViewState) Page).AjaxRefresh(wtTab6MainContent, "None", StoreViewState);

									}

								}

							}

						}

					}

				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDeleteRiskAssessmentRisk</code> that represents the Service Studio screen
		///  action <code>DeleteRiskAssessmentRisk</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteRiskAssessmentRisk(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteRiskAssessementRisks
				ExtendedActions.DeleteRiskAssessementRisks(heContext, getWtRiskAssessmentRisksList().CurrentRec.ssENRiskAssessementRisks.ssId);
				// Query datasetGetRiskAssessementRisksByRiskAssessment
				{
					int datasetGetRiskAssessementRisksByRiskAssessment_maxRecords = Math.Max(wtRiskAssessmentRisks.StartIndex + wtRiskAssessmentRisks.LineCount + 1, 0);
					queryResGetRiskAssessementRisksByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessementRisksByRiskAssessment(heContext, datasetGetRiskAssessementRisksByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessementRisksByRiskAssessment_outParamCount, varLcRiskAssessmentID2
					);
				}
				varLcAddRisk = false; // AddRisk = False
				// Refresh Widget (wtRiskAssessmentRisksWrapper)
				ssRiskAssessmentRisksListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentRisksWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-size:14px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If179_hasRun=false;
		bool if_wt_If179_evalResult;
		public bool if_wt_If179() {
			if (if_wt_If179_hasRun) {
				if_wt_If179_hasRun = false;
				return if_wt_If179_evalResult;
			}
			if_wt_If179_hasRun = true;
			if_wt_If179_evalResult = (varLcRiskAssessmentID2==BuiltInFunction.NullIdentifier());
			return if_wt_If179_evalResult;
		}

		public void ThemeProvider_webBlckTabSection_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkTabsWizard widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkTabsWizard) sender;
				widget.inParamActiveTab = varLcActiveTab;
				widget.inParamLoadOnClick = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container196_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container196_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container196_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container196_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container196)
		/// </summary>
		/// <returns>The Visible State of wt_Container196</returns>
		public bool cnt_Container196_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab1Title2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab1Title2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab1Title2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab1Title2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab1Title2)
		/// </summary>
		/// <returns>The Visible State of wtTab1Title2</returns>
		public bool cntTab1Title2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container110_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container110_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container110_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container110_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container110)
		/// </summary>
		/// <returns>The Visible State of wt_Container110</returns>
		public bool cnt_Container110_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container152_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container152_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container152_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container152_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container152)
		/// </summary>
		/// <returns>The Visible State of wt_Container152</returns>
		public bool cnt_Container152_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link209_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPrint(heContext)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link209)
		/// </summary>
		/// <returns>title of the Link (wt_Link209)</returns>
		public string
		lnk_Link209_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link209)
		/// </summary>
		/// <returns>The Visible State of wt_Link209</returns>
		public bool lnk_Link209_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link209)
		/// </summary>
		/// <returns>The Enabled State of wt_Link209</returns>
		public bool lnk_Link209_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container97_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container97_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container97_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container97_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container97)
		/// </summary>
		/// <returns>The Visible State of wt_Container97</returns>
		public bool cnt_Container97_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance119_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("FAYqYa1mFUizlhFReuRckQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTab1MainContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab1MainContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab1MainContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab1MainContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab1MainContent)
		/// </summary>
		/// <returns>The Visible State of wtTab1MainContent</returns>
		public bool cntTab1MainContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void selStudentSupport_PlanDropDownReason_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wtStudentSupport_PlanDropDownReason_reclist == null) {
					using(Transaction wtStudentSupport_PlanDropDownReason_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wtStudentSupport_PlanDropDownReason_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENRiskAssessmentSSPReasonEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wtStudentSupport_PlanDropDownReason_sqlCmd = wtStudentSupport_PlanDropDownReason_trans.CreateCommand(wtStudentSupport_PlanDropDownReason_sql);
						Rt_wtStudentSupport_PlanDropDownReason_sqlCmd.CreateParameter("@Selection", queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason);
						Rt_wtStudentSupport_PlanDropDownReason_sqlCmd.TransformParametersSyntax();
						Rt_wtStudentSupport_PlanDropDownReason_reclist = new RLRiskAssessmentSSPReasonRecordList();
						Rt_wtStudentSupport_PlanDropDownReason_reclist.Transaction = wtStudentSupport_PlanDropDownReason_trans;
						Rt_wtStudentSupport_PlanDropDownReason_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtStudentSupport_PlanDropDownReason_sqlCmd, Rt_wtStudentSupport_PlanDropDownReason_reclist, "WebSelectWidget load operation");
						Rt_wtStudentSupport_PlanDropDownReason_reclist = (RLRiskAssessmentSSPReasonRecordList) Rt_wtStudentSupport_PlanDropDownReason_reclist.Duplicate();
					}
				}
				Rt_wtStudentSupport_PlanDropDownReason_reclist.StartIteration();
				try {
					while (!Rt_wtStudentSupport_PlanDropDownReason_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtStudentSupport_PlanDropDownReason_reclist.CurrentRec.ssENRiskAssessmentSSPReason.ssLabel, Convert.ToString(Rt_wtStudentSupport_PlanDropDownReason_reclist.CurrentRec.ssENRiskAssessmentSSPReason.ssId)));
						if (queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason == Convert.ToInt32(Convert.ToString(Rt_wtStudentSupport_PlanDropDownReason_reclist.CurrentRec.ssENRiskAssessmentSSPReason.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wtStudentSupport_PlanDropDownReason_reclist.Advance();
					}
				} finally {
					Rt_wtStudentSupport_PlanDropDownReason_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtStudentSupport_PlanDropDownReason
		/// </summary>
		public void selStudentSupport_PlanDropDownReason_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandRefreshTab(heContext
				, 1)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void selStudentSupport_PlanDropDownReason_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtStudentSupport_PlanDropDownReason.SpecialListVal = dropDown.SelectedValue.Substring(8);
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason = 0;
			}
			else {
				Rt_wtStudentSupport_PlanDropDownReason.SpecialListVal = "";
				try {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtStudentSupport_PlanDropDownReason)
		/// </summary>
		/// <returns>The Visible State of wtStudentSupport_PlanDropDownReason</returns>
		public bool selStudentSupport_PlanDropDownReason_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtStudentSupport_PlanDropDownReason)
		/// </summary>
		/// <returns>The Enabled State of wtStudentSupport_PlanDropDownReason</returns>
		public bool selStudentSupport_PlanDropDownReason_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (selStudentSupport_PlanDropDownReason)
		/// </summary>
		/// <returns>The Mandatory Value of selStudentSupport_PlanDropDownReason</returns>
		public bool selStudentSupport_PlanDropDownReason_isMandatory() {
			return true;
		}

		public void cnt_Container255_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container255_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container255_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container255_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container255)
		/// </summary>
		/// <returns>The Visible State of wt_Container255</returns>
		public bool cnt_Container255_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason==ENRiskAssessmentSSPReasonEntity.GetRecordByKey(ObjectKey.Parse("gjJCnOQKTU6D+Eck7UO4kw")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input105_input_value() {
			if (("" !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input105");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input105_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther = ""; 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input105)
		/// </summary>
		/// <returns>The Visible State of wt_Input105</returns>
		public bool inputwt_Input105_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReason==ENRiskAssessmentSSPReasonEntity.GetRecordByKey(ObjectKey.Parse("gjJCnOQKTU6D+Eck7UO4kw")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input105)
		/// </summary>
		/// <returns>The Enabled State of wt_Input105</returns>
		public bool inputwt_Input105_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input105)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input105</returns>
		public bool inputwt_Input105_isMandatory() {
			return false;
		}

		public void cnt_Container198_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container198_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container198_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container198_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container198)
		/// </summary>
		/// <returns>The Visible State of wt_Container198</returns>
		public bool cnt_Container198_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container283_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container283_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container283_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container283_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container283)
		/// </summary>
		/// <returns>The Visible State of wt_Container283</returns>
		public bool cnt_Container283_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox195_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				RLUser_RoleUserRoleRecordList Rt_wt_ComboBox195_reclist = queryResGetUsersWithUser_Roles_outParamList;
				Rt_wt_ComboBox195_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox195_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox195_reclist.CurrentRec.ssENUser.ssName, Convert.ToString(Rt_wt_ComboBox195_reclist.CurrentRec.ssENUser.ssId)));
						if (queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentCompletedBy == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox195_reclist.CurrentRec.ssENUser.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox195_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox195_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox195_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox195.SpecialListVal = dropDown.SelectedValue.Substring(8);
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentCompletedBy = 0;
			}
			else {
				Rt_wt_ComboBox195.SpecialListVal = "";
				try {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentCompletedBy = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox195)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox195</returns>
		public bool sel_ComboBox195_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox195)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox195</returns>
		public bool sel_ComboBox195_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox195)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox195</returns>
		public bool sel_ComboBox195_isMandatory() {
			return false;
		}

		public void cntNavButtons1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntNavButtons1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntNavButtons1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntNavButtons1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNavButtons1)
		/// </summary>
		/// <returns>The Visible State of wtNavButtons1</returns>
		public bool cntNavButtons1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;position: absolute;bottom: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container268_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container268_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container268_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;margin-left: 0px;position: absolute;bottom: 10px;right: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container268_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container268)
		/// </summary>
		/// <returns>The Visible State of wt_Container268</returns>
		public bool cnt_Container268_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container248_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container248_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container248_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container248_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container248
		/// </summary>
		public void cnt_Container248_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandNext(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("avXIv1WG4UWcoRPTcOjaOw")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container248)
		/// </summary>
		/// <returns>The Visible State of wt_Container248</returns>
		public bool cnt_Container248_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance164_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("c7Px+LAF7UeEuqmhXvFt4w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container118_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container118_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container118_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container118_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container118)
		/// </summary>
		/// <returns>The Visible State of wt_Container118</returns>
		public bool cnt_Container118_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab2Title_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab2Title_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab2Title_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab2Title_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab2Title)
		/// </summary>
		/// <returns>The Visible State of wtTab2Title</returns>
		public bool cntTab2Title_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab2MainContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab2MainContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab2MainContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab2MainContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab2MainContent)
		/// </summary>
		/// <returns>The Visible State of wtTab2MainContent</returns>
		public bool cntTab2MainContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox128_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox128_reclist == null) {
					using(Transaction wt_ComboBox128_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox128_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENRiskAssessmentSourceOfEvidenceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wt_ComboBox128_sqlCmd = wt_ComboBox128_trans.CreateCommand(wt_ComboBox128_sql);
						Rt_wt_ComboBox128_sqlCmd.CreateParameter("@Selection", queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
						Rt_wt_ComboBox128_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox128_reclist = new RLRiskAssessmentSourceOfEvidenceRecordList();
						Rt_wt_ComboBox128_reclist.Transaction = wt_ComboBox128_trans;
						Rt_wt_ComboBox128_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox128_sqlCmd, Rt_wt_ComboBox128_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox128_reclist = (RLRiskAssessmentSourceOfEvidenceRecordList) Rt_wt_ComboBox128_reclist.Duplicate();
					}
				}
				Rt_wt_ComboBox128_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox128_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox128_reclist.CurrentRec.ssENRiskAssessmentSourceOfEvidence.ssLabel, Convert.ToString(Rt_wt_ComboBox128_reclist.CurrentRec.ssENRiskAssessmentSourceOfEvidence.ssId)));
						if (queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox128_reclist.CurrentRec.ssENRiskAssessmentSourceOfEvidence.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox128_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox128_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox128
		/// </summary>
		public void sel_ComboBox128_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandRefreshTab(heContext
				, 2)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox128_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox128.SpecialListVal = dropDown.SelectedValue.Substring(8);
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden = 0;
			}
			else {
				Rt_wt_ComboBox128.SpecialListVal = "";
				try {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox128)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox128</returns>
		public bool sel_ComboBox128_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox128)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox128</returns>
		public bool sel_ComboBox128_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox128)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox128</returns>
		public bool sel_ComboBox128_isMandatory() {
			return true;
		}

		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden==ENRiskAssessmentSourceOfEvidenceEntity.GetRecordByKey(ObjectKey.Parse("q+l1Yex+2EWLD7nBpdOgmg")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container80_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container80_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container80_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container80_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container80)
		/// </summary>
		/// <returns>The Visible State of wt_Container80</returns>
		public bool cnt_Container80_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden==ENRiskAssessmentSourceOfEvidenceEntity.GetRecordByKey(ObjectKey.Parse("q+l1Yex+2EWLD7nBpdOgmg")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input137_input_value() {
			if (("" !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input137");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input137_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther = ""; 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input137)
		/// </summary>
		/// <returns>The Visible State of wt_Input137</returns>
		public bool inputwt_Input137_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input137)
		/// </summary>
		/// <returns>The Enabled State of wt_Input137</returns>
		public bool inputwt_Input137_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input137)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input137</returns>
		public bool inputwt_Input137_isMandatory() {
			return false;
		}

		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container28_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container28_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container14_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container14_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void selComboHasCapacity_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wtComboHasCapacity_reclist == null) {
					using(Transaction wtComboHasCapacity_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wtComboHasCapacity_sql = "SELECT [ID], [LABEL], NULL, NULL, NULL FROM " + ENYesNoEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wtComboHasCapacity_sqlCmd = wtComboHasCapacity_trans.CreateCommand(wtComboHasCapacity_sql);
						Rt_wtComboHasCapacity_sqlCmd.CreateParameter("@Selection", varLcYesNoID);
						Rt_wtComboHasCapacity_sqlCmd.TransformParametersSyntax();
						Rt_wtComboHasCapacity_reclist = new RLYesNoRecordList();
						Rt_wtComboHasCapacity_reclist.Transaction = wtComboHasCapacity_trans;
						Rt_wtComboHasCapacity_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(5, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtComboHasCapacity_sqlCmd, Rt_wtComboHasCapacity_reclist, "WebSelectWidget load operation");
						Rt_wtComboHasCapacity_reclist = (RLYesNoRecordList) Rt_wtComboHasCapacity_reclist.Duplicate();
					}
				}
				Rt_wtComboHasCapacity_reclist.StartIteration();
				try {
					while (!Rt_wtComboHasCapacity_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtComboHasCapacity_reclist.CurrentRec.ssENYesNo.ssLabel, Convert.ToString(Rt_wtComboHasCapacity_reclist.CurrentRec.ssENYesNo.ssId)));
						if (varLcYesNoID == Convert.ToInt32(Convert.ToString(Rt_wtComboHasCapacity_reclist.CurrentRec.ssENYesNo.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wtComboHasCapacity_reclist.Advance();
					}
				} finally {
					Rt_wtComboHasCapacity_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtComboHasCapacity
		/// </summary>
		public void selComboHasCapacity_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnHasCapacityChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void selComboHasCapacity_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtComboHasCapacity.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcYesNoID = 0;
			}
			else {
				Rt_wtComboHasCapacity.SpecialListVal = "";
				try {
					varLcYesNoID = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtComboHasCapacity)
		/// </summary>
		/// <returns>The Visible State of wtComboHasCapacity</returns>
		public bool selComboHasCapacity_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtComboHasCapacity)
		/// </summary>
		/// <returns>The Enabled State of wtComboHasCapacity</returns>
		public bool selComboHasCapacity_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (selComboHasCapacity)
		/// </summary>
		/// <returns>The Mandatory Value of selComboHasCapacity</returns>
		public bool selComboHasCapacity_isMandatory() {
			return false;
		}

		public void cnt_Container168_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container168_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container168_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container168_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container168)
		/// </summary>
		/// <returns>The Visible State of wt_Container168</returns>
		public bool cnt_Container168_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((varLcYesNoID==ENYesNoEntity.GetRecordByKey(ObjectKey.Parse("BlkW4FNO20Gk_fGP8X05yg")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container269_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container269_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container269_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container269_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container269)
		/// </summary>
		/// <returns>The Visible State of wt_Container269</returns>
		public bool cnt_Container269_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((varLcYesNoID==ENYesNoEntity.GetRecordByKey(ObjectKey.Parse("BlkW4FNO20Gk_fGP8X05yg")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input218_input_value() {
			if (("" !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input218");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input218_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence = ""; 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input218)
		/// </summary>
		/// <returns>The Visible State of wt_Input218</returns>
		public bool inputwt_Input218_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input218)
		/// </summary>
		/// <returns>The Enabled State of wt_Input218</returns>
		public bool inputwt_Input218_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input218)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input218</returns>
		public bool inputwt_Input218_isMandatory() {
			return false;
		}

		public void cntNavButtons2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntNavButtons2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntNavButtons2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntNavButtons2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNavButtons2)
		/// </summary>
		/// <returns>The Visible State of wtNavButtons2</returns>
		public bool cntNavButtons2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container252_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container252_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container252_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;position: absolute;bottom: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container252_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container252)
		/// </summary>
		/// <returns>The Visible State of wt_Container252</returns>
		public bool cnt_Container252_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container41_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container41_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container41
		/// </summary>
		public void cnt_Container41_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandPrevious(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("G2Uii45UX0ShwQzIkCqqYw")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance109_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("nlvVHXFLPESsEhcYFgddkw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container117_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container117_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container117_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;margin-left: 0px;position: absolute;bottom: 10px;right: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container117_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container117)
		/// </summary>
		/// <returns>The Visible State of wt_Container117</returns>
		public bool cnt_Container117_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container154_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container154_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container154_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container154_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container154
		/// </summary>
		public void cnt_Container154_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandNext(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("G2Uii45UX0ShwQzIkCqqYw")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container154)
		/// </summary>
		/// <returns>The Visible State of wt_Container154</returns>
		public bool cnt_Container154_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("c7Px+LAF7UeEuqmhXvFt4w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container215_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container215_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container215_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container215_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container215)
		/// </summary>
		/// <returns>The Visible State of wt_Container215</returns>
		public bool cnt_Container215_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab3Title_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab3Title_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab3Title_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab3Title_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab3Title)
		/// </summary>
		/// <returns>The Visible State of wtTab3Title</returns>
		public bool cntTab3Title_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab3MainContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab3MainContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab3MainContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab3MainContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab3MainContent)
		/// </summary>
		/// <returns>The Visible State of wtTab3MainContent</returns>
		public bool cntTab3MainContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox210_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox210_reclist == null) {
					using(Transaction wt_ComboBox210_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox210_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENRiskAssessmentWhoIsAtRiskEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wt_ComboBox210_sqlCmd = wt_ComboBox210_trans.CreateCommand(wt_ComboBox210_sql);
						Rt_wt_ComboBox210_sqlCmd.CreateParameter("@Selection", queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
						Rt_wt_ComboBox210_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox210_reclist = new RLRiskAssessmentWhoIsAtRiskRecordList();
						Rt_wt_ComboBox210_reclist.Transaction = wt_ComboBox210_trans;
						Rt_wt_ComboBox210_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox210_sqlCmd, Rt_wt_ComboBox210_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox210_reclist = (RLRiskAssessmentWhoIsAtRiskRecordList) Rt_wt_ComboBox210_reclist.Duplicate();
					}
				}
				Rt_wt_ComboBox210_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox210_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox210_reclist.CurrentRec.ssENRiskAssessmentWhoIsAtRisk.ssLabel, Convert.ToString(Rt_wt_ComboBox210_reclist.CurrentRec.ssENRiskAssessmentWhoIsAtRisk.ssId)));
						if (queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox210_reclist.CurrentRec.ssENRiskAssessmentWhoIsAtRisk.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox210_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox210_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox210
		/// </summary>
		public void sel_ComboBox210_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandRefreshTab(heContext
				, 3)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox210_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox210.SpecialListVal = dropDown.SelectedValue.Substring(8);
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk = 0;
			}
			else {
				Rt_wt_ComboBox210.SpecialListVal = "";
				try {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox210)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox210</returns>
		public bool sel_ComboBox210_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox210)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox210</returns>
		public bool sel_ComboBox210_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox210)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox210</returns>
		public bool sel_ComboBox210_isMandatory() {
			return false;
		}

		public void cnt_Container257_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container257_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container257_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container257_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container257)
		/// </summary>
		/// <returns>The Visible State of wt_Container257</returns>
		public bool cnt_Container257_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk==ENRiskAssessmentWhoIsAtRiskEntity.GetRecordByKey(ObjectKey.Parse("TaL4wRWJU0Om2lz1zmslbg")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk==ENRiskAssessmentWhoIsAtRiskEntity.GetRecordByKey(ObjectKey.Parse("TaL4wRWJU0Om2lz1zmslbg")).ssId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input70_input_value() {
			if (("" !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input70");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input70_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther = ""; 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input70)
		/// </summary>
		/// <returns>The Visible State of wt_Input70</returns>
		public bool inputwt_Input70_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input70)
		/// </summary>
		/// <returns>The Enabled State of wt_Input70</returns>
		public bool inputwt_Input70_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input70)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input70</returns>
		public bool inputwt_Input70_isMandatory() {
			return false;
		}

		public void cnt_Container158_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container158_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container158_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container158_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container158)
		/// </summary>
		/// <returns>The Visible State of wt_Container158</returns>
		public bool cnt_Container158_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntRiskAssessmentRisksWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntRiskAssessmentRisksWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntRiskAssessmentRisksWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntRiskAssessmentRisksWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtRiskAssessmentRisksWrapper)
		/// </summary>
		/// <returns>The Visible State of wtRiskAssessmentRisksWrapper</returns>
		public bool cntRiskAssessmentRisksWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListRiskAssessmentRisks_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtRiskAssessmentRisks
				ssRiskAssessmentRisksList = queryResGetRiskAssessementRisksByRiskAssessment_outParamList;
				ssRiskAssessmentRisksListDoDataBind = false;
				ssRiskAssessmentRisksListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListRiskAssessmentRisks_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssRiskAssessmentRisksList.Length > 0) {
					ssRiskAssessmentRisksList.CurrentRec = ssRiskAssessmentRisksList[ssRiskAssessmentRisksList.CurrentRowNumber];
				}
				if (ssRiskAssessmentRisksList.Length > e.SelectedIndex) {
					ssRiskAssessmentRisksList.CurrentRec = ssRiskAssessmentRisksList[e.SelectedIndex];
					ssRiskAssessmentRisksList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListRiskAssessmentRisks_Store(object dataItem, int index) {
			RCRiskAssessementRisksRecord tmprec = (RCRiskAssessementRisksRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENRiskAssessementRisks.ssId == 0?(object) null: tmprec.ssENRiskAssessementRisks.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRiskAssessementRisks.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRiskAssessementRisks.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			))));
			if (index < wtRiskAssessmentRisks_storage.Count) {
				wtRiskAssessmentRisks_storage[index] = tmpFields;
			} else {
				wtRiskAssessmentRisks_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListRiskAssessmentRisks_Restore() {

			#region fetch ssRiskAssessmentRisksList.

			// Read the needed fields of ssRiskAssessmentRisksList from storewtRiskAssessmentRisks_list
			ssRiskAssessmentRisksList = new RLRiskAssessementRisksRecordList();
			ArrayList storewtRiskAssessmentRisks_list;
			storewtRiskAssessmentRisks_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtRiskAssessmentRisks_list", null);
			if (storewtRiskAssessmentRisks_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtRiskAssessmentRisks_list in storewtRiskAssessmentRisks_list) {
					if (tmpFieldswtRiskAssessmentRisks_list != null) {
						// Aux current record variable
						RCRiskAssessementRisksRecord tmpAuxCurrentRecordwtRiskAssessmentRisks_list = new RCRiskAssessementRisksRecord(null);
						tmpAuxCurrentRecordwtRiskAssessmentRisks_list.ssENRiskAssessementRisks.ssId = (int) (tmpFieldswtRiskAssessmentRisks_list[0] == null ? 0: tmpFieldswtRiskAssessmentRisks_list[0]);

						tmpAuxCurrentRecordwtRiskAssessmentRisks_list.ssENRiskAssessementRisks.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessmentRisks_list[1]);

						tmpAuxCurrentRecordwtRiskAssessmentRisks_list.ssENRiskAssessementRisks.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessmentRisks_list[2]);

						ssRiskAssessmentRisksList.Append(tmpAuxCurrentRecordwtRiskAssessmentRisks_list);
					}
				}
			}
			ssRiskAssessmentRisksList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssRiskAssessmentRisksList runtime properties state.


			if (storewtRiskAssessmentRisks_list.Count > 0) {
				ssRiskAssessmentRisksList.RestoreRecordListState(storewtRiskAssessmentRisks_list.Count - 1, false);
			} else {
				ssRiskAssessmentRisksList.CurrentRowNumber = 0;
			}

			#endregion

			wtRiskAssessmentRisks_storage = storewtRiskAssessmentRisks_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListRiskAssessmentRisks_Clear(object sender, EventArgs e) {
			wtRiskAssessmentRisks_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListRiskAssessmentRisks_Rebuild(int startIndex, int lineCount) {
			if (ssRiskAssessmentRisksList.Length != -1) {
				wtRiskAssessmentRisks_storage.Clear();
				for (int i=startIndex; i<ssRiskAssessmentRisksList.Data.Count && i<startIndex+lineCount; i++) {
					recListRiskAssessmentRisks_Store(ssRiskAssessmentRisksList.Data[i], wtRiskAssessmentRisks_storage.Count);
				}
			}
		}
		public void recListRiskAssessmentRisks_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtRiskAssessmentRisks widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRiskAssessementRisksRecordList getWtRiskAssessmentRisksList() {
			if (ssRiskAssessmentRisksListDoDataBind) {
				recListRiskAssessmentRisks_onDataBinding(this, null);
			}

			return ssRiskAssessmentRisksList;
		}
		public void cnt_Container208_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container208_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container208_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container208_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container208)
		/// </summary>
		/// <returns>The Visible State of wt_Container208</returns>
		public bool cnt_Container208_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container112_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container112_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container112_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container112_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container112)
		/// </summary>
		/// <returns>The Visible State of wt_Container112</returns>
		public bool cnt_Container112_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = q5N5qAmXJEqN6YLYeKUalQ) Expression:
		///  RiskAssessmentRisks.List.CurrentRowNumber + 1 + ") "
		/// + RiskAssessmentRisks.List.Current.RiskAssessementRisks.Risk
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression193() {
			return ((Convert.ToString((getWtRiskAssessmentRisksList().CurrentRowNumber+1)) + ") ") +getWtRiskAssessmentRisksList().CurrentRec.ssENRiskAssessementRisks.ssRisk);
		}
		public void cnt_Container84_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container84_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container84_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container84_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container84)
		/// </summary>
		/// <returns>The Visible State of wt_Container84</returns>
		public bool cnt_Container84_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link240_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link240_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeleteRiskAssessmentRisk(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link240)
		/// </summary>
		/// <returns>title of the Link (wt_Link240)</returns>
		public string
		lnk_Link240_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link240)
		/// </summary>
		/// <returns>The Visible State of wt_Link240</returns>
		public bool lnk_Link240_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link240)
		/// </summary>
		/// <returns>The Enabled State of wt_Link240</returns>
		public bool lnk_Link240_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance100_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container224_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container224_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container224_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container224_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container224)
		/// </summary>
		/// <returns>The Visible State of wt_Container224</returns>
		public bool cnt_Container224_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcAddRisk;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input57_input_value() {
			if (("" !=varLcNewRisk)) {
				return varLcNewRisk;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input57");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcNewRisk;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input57_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcNewRisk = ""; 
				} else {
					varLcNewRisk = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcNewRisk = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input57)
		/// </summary>
		/// <returns>The Visible State of wt_Input57</returns>
		public bool inputwt_Input57_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input57)
		/// </summary>
		/// <returns>The Enabled State of wt_Input57</returns>
		public bool inputwt_Input57_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input57)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input57</returns>
		public bool inputwt_Input57_isMandatory() {
			return false;
		}

		public void cnt_Container163_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container163_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container163_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container163_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container163
		/// </summary>
		public void cnt_Container163_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSaveNewRisk(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container163)
		/// </summary>
		/// <returns>The Visible State of wt_Container163</returns>
		public bool cnt_Container163_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntAddRiskLink_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntAddRiskLink_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntAddRiskLink_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntAddRiskLink_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAddRiskLink)
		/// </summary>
		/// <returns>The Visible State of wtAddRiskLink</returns>
		public bool cntAddRiskLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!varLcAddRisk);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link125_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link125_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandShowAddNewRisk(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link125)
		/// </summary>
		/// <returns>title of the Link (wt_Link125)</returns>
		public string
		lnk_Link125_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link125)
		/// </summary>
		/// <returns>The Visible State of wt_Link125</returns>
		public bool lnk_Link125_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link125)
		/// </summary>
		/// <returns>The Enabled State of wt_Link125</returns>
		public bool lnk_Link125_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntNavButtons3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntNavButtons3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntNavButtons3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntNavButtons3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNavButtons3)
		/// </summary>
		/// <returns>The Visible State of wtNavButtons3</returns>
		public bool cntNavButtons3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container139_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container139_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container139_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;position: absolute;bottom: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container139_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container139)
		/// </summary>
		/// <returns>The Visible State of wt_Container139</returns>
		public bool cnt_Container139_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container83_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container83_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container83_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container83_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container83
		/// </summary>
		public void cnt_Container83_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandPrevious(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("eJi6gCb3qkGul3Pczs28IQ")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container83)
		/// </summary>
		/// <returns>The Visible State of wt_Container83</returns>
		public bool cnt_Container83_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance217_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("nlvVHXFLPESsEhcYFgddkw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container81_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container81_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container81_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;margin-left: 0px;position: absolute;bottom: 10px;right: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container81_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container81)
		/// </summary>
		/// <returns>The Visible State of wt_Container81</returns>
		public bool cnt_Container81_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container219_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container219_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container219_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container219_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container219
		/// </summary>
		public void cnt_Container219_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandNext(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("eJi6gCb3qkGul3Pczs28IQ")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container219)
		/// </summary>
		/// <returns>The Visible State of wt_Container219</returns>
		public bool cnt_Container219_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance55_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("c7Px+LAF7UeEuqmhXvFt4w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container235_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container235_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container235_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container235_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container235)
		/// </summary>
		/// <returns>The Visible State of wt_Container235</returns>
		public bool cnt_Container235_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab4Title_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab4Title_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab4Title_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab4Title_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab4Title)
		/// </summary>
		/// <returns>The Visible State of wtTab4Title</returns>
		public bool cntTab4Title_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab4MainContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab4MainContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab4MainContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab4MainContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab4MainContent)
		/// </summary>
		/// <returns>The Visible State of wtTab4MainContent</returns>
		public bool cntTab4MainContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container120_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container120_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container120_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container120_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container120)
		/// </summary>
		/// <returns>The Visible State of wt_Container120</returns>
		public bool cnt_Container120_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input153_input_value() {
			if (("" !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input153");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input153_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory = ""; 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssHistory = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input153)
		/// </summary>
		/// <returns>The Visible State of wt_Input153</returns>
		public bool inputwt_Input153_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input153)
		/// </summary>
		/// <returns>The Enabled State of wt_Input153</returns>
		public bool inputwt_Input153_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input153)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input153</returns>
		public bool inputwt_Input153_isMandatory() {
			return false;
		}

		public void cnt_Container94_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container94_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container94_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container94_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container94)
		/// </summary>
		/// <returns>The Visible State of wt_Container94</returns>
		public bool cnt_Container94_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntRiskAssessmentManagementOfSupportSection_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntRiskAssessmentManagementOfSupportSection_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntRiskAssessmentManagementOfSupportSection_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntRiskAssessmentManagementOfSupportSection_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtRiskAssessmentManagementOfSupportSection)
		/// </summary>
		/// <returns>The Visible State of wtRiskAssessmentManagementOfSupportSection</returns>
		public bool cntRiskAssessmentManagementOfSupportSection_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListRiskAssessmentManagementOfSupport_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtRiskAssessmentManagementOfSupport
				ssRiskAssessmentManagementOfSupportList = queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList;
				ssRiskAssessmentManagementOfSupportListDoDataBind = false;
				ssRiskAssessmentManagementOfSupportListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListRiskAssessmentManagementOfSupport_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssRiskAssessmentManagementOfSupportList.Length > 0) {
					ssRiskAssessmentManagementOfSupportList.CurrentRec = ssRiskAssessmentManagementOfSupportList[ssRiskAssessmentManagementOfSupportList.CurrentRowNumber];
				}
				if (ssRiskAssessmentManagementOfSupportList.Length > e.SelectedIndex) {
					ssRiskAssessmentManagementOfSupportList.CurrentRec = ssRiskAssessmentManagementOfSupportList[e.SelectedIndex];
					ssRiskAssessmentManagementOfSupportList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListRiskAssessmentManagementOfSupport_Store(object dataItem, int index) {
			RCRiskAssessmentManagementOfSupportRecord tmprec = (RCRiskAssessmentManagementOfSupportRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENRiskAssessmentManagementOfSupport.ssId == 0?(object) null: tmprec.ssENRiskAssessmentManagementOfSupport.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRiskAssessmentManagementOfSupport.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRiskAssessmentManagementOfSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			))));
			if (index < wtRiskAssessmentManagementOfSupport_storage.Count) {
				wtRiskAssessmentManagementOfSupport_storage[index] = tmpFields;
			} else {
				wtRiskAssessmentManagementOfSupport_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListRiskAssessmentManagementOfSupport_Restore() {

			#region fetch ssRiskAssessmentManagementOfSupportList.

			// Read the needed fields of ssRiskAssessmentManagementOfSupportList from storewtRiskAssessmentManagementOfSupport_list
			ssRiskAssessmentManagementOfSupportList = new RLRiskAssessmentManagementOfSupportRecordList();
			ArrayList storewtRiskAssessmentManagementOfSupport_list;
			storewtRiskAssessmentManagementOfSupport_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtRiskAssessmentManagementOfSupport_list", null);
			if (storewtRiskAssessmentManagementOfSupport_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtRiskAssessmentManagementOfSupport_list in storewtRiskAssessmentManagementOfSupport_list) {
					if (tmpFieldswtRiskAssessmentManagementOfSupport_list != null) {
						// Aux current record variable
						RCRiskAssessmentManagementOfSupportRecord tmpAuxCurrentRecordwtRiskAssessmentManagementOfSupport_list = new RCRiskAssessmentManagementOfSupportRecord(null);
						tmpAuxCurrentRecordwtRiskAssessmentManagementOfSupport_list.ssENRiskAssessmentManagementOfSupport.ssId = (int) (tmpFieldswtRiskAssessmentManagementOfSupport_list[0] == null ? 0: tmpFieldswtRiskAssessmentManagementOfSupport_list[0]);

						tmpAuxCurrentRecordwtRiskAssessmentManagementOfSupport_list.ssENRiskAssessmentManagementOfSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessmentManagementOfSupport_list[1]);

						tmpAuxCurrentRecordwtRiskAssessmentManagementOfSupport_list.ssENRiskAssessmentManagementOfSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessmentManagementOfSupport_list[2]);

						ssRiskAssessmentManagementOfSupportList.Append(tmpAuxCurrentRecordwtRiskAssessmentManagementOfSupport_list);
					}
				}
			}
			ssRiskAssessmentManagementOfSupportList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssRiskAssessmentManagementOfSupportList runtime properties state.


			if (storewtRiskAssessmentManagementOfSupport_list.Count > 0) {
				ssRiskAssessmentManagementOfSupportList.RestoreRecordListState(storewtRiskAssessmentManagementOfSupport_list.Count - 1, false);
			} else {
				ssRiskAssessmentManagementOfSupportList.CurrentRowNumber = 0;
			}

			#endregion

			wtRiskAssessmentManagementOfSupport_storage = storewtRiskAssessmentManagementOfSupport_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListRiskAssessmentManagementOfSupport_Clear(object sender, EventArgs e) {
			wtRiskAssessmentManagementOfSupport_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListRiskAssessmentManagementOfSupport_Rebuild(int startIndex, int lineCount) {
			if (ssRiskAssessmentManagementOfSupportList.Length != -1) {
				wtRiskAssessmentManagementOfSupport_storage.Clear();
				for (int i=startIndex; i<ssRiskAssessmentManagementOfSupportList.Data.Count && i<startIndex+lineCount; i++) {
					recListRiskAssessmentManagementOfSupport_Store(ssRiskAssessmentManagementOfSupportList.Data[i], wtRiskAssessmentManagementOfSupport_storage.Count);
				}
			}
		}
		public void recListRiskAssessmentManagementOfSupport_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtRiskAssessmentManagementOfSupport widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRiskAssessmentManagementOfSupportRecordList getWtRiskAssessmentManagementOfSupportList() {
			if (ssRiskAssessmentManagementOfSupportListDoDataBind) {
				recListRiskAssessmentManagementOfSupport_onDataBinding(this, null);
			}

			return ssRiskAssessmentManagementOfSupportList;
		}
		public void cnt_Container106_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container106_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container106_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container106_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container106)
		/// </summary>
		/// <returns>The Visible State of wt_Container106</returns>
		public bool cnt_Container106_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = vYb9o_ABB0OfxsSoQ9VG0w) Expression:
		///  RiskAssessmentManagementOfSupport.List.CurrentRowNumber + 1 + ") "
		/// +
		///  RiskAssessmentManagementOfSupport.List.Current.RiskAssessmentManagementOfSupport.ManagementOfSuppor
		/// t
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression185() {
			return ((Convert.ToString((getWtRiskAssessmentManagementOfSupportList().CurrentRowNumber+1)) + ") ") +getWtRiskAssessmentManagementOfSupportList().CurrentRec.ssENRiskAssessmentManagementOfSupport.ssManagementOfSupport);
		}
		public void cnt_Container207_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container207_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container207_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container207_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container207)
		/// </summary>
		/// <returns>The Visible State of wt_Container207</returns>
		public bool cnt_Container207_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link78_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link78_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeleteManagementOfSupport(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link78)
		/// </summary>
		/// <returns>title of the Link (wt_Link78)</returns>
		public string
		lnk_Link78_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link78)
		/// </summary>
		/// <returns>The Visible State of wt_Link78</returns>
		public bool lnk_Link78_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link78)
		/// </summary>
		/// <returns>The Enabled State of wt_Link78</returns>
		public bool lnk_Link78_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance237_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container151_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container151_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container151_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container151_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container151)
		/// </summary>
		/// <returns>The Visible State of wt_Container151</returns>
		public bool cnt_Container151_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcAddManagementOfSupport;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input8_input_value() {
			if (("" !=varLcManagementOfSupportItem)) {
				return varLcManagementOfSupportItem;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input8");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcManagementOfSupportItem;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input8_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcManagementOfSupportItem = ""; 
				} else {
					varLcManagementOfSupportItem = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcManagementOfSupportItem = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input8)
		/// </summary>
		/// <returns>The Visible State of wt_Input8</returns>
		public bool inputwt_Input8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input8)
		/// </summary>
		/// <returns>The Enabled State of wt_Input8</returns>
		public bool inputwt_Input8_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input8)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input8</returns>
		public bool inputwt_Input8_isMandatory() {
			return false;
		}

		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container15_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container15_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container15
		/// </summary>
		public void cnt_Container15_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSaveManagementofSupport(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container234_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container234_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container234_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container234_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container234)
		/// </summary>
		/// <returns>The Visible State of wt_Container234</returns>
		public bool cnt_Container234_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!varLcAddManagementOfSupport);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link241_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link241_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandShowManagementOfSupport(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link241)
		/// </summary>
		/// <returns>title of the Link (wt_Link241)</returns>
		public string
		lnk_Link241_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link241)
		/// </summary>
		/// <returns>The Visible State of wt_Link241</returns>
		public bool lnk_Link241_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link241)
		/// </summary>
		/// <returns>The Enabled State of wt_Link241</returns>
		public bool lnk_Link241_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container114_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container114_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container114_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container114_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container114)
		/// </summary>
		/// <returns>The Visible State of wt_Container114</returns>
		public bool cnt_Container114_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container133_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container133_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container133_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container133_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container133)
		/// </summary>
		/// <returns>The Visible State of wt_Container133</returns>
		public bool cnt_Container133_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input162_input_value() {
			if (("" !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input162");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input162_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor = ""; 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input162)
		/// </summary>
		/// <returns>The Visible State of wt_Input162</returns>
		public bool inputwt_Input162_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input162)
		/// </summary>
		/// <returns>The Enabled State of wt_Input162</returns>
		public bool inputwt_Input162_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input162)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input162</returns>
		public bool inputwt_Input162_isMandatory() {
			return false;
		}

		public void cnt_Container72_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container72_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container72_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container72_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container72)
		/// </summary>
		/// <returns>The Visible State of wt_Container72</returns>
		public bool cnt_Container72_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container194_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container194_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container194_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container194_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container194)
		/// </summary>
		/// <returns>The Visible State of wt_Container194</returns>
		public bool cnt_Container194_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input259_input_value() {
			if (("" !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input259");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input259_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases = ""; 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input259)
		/// </summary>
		/// <returns>The Visible State of wt_Input259</returns>
		public bool inputwt_Input259_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input259)
		/// </summary>
		/// <returns>The Enabled State of wt_Input259</returns>
		public bool inputwt_Input259_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input259)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input259</returns>
		public bool inputwt_Input259_isMandatory() {
			return false;
		}

		public void cntNavButtons4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntNavButtons4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntNavButtons4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntNavButtons4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNavButtons4)
		/// </summary>
		/// <returns>The Visible State of wtNavButtons4</returns>
		public bool cntNavButtons4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;position: absolute;bottom: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container44_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container233_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container233_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container233_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container233_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container233
		/// </summary>
		public void cnt_Container233_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandPrevious(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("S7hpV6ytl0SPxsAENlFs8g")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container233)
		/// </summary>
		/// <returns>The Visible State of wt_Container233</returns>
		public bool cnt_Container233_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance69_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("nlvVHXFLPESsEhcYFgddkw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container35_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container35_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;margin-left: 0px;position: absolute;bottom: 10px;right: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container35_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container35)
		/// </summary>
		/// <returns>The Visible State of wt_Container35</returns>
		public bool cnt_Container35_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container159_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container159_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container159_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container159_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container159
		/// </summary>
		public void cnt_Container159_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandNext(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("S7hpV6ytl0SPxsAENlFs8g")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container159)
		/// </summary>
		/// <returns>The Visible State of wt_Container159</returns>
		public bool cnt_Container159_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance62_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("c7Px+LAF7UeEuqmhXvFt4w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container142_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container142_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container142_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container142_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container142)
		/// </summary>
		/// <returns>The Visible State of wt_Container142</returns>
		public bool cnt_Container142_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab5Title_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab5Title_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab5Title_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab5Title_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab5Title)
		/// </summary>
		/// <returns>The Visible State of wtTab5Title</returns>
		public bool cntTab5Title_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab5MainContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab5MainContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab5MainContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab5MainContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab5MainContent)
		/// </summary>
		/// <returns>The Visible State of wtTab5MainContent</returns>
		public bool cntTab5MainContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntExternalContactsSection_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntExternalContactsSection_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntExternalContactsSection_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntExternalContactsSection_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtExternalContactsSection)
		/// </summary>
		/// <returns>The Visible State of wtExternalContactsSection</returns>
		public bool cntExternalContactsSection_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListExternalContactRecordList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtExternalContactRecordList
				ssExternalContactRecordListList = queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList;
				ssExternalContactRecordListListDoDataBind = false;
				ssExternalContactRecordListListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListExternalContactRecordList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssExternalContactRecordListList.Length > 0) {
					ssExternalContactRecordListList.CurrentRec = ssExternalContactRecordListList[ssExternalContactRecordListList.CurrentRowNumber];
				}
				if (ssExternalContactRecordListList.Length > e.SelectedIndex) {
					ssExternalContactRecordListList.CurrentRec = ssExternalContactRecordListList[e.SelectedIndex];
					ssExternalContactRecordListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListExternalContactRecordList_Store(object dataItem, int index) {
			RCRiskAssessmentExternalContactsRecord tmprec = (RCRiskAssessmentExternalContactsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENRiskAssessmentExternalContacts.ssId == 0?(object) null: tmprec.ssENRiskAssessmentExternalContacts.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRiskAssessmentExternalContacts.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRiskAssessmentExternalContacts.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			))));
			if (index < wtExternalContactRecordList_storage.Count) {
				wtExternalContactRecordList_storage[index] = tmpFields;
			} else {
				wtExternalContactRecordList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListExternalContactRecordList_Restore() {

			#region fetch ssExternalContactRecordListList.

			// Read the needed fields of ssExternalContactRecordListList from storewtExternalContactRecordList_list
			ssExternalContactRecordListList = new RLRiskAssessmentExternalContactsRecordList();
			ArrayList storewtExternalContactRecordList_list;
			storewtExternalContactRecordList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtExternalContactRecordList_list", null);
			if (storewtExternalContactRecordList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtExternalContactRecordList_list in storewtExternalContactRecordList_list) {
					if (tmpFieldswtExternalContactRecordList_list != null) {
						// Aux current record variable
						RCRiskAssessmentExternalContactsRecord tmpAuxCurrentRecordwtExternalContactRecordList_list = new RCRiskAssessmentExternalContactsRecord(null);
						tmpAuxCurrentRecordwtExternalContactRecordList_list.ssENRiskAssessmentExternalContacts.ssId = (int) (tmpFieldswtExternalContactRecordList_list[0] == null ? 0: tmpFieldswtExternalContactRecordList_list[0]);

						tmpAuxCurrentRecordwtExternalContactRecordList_list.ssENRiskAssessmentExternalContacts.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtExternalContactRecordList_list[1]);

						tmpAuxCurrentRecordwtExternalContactRecordList_list.ssENRiskAssessmentExternalContacts.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtExternalContactRecordList_list[2]);

						ssExternalContactRecordListList.Append(tmpAuxCurrentRecordwtExternalContactRecordList_list);
					}
				}
			}
			ssExternalContactRecordListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssExternalContactRecordListList runtime properties state.


			if (storewtExternalContactRecordList_list.Count > 0) {
				ssExternalContactRecordListList.RestoreRecordListState(storewtExternalContactRecordList_list.Count - 1, false);
			} else {
				ssExternalContactRecordListList.CurrentRowNumber = 0;
			}

			#endregion

			wtExternalContactRecordList_storage = storewtExternalContactRecordList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListExternalContactRecordList_Clear(object sender, EventArgs e) {
			wtExternalContactRecordList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListExternalContactRecordList_Rebuild(int startIndex, int lineCount) {
			if (ssExternalContactRecordListList.Length != -1) {
				wtExternalContactRecordList_storage.Clear();
				for (int i=startIndex; i<ssExternalContactRecordListList.Data.Count && i<startIndex+lineCount; i++) {
					recListExternalContactRecordList_Store(ssExternalContactRecordListList.Data[i], wtExternalContactRecordList_storage.Count);
				}
			}
		}
		public void recListExternalContactRecordList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtExternalContactRecordList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRiskAssessmentExternalContactsRecordList getWtExternalContactRecordListList() {
			if (ssExternalContactRecordListListDoDataBind) {
				recListExternalContactRecordList_onDataBinding(this, null);
			}

			return ssExternalContactRecordListList;
		}
		public void cnt_Container146_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container146_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container146_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container146_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container146)
		/// </summary>
		/// <returns>The Visible State of wt_Container146</returns>
		public bool cnt_Container146_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container216_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container216_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container216_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container216_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container216)
		/// </summary>
		/// <returns>The Visible State of wt_Container216</returns>
		public bool cnt_Container216_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 9bjO6+UbPk2oph6x9s5hBw) Expression:
		///  ExternalContactRecordList.List.CurrentRowNumber + 1 + ") "
		/// + ExternalContactRecordList.List.Current.RiskAssessmentExternalContacts.ExternalContact
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression266() {
			return ((Convert.ToString((getWtExternalContactRecordListList().CurrentRowNumber+1)) + ") ") +getWtExternalContactRecordListList().CurrentRec.ssENRiskAssessmentExternalContacts.ssExternalContact);
		}
		public void cnt_Container93_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container93_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container93_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container93_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container93)
		/// </summary>
		/// <returns>The Visible State of wt_Container93</returns>
		public bool cnt_Container93_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link276_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link276_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeleteExternalContact(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link276)
		/// </summary>
		/// <returns>title of the Link (wt_Link276)</returns>
		public string
		lnk_Link276_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link276)
		/// </summary>
		/// <returns>The Visible State of wt_Link276</returns>
		public bool lnk_Link276_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link276)
		/// </summary>
		/// <returns>The Enabled State of wt_Link276</returns>
		public bool lnk_Link276_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance188_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcAddExternalContact;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input3_input_value() {
			if (("" !=varLcExternalContactItem)) {
				return varLcExternalContactItem;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input3");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcExternalContactItem;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input3_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcExternalContactItem = ""; 
				} else {
					varLcExternalContactItem = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcExternalContactItem = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input3)
		/// </summary>
		/// <returns>The Visible State of wt_Input3</returns>
		public bool inputwt_Input3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input3)
		/// </summary>
		/// <returns>The Enabled State of wt_Input3</returns>
		public bool inputwt_Input3_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input3)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input3</returns>
		public bool inputwt_Input3_isMandatory() {
			return false;
		}

		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container32_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container32_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container32
		/// </summary>
		public void cnt_Container32_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSaveExternalContact(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container275_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container275_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container275_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container275_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container275)
		/// </summary>
		/// <returns>The Visible State of wt_Container275</returns>
		public bool cnt_Container275_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!varLcAddExternalContact);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link197_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link197_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandShowExternalContacts(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link197)
		/// </summary>
		/// <returns>title of the Link (wt_Link197)</returns>
		public string
		lnk_Link197_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link197)
		/// </summary>
		/// <returns>The Visible State of wt_Link197</returns>
		public bool lnk_Link197_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link197)
		/// </summary>
		/// <returns>The Enabled State of wt_Link197</returns>
		public bool lnk_Link197_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container27_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container27_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntWhoToInformSection_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWhoToInformSection_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWhoToInformSection_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntWhoToInformSection_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWhoToInformSection)
		/// </summary>
		/// <returns>The Visible State of wtWhoToInformSection</returns>
		public bool cntWhoToInformSection_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListWhoNeedsTobeInformedRecordList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtWhoNeedsTobeInformedRecordList
				ssWhoNeedsTobeInformedRecordListList = queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList;
				ssWhoNeedsTobeInformedRecordListListDoDataBind = false;
				ssWhoNeedsTobeInformedRecordListListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListWhoNeedsTobeInformedRecordList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssWhoNeedsTobeInformedRecordListList.Length > 0) {
					ssWhoNeedsTobeInformedRecordListList.CurrentRec = ssWhoNeedsTobeInformedRecordListList[ssWhoNeedsTobeInformedRecordListList.CurrentRowNumber];
				}
				if (ssWhoNeedsTobeInformedRecordListList.Length > e.SelectedIndex) {
					ssWhoNeedsTobeInformedRecordListList.CurrentRec = ssWhoNeedsTobeInformedRecordListList[e.SelectedIndex];
					ssWhoNeedsTobeInformedRecordListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListWhoNeedsTobeInformedRecordList_Store(object dataItem, int index) {
			RCUserRiskAssessmentKeepInformedRecord tmprec = (RCUserRiskAssessmentKeepInformedRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENRiskAssessmentKeepInformed.ssId == 0?(object) null: tmprec.ssENRiskAssessmentKeepInformed.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRiskAssessmentKeepInformed.ChangedAttributes, new BitArray(new bool[] {
				true, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRiskAssessmentKeepInformed.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true
			}
			))));
			if (index < wtWhoNeedsTobeInformedRecordList_storage.Count) {
				wtWhoNeedsTobeInformedRecordList_storage[index] = tmpFields;
			} else {
				wtWhoNeedsTobeInformedRecordList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListWhoNeedsTobeInformedRecordList_Restore() {

			#region fetch ssWhoNeedsTobeInformedRecordListList.

			// Read the needed fields of ssWhoNeedsTobeInformedRecordListList from storewtWhoNeedsTobeInformedRecordList_list
			ssWhoNeedsTobeInformedRecordListList = new RLUserRiskAssessmentKeepInformedRecordList();
			ArrayList storewtWhoNeedsTobeInformedRecordList_list;
			storewtWhoNeedsTobeInformedRecordList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtWhoNeedsTobeInformedRecordList_list", null);
			if (storewtWhoNeedsTobeInformedRecordList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtWhoNeedsTobeInformedRecordList_list in storewtWhoNeedsTobeInformedRecordList_list) {
					if (tmpFieldswtWhoNeedsTobeInformedRecordList_list != null) {
						// Aux current record variable
						RCUserRiskAssessmentKeepInformedRecord tmpAuxCurrentRecordwtWhoNeedsTobeInformedRecordList_list = new RCUserRiskAssessmentKeepInformedRecord(null);
						tmpAuxCurrentRecordwtWhoNeedsTobeInformedRecordList_list.ssENRiskAssessmentKeepInformed.ssId = (int) (tmpFieldswtWhoNeedsTobeInformedRecordList_list[0] == null ? 0: tmpFieldswtWhoNeedsTobeInformedRecordList_list[0]);

						tmpAuxCurrentRecordwtWhoNeedsTobeInformedRecordList_list.ssENRiskAssessmentKeepInformed.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtWhoNeedsTobeInformedRecordList_list[1]);

						tmpAuxCurrentRecordwtWhoNeedsTobeInformedRecordList_list.ssENRiskAssessmentKeepInformed.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtWhoNeedsTobeInformedRecordList_list[2]);

						ssWhoNeedsTobeInformedRecordListList.Append(tmpAuxCurrentRecordwtWhoNeedsTobeInformedRecordList_list);
					}
				}
			}
			ssWhoNeedsTobeInformedRecordListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssWhoNeedsTobeInformedRecordListList runtime properties state.


			if (storewtWhoNeedsTobeInformedRecordList_list.Count > 0) {
				ssWhoNeedsTobeInformedRecordListList.RestoreRecordListState(storewtWhoNeedsTobeInformedRecordList_list.Count - 1, false);
			} else {
				ssWhoNeedsTobeInformedRecordListList.CurrentRowNumber = 0;
			}

			#endregion

			wtWhoNeedsTobeInformedRecordList_storage = storewtWhoNeedsTobeInformedRecordList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListWhoNeedsTobeInformedRecordList_Clear(object sender, EventArgs e) {
			wtWhoNeedsTobeInformedRecordList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListWhoNeedsTobeInformedRecordList_Rebuild(int startIndex, int lineCount) {
			if (ssWhoNeedsTobeInformedRecordListList.Length != -1) {
				wtWhoNeedsTobeInformedRecordList_storage.Clear();
				for (int i=startIndex; i<ssWhoNeedsTobeInformedRecordListList.Data.Count && i<startIndex+lineCount; i++) {
					recListWhoNeedsTobeInformedRecordList_Store(ssWhoNeedsTobeInformedRecordListList.Data[i], wtWhoNeedsTobeInformedRecordList_storage.Count);
				}
			}
		}
		public void recListWhoNeedsTobeInformedRecordList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtWhoNeedsTobeInformedRecordList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLUserRiskAssessmentKeepInformedRecordList getWtWhoNeedsTobeInformedRecordListList() {
			if (ssWhoNeedsTobeInformedRecordListListDoDataBind) {
				recListWhoNeedsTobeInformedRecordList_onDataBinding(this, null);
			}

			return ssWhoNeedsTobeInformedRecordListList;
		}
		public void cnt_Container113_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container113_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container113_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container113_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container113)
		/// </summary>
		/// <returns>The Visible State of wt_Container113</returns>
		public bool cnt_Container113_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = G1aurHW_qESUn3H4+bEHsg) Expression:
		///  WhoNeedsTobeInformedRecordList.List.CurrentRowNumber + 1 + ") "
		/// + WhoNeedsTobeInformedRecordList.List.Current.User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression199() {
			return ((Convert.ToString((getWtWhoNeedsTobeInformedRecordListList().CurrentRowNumber+1)) + ") ") +getWtWhoNeedsTobeInformedRecordListList().CurrentRec.ssENUser.ssName);
		}
		public void cnt_Container281_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container281_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container281_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container281_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container281)
		/// </summary>
		/// <returns>The Visible State of wt_Container281</returns>
		public bool cnt_Container281_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link50_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeletePersonToInform(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link50)
		/// </summary>
		/// <returns>title of the Link (wt_Link50)</returns>
		public string
		lnk_Link50_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link50)
		/// </summary>
		/// <returns>The Visible State of wt_Link50</returns>
		public bool lnk_Link50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link50)
		/// </summary>
		/// <returns>The Enabled State of wt_Link50</returns>
		public bool lnk_Link50_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance279_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container149_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container149_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container149_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container149_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container149)
		/// </summary>
		/// <returns>The Visible State of wt_Container149</returns>
		public bool cnt_Container149_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcAddPersonToInform;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox249_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				RLUser_RoleUserRoleRecordList Rt_wt_ComboBox249_reclist = queryResGetUsersWithUser_Roles_outParamList;
				Rt_wt_ComboBox249_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox249_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox249_reclist.CurrentRec.ssENUser.ssName, Convert.ToString(Rt_wt_ComboBox249_reclist.CurrentRec.ssENUser.ssId)));
						if (varLcPersonToInformItem == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox249_reclist.CurrentRec.ssENUser.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox249_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox249_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox249_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox249.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcPersonToInformItem = 0;
			}
			else {
				Rt_wt_ComboBox249.SpecialListVal = "";
				try {
					varLcPersonToInformItem = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox249)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox249</returns>
		public bool sel_ComboBox249_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox249)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox249</returns>
		public bool sel_ComboBox249_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox249)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox249</returns>
		public bool sel_ComboBox249_isMandatory() {
			return false;
		}

		public void cnt_Container140_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container140_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container140_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container140_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container140
		/// </summary>
		public void cnt_Container140_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSavePersonToInform(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container140)
		/// </summary>
		/// <returns>The Visible State of wt_Container140</returns>
		public bool cnt_Container140_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container262_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container262_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container262_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container262_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container262)
		/// </summary>
		/// <returns>The Visible State of wt_Container262</returns>
		public bool cnt_Container262_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!varLcAddPersonToInform);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link203_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link203_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandShowPersonToInform(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link203)
		/// </summary>
		/// <returns>title of the Link (wt_Link203)</returns>
		public string
		lnk_Link203_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link203)
		/// </summary>
		/// <returns>The Visible State of wt_Link203</returns>
		public bool lnk_Link203_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link203)
		/// </summary>
		/// <returns>The Enabled State of wt_Link203</returns>
		public bool lnk_Link203_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntNavButtons5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntNavButtons5_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntNavButtons5_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntNavButtons5_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNavButtons5)
		/// </summary>
		/// <returns>The Visible State of wtNavButtons5</returns>
		public bool cntNavButtons5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container182_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container182_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container182_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;position: absolute;bottom:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container182_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container182)
		/// </summary>
		/// <returns>The Visible State of wt_Container182</returns>
		public bool cnt_Container182_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container73_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container73_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container73_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container73_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container73
		/// </summary>
		public void cnt_Container73_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandPrevious(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("HW7xHQFW7ke5H0OO5Oi_pQ")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container73)
		/// </summary>
		/// <returns>The Visible State of wt_Container73</returns>
		public bool cnt_Container73_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance286_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("nlvVHXFLPESsEhcYFgddkw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container61_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;margin-left: 0px;position: absolute;bottom: 10px;right: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container61_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container270_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container270_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container270_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container270_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container270
		/// </summary>
		public void cnt_Container270_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandNext(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("HW7xHQFW7ke5H0OO5Oi_pQ")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container270)
		/// </summary>
		/// <returns>The Visible State of wt_Container270</returns>
		public bool cnt_Container270_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("c7Px+LAF7UeEuqmhXvFt4w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container186_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container186_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container186_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "position:relative;padding:10px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container186_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container186)
		/// </summary>
		/// <returns>The Visible State of wt_Container186</returns>
		public bool cnt_Container186_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab6Title_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab6Title_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab6Title_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab6Title_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab6Title)
		/// </summary>
		/// <returns>The Visible State of wtTab6Title</returns>
		public bool cntTab6Title_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntTab6MainContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTab6MainContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTab6MainContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntTab6MainContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTab6MainContent)
		/// </summary>
		/// <returns>The Visible State of wtTab6MainContent</returns>
		public bool cntTab6MainContent_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell171_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell171_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell171_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container145_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container145_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container145_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container145_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container145)
		/// </summary>
		/// <returns>The Visible State of wt_Container145</returns>
		public bool cnt_Container145_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container156_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container156_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container156_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container156_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container156)
		/// </summary>
		/// <returns>The Visible State of wt_Container156</returns>
		public bool cnt_Container156_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container136_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container136_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container136_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container136_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container136)
		/// </summary>
		/// <returns>The Visible State of wt_Container136</returns>
		public bool cnt_Container136_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtAutumnReviewDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtAutumnReviewDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate)) {
						return "";
					}
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtAutumnReviewDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtAutumnReviewDate)
		/// </summary>
		/// <returns>The Visible State of wtAutumnReviewDate</returns>
		public bool inputwtAutumnReviewDate_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutumnReviewDate)
		/// </summary>
		/// <returns>The Enabled State of wtAutumnReviewDate</returns>
		public bool inputwtAutumnReviewDate_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtAutumnReviewDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtAutumnReviewDate</returns>
		public bool inputwtAutumnReviewDate_isMandatory() {
			return false;
		}

		public void RichWidgets_webBlck_WebBlockInstance127_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
				widget.inParamInputWidgetId = this.FindControl("wtAutumnReviewDate").ClientID;
				widget.inParamMinYear = -1;
				widget.inParamMaxYear = -1;
				widget.inParamAlign = "Bl";
				widget.inParamSingleClick = true;
				widget.inParamShowWeekNumbers = false;
				widget.inParamUpdateOnCloseOnly = false;
				widget.inParamShowOthers = false;
				widget.inParamFirstDay = 0;
				widget.inParamShowTime = false;
				widget.inParamShow24HourFormat = true;
				widget.inParamReuseCalendarObject = false;
				widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
				widget.inParamDateFormat = "";
				widget.inParamSpecialDays = "";
				widget.inParamOnUpdate = "";
				widget.inParamFlatStyle = false;
				widget.inParamButtonWidgetId = "";
				widget.inParamYearStep = 2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtSpringReviewDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtSpringReviewDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate)) {
						return "";
					}
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtSpringReviewDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtSpringReviewDate)
		/// </summary>
		/// <returns>The Visible State of wtSpringReviewDate</returns>
		public bool inputwtSpringReviewDate_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSpringReviewDate)
		/// </summary>
		/// <returns>The Enabled State of wtSpringReviewDate</returns>
		public bool inputwtSpringReviewDate_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtSpringReviewDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtSpringReviewDate</returns>
		public bool inputwtSpringReviewDate_isMandatory() {
			return false;
		}

		public void RichWidgets_webBlck_WebBlockInstance138_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
				widget.inParamInputWidgetId = this.FindControl("wtSpringReviewDate").ClientID;
				widget.inParamMinYear = -1;
				widget.inParamMaxYear = -1;
				widget.inParamAlign = "Bl";
				widget.inParamSingleClick = true;
				widget.inParamShowWeekNumbers = false;
				widget.inParamUpdateOnCloseOnly = false;
				widget.inParamShowOthers = false;
				widget.inParamFirstDay = 0;
				widget.inParamShowTime = false;
				widget.inParamShow24HourFormat = true;
				widget.inParamReuseCalendarObject = false;
				widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
				widget.inParamDateFormat = "";
				widget.inParamSpecialDays = "";
				widget.inParamOnUpdate = "";
				widget.inParamFlatStyle = false;
				widget.inParamButtonWidgetId = "";
				widget.inParamYearStep = 2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtSummerReviewDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate)) {
				return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtSummerReviewDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate)) {
						return "";
					}
					return queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtSummerReviewDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				queryResGetRiskAssessmentById_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtSummerReviewDate)
		/// </summary>
		/// <returns>The Visible State of wtSummerReviewDate</returns>
		public bool inputwtSummerReviewDate_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSummerReviewDate)
		/// </summary>
		/// <returns>The Enabled State of wtSummerReviewDate</returns>
		public bool inputwtSummerReviewDate_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtSummerReviewDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtSummerReviewDate</returns>
		public bool inputwtSummerReviewDate_isMandatory() {
			return false;
		}

		public void RichWidgets_webBlck_WebBlockInstance29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
				widget.inParamInputWidgetId = this.FindControl("wtSummerReviewDate").ClientID;
				widget.inParamMinYear = -1;
				widget.inParamMaxYear = -1;
				widget.inParamAlign = "Bl";
				widget.inParamSingleClick = true;
				widget.inParamShowWeekNumbers = false;
				widget.inParamUpdateOnCloseOnly = false;
				widget.inParamShowOthers = false;
				widget.inParamFirstDay = 0;
				widget.inParamShowTime = false;
				widget.inParamShow24HourFormat = true;
				widget.inParamReuseCalendarObject = false;
				widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
				widget.inParamDateFormat = "";
				widget.inParamSpecialDays = "";
				widget.inParamOnUpdate = "";
				widget.inParamFlatStyle = false;
				widget.inParamButtonWidgetId = "";
				widget.inParamYearStep = 2;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntNavButtons6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntNavButtons6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntNavButtons6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntNavButtons6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtNavButtons6)
		/// </summary>
		/// <returns>The Visible State of wtNavButtons6</returns>
		public bool cntNavButtons6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container225_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container225_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container225_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;position: absolute;bottom: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container225_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container225)
		/// </summary>
		/// <returns>The Visible State of wt_Container225</returns>
		public bool cnt_Container225_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container148_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container148_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container148_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container148_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container148
		/// </summary>
		public void cnt_Container148_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandPrevious(heContext
				, ENTabsEntity.GetRecordByKey(ObjectKey.Parse("dMF9PjLsLkuXJfDGk7dH+g")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container148)
		/// </summary>
		/// <returns>The Visible State of wt_Container148</returns>
		public bool cnt_Container148_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance200_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("nlvVHXFLPESsEhcYFgddkw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container230_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container230_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container230_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "width: 50%;margin-left: 0px;position: absolute;bottom: 10px;right: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container230_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container230)
		/// </summary>
		/// <returns>The Visible State of wt_Container230</returns>
		public bool cnt_Container230_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container227_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container227_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container227_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container227_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container227
		/// </summary>
		public void cnt_Container227_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSaveRiskAssessment(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container227)
		/// </summary>
		/// <returns>The Visible State of wt_Container227</returns>
		public bool cnt_Container227_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("KWHNbVoiY0i7rCt0vNrlbA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandPrint {
		}
		public static class FuncCommandShowManagementOfSupport {
		}
		public static class FuncCommandNext {
		}
		public static class FuncCommandShowExternalContacts {
		}
		public static class FuncCommandPrevious {
		}
		public static class FuncCommandDeleteExternalContact {
		}
		public static class FuncCommandSaveRiskAssessment {

			private static void datasetGetRiskAssessmentsWithOrWithoutStudentsReadDB(ref RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRiskAssessment.Read(r, ref index);
				rec.ssENRiskAssessmentSourceOfEvidence.Read(r, ref index);
				rec.ssENRiskAssessmentSSPReason.Read(r, ref index);
				rec.ssENRiskAssessmentWhoIsAtRisk.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRiskAssessmentsWithOrWithoutStudents" of Action "SaveRiskAssessment"
			/// </summary>
			public static RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList datasetGetRiskAssessmentsWithOrWithoutStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, ENStudent.[STUDENTREFERENCE] o35, ENStudent.[FORENAMES] o36, ENStudent.[SURNAME] o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60, NULL o61");
				fromBuilder.Append(" FROM (((({RiskAssessment} ENRiskAssessment Left JOIN {RiskAssessmentSSPReason} ENRiskAssessmentSSPReason ON (ENRiskAssessment.[RISKASSESSMENTSSPREASON] = ENRiskAssessmentSSPReason.[ID]))  Left JOIN {RiskAssessmentSourceOfEvidence} ENRiskAssessmentSourceOfEvidence ON (ENRiskAssessment.[RISKASSESSMENTSOURCEOFEVIDEN] = ENRiskAssessmentSourceOfEvidence.[ID]))  Left JOIN {RiskAssessmentWhoIsAtRisk} ENRiskAssessmentWhoIsAtRisk ON (ENRiskAssessment.[RISKASSESSMENTWHOISATRISK] = ENRiskAssessmentWhoIsAtRisk.[ID]))  Left JOIN {Student} ENStudent ON (ENRiskAssessment.[STUDENTREFERENCE] = ENStudent.[STUDENTREFERENCE])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessment.[ID] = @qpinP) AND (ENRiskAssessment.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessment.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList outParamList = new RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentsWithOrWithoutStudentsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[5];
				opt[0] = new BitArray(new bool[] {
					false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, true, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList _tmp = new RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsWithOrWithoutStudentsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentsWithOrWithoutStudents.List");
						outParamList = (RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentsWithOrWithoutStudents.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList _tmp = new RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsWithOrWithoutStudentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentsWithOrWithoutStudents.List");
							outParamList = (RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentsWithOrWithoutStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetRiskAssessmentKeepInformedsByRiskAssessment2ReadDB(ref RCUserRiskAssessmentKeepInformedRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRiskAssessmentKeepInformed.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRiskAssessmentKeepInformedsByRiskAssessment2" of Action "SaveRiskAssessment"
			/// </summary>
			public static RLUserRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentKeepInformedsByRiskAssessment2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, ENUser.[USERNAME] o6, NULL o7, ENUser.[EMAIL] o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13");
				fromBuilder.Append(" FROM ({RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed Left JOIN {User} ENUser ON (ENRiskAssessmentKeepInformed.[USER] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRiskAssessmentKeepInformedRecordList outParamList = new RLUserRiskAssessmentKeepInformedRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessment2ReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, true, false, true, false, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRiskAssessmentKeepInformedRecordList _tmp = new RLUserRiskAssessmentKeepInformedRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessment2ReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment2.List");
						outParamList = (RLUserRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRiskAssessmentKeepInformedRecordList _tmp = new RLUserRiskAssessmentKeepInformedRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessment2ReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment2.List");
							outParamList = (RLUserRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.SaveRiskAssessment.GetRiskAssessmentKeepInformedsByRiskAssessment2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandSaveNewRisk {
		}
		public static class FuncCommandShowAddNewRisk {
		}
		public static class FuncCommandOnHasCapacityChange {
		}
		public static class FuncCommandSavePersonToInform {
		}
		public static class FuncCommandDeletePersonToInform {
		}
		public static class FuncCommandShowPersonToInform {
		}
		public static class FuncCommandSaveExternalContact {
		}
		public static class FuncCommandDeleteManagementOfSupport {
		}
		public static class FuncCommandSaveManagementofSupport {
		}
		public static class FuncCommandRefreshTab {
		}
		public static class FuncCommandDeleteRiskAssessmentRisk {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetRiskAssessementRisksByRiskAssessment" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessementRisksRecordList datasetGetRiskAssessementRisksByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {RiskAssessmentRisks}
				// Refresh Query N0Y9pK1uEEOeT3dn2Ikg1Q Iterations: Multiple {RiskAssessmentRisks}
				// Refresh Query GRAjWzy4nEue4ugUEiNtjg Iterations: Multiple {RiskAssessmentRisks}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessementRisks.[ID] o1, NULL o2, ENRiskAssessementRisks.[RISK] o3");
				fromBuilder.Append(" FROM {RiskAssessementRisks} ENRiskAssessementRisks");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessementRisks.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessementRisks.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessementRisks.[RISKASSESSMENT] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENRiskAssessementRisks.[RISK] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessementRisksRecordList outParamList = new RLRiskAssessementRisksRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessementRisksRecordList _tmp = new RLRiskAssessementRisksRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
						outParamList = (RLRiskAssessementRisksRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessementRisksRecordList _tmp = new RLRiskAssessementRisksRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
							outParamList = (RLRiskAssessementRisksRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentManagementOfSupportsByRiskAssessm" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentManagementOfSupportRecordList datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {RiskAssessmentManagementOfSupport}
				// Refresh Query VclwdmXUmkCAB9o72BmFWQ Iterations: Multiple {RiskAssessmentManagementOfSupport}
				// Refresh Query 8IhYE4Eq+kGCo5XckV6uMg Iterations: Multiple {RiskAssessmentManagementOfSupport}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessmentManagementOfSupport.[ID] o1, NULL o2, ENRiskAssessmentManagementOfSupport.[MANAGEMENTOFSUPPORT] o3");
				fromBuilder.Append(" FROM {RiskAssessmentManagementOfSupport} ENRiskAssessmentManagementOfSupport");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentManagementOfSupportRecordList outParamList = new RLRiskAssessmentManagementOfSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentManagementOfSupportRecordList _tmp = new RLRiskAssessmentManagementOfSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
						outParamList = (RLRiskAssessmentManagementOfSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentManagementOfSupportRecordList _tmp = new RLRiskAssessmentManagementOfSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
							outParamList = (RLRiskAssessmentManagementOfSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetUsersWithUser_RolesReadDB(ref RCUser_RoleUserRoleRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRole.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
				rec.ssENUser_Role.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetUsersWithUser_Roles" of Action "Preparation"
			/// </summary>
			public static RLUser_RoleUserRoleRecordList datasetGetUsersWithUser_Roles(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, ENUser.[ID] o8, ENUser.[NAME] o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20");
				fromBuilder.Append(" FROM (({User} ENUser Inner JOIN {User_Role} ENUser_Role ON (ENUser.[ID] = ENUser_Role.[USER_ID]))  Inner JOIN {Role} ENRole ON (ENUser_Role.[ROLE_ID] = ENRole.[ID])) ");
				whereBuilder.Append(" WHERE (ENUser.[IS_ACTIVE] = 1) AND (ENRole.[NAME] = N'CaseConferencingUser') AND (ENRole.[IS_ACTIVE] = 1)");
				orderByBuilder.Append(" ORDER BY ENUser.[NAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUser_RoleUserRoleRecordList outParamList = new RLUser_RoleUserRoleRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetUsersWithUser_RolesReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, false, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUser_RoleUserRoleRecordList _tmp = new RLUser_RoleUserRoleRecordList();
					_tmp.AlternateReadDBMethod = datasetGetUsersWithUser_RolesReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetUsersWithUser_Roles.List");
						outParamList = (RLUser_RoleUserRoleRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetUsersWithUser_Roles.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUser_RoleUserRoleRecordList _tmp = new RLUser_RoleUserRoleRecordList();
						_tmp.AlternateReadDBMethod = datasetGetUsersWithUser_RolesReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetUsersWithUser_Roles.List");
							outParamList = (RLUser_RoleUserRoleRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetUsersWithUser_Roles.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentById" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentRecordList datasetGetRiskAssessmentById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessment.[ID] o1, NULL o2, NULL o3, ENRiskAssessment.[RISKASSESSMENTSSPREASON] o4, ENRiskAssessment.[RISKASSESSMENTSSPREASONOTHER] o5, ENRiskAssessment.[RISKASSESSMENTCOMPLETEDBY] o6, ENRiskAssessment.[RISKASSESSMENTSOURCEOFEVIDEN] o7, ENRiskAssessment.[RISKASSESSMENTSOEOTHER] o8, ENRiskAssessment.[HASCAPACITY] o9, ENRiskAssessment.[HASCAPACITYEVIDENCE] o10, ENRiskAssessment.[RISKASSESSMENTWHOISATRISK] o11, ENRiskAssessment.[RISKASSESSMENTWATOTHER] o12, NULL o13, ENRiskAssessment.[HISTORY] o14, ENRiskAssessment.[MONITOR] o15, ENRiskAssessment.[WHATHAPPENSRISKINCREASES] o16, ENRiskAssessment.[AUTUMNREVIEWDATE] o17, ENRiskAssessment.[SPRINGREVIEWDATE] o18, ENRiskAssessment.[SUMMERREVIEWDATE] o19, NULL o20, NULL o21, NULL o22");
				fromBuilder.Append(" FROM {RiskAssessment} ENRiskAssessment");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessment.[ID] = @qpinP) AND (ENRiskAssessment.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessment.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENRiskAssessment.[LEADSTAFFMEMBER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentRecordList outParamList = new RLRiskAssessmentRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentRecordList _tmp = new RLRiskAssessmentRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentById.List");
						outParamList = (RLRiskAssessmentRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentRecordList _tmp = new RLRiskAssessmentRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentById.List");
							outParamList = (RLRiskAssessmentRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB(ref RCUserRiskAssessmentKeepInformedRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRiskAssessmentKeepInformed.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRiskAssessmentKeepInformedsByRiskAssessment" of Action "Preparation"
			/// </summary>
			public static RLUserRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentKeepInformedsByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {WhoNeedsTobeInformedRecordList}
				// Refresh Query pDaZE2xV9UupvR09Gldu9g Iterations: Multiple {WhoNeedsTobeInformedRecordList}
				// Refresh Query R1N0mGW7DkOQNBez33ct_A Iterations: Multiple {WhoNeedsTobeInformedRecordList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessmentKeepInformed.[ID] o1, NULL o2, NULL o3, NULL o4, ENUser.[NAME] o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13");
				fromBuilder.Append(" FROM ({RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed Left JOIN {User} ENUser ON (ENRiskAssessmentKeepInformed.[USER] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRiskAssessmentKeepInformedRecordList outParamList = new RLUserRiskAssessmentKeepInformedRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRiskAssessmentKeepInformedRecordList _tmp = new RLUserRiskAssessmentKeepInformedRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList = (RLUserRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRiskAssessmentKeepInformedRecordList _tmp = new RLUserRiskAssessmentKeepInformedRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList = (RLUserRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentExternalContactsByRiskAssessment" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentExternalContactsRecordList datasetGetRiskAssessmentExternalContactsByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {ExternalContactRecordList}
				// Refresh Query M6cvED5U7UOD2CA+pt3Cgg Iterations: Multiple {ExternalContactRecordList}
				// Refresh Query MXhTcg3XNUqHMUb6ZQG_oA Iterations: Multiple {ExternalContactRecordList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessmentExternalContacts.[ID] o1, NULL o2, ENRiskAssessmentExternalContacts.[EXTERNALCONTACT] o3");
				fromBuilder.Append(" FROM {RiskAssessmentExternalContacts} ENRiskAssessmentExternalContacts");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentExternalContacts.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentExternalContacts.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentExternalContacts.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentExternalContactsRecordList outParamList = new RLRiskAssessmentExternalContactsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentExternalContactsRecordList _tmp = new RLRiskAssessmentExternalContactsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
						outParamList = (RLRiskAssessmentExternalContactsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentExternalContactsRecordList _tmp = new RLRiskAssessmentExternalContactsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
							outParamList = (RLRiskAssessmentExternalContactsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_RiskAssessment.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wt_Text90") {
				return ThemeProvider_wtTabSection.wtTab1.FindControl("wt_Text90");
			}
			if (id == "wt_Text77") {
				return ThemeProvider_wtTabSection.wtTab2.FindControl("wt_Text77");
			}
			if (id == "wt_Text21") {
				return ThemeProvider_wtTabSection.wtTab3.FindControl("wt_Text21");
			}
			if (id == "wt_Text202") {
				return ThemeProvider_wtTabSection.wtTab4.FindControl("wt_Text202");
			}
			if (id == "wt_Text273") {
				return ThemeProvider_wtTabSection.wtTab5.FindControl("wt_Text273");
			}
			if (id == "wt_Text37") {
				return ThemeProvider_wtTabSection.wtTab6.FindControl("wt_Text37");
			}
			if (id == "wt_Container196") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container196");
			}
			if (id == "wtTab1Title2") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wtTab1Title2");
			}
			if (id == "wt_Container110") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container110");
			}
			if (id == "wt_Text167") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Text167");
			}
			if (id == "wt_Container152") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container152");
			}
			if (id == "wt_Link209") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Link209");
			}
			if (id == "wt_Container97") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container97");
			}
			if (id == "RichWidgets_wt_WebBlockInstance119") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("RichWidgets_wt_WebBlockInstance119");
			}
			if (id == "wt_Text51") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Text51");
			}
			if (id == "wtTab1MainContent") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wtTab1MainContent");
			}
			if (id == "wt_Table180") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Table180");
			}
			if (id == "wt_TableRow1") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableRow1");
			}
			if (id == "wt_TableCell201") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableCell201");
			}
			if (id == "wt_Text96") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Text96");
			}
			if (id == "wt_TableCell11") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableCell11");
			}
			if (id == "wtStudentSupport_PlanDropDownReason") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wtStudentSupport_PlanDropDownReason");
			}
			if (id == "wt_TableRow33") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableRow33");
			}
			if (id == "wt_TableCell79") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableCell79");
			}
			if (id == "wt_Container255") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container255");
			}
			if (id == "wt_Text126") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Text126");
			}
			if (id == "wt_TableCell239") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableCell239");
			}
			if (id == "wt_Input105") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Input105");
			}
			if (id == "wt_TableRow166") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableRow166");
			}
			if (id == "wt_TableCell18") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableCell18");
			}
			if (id == "wt_Container198") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container198");
			}
			if (id == "wt_Text143") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Text143");
			}
			if (id == "wt_TableCell12") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_TableCell12");
			}
			if (id == "wt_Container283") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container283");
			}
			if (id == "wt_ComboBox195") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_ComboBox195");
			}
			if (id == "wtNavButtons1") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wtNavButtons1");
			}
			if (id == "wt_Container6") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container6");
			}
			if (id == "wt_Container268") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container268");
			}
			if (id == "wt_Container248") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Container248");
			}
			if (id == "RichWidgets_wt_WebBlockInstance164") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("RichWidgets_wt_WebBlockInstance164");
			}
			if (id == "wt_Text211") {
				return ThemeProvider_wtTabSection.wtContent1.FindControl("wt_Text211");
			}
			if (id == "wt_Container118") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container118");
			}
			if (id == "wtTab2Title") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wtTab2Title");
			}
			if (id == "wt_Text66") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Text66");
			}
			if (id == "wtTab2MainContent") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wtTab2MainContent");
			}
			if (id == "wt_Table189") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Table189");
			}
			if (id == "wt_TableRow223") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableRow223");
			}
			if (id == "wt_TableCell267") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell267");
			}
			if (id == "wt_Text175") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Text175");
			}
			if (id == "wt_TableCell132") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell132");
			}
			if (id == "wt_ComboBox128") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_ComboBox128");
			}
			if (id == "wt_TableRow172") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableRow172");
			}
			if (id == "wt_TableCell169") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell169");
			}
			if (id == "wt_Container16") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container16");
			}
			if (id == "wt_Text108") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Text108");
			}
			if (id == "wt_TableCell116") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell116");
			}
			if (id == "wt_Container80") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container80");
			}
			if (id == "wt_Input137") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Input137");
			}
			if (id == "wt_TableRow74") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableRow74");
			}
			if (id == "wt_TableCell104") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell104");
			}
			if (id == "wt_Container28") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container28");
			}
			if (id == "wt_Text122") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Text122");
			}
			if (id == "wt_TableCell4") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell4");
			}
			if (id == "wt_Container14") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container14");
			}
			if (id == "wtComboHasCapacity") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wtComboHasCapacity");
			}
			if (id == "wt_TableRow141") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableRow141");
			}
			if (id == "wt_TableCell205") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell205");
			}
			if (id == "wt_Container168") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container168");
			}
			if (id == "wt_Text85") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Text85");
			}
			if (id == "wt_TableCell134") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_TableCell134");
			}
			if (id == "wt_Container269") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container269");
			}
			if (id == "wt_Input218") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Input218");
			}
			if (id == "wtNavButtons2") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wtNavButtons2");
			}
			if (id == "wt_Container252") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container252");
			}
			if (id == "wt_Container41") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container41");
			}
			if (id == "RichWidgets_wt_WebBlockInstance109") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("RichWidgets_wt_WebBlockInstance109");
			}
			if (id == "wt_Text82") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Text82");
			}
			if (id == "wt_Container117") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container117");
			}
			if (id == "wt_Container154") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Container154");
			}
			if (id == "RichWidgets_wt_WebBlockInstance65") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("RichWidgets_wt_WebBlockInstance65");
			}
			if (id == "wt_Text222") {
				return ThemeProvider_wtTabSection.wtContent2.FindControl("wt_Text222");
			}
			if (id == "wt_Container215") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container215");
			}
			if (id == "wtTab3Title") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wtTab3Title");
			}
			if (id == "wt_Text38") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text38");
			}
			if (id == "wtTab3MainContent") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wtTab3MainContent");
			}
			if (id == "wt_Table49") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Table49");
			}
			if (id == "wt_TableRow36") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableRow36");
			}
			if (id == "wt_TableCell184") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableCell184");
			}
			if (id == "wt_Text231") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text231");
			}
			if (id == "wt_TableCell256") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableCell256");
			}
			if (id == "wt_ComboBox210") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_ComboBox210");
			}
			if (id == "wt_TableRow24") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableRow24");
			}
			if (id == "wt_TableCell5") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableCell5");
			}
			if (id == "wt_Container257") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container257");
			}
			if (id == "wt_Text244") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text244");
			}
			if (id == "wt_TableCell206") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableCell206");
			}
			if (id == "wt_Container7") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container7");
			}
			if (id == "wt_Input70") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Input70");
			}
			if (id == "wt_TableRow155") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableRow155");
			}
			if (id == "wt_TableCell243") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableCell243");
			}
			if (id == "wt_Container158") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container158");
			}
			if (id == "wt_Text60") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text60");
			}
			if (id == "wt_TableCell284") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_TableCell284");
			}
			if (id == "wtRiskAssessmentRisksWrapper") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wtRiskAssessmentRisksWrapper");
			}
			if (id == "wtRiskAssessmentRisks") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wtRiskAssessmentRisks");
			}
			if (id == "wt_Container224") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container224");
			}
			if (id == "wt_Input57") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Input57");
			}
			if (id == "wt_Container163") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container163");
			}
			if (id == "wt_Text204") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text204");
			}
			if (id == "wtAddRiskLink") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wtAddRiskLink");
			}
			if (id == "wt_Link125") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Link125");
			}
			if (id == "wt_Text253") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text253");
			}
			if (id == "wtNavButtons3") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wtNavButtons3");
			}
			if (id == "wt_Container139") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container139");
			}
			if (id == "wt_Container83") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container83");
			}
			if (id == "RichWidgets_wt_WebBlockInstance217") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("RichWidgets_wt_WebBlockInstance217");
			}
			if (id == "wt_Text99") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text99");
			}
			if (id == "wt_Container81") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container81");
			}
			if (id == "wt_Container219") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Container219");
			}
			if (id == "RichWidgets_wt_WebBlockInstance55") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("RichWidgets_wt_WebBlockInstance55");
			}
			if (id == "wt_Text245") {
				return ThemeProvider_wtTabSection.wtContent3.FindControl("wt_Text245");
			}
			if (id == "wt_Container235") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container235");
			}
			if (id == "wtTab4Title") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wtTab4Title");
			}
			if (id == "wt_Text264") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text264");
			}
			if (id == "wtTab4MainContent") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wtTab4MainContent");
			}
			if (id == "wt_Table67") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Table67");
			}
			if (id == "wt_TableRow261") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableRow261");
			}
			if (id == "wt_TableCell98") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell98");
			}
			if (id == "wt_Text46") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text46");
			}
			if (id == "wt_Container120") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container120");
			}
			if (id == "wt_Input153") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Input153");
			}
			if (id == "wt_TableCell177") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell177");
			}
			if (id == "wt_Container94") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container94");
			}
			if (id == "wt_Text9") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text9");
			}
			if (id == "wtRiskAssessmentManagementOfSupportSection") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wtRiskAssessmentManagementOfSupportSection");
			}
			if (id == "wtRiskAssessmentManagementOfSupport") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wtRiskAssessmentManagementOfSupport");
			}
			if (id == "wt_Container151") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container151");
			}
			if (id == "wt_Input8") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Input8");
			}
			if (id == "wt_Container15") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container15");
			}
			if (id == "wt_Text54") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text54");
			}
			if (id == "wt_Container234") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container234");
			}
			if (id == "wt_Link241") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Link241");
			}
			if (id == "wt_Text288") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text288");
			}
			if (id == "wt_TableRow52") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableRow52");
			}
			if (id == "wt_TableCell170") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell170");
			}
			if (id == "wt_Container114") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container114");
			}
			if (id == "wt_Text87") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text87");
			}
			if (id == "wt_Container133") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container133");
			}
			if (id == "wt_Input162") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Input162");
			}
			if (id == "wt_TableCell123") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell123");
			}
			if (id == "wt_Container72") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container72");
			}
			if (id == "wt_Text282") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text282");
			}
			if (id == "wt_Container194") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container194");
			}
			if (id == "wt_Input259") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Input259");
			}
			if (id == "wt_TableRow258") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableRow258");
			}
			if (id == "wt_TableCell144") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell144");
			}
			if (id == "wt_TableCell121") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell121");
			}
			if (id == "wt_TableRow26") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableRow26");
			}
			if (id == "wt_TableCell226") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell226");
			}
			if (id == "wt_TableCell232") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_TableCell232");
			}
			if (id == "wtNavButtons4") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wtNavButtons4");
			}
			if (id == "wt_Container44") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container44");
			}
			if (id == "wt_Container233") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container233");
			}
			if (id == "RichWidgets_wt_WebBlockInstance69") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("RichWidgets_wt_WebBlockInstance69");
			}
			if (id == "wt_Text229") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text229");
			}
			if (id == "wt_Container35") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container35");
			}
			if (id == "wt_Container159") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Container159");
			}
			if (id == "RichWidgets_wt_WebBlockInstance62") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("RichWidgets_wt_WebBlockInstance62");
			}
			if (id == "wt_Text102") {
				return ThemeProvider_wtTabSection.wtContent4.FindControl("wt_Text102");
			}
			if (id == "wt_Container142") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container142");
			}
			if (id == "wtTab5Title") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wtTab5Title");
			}
			if (id == "wt_Text254") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text254");
			}
			if (id == "wtTab5MainContent") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wtTab5MainContent");
			}
			if (id == "wt_Table165") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Table165");
			}
			if (id == "wt_TableRow161") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableRow161");
			}
			if (id == "wt_TableCell68") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell68");
			}
			if (id == "wt_Text131") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text131");
			}
			if (id == "wt_TableCell173") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell173");
			}
			if (id == "wtExternalContactsSection") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wtExternalContactsSection");
			}
			if (id == "wtExternalContactRecordList") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wtExternalContactRecordList");
			}
			if (id == "wt_Container23") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container23");
			}
			if (id == "wt_Input3") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Input3");
			}
			if (id == "wt_Container32") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container32");
			}
			if (id == "wt_Text88") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text88");
			}
			if (id == "wt_Container275") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container275");
			}
			if (id == "wt_Link197") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Link197");
			}
			if (id == "wt_Text39") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text39");
			}
			if (id == "wt_TableRow272") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableRow272");
			}
			if (id == "wt_TableCell58") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell58");
			}
			if (id == "wt_Container27") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container27");
			}
			if (id == "wt_Text260") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text260");
			}
			if (id == "wt_TableCell285") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell285");
			}
			if (id == "wtWhoToInformSection") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wtWhoToInformSection");
			}
			if (id == "wtWhoNeedsTobeInformedRecordList") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wtWhoNeedsTobeInformedRecordList");
			}
			if (id == "wt_Container149") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container149");
			}
			if (id == "wt_ComboBox249") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_ComboBox249");
			}
			if (id == "wt_Container140") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container140");
			}
			if (id == "wt_Text59") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text59");
			}
			if (id == "wt_Container262") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container262");
			}
			if (id == "wt_Link203") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Link203");
			}
			if (id == "wt_Text135") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text135");
			}
			if (id == "wt_TableRow178") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableRow178");
			}
			if (id == "wt_TableCell107") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell107");
			}
			if (id == "wt_TableCell271") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell271");
			}
			if (id == "wt_TableRow20") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableRow20");
			}
			if (id == "wt_TableCell157") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell157");
			}
			if (id == "wt_TableCell221") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_TableCell221");
			}
			if (id == "wtNavButtons5") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wtNavButtons5");
			}
			if (id == "wt_Container182") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container182");
			}
			if (id == "wt_Container73") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container73");
			}
			if (id == "RichWidgets_wt_WebBlockInstance286") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("RichWidgets_wt_WebBlockInstance286");
			}
			if (id == "wt_Text187") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text187");
			}
			if (id == "wt_Container61") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container61");
			}
			if (id == "wt_Container270") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Container270");
			}
			if (id == "RichWidgets_wt_WebBlockInstance19") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("RichWidgets_wt_WebBlockInstance19");
			}
			if (id == "wt_Text265") {
				return ThemeProvider_wtTabSection.wtContent5.FindControl("wt_Text265");
			}
			if (id == "wt_Container186") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container186");
			}
			if (id == "wtTab6Title") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wtTab6Title");
			}
			if (id == "wt_Text91") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Text91");
			}
			if (id == "wtTab6MainContent") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wtTab6MainContent");
			}
			if (id == "wt_Table47") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Table47");
			}
			if (id == "wt_TableRow124") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableRow124");
			}
			if (id == "wt_TableCell171") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableCell171");
			}
			if (id == "wt_Container145") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container145");
			}
			if (id == "wt_Text101") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Text101");
			}
			if (id == "wt_TableCell40") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableCell40");
			}
			if (id == "wt_Container156") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container156");
			}
			if (id == "wt_Text53") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Text53");
			}
			if (id == "wt_TableCell13") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableCell13");
			}
			if (id == "wt_Container136") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container136");
			}
			if (id == "wt_Text274") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Text274");
			}
			if (id == "wt_TableRow181") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableRow181");
			}
			if (id == "wt_TableCell43") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableCell43");
			}
			if (id == "wtAutumnReviewDate") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wtAutumnReviewDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance127") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("RichWidgets_wt_WebBlockInstance127");
			}
			if (id == "wt_TableCell86") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableCell86");
			}
			if (id == "wtSpringReviewDate") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wtSpringReviewDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance138") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("RichWidgets_wt_WebBlockInstance138");
			}
			if (id == "wt_TableCell95") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_TableCell95");
			}
			if (id == "wtSummerReviewDate") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wtSummerReviewDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance29") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("RichWidgets_wt_WebBlockInstance29");
			}
			if (id == "wtNavButtons6") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wtNavButtons6");
			}
			if (id == "wt_Container225") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container225");
			}
			if (id == "wt_Container148") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container148");
			}
			if (id == "RichWidgets_wt_WebBlockInstance200") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("RichWidgets_wt_WebBlockInstance200");
			}
			if (id == "wt_Text278") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Text278");
			}
			if (id == "wt_Container230") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container230");
			}
			if (id == "wt_Container227") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Container227");
			}
			if (id == "RichWidgets_wt_WebBlockInstance31") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("RichWidgets_wt_WebBlockInstance31");
			}
			if (id == "wt_Text160") {
				return ThemeProvider_wtTabSection.wtContent6.FindControl("wt_Text160");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.K5bQBix5kMUeJJ3iv9JumfQ";
			}
		}
	}

}
