/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkTAB_PastoralSupport: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcIsEdit</code> that represents the Service Studio local variable
		///  <code>IsEdit</code> <p>Description: </p>
		/// </summary>
		bool varLcIsEdit = false;

		/// <summary>
		/// Variable <code>varLcStudentPastoralSupport</code> that represents the Service Studio local variable
		///  <code>StudentPastoralSupport</code> <p>Description: </p>
		/// </summary>
		ENStudentPastoralSupportEntityRecord varLcStudentPastoralSupport = new ENStudentPastoralSupportEntityRecord(null);

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		/// <summary>
		/// Variable (wtEditLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEditLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		/// <summary>
		/// Variable (wtDeleteLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtDeleteLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input4ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input4ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCUserStudentPastoralSupportRecord ssEditRecord1Record = new RCUserStudentPastoralSupportRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtEditRecord1_Valid() {
			bool res = true;
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLUserStudentPastoralSupportRecordList queryResGetStudentPastoralSupportsByStudentReference_outParamList = new RLUserStudentPastoralSupportRecordList();
		int queryResGetStudentPastoralSupportsByStudentReference_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetStudentPastoralSupportsByStudentReference
			int datasetGetStudentPastoralSupportsByStudentReference_maxRecords = 0;
			queryResGetStudentPastoralSupportsByStudentReference_outParamList = FuncssPreparation.datasetGetStudentPastoralSupportsByStudentReference(heContext, datasetGetStudentPastoralSupportsByStudentReference_maxRecords, IterationMultiplicity.Never, out queryResGetStudentPastoralSupportsByStudentReference_outParamCount, inParamStudentReference
			);
			ssEditRecord1Record.ssENStudentPastoralSupport = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRec.ssENStudentPastoralSupport; // EditRecord1.Record.StudentPastoralSupport =
			// GetStudentPastoralSupportsByStudentReference.List.Current.StudentPastoralSupport
			ssEditRecord1Record.ssENUser = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRec.ssENUser; // EditRecord1.Record.User = GetStudentPastoralSupportsByStudentReference.List.Current.User
		}
		static WBlkTAB_PastoralSupport() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wtEditLink != null) {
				this.wtEditLink.Click += new System.EventHandler(this.wtEditLink_Click);
			}
			if (this.wtDeleteLink != null) {
				this.wtDeleteLink.Click += new System.EventHandler(this.wtDeleteLink_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					if (bindEditRecords) {
						wtEditRecord1_onDataBindingDataSource(this.FindControl("wtEditRecord1"), null);
					}
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(this, "wt_Input4", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetStudentPastoralSupportsByStudentReference_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetStudentPastoralSupportsByStudentReference_outParamList = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentPastoralSupportsByStudentReference_outParamList = queryResGetStudentPastoralSupportsByStudentReference_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_empty", queryResGetStudentPastoralSupportsByStudentReference_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_length", queryResGetStudentPastoralSupportsByStudentReference_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentPastoralSupportsByStudentReference_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_eof", tmpeofqueryResGetStudentPastoralSupportsByStudentReference_outParamList, false);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcIsEdit", varLcIsEdit, false);
			ViewStateAttributes.SetInViewState("varLcStudentPastoralSupport_ssId", varLcStudentPastoralSupport.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcStudentPastoralSupport_ssPastoralSupport", varLcStudentPastoralSupport.ssPastoralSupport, "");
			ViewStateAttributes.SetInViewState("varLcStudentPastoralSupport_ssLastUpdatedBy", varLcStudentPastoralSupport.ssLastUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("varLcStudentPastoralSupport_ssLastUpdatedOn", varLcStudentPastoralSupport.ssLastUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("varLcStudentPastoralSupport_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcStudentPastoralSupport.ChangedAttributes, new BitArray(new bool[] {
				true, false, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcStudentPastoralSupport_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcStudentPastoralSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, true, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wt_Input4_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input4")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentPastoralSupport_ssId", ssEditRecord1Record.ssENStudentPastoralSupport.ssId, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentPastoralSupport_ssPastoralSupport", ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentPastoralSupport_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssEditRecord1Record.ssENStudentPastoralSupport.ChangedAttributes, new BitArray(new bool[] {
				true, false, true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentPastoralSupport_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssEditRecord1Record.ssENStudentPastoralSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, true, false, true, true
			}
			)))), null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetStudentPastoralSupportsByStudentReference_outParamList runtime properties state.

				queryResGetStudentPastoralSupportsByStudentReference_outParamList = new RLUserStudentPastoralSupportRecordList();
				bool tmpstorequeryResGetStudentPastoralSupportsByStudentReference_outParamList_empty;
				tmpstorequeryResGetStudentPastoralSupportsByStudentReference_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_empty", false);
				int tmpstorequeryResGetStudentPastoralSupportsByStudentReference_outParamList_length;
				tmpstorequeryResGetStudentPastoralSupportsByStudentReference_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_length", 0);
				while (tmpstorequeryResGetStudentPastoralSupportsByStudentReference_outParamList_length-- > 0) {
					queryResGetStudentPastoralSupportsByStudentReference_outParamList.Append(new RCUserStudentPastoralSupportRecord(null));
				}

				queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetStudentPastoralSupportsByStudentReference_outParamList;
				tmpcurrentrownumberqueryResGetStudentPastoralSupportsByStudentReference_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentPastoralSupportsByStudentReference_outParamList;
				tmpeofqueryResGetStudentPastoralSupportsByStudentReference_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentPastoralSupportsByStudentReference_outParamList_eof", false);
				queryResGetStudentPastoralSupportsByStudentReference_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentPastoralSupportsByStudentReference_outParamList, tmpeofqueryResGetStudentPastoralSupportsByStudentReference_outParamList);
				queryResGetStudentPastoralSupportsByStudentReference_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetStudentPastoralSupportsByStudentReference_outParamList_empty);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcIsEdit = (bool) ViewStateAttributes.GetFromViewState("varLcIsEdit", false);
				varLcStudentPastoralSupport.ssId = (int) ViewStateAttributes.GetFromViewState("varLcStudentPastoralSupport_ssId", 0);
				varLcStudentPastoralSupport.ssPastoralSupport = (string) ViewStateAttributes.GetFromViewState("varLcStudentPastoralSupport_ssPastoralSupport", "");
				varLcStudentPastoralSupport.ssLastUpdatedBy = (int) ViewStateAttributes.GetFromViewState("varLcStudentPastoralSupport_ssLastUpdatedBy", 0);
				varLcStudentPastoralSupport.ssLastUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("varLcStudentPastoralSupport_ssLastUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				varLcStudentPastoralSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcStudentPastoralSupport_ChangedAttributes", null));
				varLcStudentPastoralSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcStudentPastoralSupport_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wt_Input4")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input4_Mandatory", false);
				ssEditRecord1Record.ssENStudentPastoralSupport.ssId = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentPastoralSupport_ssId", 0);
				ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentPastoralSupport_ssPastoralSupport", "");
				ssEditRecord1Record.ssENStudentPastoralSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentPastoralSupport_ChangedAttributes", null));
				ssEditRecord1Record.ssENStudentPastoralSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentPastoralSupport_OptimizedAttributes", null));
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wt_Input4");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wt_Input4");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.K4EptQXGFzUqpFVvhaSNXlw";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/Learner_InitialAssessment/TAB_PastoralSupport.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_PastoralSupport.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_PastoralSupport.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("4EptQXGFzUqpFVvhaSNXlw"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				ssEditRecord1Record.ssENStudentPastoralSupport.ssLastUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // EditRecord1.Record.StudentPastoralSupport.LastUpdatedBy = UserID
				ssEditRecord1Record.ssENStudentPastoralSupport.ssLastUpdatedOn = BuiltInFunction.CurrDate(); // EditRecord1.Record.StudentPastoralSupport.LastUpdatedOn = CurrDate
				varLcIsEdit = false; // IsEdit = False
				ssEditRecord1Record.ssENStudentPastoralSupport.ssStudentReference = BuiltInFunction.TextToEntityRefText(inParamStudentReference); // EditRecord1.Record.StudentPastoralSupport.StudentReference = TextToEntityRefText
				// UpdateStudentPastoralSupport
				ExtendedActions.UpdateStudentPastoralSupport(heContext, ssEditRecord1Record.ssENStudentPastoralSupport.ChangedAttributes, ((RCStudentPastoralSupportRecord) ssEditRecord1Record.ssENStudentPastoralSupport));
				// Query datasetGetStudentPastoralSupportsByStudentReference
				{
					int datasetGetStudentPastoralSupportsByStudentReference_maxRecords = 0;
					queryResGetStudentPastoralSupportsByStudentReference_outParamList = FuncssPreparation.datasetGetStudentPastoralSupportsByStudentReference(heContext, datasetGetStudentPastoralSupportsByStudentReference_maxRecords, IterationMultiplicity.Never, out queryResGetStudentPastoralSupportsByStudentReference_outParamCount, inParamStudentReference
					);
				}
				// Refresh Me
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteStudentPastoralSupport
				ExtendedActions.DeleteStudentPastoralSupport(heContext, ssEditRecord1Record.ssENStudentPastoralSupport.ssId);
				// Query datasetGetStudentPastoralSupportsByStudentReference
				{
					int datasetGetStudentPastoralSupportsByStudentReference_maxRecords = 0;
					queryResGetStudentPastoralSupportsByStudentReference_outParamList = FuncssPreparation.datasetGetStudentPastoralSupportsByStudentReference(heContext, datasetGetStudentPastoralSupportsByStudentReference_maxRecords, IterationMultiplicity.Never, out queryResGetStudentPastoralSupportsByStudentReference_outParamCount, inParamStudentReference
					);
				}
				ssEditRecord1Record.ssENStudentPastoralSupport = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRec.ssENStudentPastoralSupport; // EditRecord1.Record.StudentPastoralSupport =
				// GetStudentPastoralSupportsByStudentReference.List.Current.StudentPastoralSupport
				ssEditRecord1Record.ssENUser = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRec.ssENUser; // EditRecord1.Record.User = GetStudentPastoralSupportsByStudentReference.List.Current.User
				varLcIsEdit = false; // IsEdit = False
				// Refresh Me
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvEdit: VarsBag {
			public int resCreateStudentPastoralSupport_outParamId = 0;

			public lcvEdit() {
			}
		}
		/// <summary>
		/// Action <code>CommandEdit</code> that represents the Service Studio screen action <code>Edit</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandEdit(HeContext heContext) {
			CheckPermissions(heContext);
			lcvEdit localVars = new lcvEdit();
			try {
				if (queryResGetStudentPastoralSupportsByStudentReference_outParamList.Empty) {
					varLcStudentPastoralSupport.ssStudentReference = BuiltInFunction.TextToEntityRefText(inParamStudentReference); // StudentPastoralSupport.StudentReference = TextToEntityRefText
					// CreateStudentPastoralSupport
					ExtendedActions.CreateStudentPastoralSupport(heContext, ((RCStudentPastoralSupportRecord) varLcStudentPastoralSupport), out localVars.resCreateStudentPastoralSupport_outParamId);
					// Query datasetGetStudentPastoralSupportsByStudentReference
					{
						int datasetGetStudentPastoralSupportsByStudentReference_maxRecords = 0;
						queryResGetStudentPastoralSupportsByStudentReference_outParamList = FuncssPreparation.datasetGetStudentPastoralSupportsByStudentReference(heContext, datasetGetStudentPastoralSupportsByStudentReference_maxRecords, IterationMultiplicity.Never, out queryResGetStudentPastoralSupportsByStudentReference_outParamCount, inParamStudentReference
						);
					}
					ssEditRecord1Record.ssENStudentPastoralSupport = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRec.ssENStudentPastoralSupport; // EditRecord1.Record.StudentPastoralSupport =
					// GetStudentPastoralSupportsByStudentReference.List.Current.StudentPastoralSupport
					ssEditRecord1Record.ssENUser = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRec.ssENUser; // EditRecord1.Record.User = GetStudentPastoralSupportsByStudentReference.List.Current.User

				}
				varLcIsEdit = true; // IsEdit = True
				// Refresh Me
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container21_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container21_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container8_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding: 15px; font-size: 18px;text-shadow: 0px 1px 2px #dadada;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container8_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container10_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:-7px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		public void lnkEditLink_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEditLink_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandEdit(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEditLink)
		/// </summary>
		/// <returns>title of the Link (wtEditLink)</returns>
		public string
		lnkEditLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditLink)
		/// </summary>
		/// <returns>The Visible State of wtEditLink</returns>
		public bool lnkEditLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditLink)
		/// </summary>
		/// <returns>The Enabled State of wtEditLink</returns>
		public bool lnkEditLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!varLcIsEdit);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = BHwVTjF2zkSDeG4ViGW7_Q) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression6() {
			return ((queryResGetStudentPastoralSupportsByStudentReference_outParamList.Empty) ?(" New"):(" Edit"));
		}
		public void lnkDeleteLink_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtDeleteLink_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDelete(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtDeleteLink)
		/// </summary>
		/// <returns>title of the Link (wtDeleteLink)</returns>
		public string
		lnkDeleteLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDeleteLink)
		/// </summary>
		/// <returns>The Visible State of wtDeleteLink</returns>
		public bool lnkDeleteLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtDeleteLink)
		/// </summary>
		/// <returns>The Enabled State of wtDeleteLink</returns>
		public bool lnkDeleteLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container5_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container5_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container15_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container15_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return ((queryResGetStudentPastoralSupportsByStudentReference_outParamList.Empty) ?(false):(true));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input4_input_value() {
			if (("" !=ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport)) {
				return ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input4");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input4_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport = ""; 
				} else {
					ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENStudentPastoralSupport.ssPastoralSupport = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input4)
		/// </summary>
		/// <returns>The Visible State of wt_Input4</returns>
		public bool inputwt_Input4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input4)
		/// </summary>
		/// <returns>The Enabled State of wt_Input4</returns>
		public bool inputwt_Input4_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input4)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input4</returns>
		public bool inputwt_Input4_isMandatory() {
			return false;
		}

		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((ssEditRecord1Record.ssENStudentPastoralSupport.ssLastUpdatedBy==BuiltInFunction.NullIdentifier())) ?(false):(true));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = BvDUwGSnQUqFuKrHCwbvlw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression18() {
			return ((queryResGetStudentPastoralSupportsByStudentReference_outParamList.Empty) ?(""):(((("Last Updated On " +BuiltInFunction.FormatFullDate(Convert.ToDateTime(ssEditRecord1Record.ssENStudentPastoralSupport.ssLastUpdatedOn.ToString("yyyy-M-d")), " ")) + " by ") +ssEditRecord1Record.ssENUser.ssName)));
		}
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wtEditRecord1_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack || IsViewStateEmpty) {
				ssEditRecord1Record = queryResGetStudentPastoralSupportsByStudentReference_outParamList.CurrentRec;
			}
		}
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container20
		/// </summary>
		public void cnt_Container20_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSave(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance13_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("KWHNbVoiY0i7rCt0vNrlbA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandSave {
		}
		public static class FuncCommandDelete {
		}
		public static class FuncCommandEdit {
		}
		public static class FuncssPreparation {

			private static void datasetGetStudentPastoralSupportsByStudentReferenceReadDB(ref RCUserStudentPastoralSupportRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENStudentPastoralSupport.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudentPastoralSupportsByStudentReference" of Action "Preparation"
			/// </summary>
			public static RLUserStudentPastoralSupportRecordList datasetGetStudentPastoralSupportsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query DcXXi94QvESMg9JUfvcBrQ Iterations: Never {-unbound-}
				// Refresh Query qxPskBW09UWIDoyEKtwkOA Iterations: Never {-unbound-}
				// Refresh Query ADIAnhymO0qBnTwFgzgXIg Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStudentPastoralSupport.[ID] o1, NULL o2, ENStudentPastoralSupport.[PASTORALSUPPORT] o3, ENStudentPastoralSupport.[LASTUPDATEDBY] o4, ENStudentPastoralSupport.[LASTUPDATEDON] o5, NULL o6, ENUser.[NAME] o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15");
				fromBuilder.Append(" FROM ({StudentPastoralSupport} ENStudentPastoralSupport Left JOIN {User} ENUser ON (ENStudentPastoralSupport.[LASTUPDATEDBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE (ENStudentPastoralSupport.[STUDENTREFERENCE] = (@qpstP))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserStudentPastoralSupportRecordList outParamList = new RLUserStudentPastoralSupportRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentPastoralSupportsByStudentReferenceReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserStudentPastoralSupportRecordList _tmp = new RLUserStudentPastoralSupportRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentPastoralSupportsByStudentReferenceReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_PastoralSupport.Preparation.GetStudentPastoralSupportsByStudentReference.List");
						outParamList = (RLUserStudentPastoralSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_PastoralSupport.Preparation.GetStudentPastoralSupportsByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserStudentPastoralSupportRecordList _tmp = new RLUserStudentPastoralSupportRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentPastoralSupportsByStudentReferenceReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_PastoralSupport.Preparation.GetStudentPastoralSupportsByStudentReference.List");
							outParamList = (RLUserStudentPastoralSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_PastoralSupport.Preparation.GetStudentPastoralSupportsByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.K4EptQXGFzUqpFVvhaSNXlw";
			}
		}
	}

}
