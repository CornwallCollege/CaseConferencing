/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkTAB_SupportNeeds: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcIsEdit</code> that represents the Service Studio local variable
		///  <code>IsEdit</code> <p>Description: </p>
		/// </summary>
		bool varLcIsEdit = false;

		/// <summary>
		/// Variable <code>varLcSupportNeedId</code> that represents the Service Studio local variable
		///  <code>SupportNeedId</code> <p>Description: </p>
		/// </summary>
		string varLcSupportNeedId = "";

		/// <summary>
		/// Variable <code>varLcSupportNeedList</code> that represents the Service Studio local variable
		///  <code>SupportNeedList</code> <p>Description: </p>
		/// </summary>
		RLSupportNeedsRecordList varLcSupportNeedList = new RLSupportNeedsRecordList();

		protected OutSystems.HubEdition.WebWidgets.Container wtLogContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container53;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		protected OutSystems.HubEdition.WebWidgets.Container wtContentWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container66;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox22ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox22 = new SelectRtWidget();
		RLSupportNeedsRecordList Rt_wt_ComboBox22_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		private RLSupportNeedsRecordList _ssListRecords1List = new RLSupportNeedsRecordList();
		public RLSupportNeedsRecordList ssListRecords1List {
			get {
				return _ssListRecords1List; 
			}
			set {
				_ssListRecords1List = value;
				wtListRecords1.DataSource = value;
				ssListRecords1ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords1;
		public ArrayList wtListRecords1_storage = new ArrayList();
		protected bool ssListRecords1List_notUsedYet = true;
		protected bool ssListRecords1ListDoDataBind;
		protected bool ssListRecords1ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		/// <summary>
		/// Variable wt_WebBlockInstance35
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard wt_WebBlockInstance35;
		/// <summary>
		/// Variable (wt_Link10) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		/// <summary>
		/// Variable (wtlnkAtt) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtlnkAtt;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container58;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		private RLSIASSupportNeedsDocumentsDocumentsRecordList _ssListRecordsAttatcList = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
		public RLSIASSupportNeedsDocumentsDocumentsRecordList ssListRecordsAttatcList {
			get {
				return _ssListRecordsAttatcList; 
			}
			set {
				_ssListRecordsAttatcList = value;
				wtListRecordsAttatc.DataSource = value;
				ssListRecordsAttatcListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsAttatc;
		public ArrayList wtListRecordsAttatc_storage = new ArrayList();
		protected bool ssListRecordsAttatcList_notUsedYet = true;
		protected bool ssListRecordsAttatcListDoDataBind;
		protected bool ssListRecordsAttatcListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		/// <summary>
		/// Variable (wt_Link55) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link55;
		/// <summary>
		/// Variable (wt_Link33) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link33;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSIASInitialAssessment_NotesValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtSIASInitialAssessment_NotesValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container64;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		/// <summary>
		/// Variable (wtEdit) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEdit;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		/// <summary>
		/// Variable (wtSave) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtSave;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		/// <summary>
		/// Variable (wt_Link45) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link45;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container51;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCSIASSupportNeedsRecord ssSupportNeedEditRecord = new RCSIASSupportNeedsRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtSupportNeedEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtSIASInitialAssessment_Notes");
			return res;
		}

		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLSIASSupportNeedsDocumentsDocumentsRecordList queryResGetSIASSupportDocuments_outParamList = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
		int queryResGetSIASSupportDocuments_outParamCount = 0;
		RLSupportNeedsRecordList queryResGetSupportNeeds_outParamList = new RLSupportNeedsRecordList();
		int queryResGetSupportNeeds_outParamCount = 0;
		RLSIASSupportNeedsRecordList queryResGetSIASSupportNeedsByStudentId_outParamList = new RLSIASSupportNeedsRecordList();
		int queryResGetSIASSupportNeedsByStudentId_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query QueryGetSupportNeeds
			int QueryGetSupportNeeds_maxRecords = 0;
			queryResGetSupportNeeds_outParamList = FuncssPreparation.QueryGetSupportNeeds(heContext, QueryGetSupportNeeds_maxRecords, IterationMultiplicity.Multiple, out queryResGetSupportNeeds_outParamCount, inParamStudentReference
			);
			varLcSupportNeedList = queryResGetSupportNeeds_outParamList; // SupportNeedList = GetSupportNeeds.List
			// Query datasetGetSIASSupportNeedsByStudentId
			int datasetGetSIASSupportNeedsByStudentId_maxRecords = 0;
			queryResGetSIASSupportNeedsByStudentId_outParamList = FuncssPreparation.datasetGetSIASSupportNeedsByStudentId(heContext, datasetGetSIASSupportNeedsByStudentId_maxRecords, IterationMultiplicity.Never, out queryResGetSIASSupportNeedsByStudentId_outParamCount, inParamStudentReference
			);
			// Query datasetGetSIASSupportDocuments
			int datasetGetSIASSupportDocuments_maxRecords = Math.Max(wtListRecordsAttatc.StartIndex + wtListRecordsAttatc.LineCount + 1, 0);
			queryResGetSIASSupportDocuments_outParamList = FuncssPreparation.datasetGetSIASSupportDocuments(heContext, datasetGetSIASSupportDocuments_maxRecords, IterationMultiplicity.Multiple, out queryResGetSIASSupportDocuments_outParamCount, queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.ssId
			);
		}
		static WBlkTAB_SupportNeeds() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtListRecords1.StartIndexExpression = () => 0;
			wtListRecords1.LineCountExpression = () => 50;
			wt_WebBlockInstance35 = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard) FindControl("wt_WebBlockInstance35");
			if (this.wt_Link10 != null) {
				this.wt_Link10.Click += new System.EventHandler(this.wt_Link10_Click);
			}
			wtListRecordsAttatc.StartIndexExpression = () => 0;
			wtListRecordsAttatc.LineCountExpression = () => 50;
			if (this.wt_Link55 != null) {
				this.wt_Link55.Click += new System.EventHandler(this.wt_Link55_Click);
			}
			if (this.wt_Link33 != null) {
				this.wt_Link33.Click += new System.EventHandler(this.wt_Link33_Click);
			}
			if (this.wtEdit != null) {
				this.wtEdit.Click += new System.EventHandler(this.wtEdit_Click);
			}
			if (this.wtSave != null) {
				this.wtSave.Click += new System.EventHandler(this.wtSave_Click);
			}
			if (this.wt_Link45 != null) {
				this.wt_Link45.Click += new System.EventHandler(this.wt_Link45_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					if (bindEditRecords) {
						wtSupportNeedEdit_onDataBindingDataSource(this.FindControl("wtSupportNeedEdit"), null);
					}
					ssListRecords1ListDoDataBind = true;
					ssListRecordsAttatcListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox22", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtSIASInitialAssessment_Notes", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetSIASSupportDocuments_outParamList.

			int tmpcurrentrownumberqueryResGetSIASSupportDocuments_outParamList = queryResGetSIASSupportDocuments_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSIASSupportDocuments_outParamList = queryResGetSIASSupportDocuments_outParamList.Eof;
			ArrayList storequeryResGetSIASSupportDocuments_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSIASSupportDocuments_outParamList to the storequeryResGetSIASSupportDocuments_outParamList
			if (!queryResGetSIASSupportDocuments_outParamList.Empty) {
				try {
					queryResGetSIASSupportDocuments_outParamList.StartIteration();

					while (!queryResGetSIASSupportDocuments_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSIASSupportDocuments_outParamList = new ArrayList();
						tmpFieldsqueryResGetSIASSupportDocuments_outParamList.Add(queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENSIASSupportNeedsDocuments.ssId == 0?(object) null: queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENSIASSupportNeedsDocuments.ssId);
						tmpFieldsqueryResGetSIASSupportDocuments_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENSIASSupportNeedsDocuments.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetSIASSupportDocuments_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENSIASSupportNeedsDocuments.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetSIASSupportDocuments_outParamList.Add(queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENDocuments.ssId == 0?(object) null: queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENDocuments.ssId);
						tmpFieldsqueryResGetSIASSupportDocuments_outParamList.Add(queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENDocuments.ssDocumentName == "" ?(object) null: queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENDocuments.ssDocumentName);
						tmpFieldsqueryResGetSIASSupportDocuments_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetSIASSupportDocuments_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportDocuments_outParamList.CurrentRec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true, true, true
						}
						))));
						storequeryResGetSIASSupportDocuments_outParamList.Add(tmpFieldsqueryResGetSIASSupportDocuments_outParamList);
						queryResGetSIASSupportDocuments_outParamList.Advance();
					}
				} finally {
					queryResGetSIASSupportDocuments_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportDocuments_outParamList", storequeryResGetSIASSupportDocuments_outParamList, null);

			#endregion


			#region store queryResGetSIASSupportDocuments_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportDocuments_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSIASSupportDocuments_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSIASSupportDocuments_outParamList_eof", tmpeofqueryResGetSIASSupportDocuments_outParamList, false);
			queryResGetSIASSupportDocuments_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportDocuments_outParamList, tmpeofqueryResGetSIASSupportDocuments_outParamList);

			#endregion


			#region store queryResGetSIASSupportNeedsByStudentId_outParamList.

			int tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList = queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList = queryResGetSIASSupportNeedsByStudentId_outParamList.Eof;
			ArrayList storequeryResGetSIASSupportNeedsByStudentId_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSIASSupportNeedsByStudentId_outParamList to the storequeryResGetSIASSupportNeedsByStudentId_outParamList
			if (!queryResGetSIASSupportNeedsByStudentId_outParamList.Empty) {
				try {
					queryResGetSIASSupportNeedsByStudentId_outParamList.StartIteration();

					while (!queryResGetSIASSupportNeedsByStudentId_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList = new ArrayList();
						tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList.Add(queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.ssId == 0?(object) null: queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.ssId);
						tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList.Add(queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.ssNotes == "" ?(object) null: queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.ssNotes);
						tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false
						}
						))));
						tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true
						}
						))));
						storequeryResGetSIASSupportNeedsByStudentId_outParamList.Add(tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList);
						queryResGetSIASSupportNeedsByStudentId_outParamList.Advance();
					}
				} finally {
					queryResGetSIASSupportNeedsByStudentId_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportNeedsByStudentId_outParamList", storequeryResGetSIASSupportNeedsByStudentId_outParamList, null);

			#endregion


			#region store queryResGetSIASSupportNeedsByStudentId_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_eof", tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList, false);
			queryResGetSIASSupportNeedsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList, tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcIsEdit", varLcIsEdit, false);
			ViewStateAttributes.SetInViewState("varLcSupportNeedId", varLcSupportNeedId, "");

			#region store varLcSupportNeedList.

			int tmpcurrentrownumbervarLcSupportNeedList = varLcSupportNeedList.CurrentRowNumber;
			bool tmpeofvarLcSupportNeedList = varLcSupportNeedList.Eof;
			ArrayList storevarLcSupportNeedList = new ArrayList();

			// Write the needed fields of varLcSupportNeedList to the storevarLcSupportNeedList
			if (!varLcSupportNeedList.Empty) {
				try {
					varLcSupportNeedList.StartIteration();

					while (!varLcSupportNeedList.Eof) {
						ArrayList tmpFieldsvarLcSupportNeedList = new ArrayList();
						tmpFieldsvarLcSupportNeedList.Add(varLcSupportNeedList.CurrentRec.ssENSupportNeeds.ssId == "" ?(object) null: varLcSupportNeedList.CurrentRec.ssENSupportNeeds.ssId);
						tmpFieldsvarLcSupportNeedList.Add(varLcSupportNeedList.CurrentRec.ssENSupportNeeds.ssLabel == "" ?(object) null: varLcSupportNeedList.CurrentRec.ssENSupportNeeds.ssLabel);
						tmpFieldsvarLcSupportNeedList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcSupportNeedList.CurrentRec.ssENSupportNeeds.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false
						}
						))));
						tmpFieldsvarLcSupportNeedList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcSupportNeedList.CurrentRec.ssENSupportNeeds.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true
						}
						))));
						storevarLcSupportNeedList.Add(tmpFieldsvarLcSupportNeedList);
						varLcSupportNeedList.Advance();
					}
				} finally {
					varLcSupportNeedList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcSupportNeedList", storevarLcSupportNeedList, null);

			#endregion


			#region store varLcSupportNeedList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcSupportNeedList_currentrownumber", tmpcurrentrownumbervarLcSupportNeedList, 0);
			ViewStateAttributes.SetInViewState("varLcSupportNeedList_eof", tmpeofvarLcSupportNeedList, false);
			varLcSupportNeedList.RestoreRecordListState(tmpcurrentrownumbervarLcSupportNeedList, tmpeofvarLcSupportNeedList);

			#endregion

			ViewStateAttributes.SetInViewState("wt_ComboBox22_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox22")).Mandatory, false);
			if (IsAjaxRequest) {
				recListListRecords1_Rebuild((ssListRecords1ListDataBound ? wtListRecords1.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords1.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecords1_list", wtListRecords1_storage, null);
			if (IsAjaxRequest) {
				recListListRecordsAttatc_Rebuild((ssListRecordsAttatcListDataBound ? wtListRecordsAttatc.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsAttatc.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsAttatc_list", wtListRecordsAttatc_storage, null);
			ViewStateAttributes.SetInViewState("wtSIASInitialAssessment_Notes_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSIASInitialAssessment_Notes")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_ssId", ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssId, 0);
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_ssNotes", ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes, "");
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssSupportNeedEditRecord.ssENSIASSupportNeeds.ChangedAttributes, new BitArray(new bool[] {
				true, false, true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssSupportNeedEditRecord.ssENSIASSupportNeeds.OptimizedAttributes, new BitArray(new bool[] {
				false, true, false, true, true
			}
			)))), null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetSIASSupportDocuments_outParamList.

				// Read the needed fields of queryResGetSIASSupportDocuments_outParamList from storequeryResGetSIASSupportDocuments_outParamList
				queryResGetSIASSupportDocuments_outParamList = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
				ArrayList storequeryResGetSIASSupportDocuments_outParamList;
				storequeryResGetSIASSupportDocuments_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportDocuments_outParamList", null);
				if (storequeryResGetSIASSupportDocuments_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSIASSupportDocuments_outParamList in storequeryResGetSIASSupportDocuments_outParamList) {
						if (tmpFieldsqueryResGetSIASSupportDocuments_outParamList != null) {
							// Aux current record variable
							RCSIASSupportNeedsDocumentsDocumentsRecord tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList = new RCSIASSupportNeedsDocumentsDocumentsRecord(null);
							tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList.ssENSIASSupportNeedsDocuments.ssId = (int) (tmpFieldsqueryResGetSIASSupportDocuments_outParamList[0] == null ? 0: tmpFieldsqueryResGetSIASSupportDocuments_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList.ssENSIASSupportNeedsDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocuments_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList.ssENSIASSupportNeedsDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocuments_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList.ssENDocuments.ssId = (int) (tmpFieldsqueryResGetSIASSupportDocuments_outParamList[3] == null ? 0: tmpFieldsqueryResGetSIASSupportDocuments_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList.ssENDocuments.ssDocumentName = (string) (tmpFieldsqueryResGetSIASSupportDocuments_outParamList[4] == null ? "": tmpFieldsqueryResGetSIASSupportDocuments_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocuments_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocuments_outParamList[6]);

							queryResGetSIASSupportDocuments_outParamList.Append(tmpAuxCurrentRecordqueryResGetSIASSupportDocuments_outParamList);
						}
					}
				}
				queryResGetSIASSupportDocuments_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSIASSupportDocuments_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSIASSupportDocuments_outParamList;
				tmpcurrentrownumberqueryResGetSIASSupportDocuments_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportDocuments_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSIASSupportDocuments_outParamList;
				tmpeofqueryResGetSIASSupportDocuments_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportDocuments_outParamList_eof", false);
				queryResGetSIASSupportDocuments_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportDocuments_outParamList, tmpeofqueryResGetSIASSupportDocuments_outParamList);

				#endregion


				#region fetch queryResGetSIASSupportNeedsByStudentId_outParamList.

				// Read the needed fields of queryResGetSIASSupportNeedsByStudentId_outParamList from storequeryResGetSIASSupportNeedsByStudentId_outParamList
				queryResGetSIASSupportNeedsByStudentId_outParamList = new RLSIASSupportNeedsRecordList();
				ArrayList storequeryResGetSIASSupportNeedsByStudentId_outParamList;
				storequeryResGetSIASSupportNeedsByStudentId_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportNeedsByStudentId_outParamList", null);
				if (storequeryResGetSIASSupportNeedsByStudentId_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList in storequeryResGetSIASSupportNeedsByStudentId_outParamList) {
						if (tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList != null) {
							// Aux current record variable
							RCSIASSupportNeedsRecord tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList = new RCSIASSupportNeedsRecord(null);
							tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList.ssENSIASSupportNeeds.ssId = (int) (tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[0] == null ? 0: tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList.ssENSIASSupportNeeds.ssNotes = (string) (tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[1] == null ? "": tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList.ssENSIASSupportNeeds.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList.ssENSIASSupportNeeds.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportNeedsByStudentId_outParamList[3]);

							queryResGetSIASSupportNeedsByStudentId_outParamList.Append(tmpAuxCurrentRecordqueryResGetSIASSupportNeedsByStudentId_outParamList);
						}
					}
				}
				queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSIASSupportNeedsByStudentId_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList;
				tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList;
				tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportNeedsByStudentId_outParamList_eof", false);
				queryResGetSIASSupportNeedsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportNeedsByStudentId_outParamList, tmpeofqueryResGetSIASSupportNeedsByStudentId_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcIsEdit = (bool) ViewStateAttributes.GetFromViewState("varLcIsEdit", false);
				varLcSupportNeedId = (string) ViewStateAttributes.GetFromViewState("varLcSupportNeedId", "");

				#region fetch varLcSupportNeedList.

				// Read the needed fields of varLcSupportNeedList from storevarLcSupportNeedList
				varLcSupportNeedList = new RLSupportNeedsRecordList();
				ArrayList storevarLcSupportNeedList;
				storevarLcSupportNeedList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcSupportNeedList", null);
				if (storevarLcSupportNeedList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcSupportNeedList in storevarLcSupportNeedList) {
						if (tmpFieldsvarLcSupportNeedList != null) {
							// Aux current record variable
							RCSupportNeedsRecord tmpAuxCurrentRecordvarLcSupportNeedList = new RCSupportNeedsRecord(null);
							tmpAuxCurrentRecordvarLcSupportNeedList.ssENSupportNeeds.ssId = (string) (tmpFieldsvarLcSupportNeedList[0] == null ? "": tmpFieldsvarLcSupportNeedList[0]);

							tmpAuxCurrentRecordvarLcSupportNeedList.ssENSupportNeeds.ssLabel = (string) (tmpFieldsvarLcSupportNeedList[1] == null ? "": tmpFieldsvarLcSupportNeedList[1]);

							tmpAuxCurrentRecordvarLcSupportNeedList.ssENSupportNeeds.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSupportNeedList[2]);

							tmpAuxCurrentRecordvarLcSupportNeedList.ssENSupportNeeds.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSupportNeedList[3]);

							varLcSupportNeedList.Append(tmpAuxCurrentRecordvarLcSupportNeedList);
						}
					}
				}
				varLcSupportNeedList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcSupportNeedList runtime properties state.

				int tmpcurrentrownumbervarLcSupportNeedList;
				tmpcurrentrownumbervarLcSupportNeedList = (int) ViewStateAttributes.GetFromViewState("varLcSupportNeedList_currentrownumber", 0);
				bool tmpeofvarLcSupportNeedList;
				tmpeofvarLcSupportNeedList = (bool) ViewStateAttributes.GetFromViewState("varLcSupportNeedList_eof", false);
				varLcSupportNeedList.RestoreRecordListState(tmpcurrentrownumbervarLcSupportNeedList, tmpeofvarLcSupportNeedList);

				#endregion

				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox22")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox22_Mandatory", false);
				recListListRecords1_Restore();
				recListListRecordsAttatc_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wtSIASInitialAssessment_Notes")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSIASInitialAssessment_Notes_Mandatory", false);
				ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssId = (int) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_ssId", 0);
				ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes = (string) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_ssNotes", "");
				ssSupportNeedEditRecord.ssENSIASSupportNeeds.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_ChangedAttributes", null));
				ssSupportNeedEditRecord.ssENSIASSupportNeeds.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupportNeeds_OptimizedAttributes", null));
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wtSIASInitialAssessment_Notes");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wtSIASInitialAssessment_Notes");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KEx9HZ1d8vkylg8Ru03d0KQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/Learner_InitialAssessment/TAB_SupportNeeds.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_SupportNeeds.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_SupportNeeds.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("Ex9HZ1d8vkylg8Ru03d0KQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvOnChange: VarsBag {
			public RLSupportNeedsRecordList queryResGetSupportNeeds2_outParamList = new RLSupportNeedsRecordList();
			public int queryResGetSupportNeeds2_outParamCount = 0;

			public lcvOnChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnChange localVars = new lcvOnChange();
			try {
				// Query datasetGetSupportNeeds2
				int datasetGetSupportNeeds2_maxRecords = 0;
				localVars.queryResGetSupportNeeds2_outParamList = FuncCommandOnChange.datasetGetSupportNeeds2(heContext, datasetGetSupportNeeds2_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetSupportNeeds2_outParamCount, varLcSupportNeedId
				);
				if (localVars.queryResGetSupportNeeds2_outParamList.Empty) {
					// Update Screen
					return true;

				} else {
					// Foreach SupportNeedList
					varLcSupportNeedList.StartIteration();
					try {
						while (!varLcSupportNeedList.Eof) {
							// (Exists)
							if ((varLcSupportNeedId==varLcSupportNeedList.CurrentRec.ssENSupportNeeds.ssId)) {
								// Update Screen
								return true;

							}
							varLcSupportNeedList.Advance();
						}
					} finally {
						varLcSupportNeedList.EndIteration();
					}
					// ListAppend
					ExtendedActions.ListAppend(heContext, varLcSupportNeedList, localVars.queryResGetSupportNeeds2_outParamList.CurrentRec);
					// Refresh Widget (wtListRecords1)
					ssListRecords1ListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtListRecords1, "None", StoreViewState);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandEdit</code> that represents the Service Studio screen action <code>Edit</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandEdit(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcIsEdit = (!varLcIsEdit); // IsEdit = notIsEdit
				// Refresh Widget (wtContentWrapper)
				ssListRecords1ListDoDataBind = true;
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtContentWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// ListRemove
				ExtendedActions.ListRemove(heContext, varLcSupportNeedList, getWtListRecords1List().CurrentRowNumber);
				// Refresh Widget (wtListRecords1)
				ssListRecords1ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListRecords1, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDownload: VarsBag {
			public RLDocumentsRecordList queryResGetDocumentByID_outParamList = new RLDocumentsRecordList();
			public int queryResGetDocumentByID_outParamCount = 0;

			public lcvDownload() {
			}
		}
		/// <summary>
		/// Action <code>CommandDownload</code> that represents the Service Studio screen action
		///  <code>Download</code> <p> Description: </p>
		/// </summary>
		private bool CommandDownload(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDownload localVars = new lcvDownload();
			try {
				// Query datasetGetDocumentByID
				int datasetGetDocumentByID_maxRecords = 0;
				localVars.queryResGetDocumentByID_outParamList = FuncCommandDownload.datasetGetDocumentByID(heContext, datasetGetDocumentByID_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetDocumentByID_outParamCount, getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssId
				);
				// Download Download6
				Response.ClearContent();
				string md5Hash_Download6;
				md5Hash_Download6 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.queryResGetDocumentByID_outParamList.CurrentRec.ssENDocuments.ssDocumentData);
				Response.ContentType = "application/octet-stream";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download6 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download6);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload6 = RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentByID_outParamList.CurrentRec.ssENDocuments.ssDocumentName);
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload6 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload6);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload6+ "\"");
				byte[] downloadDownload6FileContent = localVars.queryResGetDocumentByID_outParamList.CurrentRec.ssENDocuments.ssDocumentData;

				if (downloadDownload6FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/octet-stream";
						file_info.Second = localVars.queryResGetDocumentByID_outParamList.CurrentRec.ssENDocuments.ssDocumentData;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentByID_outParamList.CurrentRec.ssENDocuments.ssDocumentName));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload6FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload6FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "TAB_SupportNeeds", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcIsEdit = false; // IsEdit = False
				// Refresh Me
				ssListRecords1ListDoDataBind = true;
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public bool inParamIsDocumentAdd;
			/// <summary>
			/// Variable <code>varLcSIASSupportNeed</code> that represents the Service Studio local variable
			///  <code>SIASSupportNeed</code> <p>Description: </p>
			/// </summary>
			public RCSIASSupportNeedRecord varLcSIASSupportNeed = new RCSIASSupportNeedRecord(null);

			/// <summary>
			/// Variable <code>varLcSIASSupportNeedsDocument</code> that represents the Service Studio local
			///  variable <code>SIASSupportNeedsDocument</code> <p>Description: </p>
			/// </summary>
			public RCSIASSupportNeedsDocumentsRecord varLcSIASSupportNeedsDocument = new RCSIASSupportNeedsDocumentsRecord(null);

			public int resCreateOrUpdateSIASSupportNeedsDocuments_outParamId = 0;

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public RLBooleanRecordList queryResDeleteALl_outParamList = new RLBooleanRecordList();
			public int queryResDeleteALl_outParamCount = 0;

			public int resCreateOrUpdateSIASSupportNeed_outParamId = 0;

			public int resCreateOrUpdateSIASSupportNeeds_outParamId = 0;

			public int resStudentLog_Create2_outParamStudentLogId = 0;

			public lcvSave(bool inParamIsDocumentAdd) {
				this.inParamIsDocumentAdd = inParamIsDocumentAdd;
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext, bool inParamIsDocumentAdd) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave(inParamIsDocumentAdd);
			try {
				// New ?
				if ((ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssId==BuiltInFunction.NullIdentifier())) {
					ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssCreatedOn = BuiltInFunction.CurrDateTime(); // SupportNeedEdit.Record.SIASSupportNeeds.CreatedOn = CurrDateTime
					ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // SupportNeedEdit.Record.SIASSupportNeeds.CreatedBy = UserID
					ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssStudentId = inParamStudentReference; // SupportNeedEdit.Record.SIASSupportNeeds.StudentId = StudentReference
					// CreateOrUpdateSIASSupportNeeds
					ExtendedActions.CreateOrUpdateSIASSupportNeeds(heContext, ssSupportNeedEditRecord.ssENSIASSupportNeeds.ChangedAttributes, ((RCSIASSupportNeedsRecord) ssSupportNeedEditRecord.ssENSIASSupportNeeds), out localVars.resCreateOrUpdateSIASSupportNeeds_outParamId);
					// Set Id
					ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssId = localVars.resCreateOrUpdateSIASSupportNeeds_outParamId; // SupportNeedEdit.Record.SIASSupportNeeds.Id = CreateOrUpdateSIASSupportNeeds.Id

				} else {
					// Query QueryDeleteALl
					int QueryDeleteALl_maxRecords = 0;
					localVars.queryResDeleteALl_outParamList = FuncCommandSave.QueryDeleteALl(heContext, QueryDeleteALl_maxRecords, IterationMultiplicity.Never, out localVars.queryResDeleteALl_outParamCount, ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssId
					);

				}
				// Foreach ListRecords1.List
				getWtListRecords1List().StartIteration();
				try {
					while (! getWtListRecords1List().Eof) {
						localVars.varLcSIASSupportNeed.ssENSIASSupportNeed.ssSupportNeeds = ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssId; // SIASSupportNeed.SIASSupportNeed.SupportNeeds = SupportNeedEdit.Record.SIASSupportNeeds.Id
						localVars.varLcSIASSupportNeed.ssENSIASSupportNeed.ssSupportNeedId = getWtListRecords1List().CurrentRec.ssENSupportNeeds.ssId; // SIASSupportNeed.SIASSupportNeed.SupportNeedId = ListRecords1.List.Current.SupportNeeds.Id
						localVars.varLcSIASSupportNeed.ssENSIASSupportNeed.ssCreatedOn = BuiltInFunction.CurrDateTime(); // SIASSupportNeed.SIASSupportNeed.CreatedOn = CurrDateTime
						localVars.varLcSIASSupportNeed.ssENSIASSupportNeed.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // SIASSupportNeed.SIASSupportNeed.CreatedBy = UserID
						// CreateOrUpdateSIASSupportNeed
						ExtendedActions.CreateOrUpdateSIASSupportNeed(heContext, localVars.varLcSIASSupportNeed.ChangedAttributes, localVars.varLcSIASSupportNeed, out localVars.resCreateOrUpdateSIASSupportNeed_outParamId);
						getWtListRecords1List().Advance();
					}
				} finally {
					getWtListRecords1List().EndIteration();
				}
				if (localVars.inParamIsDocumentAdd) {
					// NotifyWidgetGetMessage
					ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
					localVars.varLcSIASSupportNeedsDocument.ssENSIASSupportNeedsDocuments.ssSIASSupportNeedId = ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssId; // SIASSupportNeedsDocument.SIASSupportNeedsDocuments.SIASSupportNeedId = SupportNeedEdit.Record.SIASSupportNeeds.Id
					localVars.varLcSIASSupportNeedsDocument.ssENSIASSupportNeedsDocuments.ssDocumentId = BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)); // SIASSupportNeedsDocument.SIASSupportNeedsDocuments.DocumentId = IntegerToEntityRefInteger
					localVars.varLcSIASSupportNeedsDocument.ssENSIASSupportNeedsDocuments.ssCreatedOn = BuiltInFunction.CurrDateTime(); // SIASSupportNeedsDocument.SIASSupportNeedsDocuments.CreatedOn = CurrDateTime
					localVars.varLcSIASSupportNeedsDocument.ssENSIASSupportNeedsDocuments.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // SIASSupportNeedsDocument.SIASSupportNeedsDocuments.CreatedBy = UserID
					// CreateOrUpdateSIASSupportNeedsDocuments
					ExtendedActions.CreateOrUpdateSIASSupportNeedsDocuments(heContext, localVars.varLcSIASSupportNeedsDocument.ChangedAttributes, localVars.varLcSIASSupportNeedsDocument, out localVars.resCreateOrUpdateSIASSupportNeedsDocuments_outParamId);

				}
				// StudentLog_Create2
				Actions.ActionStudentLog_Create(heContext, inParamStudentReference, ((int) Global.App.OsContext.Session["UserID"]), "SIAS Support Changed", ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("mPGE9uPol0Gohs+APspfug")).ssLogType, ("Support  Needs Changed - " +ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes), BuiltInFunction.NullTextIdentifier(), false, 0, "Support", "", 0, 0, "", 0, out localVars.resStudentLog_Create2_outParamStudentLogId);
				varLcIsEdit = false; // IsEdit = False
				// Refresh Widget (wtContentWrapper)
				ssListRecords1ListDoDataBind = true;
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtContentWrapper, "None", StoreViewState);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "Refresh");
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDeleteDocument</code> that represents the Service Studio screen action
		///  <code>DeleteDocument</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteDocument(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteSIASSupportNeedsDocuments
				ExtendedActions.DeleteSIASSupportNeedsDocuments(heContext, getWtListRecordsAttatcList().CurrentRec.ssENSIASSupportNeedsDocuments.ssId);
				// DeleteDocuments2
				ExtendedActions.DeleteDocuments(heContext, getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssId);
				// Query datasetGetSIASSupportDocuments
				{
					int datasetGetSIASSupportDocuments_maxRecords = Math.Max(wtListRecordsAttatc.StartIndex + wtListRecordsAttatc.LineCount + 1, 0);
					queryResGetSIASSupportDocuments_outParamList = FuncssPreparation.datasetGetSIASSupportDocuments(heContext, datasetGetSIASSupportDocuments_maxRecords, IterationMultiplicity.Multiple, out queryResGetSIASSupportDocuments_outParamCount, queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec.ssENSIASSupportNeeds.ssId
					);
				}
				// Refresh Widget (wtListRecordsAttatc)
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListRecordsAttatc, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cntLogContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLogContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLogContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLogContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLogContent)
		/// </summary>
		/// <returns>The Visible State of wtLogContent</returns>
		public bool cntLogContent_isVisible() {
			return true;
		}

		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container30_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding: 15px; font-size: 18px;text-shadow: 0px 1px 2px #dadada;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container30_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container53_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container53_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container53_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container53_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container53)
		/// </summary>
		/// <returns>The Visible State of wt_Container53</returns>
		public bool cnt_Container53_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "style";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:2px;padding: 4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell37_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell37_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell37_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntContentWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntContentWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentWrapper)
		/// </summary>
		/// <returns>The Visible State of wtContentWrapper</returns>
		public bool cntContentWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell65_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell65_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container66_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container66_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container66_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container66_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container66)
		/// </summary>
		/// <returns>The Visible State of wt_Container66</returns>
		public bool cnt_Container66_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox22_reclist == null) {
					using(Transaction wt_ComboBox22_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox22_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENSupportNeedsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wt_ComboBox22_sqlCmd = wt_ComboBox22_trans.CreateCommand(wt_ComboBox22_sql);
						Rt_wt_ComboBox22_sqlCmd.CreateParameter("@Selection", varLcSupportNeedId);
						Rt_wt_ComboBox22_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox22_reclist = new RLSupportNeedsRecordList();
						Rt_wt_ComboBox22_reclist.Transaction = wt_ComboBox22_trans;
						Rt_wt_ComboBox22_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox22_sqlCmd, Rt_wt_ComboBox22_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox22_reclist = (RLSupportNeedsRecordList) Rt_wt_ComboBox22_reclist.Duplicate();
					}
				}
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
				if (Rt_wt_ComboBox22.SpecialListVal == "0")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				Rt_wt_ComboBox22_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox22_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox22_reclist.CurrentRec.ssENSupportNeeds.ssLabel, Rt_wt_ComboBox22_reclist.CurrentRec.ssENSupportNeeds.ssId));
						if (varLcSupportNeedId == Convert.ToString(Rt_wt_ComboBox22_reclist.CurrentRec.ssENSupportNeeds.ssId)) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox22_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox22_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox22
		/// </summary>
		public void sel_ComboBox22_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox22_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox22.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcSupportNeedId = "";
			}
			else {
				Rt_wt_ComboBox22.SpecialListVal = "";
				try {
					varLcSupportNeedId = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox22)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox22</returns>
		public bool sel_ComboBox22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox22)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox22</returns>
		public bool sel_ComboBox22_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox22)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox22</returns>
		public bool sel_ComboBox22_isMandatory() {
			return false;
		}

		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords1
				ssListRecords1List = varLcSupportNeedList;
				ssListRecords1ListDoDataBind = false;
				ssListRecords1ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords1_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords1List.Length > 0) {
					ssListRecords1List.CurrentRec = ssListRecords1List[ssListRecords1List.CurrentRowNumber];
				}
				if (ssListRecords1List.Length > e.SelectedIndex) {
					ssListRecords1List.CurrentRec = ssListRecords1List[e.SelectedIndex];
					ssListRecords1List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords1_Store(object dataItem, int index) {
			RCSupportNeedsRecord tmprec = (RCSupportNeedsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENSupportNeeds.ssId == "" ?(object) null: tmprec.ssENSupportNeeds.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENSupportNeeds.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENSupportNeeds.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true
			}
			))));
			if (index < wtListRecords1_storage.Count) {
				wtListRecords1_storage[index] = tmpFields;
			} else {
				wtListRecords1_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecords1_Restore() {

			#region fetch ssListRecords1List.

			// Read the needed fields of ssListRecords1List from storewtListRecords1_list
			ssListRecords1List = new RLSupportNeedsRecordList();
			ArrayList storewtListRecords1_list;
			storewtListRecords1_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecords1_list", null);
			if (storewtListRecords1_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecords1_list in storewtListRecords1_list) {
					if (tmpFieldswtListRecords1_list != null) {
						// Aux current record variable
						RCSupportNeedsRecord tmpAuxCurrentRecordwtListRecords1_list = new RCSupportNeedsRecord(null);
						tmpAuxCurrentRecordwtListRecords1_list.ssENSupportNeeds.ssId = (string) (tmpFieldswtListRecords1_list[0] == null ? "": tmpFieldswtListRecords1_list[0]);

						tmpAuxCurrentRecordwtListRecords1_list.ssENSupportNeeds.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecords1_list[1]);

						tmpAuxCurrentRecordwtListRecords1_list.ssENSupportNeeds.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecords1_list[2]);

						ssListRecords1List.Append(tmpAuxCurrentRecordwtListRecords1_list);
					}
				}
			}
			ssListRecords1List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecords1List runtime properties state.


			if (storewtListRecords1_list.Count > 0) {
				ssListRecords1List.RestoreRecordListState(storewtListRecords1_list.Count - 1, false);
			} else {
				ssListRecords1List.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecords1_storage = storewtListRecords1_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords1_Clear(object sender, EventArgs e) {
			wtListRecords1_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords1_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords1List.Length != -1) {
				wtListRecords1_storage.Clear();
				for (int i=startIndex; i<ssListRecords1List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords1_Store(ssListRecords1List.Data[i], wtListRecords1_storage.Count);
				}
			}
		}
		public void recListListRecords1_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords1 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLSupportNeedsRecordList getWtListRecords1List() {
			if (ssListRecords1ListDoDataBind) {
				recListListRecords1_onDataBinding(this, null);
			}

			return ssListRecords1List;
		}
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "line-height:20px;height:35px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard) sender;
				widget.inParamIsSmall = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = +2WfCWt17kaioA_0j_Jgtg) Expression:
		///  ListRecords1.List.Current.SupportNeeds.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return getWtListRecords1List().CurrentRec.ssENSupportNeeds.ssLabel;
		}
		public void lnk_Link10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnk_Link10_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnk_Link10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:white;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link10_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDelete(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link10)
		/// </summary>
		/// <returns>title of the Link (wt_Link10)</returns>
		public string
		lnk_Link10_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link10)
		/// </summary>
		/// <returns>The Visible State of wt_Link10</returns>
		public bool lnk_Link10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link10)
		/// </summary>
		/// <returns>The Enabled State of wt_Link10</returns>
		public bool lnk_Link10_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container28_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container28_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtlnkAtt)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtlnkAtt)</returns>
		public string lnklnkAtt_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("EnableDocumentViewingRestrictions", System.Web.HttpUtility.UrlEncode("False", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("DocumentType", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENDocumentTypeEntity.GetRecordByKey(ObjectKey.Parse("_O3l57z3wEqXgTAnf0NMCA")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_AttachDocument", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtlnkAtt)
		/// </summary>
		/// <returns>title of the Link (wtlnkAtt)</returns>
		public string
		lnklnkAtt_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Visible State of wtlnkAtt</returns>
		public bool lnklnkAtt_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Enabled State of wtlnkAtt</returns>
		public bool lnklnkAtt_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtlnkAtt.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance41
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance41_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSave(heContext
				, true)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container58_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container58_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container58_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container58_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container58)
		/// </summary>
		/// <returns>The Visible State of wt_Container58</returns>
		public bool cnt_Container58_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecordsAttatc_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecordsAttatc
				ssListRecordsAttatcList = queryResGetSIASSupportDocuments_outParamList;
				ssListRecordsAttatcListDoDataBind = false;
				ssListRecordsAttatcListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecordsAttatc_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsAttatcList.Length > 0) {
					ssListRecordsAttatcList.CurrentRec = ssListRecordsAttatcList[ssListRecordsAttatcList.CurrentRowNumber];
				}
				if (ssListRecordsAttatcList.Length > e.SelectedIndex) {
					ssListRecordsAttatcList.CurrentRec = ssListRecordsAttatcList[e.SelectedIndex];
					ssListRecordsAttatcList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsAttatc_Store(object dataItem, int index) {
			RCSIASSupportNeedsDocumentsDocumentsRecord tmprec = (RCSIASSupportNeedsDocumentsDocumentsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENSIASSupportNeedsDocuments.ssId == 0?(object) null: tmprec.ssENSIASSupportNeedsDocuments.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENSIASSupportNeedsDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENSIASSupportNeedsDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssENDocuments.ssId == 0?(object) null: tmprec.ssENDocuments.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true
			}
			))));
			if (index < wtListRecordsAttatc_storage.Count) {
				wtListRecordsAttatc_storage[index] = tmpFields;
			} else {
				wtListRecordsAttatc_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsAttatc_Restore() {

			#region fetch ssListRecordsAttatcList.

			// Read the needed fields of ssListRecordsAttatcList from storewtListRecordsAttatc_list
			ssListRecordsAttatcList = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
			ArrayList storewtListRecordsAttatc_list;
			storewtListRecordsAttatc_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsAttatc_list", null);
			if (storewtListRecordsAttatc_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsAttatc_list in storewtListRecordsAttatc_list) {
					if (tmpFieldswtListRecordsAttatc_list != null) {
						// Aux current record variable
						RCSIASSupportNeedsDocumentsDocumentsRecord tmpAuxCurrentRecordwtListRecordsAttatc_list = new RCSIASSupportNeedsDocumentsDocumentsRecord(null);
						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENSIASSupportNeedsDocuments.ssId = (int) (tmpFieldswtListRecordsAttatc_list[0] == null ? 0: tmpFieldswtListRecordsAttatc_list[0]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENSIASSupportNeedsDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[1]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENSIASSupportNeedsDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[2]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ssId = (int) (tmpFieldswtListRecordsAttatc_list[3] == null ? 0: tmpFieldswtListRecordsAttatc_list[3]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[4]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[5]);

						ssListRecordsAttatcList.Append(tmpAuxCurrentRecordwtListRecordsAttatc_list);
					}
				}
			}
			ssListRecordsAttatcList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsAttatcList runtime properties state.


			if (storewtListRecordsAttatc_list.Count > 0) {
				ssListRecordsAttatcList.RestoreRecordListState(storewtListRecordsAttatc_list.Count - 1, false);
			} else {
				ssListRecordsAttatcList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsAttatc_storage = storewtListRecordsAttatc_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsAttatc_Clear(object sender, EventArgs e) {
			wtListRecordsAttatc_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsAttatc_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsAttatcList.Length != -1) {
				wtListRecordsAttatc_storage.Clear();
				for (int i=startIndex; i<ssListRecordsAttatcList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsAttatc_Store(ssListRecordsAttatcList.Data[i], wtListRecordsAttatc_storage.Count);
				}
			}
		}
		public void recListListRecordsAttatc_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsAttatc widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLSIASSupportNeedsDocumentsDocumentsRecordList getWtListRecordsAttatcList() {
			if (ssListRecordsAttatcListDoDataBind) {
				recListListRecordsAttatc_onDataBinding(this, null);
			}

			return ssListRecordsAttatcList;
		}
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link55_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDownload(heContext)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link55)
		/// </summary>
		/// <returns>title of the Link (wt_Link55)</returns>
		public string
		lnk_Link55_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link55)
		/// </summary>
		/// <returns>The Visible State of wt_Link55</returns>
		public bool lnk_Link55_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link55)
		/// </summary>
		/// <returns>The Enabled State of wt_Link55</returns>
		public bool lnk_Link55_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = uTYwStxj_U+9m795r8+C_A) Expression: "- " +
		///  ListRecordsAttatc.List.Current.Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression21() {
			return ("- " +getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssDocumentName);
		}
		public void lnk_Link33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link33_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeleteDocument(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link33)
		/// </summary>
		/// <returns>title of the Link (wt_Link33)</returns>
		public string
		lnk_Link33_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link33)
		/// </summary>
		/// <returns>The Visible State of wt_Link33</returns>
		public bool lnk_Link33_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link33)
		/// </summary>
		/// <returns>The Enabled State of wt_Link33</returns>
		public bool lnk_Link33_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container44_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtSIASInitialAssessment_Notes_input_value() {
			if (("" !=ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes)) {
				return ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtSIASInitialAssessment_Notes");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtSIASInitialAssessment_Notes_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes = ""; 
				} else {
					ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssSupportNeedEditRecord.ssENSIASSupportNeeds.ssNotes = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtSIASInitialAssessment_Notes)
		/// </summary>
		/// <returns>The Visible State of wtSIASInitialAssessment_Notes</returns>
		public bool inputwtSIASInitialAssessment_Notes_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSIASInitialAssessment_Notes)
		/// </summary>
		/// <returns>The Enabled State of wtSIASInitialAssessment_Notes</returns>
		public bool inputwtSIASInitialAssessment_Notes_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtSIASInitialAssessment_Notes)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtSIASInitialAssessment_Notes</returns>
		public bool inputwtSIASInitialAssessment_Notes_isMandatory() {
			return false;
		}

		public void cnt_Container64_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container64_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container64_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container64_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container64)
		/// </summary>
		/// <returns>The Visible State of wt_Container64</returns>
		public bool cnt_Container64_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;margin-right:25px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkEdit_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEdit_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandEdit(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEdit)
		/// </summary>
		/// <returns>title of the Link (wtEdit)</returns>
		public string
		lnkEdit_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEdit)
		/// </summary>
		/// <returns>The Visible State of wtEdit</returns>
		public bool lnkEdit_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEdit)
		/// </summary>
		/// <returns>The Enabled State of wtEdit</returns>
		public bool lnkEdit_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!varLcIsEdit);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void lnkSave_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtSave_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandSave(heContext, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtSave)
		/// </summary>
		/// <returns>title of the Link (wtSave)</returns>
		public string
		lnkSave_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSave)
		/// </summary>
		/// <returns>The Visible State of wtSave</returns>
		public bool lnkSave_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSave)
		/// </summary>
		/// <returns>The Enabled State of wtSave</returns>
		public bool lnkSave_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container43_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container43_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("KWHNbVoiY0i7rCt0vNrlbA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container42_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:7px;margin-left:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container42_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnk_Link45_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnk_Link45_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:#666;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link45_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandCancel(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link45)
		/// </summary>
		/// <returns>title of the Link (wt_Link45)</returns>
		public string
		lnk_Link45_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link45)
		/// </summary>
		/// <returns>The Visible State of wt_Link45</returns>
		public bool lnk_Link45_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link45)
		/// </summary>
		/// <returns>The Enabled State of wt_Link45</returns>
		public bool lnk_Link45_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container51_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container51_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container51_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container51_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container51)
		/// </summary>
		/// <returns>The Visible State of wt_Container51</returns>
		public bool cnt_Container51_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container61_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container61_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void Hunspell_webBlck_WebBlockInstance49_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
				widget.inParamTextInputId = this.FindControl("wtSIASInitialAssessment_Notes").ClientID;
				widget.inParamExtraStyle = "";
				widget.inParamInPopupWindow = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container50_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon widget = (ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon) sender;
				widget.inParamTextInputId = this.FindControl("wtSIASInitialAssessment_Notes").ClientID;
				widget.inParamAutoCompleteType = ENAutoCompleteBankTypeEntity.GetRecordByKey(ObjectKey.Parse("jAIPmHz_R0SXwNBFiWjAnA")).ssId;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wtSupportNeedEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack || IsViewStateEmpty) {
				ssSupportNeedEditRecord = queryResGetSIASSupportNeedsByStudentId_outParamList.CurrentRec;
			}
		}
		public static class FuncCommandOnChange {

			/// <summary>
			/// Query Function "GetSupportNeeds2" of Action "OnChange"
			/// </summary>
			public static RLSupportNeedsRecordList datasetGetSupportNeeds2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSupportNeeds.[ID] o1, ENSupportNeeds.[LABEL] o2, ENSupportNeeds.[ORDER] o3, ENSupportNeeds.[IS_ACTIVE] o4");
				fromBuilder.Append(" FROM {SupportNeeds} ENSupportNeeds");
				whereBuilder.Append(" WHERE (ENSupportNeeds.[IS_ACTIVE] = 1) AND ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSupportNeeds.[ID] = @qpstP) AND (ENSupportNeeds.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSupportNeeds.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENSupportNeeds.[ORDER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSupportNeedsRecordList outParamList = new RLSupportNeedsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSupportNeedsRecordList _tmp = new RLSupportNeedsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.OnChange.GetSupportNeeds2.List");
						outParamList = (RLSupportNeedsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.OnChange.GetSupportNeeds2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSupportNeedsRecordList _tmp = new RLSupportNeedsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.OnChange.GetSupportNeeds2.List");
							outParamList = (RLSupportNeedsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.OnChange.GetSupportNeeds2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandEdit {
		}
		public static class FuncCommandDelete {
		}
		public static class FuncCommandDownload {

			/// <summary>
			/// Query Function "GetDocumentByID" of Action "Download"
			/// </summary>
			public static RLDocumentsRecordList datasetGetDocumentByID(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: True
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 3));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENDocuments.[DOCUMENTNAME] o3, ENDocuments.[DOCUMENTDATA] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {Documents} ENDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENDocuments.[ID] = @qpinP) AND (ENDocuments.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENDocuments.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDocumentsRecordList outParamList = new RLDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Download.GetDocumentByID.List");
						outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Download.GetDocumentByID.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 3) {
						RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Download.GetDocumentByID.List");
							outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Download.GetDocumentByID.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandCancel {
		}
		public static class FuncCommandSave {

			/// <summary>
			/// Query Function "DeleteALl" of Action "Save"
			/// </summary>
			public static RLBooleanRecordList QueryDeleteALl(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinSupportNeedsId) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinSupportNeedsId", DbType.Int32, qpinSupportNeedsId);
				string advSql = "DELETE FROM  {SIASSupportNeed}  " +
				 "WHERE  {SIASSupportNeed}.[SUPPORTNEEDS] = @qpinSupportNeedsId";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLBooleanRecordList outParamList = new RLBooleanRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLBooleanRecordList _tmp = new RLBooleanRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Save.DeleteALl.List");
							outParamList = (RLBooleanRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Save.DeleteALl.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Save.DeleteALl.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query DeleteALl in Save in TAB_SupportNeeds in Learner_InitialAssessment in CaseConferencing (DELETE FROM {SIASSupportNeed}  WHERE {SIASSupportNeed}.[SupportNeeds] = @SupportNeedsId ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query DeleteALl in Save in TAB_SupportNeeds in Learner_InitialAssessment in CaseConferencing (DELETE FROM {SIASSupportNeed}  WHERE {SIASSupportNeed}.[SupportNeeds] = @SupportNeedsId ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query DeleteALl in Save in TAB_SupportNeeds in Learner_InitialAssessment in CaseConferencing (DELETE FROM {SIASSupportNeed}  WHERE {SIASSupportNeed}.[SupportNeeds] = @SupportNeedsId ): " + aqExcep.Message);
				}
			}
		}
		public static class FuncCommandDeleteDocument {
		}
		public static class FuncssPreparation {

			private static void datasetGetSIASSupportDocumentsReadDB(ref RCSIASSupportNeedsDocumentsDocumentsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENDocuments.Read(r, ref index);
				rec.ssENSIASSupportNeedsDocuments.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetSIASSupportDocuments" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportNeedsDocumentsDocumentsRecordList datasetGetSIASSupportDocuments(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {ListRecordsAttatc}
				// Refresh Query 85JMOhG3W0W5+CVg1DBdyQ Iterations: Multiple {ListRecordsAttatc}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENDocuments.[ID] o1, NULL o2, ENDocuments.[DOCUMENTNAME] o3, NULL o4, NULL o5, NULL o6, NULL o7, ENSIASSupportNeedsDocuments.[ID] o8, NULL o9, NULL o10, NULL o11, NULL o12");
				fromBuilder.Append(" FROM ({SIASSupportNeedsDocuments} ENSIASSupportNeedsDocuments Left JOIN {Documents} ENDocuments ON (ENSIASSupportNeedsDocuments.[DOCUMENTID] = ENDocuments.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENSIASSupportNeedsDocuments.[SIASSUPPORTNEEDID] = @qpinP) AND (ENSIASSupportNeedsDocuments.[SIASSUPPORTNEEDID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENSIASSupportNeedsDocuments.[SIASSUPPORTNEEDID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportNeedsDocumentsDocumentsRecordList outParamList = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetSIASSupportDocumentsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportNeedsDocumentsDocumentsRecordList _tmp = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetSIASSupportDocumentsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportDocuments.List");
						outParamList = (RLSIASSupportNeedsDocumentsDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportDocuments.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportNeedsDocumentsDocumentsRecordList _tmp = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetSIASSupportDocumentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportDocuments.List");
							outParamList = (RLSIASSupportNeedsDocumentsDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportDocuments.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSupportNeeds" of Action "Preparation"
			/// </summary>
			public static RLSupportNeedsRecordList QueryGetSupportNeeds(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentId) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentId", DbType.String, qpstStudentId);
				string advSql = "SELECT   {SupportNeeds}.[ID], {SupportNeeds}.[LABEL], {SupportNeeds}.[ORDER], {SupportNeeds}.[IS_ACTIVE] FROM  {SIASSupportNeeds}  " +
				 "INNER JOIN  {SIASSupportNeed} ON  {SIASSupportNeed}.[SUPPORTNEEDS] =  {SIASSupportNeeds}.[ID]  " +
				 "INNER JOIN  {SupportNeeds} ON  {SupportNeeds}.[ID] =  {SIASSupportNeed}.[SUPPORTNEEDID]  " +
				 "WHERE   {SIASSupportNeeds}.[STUDENTID] = @qpstStudentId";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLSupportNeedsRecordList outParamList = new RLSupportNeedsRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLSupportNeedsRecordList _tmp = new RLSupportNeedsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSupportNeeds.List");
							outParamList = (RLSupportNeedsRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSupportNeeds.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSupportNeeds.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetSupportNeeds in Preparation in TAB_SupportNeeds in Learner_InitialAssessment in CaseConferencing (SELECT  {SupportNeeds}.* FROM {SIASSupportNeeds}  INNER JOIN {SIASSupportNeed} ON {SIASSupportNeed}.[SupportNeeds] = {SIASSupportNeeds}.[Id]  INNER JOIN {SupportNeeds} ON {SupportNeeds}.[Id] = {SIASSupportNeed}.[SupportNeedId]  WHERE  {SIASSupportNeeds}.[StudentId] = @StudentId ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetSupportNeeds in Preparation in TAB_SupportNeeds in Learner_InitialAssessment in CaseConferencing (SELECT  {SupportNeeds}.* FROM {SIASSupportNeeds}  INNER JOIN {SIASSupportNeed} ON {SIASSupportNeed}.[SupportNeeds] = {SIASSupportNeeds}.[Id]  INNER JOIN {SupportNeeds} ON {SupportNeeds}.[Id] = {SIASSupportNeed}.[SupportNeedId]  WHERE  {SIASSupportNeeds}.[StudentId] = @StudentId ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetSupportNeeds in Preparation in TAB_SupportNeeds in Learner_InitialAssessment in CaseConferencing (SELECT  {SupportNeeds}.* FROM {SIASSupportNeeds}  INNER JOIN {SIASSupportNeed} ON {SIASSupportNeed}.[SupportNeeds] = {SIASSupportNeeds}.[Id]  INNER JOIN {SupportNeeds} ON {SupportNeeds}.[Id] = {SIASSupportNeed}.[SupportNeedId]  WHERE  {SIASSupportNeeds}.[StudentId] = @StudentId ): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetSIASSupportNeedsByStudentId" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportNeedsRecordList datasetGetSIASSupportNeedsByStudentId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSIASSupportNeeds.[ID] o1, NULL o2, ENSIASSupportNeeds.[NOTES] o3, NULL o4, NULL o5");
				fromBuilder.Append(" FROM {SIASSupportNeeds} ENSIASSupportNeeds");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupportNeeds.[STUDENTID] = @qpstP) AND (ENSIASSupportNeeds.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupportNeeds.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportNeedsRecordList outParamList = new RLSIASSupportNeedsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportNeedsRecordList _tmp = new RLSIASSupportNeedsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportNeedsByStudentId.List");
						outParamList = (RLSIASSupportNeedsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportNeedsByStudentId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportNeedsRecordList _tmp = new RLSIASSupportNeedsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportNeedsByStudentId.List");
							outParamList = (RLSIASSupportNeedsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_SupportNeeds.Preparation.GetSIASSupportNeedsByStudentId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KEx9HZ1d8vkylg8Ru03d0KQ";
			}
		}
	}

}
