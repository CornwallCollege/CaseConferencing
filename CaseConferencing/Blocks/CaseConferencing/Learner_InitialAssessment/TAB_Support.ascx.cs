/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {
	public abstract class WBlkTAB_Support: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcIsEdit</code> that represents the Service Studio local variable
		///  <code>IsEdit</code> <p>Description: </p>
		/// </summary>
		bool varLcIsEdit = false;

		/// <summary>
		/// Variable <code>varLcSupportTypeId</code> that represents the Service Studio local variable
		///  <code>SupportTypeId</code> <p>Description: </p>
		/// </summary>
		int varLcSupportTypeId = 0;

		/// <summary>
		/// Variable <code>varLcSIASSupportTypeList</code> that represents the Service Studio local variable
		///  <code>SIASSupportTypeList</code> <p>Description: </p>
		/// </summary>
		RLSIASSupportTypeRecordList varLcSIASSupportTypeList = new RLSIASSupportTypeRecordList();

		protected OutSystems.HubEdition.WebWidgets.Container wtLogContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList;
		protected OutSystems.HubEdition.WebWidgets.Container wtContentWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container75;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox50ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox50 = new SelectRtWidget();
		RLSIASSupportTypeRecordList Rt_wt_ComboBox50_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		private RLSIASSupportTypeRecordList _ssListRecordsCardsList = new RLSIASSupportTypeRecordList();
		public RLSIASSupportTypeRecordList ssListRecordsCardsList {
			get {
				return _ssListRecordsCardsList; 
			}
			set {
				_ssListRecordsCardsList = value;
				wtListRecordsCards.DataSource = value;
				ssListRecordsCardsListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsCards;
		public ArrayList wtListRecordsCards_storage = new ArrayList();
		protected bool ssListRecordsCardsList_notUsedYet = true;
		protected bool ssListRecordsCardsListDoDataBind;
		protected bool ssListRecordsCardsListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		/// <summary>
		/// Variable wt_WebBlockInstance54
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard wt_WebBlockInstance54;
		/// <summary>
		/// Variable (wt_Link14) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link14;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSIASSupport_ExamConcessionValidatorRequired;
		protected SelectRtWidget Rt_wtSIASSupport_ExamConcession = new SelectRtWidget();
		RLExamConcessionsRecordList Rt_wtSIASSupport_ExamConcession_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container52;
		/// <summary>
		/// Variable (wtlnkAtt) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtlnkAtt;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		private RLSIASSupportDocumentsDocumentsRecordList _ssListRecordsAttatcList = new RLSIASSupportDocumentsDocumentsRecordList();
		public RLSIASSupportDocumentsDocumentsRecordList ssListRecordsAttatcList {
			get {
				return _ssListRecordsAttatcList; 
			}
			set {
				_ssListRecordsAttatcList = value;
				wtListRecordsAttatc.DataSource = value;
				ssListRecordsAttatcListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsAttatc;
		public ArrayList wtListRecordsAttatc_storage = new ArrayList();
		protected bool ssListRecordsAttatcList_notUsedYet = true;
		protected bool ssListRecordsAttatcListDoDataBind;
		protected bool ssListRecordsAttatcListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container68;
		/// <summary>
		/// Variable (wt_Link47) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link47;
		/// <summary>
		/// Variable (wt_Link42) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link42;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSIASInitialAssessment_NotesValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtSIASInitialAssessment_NotesValidatorType;
		/// <summary>
		/// Variable "True" if the Widget wt_If36
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If36T;

		/// <summary>
		/// Variable "True" if the Widget wt_If36
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If36F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		/// <summary>
		/// Variable (wtEdit) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEdit;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		/// <summary>
		/// Variable (wtSave) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtSave;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container37;
		/// <summary>
		/// Variable (wt_Link57) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link57;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container74;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCSIASSupportRecord ssSupportNeedEditRecord = new RCSIASSupportRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtSupportNeedEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtSIASSupport_ExamConcession") &&
			ValidationUtils.IsValid(this, "wtSIASInitialAssessment_Notes");
			return res;
		}

		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLSIASSupportDocumentsDocumentsRecordList queryResGetSIASSupportDocumentsBySIASSupportId_outParamList = new RLSIASSupportDocumentsDocumentsRecordList();
		int queryResGetSIASSupportDocumentsBySIASSupportId_outParamCount = 0;
		RLSIASSupportRecordList queryResGetSIASSupportsByStudentId_outParamList = new RLSIASSupportRecordList();
		int queryResGetSIASSupportsByStudentId_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		RLSIASSupportTypeRecordList queryResGetSupportTypes_outParamList = new RLSIASSupportTypeRecordList();
		int queryResGetSupportTypes_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("BdSwjq8l9Uut8VgU4iW3KQ")).ssId, out resUserCheck_outParamPermissionType);
			// Query datasetGetSIASSupportsByStudentId
			int datasetGetSIASSupportsByStudentId_maxRecords = 0;
			queryResGetSIASSupportsByStudentId_outParamList = FuncssPreparation.datasetGetSIASSupportsByStudentId(heContext, datasetGetSIASSupportsByStudentId_maxRecords, IterationMultiplicity.Never, out queryResGetSIASSupportsByStudentId_outParamCount, inParamStudentReference
			);
			// Query QueryGetSupportTypes
			int QueryGetSupportTypes_maxRecords = 0;
			queryResGetSupportTypes_outParamList = FuncssPreparation.QueryGetSupportTypes(heContext, QueryGetSupportTypes_maxRecords, IterationMultiplicity.Multiple, out queryResGetSupportTypes_outParamCount, inParamStudentReference
			);
			varLcSIASSupportTypeList = queryResGetSupportTypes_outParamList; // SIASSupportTypeList = GetSupportTypes.List
			// Query datasetGetSIASSupportDocumentsBySIASSupportId
			int datasetGetSIASSupportDocumentsBySIASSupportId_maxRecords = Math.Max(wtListRecordsAttatc.StartIndex + wtListRecordsAttatc.LineCount + 1, 0);
			queryResGetSIASSupportDocumentsBySIASSupportId_outParamList = FuncssPreparation.datasetGetSIASSupportDocumentsBySIASSupportId(heContext, datasetGetSIASSupportDocumentsBySIASSupportId_maxRecords, IterationMultiplicity.Multiple, out queryResGetSIASSupportDocumentsBySIASSupportId_outParamCount, queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssId
			);
		}
		static WBlkTAB_Support() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtListRecordsCards.StartIndexExpression = () => 0;
			wtListRecordsCards.LineCountExpression = () => 50;
			wt_WebBlockInstance54 = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard) FindControl("wt_WebBlockInstance54");
			if (this.wt_Link14 != null) {
				this.wt_Link14.Click += new System.EventHandler(this.wt_Link14_Click);
			}
			wtListRecordsAttatc.StartIndexExpression = () => 0;
			wtListRecordsAttatc.LineCountExpression = () => 50;
			if (this.wt_Link47 != null) {
				this.wt_Link47.Click += new System.EventHandler(this.wt_Link47_Click);
			}
			if (this.wt_Link42 != null) {
				this.wt_Link42.Click += new System.EventHandler(this.wt_Link42_Click);
			}
			if (this.wtEdit != null) {
				this.wtEdit.Click += new System.EventHandler(this.wtEdit_Click);
			}
			if (this.wtSave != null) {
				this.wtSave.Click += new System.EventHandler(this.wtSave_Click);
			}
			if (this.wt_Link57 != null) {
				this.wt_Link57.Click += new System.EventHandler(this.wt_Link57_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					if (bindEditRecords) {
						wtSupportNeedEdit_onDataBindingDataSource(this.FindControl("wtSupportNeedEdit"), null);
					}
					ssListRecordsCardsListDoDataBind = true;
					ssListRecordsAttatcListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox50", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtSIASSupport_ExamConcession", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtSIASInitialAssessment_Notes", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.

			int tmpcurrentrownumberqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList = queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList = queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Eof;
			ArrayList storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSIASSupportDocumentsBySIASSupportId_outParamList to the storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList
			if (!queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Empty) {
				try {
					queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.StartIteration();

					while (!queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList = new ArrayList();
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENSIASSupportDocuments.ssId == 0?(object) null: queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENSIASSupportDocuments.ssId);
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENSIASSupportDocuments.ssDocumentId == 0?(object) null: queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENSIASSupportDocuments.ssDocumentId);
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENSIASSupportDocuments.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false
						}
						))));
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENSIASSupportDocuments.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true
						}
						))));
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENDocuments.ssId == 0?(object) null: queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENDocuments.ssId);
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENDocuments.ssDocumentName == "" ?(object) null: queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENDocuments.ssDocumentName);
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true, true, true
						}
						))));
						storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Add(tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList);
						queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Advance();
					}
				} finally {
					queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportDocumentsBySIASSupportId_outParamList", storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList, null);

			#endregion


			#region store queryResGetSIASSupportDocumentsBySIASSupportId_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportDocumentsBySIASSupportId_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSIASSupportDocumentsBySIASSupportId_outParamList_eof", tmpeofqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList, false);
			queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList, tmpeofqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList);

			#endregion


			#region store queryResGetSIASSupportsByStudentId_outParamList.

			int tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList = queryResGetSIASSupportsByStudentId_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSIASSupportsByStudentId_outParamList = queryResGetSIASSupportsByStudentId_outParamList.Eof;
			ArrayList storequeryResGetSIASSupportsByStudentId_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSIASSupportsByStudentId_outParamList to the storequeryResGetSIASSupportsByStudentId_outParamList
			if (!queryResGetSIASSupportsByStudentId_outParamList.Empty) {
				try {
					queryResGetSIASSupportsByStudentId_outParamList.StartIteration();

					while (!queryResGetSIASSupportsByStudentId_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList = new ArrayList();
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssId == 0?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssId);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssStudentId == "" ?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssStudentId);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssExamConcession == "" ?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssExamConcession);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssNotes == "" ?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssNotes);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssCreatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssCreatedOn);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssCreatedBy == 0?(object) null: queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssCreatedBy);
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, false, false, false, false
						}
						))));
						storequeryResGetSIASSupportsByStudentId_outParamList.Add(tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList);
						queryResGetSIASSupportsByStudentId_outParamList.Advance();
					}
				} finally {
					queryResGetSIASSupportsByStudentId_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportsByStudentId_outParamList", storequeryResGetSIASSupportsByStudentId_outParamList, null);

			#endregion


			#region store queryResGetSIASSupportsByStudentId_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSIASSupportsByStudentId_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSIASSupportsByStudentId_outParamList_eof", tmpeofqueryResGetSIASSupportsByStudentId_outParamList, false);
			queryResGetSIASSupportsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList, tmpeofqueryResGetSIASSupportsByStudentId_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("resUserCheck_outParamPermissionType", resUserCheck_outParamPermissionType, 0);
			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcIsEdit", varLcIsEdit, false);
			ViewStateAttributes.SetInViewState("varLcSupportTypeId", varLcSupportTypeId, 0);

			#region store varLcSIASSupportTypeList.

			int tmpcurrentrownumbervarLcSIASSupportTypeList = varLcSIASSupportTypeList.CurrentRowNumber;
			bool tmpeofvarLcSIASSupportTypeList = varLcSIASSupportTypeList.Eof;
			ArrayList storevarLcSIASSupportTypeList = new ArrayList();

			// Write the needed fields of varLcSIASSupportTypeList to the storevarLcSIASSupportTypeList
			if (!varLcSIASSupportTypeList.Empty) {
				try {
					varLcSIASSupportTypeList.StartIteration();

					while (!varLcSIASSupportTypeList.Eof) {
						ArrayList tmpFieldsvarLcSIASSupportTypeList = new ArrayList();
						tmpFieldsvarLcSIASSupportTypeList.Add(varLcSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId == 0?(object) null: varLcSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId);
						tmpFieldsvarLcSIASSupportTypeList.Add(varLcSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel == "" ?(object) null: varLcSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssLabel);
						tmpFieldsvarLcSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(varLcSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ChangedAttributes, new BitArray(new bool[] {
							true, true, false, false
						}
						))));
						tmpFieldsvarLcSIASSupportTypeList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(varLcSIASSupportTypeList.CurrentRec.ssENSIASSupportType.OptimizedAttributes, new BitArray(new bool[] {
							false, false, true, true
						}
						))));
						storevarLcSIASSupportTypeList.Add(tmpFieldsvarLcSIASSupportTypeList);
						varLcSIASSupportTypeList.Advance();
					}
				} finally {
					varLcSIASSupportTypeList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcSIASSupportTypeList", storevarLcSIASSupportTypeList, null);

			#endregion


			#region store varLcSIASSupportTypeList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcSIASSupportTypeList_currentrownumber", tmpcurrentrownumbervarLcSIASSupportTypeList, 0);
			ViewStateAttributes.SetInViewState("varLcSIASSupportTypeList_eof", tmpeofvarLcSIASSupportTypeList, false);
			varLcSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupportTypeList, tmpeofvarLcSIASSupportTypeList);

			#endregion

			ViewStateAttributes.SetInViewState("wt_ComboBox50_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox50")).Mandatory, false);
			if (IsAjaxRequest) {
				recListListRecordsCards_Rebuild((ssListRecordsCardsListDataBound ? wtListRecordsCards.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsCards.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsCards_list", wtListRecordsCards_storage, null);
			ViewStateAttributes.SetInViewState("wtSIASSupport_ExamConcession_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSIASSupport_ExamConcession")).Mandatory, false);
			if (IsAjaxRequest) {
				recListListRecordsAttatc_Rebuild((ssListRecordsAttatcListDataBound ? wtListRecordsAttatc.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsAttatc.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsAttatc_list", wtListRecordsAttatc_storage, null);
			ViewStateAttributes.SetInViewState("wtSIASInitialAssessment_Notes_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSIASInitialAssessment_Notes")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssId", ssSupportNeedEditRecord.ssENSIASSupport.ssId, 0);
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssStudentId", ssSupportNeedEditRecord.ssENSIASSupport.ssStudentId, "");
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssExamConcession", ssSupportNeedEditRecord.ssENSIASSupport.ssExamConcession, "");
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssNotes", ssSupportNeedEditRecord.ssENSIASSupport.ssNotes, "");
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssCreatedOn", ssSupportNeedEditRecord.ssENSIASSupport.ssCreatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssCreatedBy", ssSupportNeedEditRecord.ssENSIASSupport.ssCreatedBy, 0);
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssSupportNeedEditRecord.ssENSIASSupport.ChangedAttributes, new BitArray(new bool[] {
				true, true, false, false, false, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtSupportNeedEdit_record_ssENSIASSupport_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssSupportNeedEditRecord.ssENSIASSupport.OptimizedAttributes, new BitArray(new bool[] {
				false, false, true, true, true, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.

				// Read the needed fields of queryResGetSIASSupportDocumentsBySIASSupportId_outParamList from storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList
				queryResGetSIASSupportDocumentsBySIASSupportId_outParamList = new RLSIASSupportDocumentsDocumentsRecordList();
				ArrayList storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList;
				storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportDocumentsBySIASSupportId_outParamList", null);
				if (storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList in storequeryResGetSIASSupportDocumentsBySIASSupportId_outParamList) {
						if (tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList != null) {
							// Aux current record variable
							RCSIASSupportDocumentsDocumentsRecord tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList = new RCSIASSupportDocumentsDocumentsRecord(null);
							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENSIASSupportDocuments.ssId = (int) (tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[0] == null ? 0: tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENSIASSupportDocuments.ssDocumentId = (int) (tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[1] == null ? 0: tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENSIASSupportDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENSIASSupportDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENDocuments.ssId = (int) (tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[4] == null ? 0: tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENDocuments.ssDocumentName = (string) (tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[5] == null ? "": tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList[7]);

							queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.Append(tmpAuxCurrentRecordqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList);
						}
					}
				}
				queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSIASSupportDocumentsBySIASSupportId_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList;
				tmpcurrentrownumberqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportDocumentsBySIASSupportId_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList;
				tmpeofqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportDocumentsBySIASSupportId_outParamList_eof", false);
				queryResGetSIASSupportDocumentsBySIASSupportId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList, tmpeofqueryResGetSIASSupportDocumentsBySIASSupportId_outParamList);

				#endregion


				#region fetch queryResGetSIASSupportsByStudentId_outParamList.

				// Read the needed fields of queryResGetSIASSupportsByStudentId_outParamList from storequeryResGetSIASSupportsByStudentId_outParamList
				queryResGetSIASSupportsByStudentId_outParamList = new RLSIASSupportRecordList();
				ArrayList storequeryResGetSIASSupportsByStudentId_outParamList;
				storequeryResGetSIASSupportsByStudentId_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportsByStudentId_outParamList", null);
				if (storequeryResGetSIASSupportsByStudentId_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList in storequeryResGetSIASSupportsByStudentId_outParamList) {
						if (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList != null) {
							// Aux current record variable
							RCSIASSupportRecord tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList = new RCSIASSupportRecord(null);
							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssId = (int) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[0] == null ? 0: tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssStudentId = (string) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[1] == null ? "": tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssExamConcession = (string) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[2] == null ? "": tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssNotes = (string) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[3] == null ? "": tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssCreatedOn = (DateTime) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[4] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ssCreatedBy = (int) (tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[5] == null ? 0: tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList.ssENSIASSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSIASSupportsByStudentId_outParamList[7]);

							queryResGetSIASSupportsByStudentId_outParamList.Append(tmpAuxCurrentRecordqueryResGetSIASSupportsByStudentId_outParamList);
						}
					}
				}
				queryResGetSIASSupportsByStudentId_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSIASSupportsByStudentId_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList;
				tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportsByStudentId_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSIASSupportsByStudentId_outParamList;
				tmpeofqueryResGetSIASSupportsByStudentId_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSIASSupportsByStudentId_outParamList_eof", false);
				queryResGetSIASSupportsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSIASSupportsByStudentId_outParamList, tmpeofqueryResGetSIASSupportsByStudentId_outParamList);

				#endregion

				resUserCheck_outParamPermissionType = (int) ViewStateAttributes.GetFromViewState("resUserCheck_outParamPermissionType", 0);
				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcIsEdit = (bool) ViewStateAttributes.GetFromViewState("varLcIsEdit", false);
				varLcSupportTypeId = (int) ViewStateAttributes.GetFromViewState("varLcSupportTypeId", 0);

				#region fetch varLcSIASSupportTypeList.

				// Read the needed fields of varLcSIASSupportTypeList from storevarLcSIASSupportTypeList
				varLcSIASSupportTypeList = new RLSIASSupportTypeRecordList();
				ArrayList storevarLcSIASSupportTypeList;
				storevarLcSIASSupportTypeList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcSIASSupportTypeList", null);
				if (storevarLcSIASSupportTypeList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcSIASSupportTypeList in storevarLcSIASSupportTypeList) {
						if (tmpFieldsvarLcSIASSupportTypeList != null) {
							// Aux current record variable
							RCSIASSupportTypeRecord tmpAuxCurrentRecordvarLcSIASSupportTypeList = new RCSIASSupportTypeRecord(null);
							tmpAuxCurrentRecordvarLcSIASSupportTypeList.ssENSIASSupportType.ssId = (int) (tmpFieldsvarLcSIASSupportTypeList[0] == null ? 0: tmpFieldsvarLcSIASSupportTypeList[0]);

							tmpAuxCurrentRecordvarLcSIASSupportTypeList.ssENSIASSupportType.ssLabel = (string) (tmpFieldsvarLcSIASSupportTypeList[1] == null ? "": tmpFieldsvarLcSIASSupportTypeList[1]);

							tmpAuxCurrentRecordvarLcSIASSupportTypeList.ssENSIASSupportType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportTypeList[2]);

							tmpAuxCurrentRecordvarLcSIASSupportTypeList.ssENSIASSupportType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsvarLcSIASSupportTypeList[3]);

							varLcSIASSupportTypeList.Append(tmpAuxCurrentRecordvarLcSIASSupportTypeList);
						}
					}
				}
				varLcSIASSupportTypeList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcSIASSupportTypeList runtime properties state.

				int tmpcurrentrownumbervarLcSIASSupportTypeList;
				tmpcurrentrownumbervarLcSIASSupportTypeList = (int) ViewStateAttributes.GetFromViewState("varLcSIASSupportTypeList_currentrownumber", 0);
				bool tmpeofvarLcSIASSupportTypeList;
				tmpeofvarLcSIASSupportTypeList = (bool) ViewStateAttributes.GetFromViewState("varLcSIASSupportTypeList_eof", false);
				varLcSIASSupportTypeList.RestoreRecordListState(tmpcurrentrownumbervarLcSIASSupportTypeList, tmpeofvarLcSIASSupportTypeList);

				#endregion

				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox50")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox50_Mandatory", false);
				recListListRecordsCards_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wtSIASSupport_ExamConcession")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSIASSupport_ExamConcession_Mandatory", false);
				recListListRecordsAttatc_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wtSIASInitialAssessment_Notes")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSIASInitialAssessment_Notes_Mandatory", false);
				ssSupportNeedEditRecord.ssENSIASSupport.ssId = (int) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssId", 0);
				ssSupportNeedEditRecord.ssENSIASSupport.ssStudentId = (string) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssStudentId", "");
				ssSupportNeedEditRecord.ssENSIASSupport.ssExamConcession = (string) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssExamConcession", "");
				ssSupportNeedEditRecord.ssENSIASSupport.ssNotes = (string) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssNotes", "");
				ssSupportNeedEditRecord.ssENSIASSupport.ssCreatedOn = (DateTime) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssCreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				ssSupportNeedEditRecord.ssENSIASSupport.ssCreatedBy = (int) ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_ssCreatedBy", 0);
				ssSupportNeedEditRecord.ssENSIASSupport.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_ChangedAttributes", null));
				ssSupportNeedEditRecord.ssENSIASSupport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtSupportNeedEdit_record_ssENSIASSupport_OptimizedAttributes", null));
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wtSIASInitialAssessment_Notes");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wtSIASInitialAssessment_Notes");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KxpOMS7YNT0y_dFLxnzf78g";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/Learner_InitialAssessment/TAB_Support.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_Support.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\Learner_InitialAssessment\\TAB_Support.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("xpOMS7YNT0y+dFLxnzf78g"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvDownload: VarsBag {
			public RLDocumentsRecordList queryResGetDocumentById_outParamList = new RLDocumentsRecordList();
			public int queryResGetDocumentById_outParamCount = 0;

			public lcvDownload() {
			}
		}
		/// <summary>
		/// Action <code>CommandDownload</code> that represents the Service Studio screen action
		///  <code>Download</code> <p> Description: </p>
		/// </summary>
		private bool CommandDownload(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDownload localVars = new lcvDownload();
			try {
				// Query datasetGetDocumentById
				int datasetGetDocumentById_maxRecords = 0;
				localVars.queryResGetDocumentById_outParamList = FuncCommandDownload.datasetGetDocumentById(heContext, datasetGetDocumentById_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetDocumentById_outParamCount, getWtListRecordsAttatcList().CurrentRec.ssENSIASSupportDocuments.ssDocumentId
				);
				// Download Download5
				Response.ClearContent();
				string md5Hash_Download5;
				md5Hash_Download5 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData);
				Response.ContentType = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssType;
				Response.AppendHeader("ETag", "\"" + md5Hash_Download5 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download5);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload5 = RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentName);
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload5 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload5);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload5+ "\"");
				byte[] downloadDownload5FileContent = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData;

				if (downloadDownload5FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssType;
						file_info.Second = localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentData;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload(localVars.queryResGetDocumentById_outParamList.CurrentRec.ssENDocuments.ssDocumentName));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload5FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload5FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "TAB_Support", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnChange: VarsBag {
			public RLSIASSupportTypeRecordList queryResGetSIASSupportTypes_outParamList = new RLSIASSupportTypeRecordList();
			public int queryResGetSIASSupportTypes_outParamCount = 0;

			public lcvOnChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnChange localVars = new lcvOnChange();
			try {
				// Query datasetGetSIASSupportTypes
				int datasetGetSIASSupportTypes_maxRecords = 0;
				localVars.queryResGetSIASSupportTypes_outParamList = FuncCommandOnChange.datasetGetSIASSupportTypes(heContext, datasetGetSIASSupportTypes_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetSIASSupportTypes_outParamCount, varLcSupportTypeId
				);
				if (localVars.queryResGetSIASSupportTypes_outParamList.Empty) {
					// Update Screen
					return true;

				} else {
					// Foreach SIASSupportTypeList
					varLcSIASSupportTypeList.StartIteration();
					try {
						while (!varLcSIASSupportTypeList.Eof) {
							// (Exists)
							if ((varLcSupportTypeId==varLcSIASSupportTypeList.CurrentRec.ssENSIASSupportType.ssId)) {
								// Update Screen
								return true;

							}
							varLcSIASSupportTypeList.Advance();
						}
					} finally {
						varLcSIASSupportTypeList.EndIteration();
					}
					// ListAppend
					ExtendedActions.ListAppend(heContext, varLcSIASSupportTypeList, localVars.queryResGetSIASSupportTypes_outParamList.CurrentRec);
					// Refresh Widget (wtListRecordsCards)
					ssListRecordsCardsListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtListRecordsCards, "None", StoreViewState);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcIsEdit = false; // IsEdit = False
				// Refresh Me
				ssListRecordsCardsListDoDataBind = true;
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDeleteDocument</code> that represents the Service Studio screen action
		///  <code>DeleteDocument</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteDocument(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteSIASSupportDocuments
				ExtendedActions.DeleteSIASSupportDocuments(heContext, getWtListRecordsAttatcList().CurrentRec.ssENSIASSupportDocuments.ssId);
				// DeleteDocuments
				ExtendedActions.DeleteDocuments(heContext, getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssId);
				// Query datasetGetSIASSupportDocumentsBySIASSupportId
				{
					int datasetGetSIASSupportDocumentsBySIASSupportId_maxRecords = Math.Max(wtListRecordsAttatc.StartIndex + wtListRecordsAttatc.LineCount + 1, 0);
					queryResGetSIASSupportDocumentsBySIASSupportId_outParamList = FuncssPreparation.datasetGetSIASSupportDocumentsBySIASSupportId(heContext, datasetGetSIASSupportDocumentsBySIASSupportId_maxRecords, IterationMultiplicity.Multiple, out queryResGetSIASSupportDocumentsBySIASSupportId_outParamCount, queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssId
					);
				}
				// Refresh Widget (wtListRecordsAttatc)
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListRecordsAttatc, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public bool inParamIsDocumentAdd;
			/// <summary>
			/// Variable <code>varLcSupportDocument</code> that represents the Service Studio local variable
			///  <code>SupportDocument</code> <p>Description: </p>
			/// </summary>
			public RCSIASSupportDocumentsRecord varLcSupportDocument = new RCSIASSupportDocumentsRecord(null);

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public int resCreateOrUpdateSIASSupportDocuments_outParamId = 0;

			public int resStudentLog_Create_outParamStudentLogId = 0;

			public int resCreateOrUpdateSIASSupport_outParamId = 0;

			public lcvSave(bool inParamIsDocumentAdd) {
				this.inParamIsDocumentAdd = inParamIsDocumentAdd;
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext, bool inParamIsDocumentAdd) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave(inParamIsDocumentAdd);
			try {
				// (Is new )
				if ((ssSupportNeedEditRecord.ssENSIASSupport.ssId==BuiltInFunction.NullIdentifier())) {
					ssSupportNeedEditRecord.ssENSIASSupport.ssCreatedOn = BuiltInFunction.CurrDateTime(); // SupportNeedEdit.Record.SIASSupport.CreatedOn = CurrDateTime
					ssSupportNeedEditRecord.ssENSIASSupport.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // SupportNeedEdit.Record.SIASSupport.CreatedBy = UserID
					ssSupportNeedEditRecord.ssENSIASSupport.ssStudentId = inParamStudentReference; // SupportNeedEdit.Record.SIASSupport.StudentId = StudentReference

				}
				ssSupportNeedEditRecord.ssENSIASSupport.ssSupportType1 = BuiltInFunction.NullIdentifier(); // SupportNeedEdit.Record.SIASSupport.SupportType1 = NullIdentifier
				ssSupportNeedEditRecord.ssENSIASSupport.ssSupportType2 = BuiltInFunction.NullIdentifier(); // SupportNeedEdit.Record.SIASSupport.SupportType2 = NullIdentifier
				ssSupportNeedEditRecord.ssENSIASSupport.ssSupportType3 = BuiltInFunction.NullIdentifier(); // SupportNeedEdit.Record.SIASSupport.SupportType3 = NullIdentifier
				// Foreach ListRecordsCards.List
				getWtListRecordsCardsList().StartIteration();
				try {
					while (! getWtListRecordsCardsList().Eof) {
						if ((getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId==ENSIASSupportTypeEntity.GetRecordByKey(ObjectKey.Parse("8U68SaK4zkCr_BwApdfegA")).ssId)) {
							// 1:1
							ssSupportNeedEditRecord.ssENSIASSupport.ssSupportType1 = getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId; // SupportNeedEdit.Record.SIASSupport.SupportType1 = ListRecordsCards.List.Current.SIASSupportType.Id

						} else {
							if ((getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId==ENSIASSupportTypeEntity.GetRecordByKey(ObjectKey.Parse("8jLPtQg6cE6EBYVLcsemCA")).ssId)) {
								// SmallGroup
								ssSupportNeedEditRecord.ssENSIASSupport.ssSupportType2 = getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId; // SupportNeedEdit.Record.SIASSupport.SupportType2 = ListRecordsCards.List.Current.SIASSupportType.Id

							} else {
								if ((getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId==ENSIASSupportTypeEntity.GetRecordByKey(ObjectKey.Parse("+Pl7PVEKNEaYRbemiTCtcw")).ssId)) {
									// LSA
									ssSupportNeedEditRecord.ssENSIASSupport.ssSupportType3 = getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssId; // SupportNeedEdit.Record.SIASSupport.SupportType3 = ListRecordsCards.List.Current.SIASSupportType.Id

								}

							}

						}
						getWtListRecordsCardsList().Advance();
					}
				} finally {
					getWtListRecordsCardsList().EndIteration();
				}
				// CreateOrUpdateSIASSupport
				ExtendedActions.CreateOrUpdateSIASSupport(heContext, ssSupportNeedEditRecord.ChangedAttributes, ssSupportNeedEditRecord, out localVars.resCreateOrUpdateSIASSupport_outParamId);
				if (localVars.inParamIsDocumentAdd) {
					// NotifyWidgetGetMessage
					ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
					localVars.varLcSupportDocument.ssENSIASSupportDocuments.ssSIASSupportId = localVars.resCreateOrUpdateSIASSupport_outParamId; // SupportDocument.SIASSupportDocuments.SIASSupportId = CreateOrUpdateSIASSupport.Id
					localVars.varLcSupportDocument.ssENSIASSupportDocuments.ssDocumentId = BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)); // SupportDocument.SIASSupportDocuments.DocumentId = IntegerToEntityRefInteger
					localVars.varLcSupportDocument.ssENSIASSupportDocuments.ssCreatedOn = BuiltInFunction.CurrDateTime(); // SupportDocument.SIASSupportDocuments.CreatedOn = CurrDateTime
					localVars.varLcSupportDocument.ssENSIASSupportDocuments.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // SupportDocument.SIASSupportDocuments.CreatedBy = UserID
					// CreateOrUpdateSIASSupportDocuments
					ExtendedActions.CreateOrUpdateSIASSupportDocuments(heContext, localVars.varLcSupportDocument.ChangedAttributes, localVars.varLcSupportDocument, out localVars.resCreateOrUpdateSIASSupportDocuments_outParamId);

				}
				// StudentLog_Create
				Actions.ActionStudentLog_Create(heContext, inParamStudentReference, ((int) Global.App.OsContext.Session["UserID"]), "SIAS Support Changed", ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("mPGE9uPol0Gohs+APspfug")).ssLogType, ("Support Changed - " +ssSupportNeedEditRecord.ssENSIASSupport.ssNotes), BuiltInFunction.NullTextIdentifier(), false, 0, "Support", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
				// Query datasetGetSIASSupportDocumentsBySIASSupportId
				{
					int datasetGetSIASSupportDocumentsBySIASSupportId_maxRecords = Math.Max(wtListRecordsAttatc.StartIndex + wtListRecordsAttatc.LineCount + 1, 0);
					queryResGetSIASSupportDocumentsBySIASSupportId_outParamList = FuncssPreparation.datasetGetSIASSupportDocumentsBySIASSupportId(heContext, datasetGetSIASSupportDocumentsBySIASSupportId_maxRecords, IterationMultiplicity.Multiple, out queryResGetSIASSupportDocumentsBySIASSupportId_outParamCount, queryResGetSIASSupportsByStudentId_outParamList.CurrentRec.ssENSIASSupport.ssId
					);
				}
				varLcIsEdit = false; // IsEdit = False
				// Refresh Widget (wtContentWrapper)
				ssListRecordsCardsListDoDataBind = true;
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtContentWrapper, "None", StoreViewState);
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "Refresh");
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// ListRemove
				ExtendedActions.ListRemove(heContext, varLcSIASSupportTypeList, getWtListRecordsCardsList().CurrentRowNumber);
				// Refresh Widget (wtListRecordsCards)
				ssListRecordsCardsListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListRecordsCards, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandEdit</code> that represents the Service Studio screen action <code>Edit</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandEdit(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcIsEdit = (!varLcIsEdit); // IsEdit = notIsEdit
				// Refresh Widget (wtContentWrapper)
				ssListRecordsCardsListDoDataBind = true;
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtContentWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cntLogContent_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLogContent_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLogContent_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLogContent_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLogContent)
		/// </summary>
		/// <returns>The Visible State of wtLogContent</returns>
		public bool cntLogContent_isVisible() {
			return true;
		}

		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding: 15px; font-size: 18px;text-shadow: 0px 1px 2px #dadada;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container27_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container27_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntWrapperList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "style";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWrapperList_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList</returns>
		public bool cntWrapperList_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_Table10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Table10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Table10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin:2px;padding: 4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell66_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell66_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell66_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left: 10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntContentWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntContentWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentWrapper)
		/// </summary>
		/// <returns>The Visible State of wtContentWrapper</returns>
		public bool cntContentWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell76_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell76_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell76_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container75_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container75_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container75_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container75_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container75)
		/// </summary>
		/// <returns>The Visible State of wt_Container75</returns>
		public bool cnt_Container75_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void sel_ComboBox50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wt_ComboBox50_reclist == null) {
					using(Transaction wt_ComboBox50_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wt_ComboBox50_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENSIASSupportTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wt_ComboBox50_sqlCmd = wt_ComboBox50_trans.CreateCommand(wt_ComboBox50_sql);
						Rt_wt_ComboBox50_sqlCmd.CreateParameter("@Selection", varLcSupportTypeId);
						Rt_wt_ComboBox50_sqlCmd.TransformParametersSyntax();
						Rt_wt_ComboBox50_reclist = new RLSIASSupportTypeRecordList();
						Rt_wt_ComboBox50_reclist.Transaction = wt_ComboBox50_trans;
						Rt_wt_ComboBox50_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wt_ComboBox50_sqlCmd, Rt_wt_ComboBox50_reclist, "WebSelectWidget load operation");
						Rt_wt_ComboBox50_reclist = (RLSIASSupportTypeRecordList) Rt_wt_ComboBox50_reclist.Duplicate();
					}
				}
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
				if (Rt_wt_ComboBox50.SpecialListVal == "0")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				Rt_wt_ComboBox50_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox50_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox50_reclist.CurrentRec.ssENSIASSupportType.ssLabel, Convert.ToString(Rt_wt_ComboBox50_reclist.CurrentRec.ssENSIASSupportType.ssId)));
						if (varLcSupportTypeId == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox50_reclist.CurrentRec.ssENSIASSupportType.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox50_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox50_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox50
		/// </summary>
		public void sel_ComboBox50_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox50_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox50.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcSupportTypeId = 0;
			}
			else {
				Rt_wt_ComboBox50.SpecialListVal = "";
				try {
					varLcSupportTypeId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox50)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox50</returns>
		public bool sel_ComboBox50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox50)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox50</returns>
		public bool sel_ComboBox50_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox50)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox50</returns>
		public bool sel_ComboBox50_isMandatory() {
			return false;
		}

		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container28_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container28_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecordsCards_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecordsCards
				ssListRecordsCardsList = varLcSIASSupportTypeList;
				ssListRecordsCardsListDoDataBind = false;
				ssListRecordsCardsListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecordsCards_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsCardsList.Length > 0) {
					ssListRecordsCardsList.CurrentRec = ssListRecordsCardsList[ssListRecordsCardsList.CurrentRowNumber];
				}
				if (ssListRecordsCardsList.Length > e.SelectedIndex) {
					ssListRecordsCardsList.CurrentRec = ssListRecordsCardsList[e.SelectedIndex];
					ssListRecordsCardsList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsCards_Store(object dataItem, int index) {
			RCSIASSupportTypeRecord tmprec = (RCSIASSupportTypeRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENSIASSupportType.ssId == 0?(object) null: tmprec.ssENSIASSupportType.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENSIASSupportType.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENSIASSupportType.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true
			}
			))));
			if (index < wtListRecordsCards_storage.Count) {
				wtListRecordsCards_storage[index] = tmpFields;
			} else {
				wtListRecordsCards_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsCards_Restore() {

			#region fetch ssListRecordsCardsList.

			// Read the needed fields of ssListRecordsCardsList from storewtListRecordsCards_list
			ssListRecordsCardsList = new RLSIASSupportTypeRecordList();
			ArrayList storewtListRecordsCards_list;
			storewtListRecordsCards_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsCards_list", null);
			if (storewtListRecordsCards_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsCards_list in storewtListRecordsCards_list) {
					if (tmpFieldswtListRecordsCards_list != null) {
						// Aux current record variable
						RCSIASSupportTypeRecord tmpAuxCurrentRecordwtListRecordsCards_list = new RCSIASSupportTypeRecord(null);
						tmpAuxCurrentRecordwtListRecordsCards_list.ssENSIASSupportType.ssId = (int) (tmpFieldswtListRecordsCards_list[0] == null ? 0: tmpFieldswtListRecordsCards_list[0]);

						tmpAuxCurrentRecordwtListRecordsCards_list.ssENSIASSupportType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCards_list[1]);

						tmpAuxCurrentRecordwtListRecordsCards_list.ssENSIASSupportType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCards_list[2]);

						ssListRecordsCardsList.Append(tmpAuxCurrentRecordwtListRecordsCards_list);
					}
				}
			}
			ssListRecordsCardsList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsCardsList runtime properties state.


			if (storewtListRecordsCards_list.Count > 0) {
				ssListRecordsCardsList.RestoreRecordListState(storewtListRecordsCards_list.Count - 1, false);
			} else {
				ssListRecordsCardsList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsCards_storage = storewtListRecordsCards_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsCards_Clear(object sender, EventArgs e) {
			wtListRecordsCards_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsCards_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsCardsList.Length != -1) {
				wtListRecordsCards_storage.Clear();
				for (int i=startIndex; i<ssListRecordsCardsList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsCards_Store(ssListRecordsCardsList.Data[i], wtListRecordsCards_storage.Count);
				}
			}
		}
		public void recListListRecordsCards_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsCards widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLSIASSupportTypeRecordList getWtListRecordsCardsList() {
			if (ssListRecordsCardsListDoDataBind) {
				recListListRecordsCards_onDataBinding(this, null);
			}

			return ssListRecordsCardsList;
		}
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "line-height:20px;height:20px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkCard) sender;
				widget.inParamIsSmall = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = +eignzAFHkOPNELcQuNVqg) Expression:
		///  ListRecordsCards.List.Current.SIASSupportType.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression49() {
			return getWtListRecordsCardsList().CurrentRec.ssENSIASSupportType.ssLabel;
		}
		public void lnk_Link14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnk_Link14_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnk_Link14_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:white;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link14_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDelete(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link14)
		/// </summary>
		/// <returns>title of the Link (wt_Link14)</returns>
		public string
		lnk_Link14_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link14)
		/// </summary>
		/// <returns>The Visible State of wt_Link14</returns>
		public bool lnk_Link14_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link14)
		/// </summary>
		/// <returns>The Enabled State of wt_Link14</returns>
		public bool lnk_Link14_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("G1Mahdk9CkCYt5z2Q3wtYw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void selSIASSupport_ExamConcession_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				if (Rt_wtSIASSupport_ExamConcession_reclist == null) {
					using(Transaction wtSIASSupport_ExamConcession_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
						string wtSIASSupport_ExamConcession_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENExamConcessionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
						Command Rt_wtSIASSupport_ExamConcession_sqlCmd = wtSIASSupport_ExamConcession_trans.CreateCommand(wtSIASSupport_ExamConcession_sql);
						Rt_wtSIASSupport_ExamConcession_sqlCmd.CreateParameter("@Selection", ssSupportNeedEditRecord.ssENSIASSupport.ssExamConcession);
						Rt_wtSIASSupport_ExamConcession_sqlCmd.TransformParametersSyntax();
						Rt_wtSIASSupport_ExamConcession_reclist = new RLExamConcessionsRecordList();
						Rt_wtSIASSupport_ExamConcession_reclist.Transaction = wtSIASSupport_ExamConcession_trans;
						Rt_wtSIASSupport_ExamConcession_reclist.AllOptimizedAttributes = new BitArray[1] {
							new BitArray(4, false)
						}
						;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtSIASSupport_ExamConcession_sqlCmd, Rt_wtSIASSupport_ExamConcession_reclist, "WebSelectWidget load operation");
						Rt_wtSIASSupport_ExamConcession_reclist = (RLExamConcessionsRecordList) Rt_wtSIASSupport_ExamConcession_reclist.Duplicate();
					}
				}
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
				if (Rt_wtSIASSupport_ExamConcession.SpecialListVal == "0")
				((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
				Rt_wtSIASSupport_ExamConcession_reclist.StartIteration();
				try {
					while (!Rt_wtSIASSupport_ExamConcession_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtSIASSupport_ExamConcession_reclist.CurrentRec.ssENExamConcessions.ssLabel, Rt_wtSIASSupport_ExamConcession_reclist.CurrentRec.ssENExamConcessions.ssId));
						if (ssSupportNeedEditRecord.ssENSIASSupport.ssExamConcession == Convert.ToString(Rt_wtSIASSupport_ExamConcession_reclist.CurrentRec.ssENExamConcessions.ssId)) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wtSIASSupport_ExamConcession_reclist.Advance();
					}
				} finally {
					Rt_wtSIASSupport_ExamConcession_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void selSIASSupport_ExamConcession_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtSIASSupport_ExamConcession.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssSupportNeedEditRecord.ssENSIASSupport.ssExamConcession = "";
			}
			else {
				Rt_wtSIASSupport_ExamConcession.SpecialListVal = "";
				try {
					ssSupportNeedEditRecord.ssENSIASSupport.ssExamConcession = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSIASSupport_ExamConcession)
		/// </summary>
		/// <returns>The Visible State of wtSIASSupport_ExamConcession</returns>
		public bool selSIASSupport_ExamConcession_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSIASSupport_ExamConcession)
		/// </summary>
		/// <returns>The Enabled State of wtSIASSupport_ExamConcession</returns>
		public bool selSIASSupport_ExamConcession_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (selSIASSupport_ExamConcession)
		/// </summary>
		/// <returns>The Mandatory Value of selSIASSupport_ExamConcession</returns>
		public bool selSIASSupport_ExamConcession_isMandatory() {
			return false;
		}

		public void cnt_Container52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container52_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container52_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container52_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container52)
		/// </summary>
		/// <returns>The Visible State of wt_Container52</returns>
		public bool cnt_Container52_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtlnkAtt)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtlnkAtt)</returns>
		public string lnklnkAtt_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("DocumentType", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENDocumentTypeEntity.GetRecordByKey(ObjectKey.Parse("VCp0ImZcGEeiof0xLAgFFA")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("EnableDocumentViewingRestrictions", System.Web.HttpUtility.UrlEncode("False", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_AttachDocument", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtlnkAtt)
		/// </summary>
		/// <returns>title of the Link (wtlnkAtt)</returns>
		public string
		lnklnkAtt_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Visible State of wtlnkAtt</returns>
		public bool lnklnkAtt_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Enabled State of wtlnkAtt</returns>
		public bool lnklnkAtt_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtlnkAtt.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance17
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance17_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSave(heContext
				, true)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container15_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container15_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecordsAttatc_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecordsAttatc
				ssListRecordsAttatcList = queryResGetSIASSupportDocumentsBySIASSupportId_outParamList;
				ssListRecordsAttatcListDoDataBind = false;
				ssListRecordsAttatcListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecordsAttatc_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsAttatcList.Length > 0) {
					ssListRecordsAttatcList.CurrentRec = ssListRecordsAttatcList[ssListRecordsAttatcList.CurrentRowNumber];
				}
				if (ssListRecordsAttatcList.Length > e.SelectedIndex) {
					ssListRecordsAttatcList.CurrentRec = ssListRecordsAttatcList[e.SelectedIndex];
					ssListRecordsAttatcList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsAttatc_Store(object dataItem, int index) {
			RCSIASSupportDocumentsDocumentsRecord tmprec = (RCSIASSupportDocumentsDocumentsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENSIASSupportDocuments.ssId == 0?(object) null: tmprec.ssENSIASSupportDocuments.ssId);
			tmpFields.Add(tmprec.ssENSIASSupportDocuments.ssDocumentId == 0?(object) null: tmprec.ssENSIASSupportDocuments.ssDocumentId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENSIASSupportDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, true, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENSIASSupportDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, false, true, true
			}
			))));
			tmpFields.Add(tmprec.ssENDocuments.ssId == 0?(object) null: tmprec.ssENDocuments.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true
			}
			))));
			if (index < wtListRecordsAttatc_storage.Count) {
				wtListRecordsAttatc_storage[index] = tmpFields;
			} else {
				wtListRecordsAttatc_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsAttatc_Restore() {

			#region fetch ssListRecordsAttatcList.

			// Read the needed fields of ssListRecordsAttatcList from storewtListRecordsAttatc_list
			ssListRecordsAttatcList = new RLSIASSupportDocumentsDocumentsRecordList();
			ArrayList storewtListRecordsAttatc_list;
			storewtListRecordsAttatc_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsAttatc_list", null);
			if (storewtListRecordsAttatc_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsAttatc_list in storewtListRecordsAttatc_list) {
					if (tmpFieldswtListRecordsAttatc_list != null) {
						// Aux current record variable
						RCSIASSupportDocumentsDocumentsRecord tmpAuxCurrentRecordwtListRecordsAttatc_list = new RCSIASSupportDocumentsDocumentsRecord(null);
						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENSIASSupportDocuments.ssId = (int) (tmpFieldswtListRecordsAttatc_list[0] == null ? 0: tmpFieldswtListRecordsAttatc_list[0]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENSIASSupportDocuments.ssDocumentId = (int) (tmpFieldswtListRecordsAttatc_list[1] == null ? 0: tmpFieldswtListRecordsAttatc_list[1]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENSIASSupportDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[2]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENSIASSupportDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[3]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ssId = (int) (tmpFieldswtListRecordsAttatc_list[4] == null ? 0: tmpFieldswtListRecordsAttatc_list[4]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[5]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[6]);

						ssListRecordsAttatcList.Append(tmpAuxCurrentRecordwtListRecordsAttatc_list);
					}
				}
			}
			ssListRecordsAttatcList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsAttatcList runtime properties state.


			if (storewtListRecordsAttatc_list.Count > 0) {
				ssListRecordsAttatcList.RestoreRecordListState(storewtListRecordsAttatc_list.Count - 1, false);
			} else {
				ssListRecordsAttatcList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsAttatc_storage = storewtListRecordsAttatc_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsAttatc_Clear(object sender, EventArgs e) {
			wtListRecordsAttatc_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsAttatc_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsAttatcList.Length != -1) {
				wtListRecordsAttatc_storage.Clear();
				for (int i=startIndex; i<ssListRecordsAttatcList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsAttatc_Store(ssListRecordsAttatcList.Data[i], wtListRecordsAttatc_storage.Count);
				}
			}
		}
		public void recListListRecordsAttatc_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsAttatc widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLSIASSupportDocumentsDocumentsRecordList getWtListRecordsAttatcList() {
			if (ssListRecordsAttatcListDoDataBind) {
				recListListRecordsAttatc_onDataBinding(this, null);
			}

			return ssListRecordsAttatcList;
		}
		public void cnt_Container68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container68_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container68_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container68_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container68)
		/// </summary>
		/// <returns>The Visible State of wt_Container68</returns>
		public bool cnt_Container68_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link47_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDownload(heContext)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link47)
		/// </summary>
		/// <returns>title of the Link (wt_Link47)</returns>
		public string
		lnk_Link47_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link47)
		/// </summary>
		/// <returns>The Visible State of wt_Link47</returns>
		public bool lnk_Link47_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link47)
		/// </summary>
		/// <returns>The Enabled State of wt_Link47</returns>
		public bool lnk_Link47_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = Ze+FQjqzHEW+lwCh92zXDw) Expression: "- " +
		///  ListRecordsAttatc.List.Current.Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			return ("- " +getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssDocumentName);
		}
		public void lnk_Link42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link42_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandDeleteDocument(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link42)
		/// </summary>
		/// <returns>title of the Link (wt_Link42)</returns>
		public string
		lnk_Link42_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link42)
		/// </summary>
		/// <returns>The Visible State of wt_Link42</returns>
		public bool lnk_Link42_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link42)
		/// </summary>
		/// <returns>The Enabled State of wt_Link42</returns>
		public bool lnk_Link42_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtSIASInitialAssessment_Notes_input_value() {
			if (("" !=ssSupportNeedEditRecord.ssENSIASSupport.ssNotes)) {
				return ssSupportNeedEditRecord.ssENSIASSupport.ssNotes;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtSIASInitialAssessment_Notes");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssSupportNeedEditRecord.ssENSIASSupport.ssNotes;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtSIASInitialAssessment_Notes_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssSupportNeedEditRecord.ssENSIASSupport.ssNotes = ""; 
				} else {
					ssSupportNeedEditRecord.ssENSIASSupport.ssNotes = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssSupportNeedEditRecord.ssENSIASSupport.ssNotes = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtSIASInitialAssessment_Notes)
		/// </summary>
		/// <returns>The Visible State of wtSIASInitialAssessment_Notes</returns>
		public bool inputwtSIASInitialAssessment_Notes_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSIASInitialAssessment_Notes)
		/// </summary>
		/// <returns>The Enabled State of wtSIASInitialAssessment_Notes</returns>
		public bool inputwtSIASInitialAssessment_Notes_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtSIASInitialAssessment_Notes)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtSIASInitialAssessment_Notes</returns>
		public bool inputwtSIASInitialAssessment_Notes_isMandatory() {
			return false;
		}

		bool if_wt_If36_hasRun=false;
		bool if_wt_If36_evalResult;
		public bool if_wt_If36() {
			if (if_wt_If36_hasRun) {
				if_wt_If36_hasRun = false;
				return if_wt_If36_evalResult;
			}
			if_wt_If36_hasRun = true;
			if_wt_If36_evalResult = (resUserCheck_outParamPermissionType==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			return if_wt_If36_evalResult;
		}

		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container61_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container61_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container33_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;margin-right:25px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container33_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkEdit_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEdit_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandEdit(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEdit)
		/// </summary>
		/// <returns>title of the Link (wtEdit)</returns>
		public string
		lnkEdit_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEdit)
		/// </summary>
		/// <returns>The Visible State of wtEdit</returns>
		public bool lnkEdit_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEdit)
		/// </summary>
		/// <returns>The Enabled State of wtEdit</returns>
		public bool lnkEdit_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!varLcIsEdit);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance58_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void lnkSave_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtSave_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandSave(heContext, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtSave)
		/// </summary>
		/// <returns>title of the Link (wtSave)</returns>
		public string
		lnkSave_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSave)
		/// </summary>
		/// <returns>The Visible State of wtSave</returns>
		public bool lnkSave_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtSave)
		/// </summary>
		/// <returns>The Enabled State of wtSave</returns>
		public bool lnkSave_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container44_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance73_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("KWHNbVoiY0i7rCt0vNrlbA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container37_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container37_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container37_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:7px;margin-left:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container37_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container37)
		/// </summary>
		/// <returns>The Visible State of wt_Container37</returns>
		public bool cnt_Container37_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link57_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnk_Link57_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnk_Link57_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:#666;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link57_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandCancel(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link57)
		/// </summary>
		/// <returns>title of the Link (wt_Link57)</returns>
		public string
		lnk_Link57_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link57)
		/// </summary>
		/// <returns>The Visible State of wt_Link57</returns>
		public bool lnk_Link57_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link57)
		/// </summary>
		/// <returns>The Enabled State of wt_Link57</returns>
		public bool lnk_Link57_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container74_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container74_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container74_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container74_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container74)
		/// </summary>
		/// <returns>The Visible State of wt_Container74</returns>
		public bool cnt_Container74_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container24_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return varLcIsEdit;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void Hunspell_webBlck_WebBlockInstance77_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
				widget.inParamTextInputId = this.FindControl("wtSIASInitialAssessment_Notes").ClientID;
				widget.inParamExtraStyle = "";
				widget.inParamInPopupWindow = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container43_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container43_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon widget = (ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon) sender;
				widget.inParamTextInputId = this.FindControl("wtSIASInitialAssessment_Notes").ClientID;
				widget.inParamAutoCompleteType = ENAutoCompleteBankTypeEntity.GetRecordByKey(ObjectKey.Parse("jAIPmHz_R0SXwNBFiWjAnA")).ssId;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wtSupportNeedEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack || IsViewStateEmpty) {
				ssSupportNeedEditRecord = queryResGetSIASSupportsByStudentId_outParamList.CurrentRec;
			}
		}
		public static class FuncCommandDownload {

			/// <summary>
			/// Query Function "GetDocumentById" of Action "Download"
			/// </summary>
			public static RLDocumentsRecordList datasetGetDocumentById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: True
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 3));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENDocuments.[TYPE] o2, ENDocuments.[DOCUMENTNAME] o3, ENDocuments.[DOCUMENTDATA] o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {Documents} ENDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENDocuments.[ID] = @qpinP) AND (ENDocuments.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENDocuments.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENDocuments.[TYPE] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDocumentsRecordList outParamList = new RLDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.Download.GetDocumentById.List");
						outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Download.GetDocumentById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 3) {
						RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.Download.GetDocumentById.List");
							outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Download.GetDocumentById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnChange {

			/// <summary>
			/// Query Function "GetSIASSupportTypes" of Action "OnChange"
			/// </summary>
			public static RLSIASSupportTypeRecordList datasetGetSIASSupportTypes(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSIASSupportType.[ID] o1, ENSIASSupportType.[LABEL] o2, ENSIASSupportType.[ORDER] o3, ENSIASSupportType.[IS_ACTIVE] o4");
				fromBuilder.Append(" FROM {SIASSupportType} ENSIASSupportType");
				whereBuilder.Append(" WHERE (ENSIASSupportType.[IS_ACTIVE] = 1) AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENSIASSupportType.[ID] = @qpinP) AND (ENSIASSupportType.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENSIASSupportType.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENSIASSupportType.[ORDER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportTypeRecordList outParamList = new RLSIASSupportTypeRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportTypeRecordList _tmp = new RLSIASSupportTypeRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.OnChange.GetSIASSupportTypes.List");
						outParamList = (RLSIASSupportTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.OnChange.GetSIASSupportTypes.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportTypeRecordList _tmp = new RLSIASSupportTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.OnChange.GetSIASSupportTypes.List");
							outParamList = (RLSIASSupportTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.OnChange.GetSIASSupportTypes.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandCancel {
		}
		public static class FuncCommandDeleteDocument {
		}
		public static class FuncCommandSave {
		}
		public static class FuncCommandDelete {
		}
		public static class FuncCommandEdit {
		}
		public static class FuncssPreparation {

			private static void datasetGetSIASSupportDocumentsBySIASSupportIdReadDB(ref RCSIASSupportDocumentsDocumentsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENDocuments.Read(r, ref index);
				rec.ssENSIASSupportDocuments.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetSIASSupportDocumentsBySIASSupportId" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportDocumentsDocumentsRecordList datasetGetSIASSupportDocumentsBySIASSupportId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {ListRecordsAttatc}
				// Refresh Query lWEqV6UV_kqmzdcAQZvp8w Iterations: Multiple {ListRecordsAttatc}
				// Refresh Query QByc6moKF0KMioJqvVNKyg Iterations: Multiple {ListRecordsAttatc}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENDocuments.[ID] o1, NULL o2, ENDocuments.[DOCUMENTNAME] o3, NULL o4, NULL o5, NULL o6, NULL o7, ENSIASSupportDocuments.[ID] o8, NULL o9, ENSIASSupportDocuments.[DOCUMENTID] o10, NULL o11, NULL o12");
				fromBuilder.Append(" FROM ({Documents} ENDocuments Inner JOIN {SIASSupportDocuments} ENSIASSupportDocuments ON (ENSIASSupportDocuments.[DOCUMENTID] = ENDocuments.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENSIASSupportDocuments.[SIASSUPPORTID] = @qpinP) AND (ENSIASSupportDocuments.[SIASSUPPORTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENSIASSupportDocuments.[SIASSUPPORTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportDocumentsDocumentsRecordList outParamList = new RLSIASSupportDocumentsDocumentsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetSIASSupportDocumentsBySIASSupportIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportDocumentsDocumentsRecordList _tmp = new RLSIASSupportDocumentsDocumentsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetSIASSupportDocumentsBySIASSupportIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportDocumentsBySIASSupportId.List");
						outParamList = (RLSIASSupportDocumentsDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportDocumentsBySIASSupportId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportDocumentsDocumentsRecordList _tmp = new RLSIASSupportDocumentsDocumentsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetSIASSupportDocumentsBySIASSupportIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportDocumentsBySIASSupportId.List");
							outParamList = (RLSIASSupportDocumentsDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportDocumentsBySIASSupportId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSIASSupportsByStudentId" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportRecordList datasetGetSIASSupportsByStudentId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSIASSupport.[ID] o1, ENSIASSupport.[STUDENTID] o2, NULL o3, NULL o4, NULL o5, ENSIASSupport.[EXAMCONCESSION] o6, ENSIASSupport.[NOTES] o7, ENSIASSupport.[CREATEDON] o8, ENSIASSupport.[CREATEDBY] o9");
				fromBuilder.Append(" FROM {SIASSupport} ENSIASSupport");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSIASSupport.[STUDENTID] = @qpstP) AND (ENSIASSupport.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSIASSupport.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSIASSupportRecordList outParamList = new RLSIASSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true, true, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportsByStudentId.List");
						outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportsByStudentId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSIASSupportRecordList _tmp = new RLSIASSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportsByStudentId.List");
							outParamList = (RLSIASSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSIASSupportsByStudentId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSupportTypes" of Action "Preparation"
			/// </summary>
			public static RLSIASSupportTypeRecordList QueryGetSupportTypes(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentId) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentId", DbType.String, qpstStudentId);
				string advSql = "SELECT  {SIASSupportType}.[ID], {SIASSupportType}.[LABEL], {SIASSupportType}.[ORDER], {SIASSupportType}.[IS_ACTIVE]  " +
				 "FROM  {SIASSupport}   " +
				 "INNER JOIN  {SIASSupportType} ON  {SIASSupportType}.[ID] =  {SIASSupport}.[SUPPORTTYPE1] OR  {SIASSupport}.[SUPPORTTYPE2] =  {SIASSupportType}.[ID] OR  {SIASSupport}.[SUPPORTTYPE3] =  {SIASSupportType}.[ID]  " +
				 "WHERE  {SIASSupport}.[STUDENTID] = @qpstStudentId";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLSIASSupportTypeRecordList outParamList = new RLSIASSupportTypeRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLSIASSupportTypeRecordList _tmp = new RLSIASSupportTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSupportTypes.List");
							outParamList = (RLSIASSupportTypeRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSupportTypes.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.TAB_Support.Preparation.GetSupportTypes.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetSupportTypes in Preparation in TAB_Support in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.*  FROM {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupportType}.[Id] = {SIASSupport}.[SupportType1] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetSupportTypes in Preparation in TAB_Support in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.*  FROM {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupportType}.[Id] = {SIASSupport}.[SupportType1] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetSupportTypes in Preparation in TAB_Support in Learner_InitialAssessment in CaseConferencing (SELECT {SIASSupportType}.*  FROM {SIASSupport}   INNER JOIN {SIASSupportType} ON {SIASSupportType}.[Id] = {SIASSupport}.[SupportType1] OR {SIASSupport}.[SupportType2] = {SIASSupportType}.[Id] OR {SIASSupport}.[SupportType3] = {SIASSupportType}.[Id]  WHERE {SIASSupport}.[StudentId] = @StudentId): " + aqExcep.Message);
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KxpOMS7YNT0y_dFLxnzf78g";
			}
		}
	}

}
