/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowReporting {
	public abstract class WBlkRAGNotUpdatedIn30: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Variable <code>varLcBarChartDataPointsForCluster</code> that represents the Service Studio local
		///  variable <code>BarChartDataPointsForCluster</code> <p>Description: </p>
		/// </summary>
		RLDataPointRecordList varLcBarChartDataPointsForCluster = new RLDataPointRecordList();

		/// <summary>
		/// Variable <code>varLcNumberOfDays</code> that represents the Service Studio local variable
		///  <code>NumberOfDays</code> <p>Description: </p>
		/// </summary>
		int varLcNumberOfDays = 30;

		/// <summary>
		/// Variable <code>varLcCurrentLevel</code> that represents the Service Studio local variable
		///  <code>CurrentLevel</code> <p>Description: Cluster CurriculumLead Team</p>
		/// </summary>
		string varLcCurrentLevel = "Cluster";

		/// <summary>
		/// Variable <code>varLcSelectedTab</code> that represents the Service Studio local variable
		///  <code>SelectedTab</code> <p>Description: </p>
		/// </summary>
		int varLcSelectedTab = 1;

		/// <summary>
		/// Variable <code>varLcBarChartDataPointsForSite</code> that represents the Service Studio local
		///  variable <code>BarChartDataPointsForSite</code> <p>Description: </p>
		/// </summary>
		RLDataPointRecordList varLcBarChartDataPointsForSite = new RLDataPointRecordList();

		/// <summary>
		/// Variable <code>varLcClusterGraphVisible</code> that represents the Service Studio local variable
		///  <code>ClusterGraphVisible</code> <p>Description: </p>
		/// </summary>
		bool varLcClusterGraphVisible = true;

		/// <summary>
		/// Variable <code>varLcSelectedTeam</code> that represents the Service Studio local variable
		///  <code>SelectedTeam</code> <p>Description: </p>
		/// </summary>
		string varLcSelectedTeam = "";

		/// <summary>
		/// Variable <code>varLcSelectedCurriculumLead</code> that represents the Service Studio local variable
		///  <code>SelectedCurriculumLead</code> <p>Description: </p>
		/// </summary>
		string varLcSelectedCurriculumLead = "";

		/// <summary>
		/// Variable <code>varLcSiteGraphVisible</code> that represents the Service Studio local variable
		///  <code>SiteGraphVisible</code> <p>Description: </p>
		/// </summary>
		bool varLcSiteGraphVisible = true;

		/// <summary>
		/// Variable <code>varLcSelectedSite</code> that represents the Service Studio local variable
		///  <code>SelectedSite</code> <p>Description: </p>
		/// </summary>
		string varLcSelectedSite = "";

		/// <summary>
		/// Variable <code>varLcClusterGraphSubTitleText</code> that represents the Service Studio local
		///  variable <code>ClusterGraphSubTitleText</code> <p>Description: </p>
		/// </summary>
		string varLcClusterGraphSubTitleText = "";

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container62;
		protected OutSystems.HubEdition.WebWidgets.Container wtMenuTab;
		protected OutSystems.HubEdition.WebWidgets.Container wtByClusterContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container85;
		protected OutSystems.HubEdition.WebWidgets.Container wtBySiteContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container57;
		protected OutSystems.HubEdition.WebWidgets.Container wtContentArea;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container75;
		/// <summary>
		/// Variable "True" if the Widget wt_If91
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If91T;

		/// <summary>
		/// Variable "True" if the Widget wt_If91
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If91F;
		protected OutSystems.HubEdition.WebWidgets.Container wtByCluster;
		/// <summary>
		/// Variable "True" if the Widget wt_If83
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If83T;

		/// <summary>
		/// Variable "True" if the Widget wt_If83
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If83F;
		protected OutSystems.HubEdition.WebWidgets.Container wtListContainer;
		private RLStudentRecordList _ssListRecords1List = new RLStudentRecordList();
		public RLStudentRecordList ssListRecords1List {
			get {
				return _ssListRecords1List; 
			}
			set {
				_ssListRecords1List = value;
				wtListRecords1.DataSource = value;
				ssListRecords1ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords1;
		public ArrayList wtListRecords1_storage = new ArrayList();
		protected bool ssListRecords1List_notUsedYet = true;
		protected bool ssListRecords1ListDoDataBind;
		protected bool ssListRecords1ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container63;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container70;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container58;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container54;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		/// <summary>
		/// Variable "True" if the Widget wt_If48
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If48T;

		/// <summary>
		/// Variable "True" if the Widget wt_If48
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If48F;
		/// <summary>
		/// Variable (wt_Link64) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link64;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		/// <summary>
		/// Variable (wtUpdateRAGButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtUpdateRAGButton;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container84;
		/// <summary>
		/// Variable (wt_Button14) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container56;
		/// <summary>
		/// Variable "True" if the Widget wt_If38
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If38T;

		/// <summary>
		/// Variable "True" if the Widget wt_If38
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If38F;
		protected OutSystems.HubEdition.WebWidgets.Container wtBySite;
		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16T;

		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16F;
		protected OutSystems.HubEdition.WebWidgets.Container wtListContainer2;
		private RLStudentRecordList _ssListRecords2List = new RLStudentRecordList();
		public RLStudentRecordList ssListRecords2List {
			get {
				return _ssListRecords2List; 
			}
			set {
				_ssListRecords2List = value;
				wtListRecords2.DataSource = value;
				ssListRecords2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords2;
		public ArrayList wtListRecords2_storage = new ArrayList();
		protected bool ssListRecords2List_notUsedYet = true;
		protected bool ssListRecords2ListDoDataBind;
		protected bool ssListRecords2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container71;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container93;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		/// <summary>
		/// Variable "True" if the Widget wt_If35
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If35T;

		/// <summary>
		/// Variable "True" if the Widget wt_If35
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If35F;
		/// <summary>
		/// Variable (wt_Link86) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link86;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		/// <summary>
		/// Variable (wtUpdateRAGButton2) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtUpdateRAGButton2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container53;
		/// <summary>
		/// Variable (wt_Button81) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button81;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container39;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLStudentRecordList queryResGetStudentsRAGsNotUpdatedBySite_outParamList = new RLStudentRecordList();
		int queryResGetStudentsRAGsNotUpdatedBySite_outParamCount = 0;
		RLStudentRecordList queryResGetStudentsRAGsNotUpdatedByTeam_outParamList = new RLStudentRecordList();
		int queryResGetStudentsRAGsNotUpdatedByTeam_outParamCount = 0;
		Actions.lcoGetRAGs_LastUpdatedBySite resGetRAGs_LastUpdatedBySite = new Actions.lcoGetRAGs_LastUpdatedBySite(); RCChartFormatRecord resChartFormat_Init_outParamChartFormat = new RCChartFormatRecord(null);
		Actions.lcoGetRAGs_LastUpdatedByCluster resGetRAGs_LastUpdatedByCluster = new Actions.lcoGetRAGs_LastUpdatedByCluster(); /// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// ChartFormat_Init
			Actions.ActionChartFormat_Init(heContext, true, true, out resChartFormat_Init_outParamChartFormat);
			// GetRAGs_LastUpdatedByCluster
			Actions.ActionGetRAGs_LastUpdatedByCluster(heContext, varLcNumberOfDays, "Cluster", "", out resGetRAGs_LastUpdatedByCluster.outParamDataPointRecordList, out resGetRAGs_LastUpdatedByCluster.outParamSelectedArea);
			// GetRAGs_LastUpdatedBySite
			Actions.ActionGetRAGs_LastUpdatedBySite(heContext, varLcNumberOfDays, out resGetRAGs_LastUpdatedBySite.outParamDataPointRecordList);
			varLcBarChartDataPointsForCluster = resGetRAGs_LastUpdatedByCluster.outParamDataPointRecordList; // BarChartDataPointsForCluster = GetRAGs_LastUpdatedByCluster.DataPointRecordList
			varLcBarChartDataPointsForSite = resGetRAGs_LastUpdatedBySite.outParamDataPointRecordList; // BarChartDataPointsForSite = GetRAGs_LastUpdatedBySite.DataPointRecordList
			// Query QueryGetStudentsRAGsNotUpdatedByTeam
			int QueryGetStudentsRAGsNotUpdatedByTeam_maxRecords = Math.Max(wtListRecords1.StartIndex + wtListRecords1.LineCount + 1, 0);
			queryResGetStudentsRAGsNotUpdatedByTeam_outParamList = FuncssPreparation.QueryGetStudentsRAGsNotUpdatedByTeam(heContext, QueryGetStudentsRAGsNotUpdatedByTeam_maxRecords, IterationMultiplicity.Multiple, out queryResGetStudentsRAGsNotUpdatedByTeam_outParamCount, varLcNumberOfDays
			, "0"
			, varLcSelectedCurriculumLead
			, false
			);
			// Query QueryGetStudentsRAGsNotUpdatedBySite
			int QueryGetStudentsRAGsNotUpdatedBySite_maxRecords = Math.Max(wtListRecords2.StartIndex + wtListRecords2.LineCount + 1, 0);
			queryResGetStudentsRAGsNotUpdatedBySite_outParamList = FuncssPreparation.QueryGetStudentsRAGsNotUpdatedBySite(heContext, QueryGetStudentsRAGsNotUpdatedBySite_maxRecords, IterationMultiplicity.Multiple, out queryResGetStudentsRAGsNotUpdatedBySite_outParamCount, varLcNumberOfDays
			, "dummy"
			, false
			);
		}
		static WBlkRAGNotUpdatedIn30() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtListRecords1.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtListRecords1.ClientID, true, -1);
			wtListRecords1.LineCountExpression = () => 10;
			wtListRecords1.EmptyMessageExpression = () => "No items to show...";
			if (this.wt_Button14 != null) {
				this.wt_Button14.Click += new System.EventHandler(this.wt_Button14_Click);
			}
			wtListRecords2.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtListRecords2.ClientID, true, -1);
			wtListRecords2.LineCountExpression = () => 10;
			wtListRecords2.EmptyMessageExpression = () => "No items to show...";
			if (this.wt_Button81 != null) {
				this.wt_Button81.Click += new System.EventHandler(this.wt_Button81_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssListRecords1ListDoDataBind = true;
					ssListRecords2ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			string jsString = (wtUpdateRAGButton2 != null) ? "return OsEnterKey('" +wtUpdateRAGButton2.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetStudentsRAGsNotUpdatedBySite_outParamList.

			int tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedBySite_outParamList = queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentsRAGsNotUpdatedBySite_outParamList = queryResGetStudentsRAGsNotUpdatedBySite_outParamList.Eof;
			ArrayList storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList = new ArrayList();

			// Write the needed fields of queryResGetStudentsRAGsNotUpdatedBySite_outParamList to the storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList
			if (!queryResGetStudentsRAGsNotUpdatedBySite_outParamList.Empty) {
				try {
					queryResGetStudentsRAGsNotUpdatedBySite_outParamList.StartIteration();

					while (!queryResGetStudentsRAGsNotUpdatedBySite_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList = new ArrayList();
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssStudentReference == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssStudentReference);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssForenames == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssForenames);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssSurname == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssSurname);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMainOfferingCode == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMainOfferingCode);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMainOfferingName == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMainOfferingName);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssStudentPhotoURL == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssStudentPhotoURL);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssEmailAddress == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssEmailAddress);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHomeTelephone == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHomeTelephone);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMobilePhone == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMobilePhone);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment == false?(object) null: queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true
						}
						))));
						storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList.Add(tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList);
						queryResGetStudentsRAGsNotUpdatedBySite_outParamList.Advance();
					}
				} finally {
					queryResGetStudentsRAGsNotUpdatedBySite_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetStudentsRAGsNotUpdatedBySite_outParamList", storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList, null);

			#endregion


			#region store queryResGetStudentsRAGsNotUpdatedBySite_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetStudentsRAGsNotUpdatedBySite_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedBySite_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentsRAGsNotUpdatedBySite_outParamList_eof", tmpeofqueryResGetStudentsRAGsNotUpdatedBySite_outParamList, false);
			queryResGetStudentsRAGsNotUpdatedBySite_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedBySite_outParamList, tmpeofqueryResGetStudentsRAGsNotUpdatedBySite_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("queryCountGetStudentsRAGsNotUpdatedBySite_outParamCount", queryResGetStudentsRAGsNotUpdatedBySite_outParamCount, 0);

			#region store queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.

			int tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList = queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList = queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Eof;
			ArrayList storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList = new ArrayList();

			// Write the needed fields of queryResGetStudentsRAGsNotUpdatedByTeam_outParamList to the storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList
			if (!queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Empty) {
				try {
					queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.StartIteration();

					while (!queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList = new ArrayList();
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssStudentReference == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssStudentReference);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssForenames == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssForenames);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssSurname == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssSurname);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMainOfferingCode == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMainOfferingCode);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMainOfferingName == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMainOfferingName);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssStudentPhotoURL == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssStudentPhotoURL);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssEmailAddress == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssEmailAddress);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHomeTelephone == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHomeTelephone);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMobilePhone == "" ?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMobilePhone);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment == false?(object) null: queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment);
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true
						}
						))));
						storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Add(tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList);
						queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Advance();
					}
				} finally {
					queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetStudentsRAGsNotUpdatedByTeam_outParamList", storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList, null);

			#endregion


			#region store queryResGetStudentsRAGsNotUpdatedByTeam_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetStudentsRAGsNotUpdatedByTeam_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentsRAGsNotUpdatedByTeam_outParamList_eof", tmpeofqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList, false);
			queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList, tmpeofqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("queryCountGetStudentsRAGsNotUpdatedByTeam_outParamCount", queryResGetStudentsRAGsNotUpdatedByTeam_outParamCount, 0);
			ViewStateAttributes.SetInViewState("resChartFormat_Init_outParamChartFormat_ssSTChartFormat_ssShowDataPointValues", resChartFormat_Init_outParamChartFormat.ssSTChartFormat.ssShowDataPointValues, false);
			ViewStateAttributes.SetInViewState("resChartFormat_Init_outParamChartFormat_ssSTChartFormat_ssUseAnimation", resChartFormat_Init_outParamChartFormat.ssSTChartFormat.ssUseAnimation, false);

			#region store varLcBarChartDataPointsForCluster.

			int tmpcurrentrownumbervarLcBarChartDataPointsForCluster = varLcBarChartDataPointsForCluster.CurrentRowNumber;
			bool tmpeofvarLcBarChartDataPointsForCluster = varLcBarChartDataPointsForCluster.Eof;
			ArrayList storevarLcBarChartDataPointsForCluster = new ArrayList();

			// Write the needed fields of varLcBarChartDataPointsForCluster to the storevarLcBarChartDataPointsForCluster
			if (!varLcBarChartDataPointsForCluster.Empty) {
				try {
					varLcBarChartDataPointsForCluster.StartIteration();

					while (!varLcBarChartDataPointsForCluster.Eof) {
						ArrayList tmpFieldsvarLcBarChartDataPointsForCluster = new ArrayList();
						tmpFieldsvarLcBarChartDataPointsForCluster.Add(varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssLabel == "" ?(object) null: varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssLabel);
						tmpFieldsvarLcBarChartDataPointsForCluster.Add(varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssValue == 0.0M?(object) null: varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssValue);
						tmpFieldsvarLcBarChartDataPointsForCluster.Add(varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssDataSeriesName == "" ?(object) null: varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssDataSeriesName);
						tmpFieldsvarLcBarChartDataPointsForCluster.Add(varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssTooltip == "" ?(object) null: varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssTooltip);
						tmpFieldsvarLcBarChartDataPointsForCluster.Add(varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssColor == "" ?(object) null: varLcBarChartDataPointsForCluster.CurrentRec.ssSTDataPoint.ssColor);
						storevarLcBarChartDataPointsForCluster.Add(tmpFieldsvarLcBarChartDataPointsForCluster);
						varLcBarChartDataPointsForCluster.Advance();
					}
				} finally {
					varLcBarChartDataPointsForCluster.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcBarChartDataPointsForCluster", storevarLcBarChartDataPointsForCluster, null);

			#endregion


			#region store varLcBarChartDataPointsForCluster runtime properties state.

			ViewStateAttributes.SetInViewState("varLcBarChartDataPointsForCluster_currentrownumber", tmpcurrentrownumbervarLcBarChartDataPointsForCluster, 0);
			ViewStateAttributes.SetInViewState("varLcBarChartDataPointsForCluster_eof", tmpeofvarLcBarChartDataPointsForCluster, false);
			varLcBarChartDataPointsForCluster.RestoreRecordListState(tmpcurrentrownumbervarLcBarChartDataPointsForCluster, tmpeofvarLcBarChartDataPointsForCluster);

			#endregion

			ViewStateAttributes.SetInViewState("varLcNumberOfDays", varLcNumberOfDays, 0);
			ViewStateAttributes.SetInViewState("varLcCurrentLevel", varLcCurrentLevel, "");
			ViewStateAttributes.SetInViewState("varLcSelectedTab", varLcSelectedTab, 0);

			#region store varLcBarChartDataPointsForSite.

			int tmpcurrentrownumbervarLcBarChartDataPointsForSite = varLcBarChartDataPointsForSite.CurrentRowNumber;
			bool tmpeofvarLcBarChartDataPointsForSite = varLcBarChartDataPointsForSite.Eof;
			ArrayList storevarLcBarChartDataPointsForSite = new ArrayList();

			// Write the needed fields of varLcBarChartDataPointsForSite to the storevarLcBarChartDataPointsForSite
			if (!varLcBarChartDataPointsForSite.Empty) {
				try {
					varLcBarChartDataPointsForSite.StartIteration();

					while (!varLcBarChartDataPointsForSite.Eof) {
						ArrayList tmpFieldsvarLcBarChartDataPointsForSite = new ArrayList();
						tmpFieldsvarLcBarChartDataPointsForSite.Add(varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssLabel == "" ?(object) null: varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssLabel);
						tmpFieldsvarLcBarChartDataPointsForSite.Add(varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssValue == 0.0M?(object) null: varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssValue);
						tmpFieldsvarLcBarChartDataPointsForSite.Add(varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssDataSeriesName == "" ?(object) null: varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssDataSeriesName);
						tmpFieldsvarLcBarChartDataPointsForSite.Add(varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssTooltip == "" ?(object) null: varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssTooltip);
						tmpFieldsvarLcBarChartDataPointsForSite.Add(varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssColor == "" ?(object) null: varLcBarChartDataPointsForSite.CurrentRec.ssSTDataPoint.ssColor);
						storevarLcBarChartDataPointsForSite.Add(tmpFieldsvarLcBarChartDataPointsForSite);
						varLcBarChartDataPointsForSite.Advance();
					}
				} finally {
					varLcBarChartDataPointsForSite.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcBarChartDataPointsForSite", storevarLcBarChartDataPointsForSite, null);

			#endregion


			#region store varLcBarChartDataPointsForSite runtime properties state.

			ViewStateAttributes.SetInViewState("varLcBarChartDataPointsForSite_currentrownumber", tmpcurrentrownumbervarLcBarChartDataPointsForSite, 0);
			ViewStateAttributes.SetInViewState("varLcBarChartDataPointsForSite_eof", tmpeofvarLcBarChartDataPointsForSite, false);
			varLcBarChartDataPointsForSite.RestoreRecordListState(tmpcurrentrownumbervarLcBarChartDataPointsForSite, tmpeofvarLcBarChartDataPointsForSite);

			#endregion

			ViewStateAttributes.SetInViewState("varLcClusterGraphVisible", varLcClusterGraphVisible, false);
			ViewStateAttributes.SetInViewState("varLcSelectedTeam", varLcSelectedTeam, "");
			ViewStateAttributes.SetInViewState("varLcSelectedCurriculumLead", varLcSelectedCurriculumLead, "");
			ViewStateAttributes.SetInViewState("varLcSiteGraphVisible", varLcSiteGraphVisible, false);
			ViewStateAttributes.SetInViewState("varLcSelectedSite", varLcSelectedSite, "");
			ViewStateAttributes.SetInViewState("varLcClusterGraphSubTitleText", varLcClusterGraphSubTitleText, "");
			if (IsAjaxRequest) {
				recListListRecords1_Rebuild((ssListRecords1ListDataBound ? wtListRecords1.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords1.LineCount);
			}
			if (IsAjaxRequest) {
				recListListRecords2_Rebuild((ssListRecords2ListDataBound ? wtListRecords2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords2.LineCount);
			}
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetStudentsRAGsNotUpdatedBySite_outParamList.

				// Read the needed fields of queryResGetStudentsRAGsNotUpdatedBySite_outParamList from storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList
				queryResGetStudentsRAGsNotUpdatedBySite_outParamList = new RLStudentRecordList();
				ArrayList storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList;
				storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetStudentsRAGsNotUpdatedBySite_outParamList", null);
				if (storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList in storequeryResGetStudentsRAGsNotUpdatedBySite_outParamList) {
						if (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList != null) {
							// Aux current record variable
							RCStudentRecord tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList = new RCStudentRecord(null);
							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssStudentReference = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[0] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssForenames = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[1] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssSurname = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[2] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssMainOfferingCode = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[3] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssMainOfferingName = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[4] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssStudentPhotoURL = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[5] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssEmailAddress = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[6] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssHomeTelephone = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[7] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssMobilePhone = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[8] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ssHasCurrentActiveEnrolment = (bool) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[9] == null ? false: tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList.ssENStudent.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentsRAGsNotUpdatedBySite_outParamList[11]);

							queryResGetStudentsRAGsNotUpdatedBySite_outParamList.Append(tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedBySite_outParamList);
						}
					}
				}
				queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetStudentsRAGsNotUpdatedBySite_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedBySite_outParamList;
				tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedBySite_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentsRAGsNotUpdatedBySite_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentsRAGsNotUpdatedBySite_outParamList;
				tmpeofqueryResGetStudentsRAGsNotUpdatedBySite_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentsRAGsNotUpdatedBySite_outParamList_eof", false);
				queryResGetStudentsRAGsNotUpdatedBySite_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedBySite_outParamList, tmpeofqueryResGetStudentsRAGsNotUpdatedBySite_outParamList);

				#endregion

				queryResGetStudentsRAGsNotUpdatedBySite_outParamCount = (int) ViewStateAttributes.GetFromViewState("queryCountGetStudentsRAGsNotUpdatedBySite_outParamCount", 0);

				#region fetch queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.

				// Read the needed fields of queryResGetStudentsRAGsNotUpdatedByTeam_outParamList from storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList
				queryResGetStudentsRAGsNotUpdatedByTeam_outParamList = new RLStudentRecordList();
				ArrayList storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList;
				storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetStudentsRAGsNotUpdatedByTeam_outParamList", null);
				if (storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList in storequeryResGetStudentsRAGsNotUpdatedByTeam_outParamList) {
						if (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList != null) {
							// Aux current record variable
							RCStudentRecord tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList = new RCStudentRecord(null);
							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssStudentReference = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[0] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssForenames = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[1] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssSurname = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[2] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssMainOfferingCode = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[3] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssMainOfferingName = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[4] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssStudentPhotoURL = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[5] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssEmailAddress = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[6] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssHomeTelephone = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[7] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssMobilePhone = (string) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[8] == null ? "": tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ssHasCurrentActiveEnrolment = (bool) (tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[9] == null ? false: tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList.ssENStudent.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList[11]);

							queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.Append(tmpAuxCurrentRecordqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList);
						}
					}
				}
				queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetStudentsRAGsNotUpdatedByTeam_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList;
				tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentsRAGsNotUpdatedByTeam_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList;
				tmpeofqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentsRAGsNotUpdatedByTeam_outParamList_eof", false);
				queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList, tmpeofqueryResGetStudentsRAGsNotUpdatedByTeam_outParamList);

				#endregion

				queryResGetStudentsRAGsNotUpdatedByTeam_outParamCount = (int) ViewStateAttributes.GetFromViewState("queryCountGetStudentsRAGsNotUpdatedByTeam_outParamCount", 0);
				resChartFormat_Init_outParamChartFormat.ssSTChartFormat.ssShowDataPointValues = (bool) ViewStateAttributes.GetFromViewState("resChartFormat_Init_outParamChartFormat_ssSTChartFormat_ssShowDataPointValues", false);
				resChartFormat_Init_outParamChartFormat.ssSTChartFormat.ssUseAnimation = (bool) ViewStateAttributes.GetFromViewState("resChartFormat_Init_outParamChartFormat_ssSTChartFormat_ssUseAnimation", false);

				#region fetch varLcBarChartDataPointsForCluster.

				// Read the needed fields of varLcBarChartDataPointsForCluster from storevarLcBarChartDataPointsForCluster
				varLcBarChartDataPointsForCluster = new RLDataPointRecordList();
				ArrayList storevarLcBarChartDataPointsForCluster;
				storevarLcBarChartDataPointsForCluster = (ArrayList) ViewStateAttributes.GetFromViewState("varLcBarChartDataPointsForCluster", null);
				if (storevarLcBarChartDataPointsForCluster == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcBarChartDataPointsForCluster in storevarLcBarChartDataPointsForCluster) {
						if (tmpFieldsvarLcBarChartDataPointsForCluster != null) {
							// Aux current record variable
							RCDataPointRecord tmpAuxCurrentRecordvarLcBarChartDataPointsForCluster = new RCDataPointRecord(null);
							tmpAuxCurrentRecordvarLcBarChartDataPointsForCluster.ssSTDataPoint.ssLabel = (string) (tmpFieldsvarLcBarChartDataPointsForCluster[0] == null ? "": tmpFieldsvarLcBarChartDataPointsForCluster[0]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForCluster.ssSTDataPoint.ssValue = (decimal) (tmpFieldsvarLcBarChartDataPointsForCluster[1] == null ? 0.0M: tmpFieldsvarLcBarChartDataPointsForCluster[1]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForCluster.ssSTDataPoint.ssDataSeriesName = (string) (tmpFieldsvarLcBarChartDataPointsForCluster[2] == null ? "": tmpFieldsvarLcBarChartDataPointsForCluster[2]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForCluster.ssSTDataPoint.ssTooltip = (string) (tmpFieldsvarLcBarChartDataPointsForCluster[3] == null ? "": tmpFieldsvarLcBarChartDataPointsForCluster[3]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForCluster.ssSTDataPoint.ssColor = (string) (tmpFieldsvarLcBarChartDataPointsForCluster[4] == null ? "": tmpFieldsvarLcBarChartDataPointsForCluster[4]);

							varLcBarChartDataPointsForCluster.Append(tmpAuxCurrentRecordvarLcBarChartDataPointsForCluster);
						}
					}
				}
				varLcBarChartDataPointsForCluster.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcBarChartDataPointsForCluster runtime properties state.

				int tmpcurrentrownumbervarLcBarChartDataPointsForCluster;
				tmpcurrentrownumbervarLcBarChartDataPointsForCluster = (int) ViewStateAttributes.GetFromViewState("varLcBarChartDataPointsForCluster_currentrownumber", 0);
				bool tmpeofvarLcBarChartDataPointsForCluster;
				tmpeofvarLcBarChartDataPointsForCluster = (bool) ViewStateAttributes.GetFromViewState("varLcBarChartDataPointsForCluster_eof", false);
				varLcBarChartDataPointsForCluster.RestoreRecordListState(tmpcurrentrownumbervarLcBarChartDataPointsForCluster, tmpeofvarLcBarChartDataPointsForCluster);

				#endregion

				varLcNumberOfDays = (int) ViewStateAttributes.GetFromViewState("varLcNumberOfDays", 0);
				varLcCurrentLevel = (string) ViewStateAttributes.GetFromViewState("varLcCurrentLevel", "");
				varLcSelectedTab = (int) ViewStateAttributes.GetFromViewState("varLcSelectedTab", 0);

				#region fetch varLcBarChartDataPointsForSite.

				// Read the needed fields of varLcBarChartDataPointsForSite from storevarLcBarChartDataPointsForSite
				varLcBarChartDataPointsForSite = new RLDataPointRecordList();
				ArrayList storevarLcBarChartDataPointsForSite;
				storevarLcBarChartDataPointsForSite = (ArrayList) ViewStateAttributes.GetFromViewState("varLcBarChartDataPointsForSite", null);
				if (storevarLcBarChartDataPointsForSite == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcBarChartDataPointsForSite in storevarLcBarChartDataPointsForSite) {
						if (tmpFieldsvarLcBarChartDataPointsForSite != null) {
							// Aux current record variable
							RCDataPointRecord tmpAuxCurrentRecordvarLcBarChartDataPointsForSite = new RCDataPointRecord(null);
							tmpAuxCurrentRecordvarLcBarChartDataPointsForSite.ssSTDataPoint.ssLabel = (string) (tmpFieldsvarLcBarChartDataPointsForSite[0] == null ? "": tmpFieldsvarLcBarChartDataPointsForSite[0]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForSite.ssSTDataPoint.ssValue = (decimal) (tmpFieldsvarLcBarChartDataPointsForSite[1] == null ? 0.0M: tmpFieldsvarLcBarChartDataPointsForSite[1]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForSite.ssSTDataPoint.ssDataSeriesName = (string) (tmpFieldsvarLcBarChartDataPointsForSite[2] == null ? "": tmpFieldsvarLcBarChartDataPointsForSite[2]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForSite.ssSTDataPoint.ssTooltip = (string) (tmpFieldsvarLcBarChartDataPointsForSite[3] == null ? "": tmpFieldsvarLcBarChartDataPointsForSite[3]);

							tmpAuxCurrentRecordvarLcBarChartDataPointsForSite.ssSTDataPoint.ssColor = (string) (tmpFieldsvarLcBarChartDataPointsForSite[4] == null ? "": tmpFieldsvarLcBarChartDataPointsForSite[4]);

							varLcBarChartDataPointsForSite.Append(tmpAuxCurrentRecordvarLcBarChartDataPointsForSite);
						}
					}
				}
				varLcBarChartDataPointsForSite.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcBarChartDataPointsForSite runtime properties state.

				int tmpcurrentrownumbervarLcBarChartDataPointsForSite;
				tmpcurrentrownumbervarLcBarChartDataPointsForSite = (int) ViewStateAttributes.GetFromViewState("varLcBarChartDataPointsForSite_currentrownumber", 0);
				bool tmpeofvarLcBarChartDataPointsForSite;
				tmpeofvarLcBarChartDataPointsForSite = (bool) ViewStateAttributes.GetFromViewState("varLcBarChartDataPointsForSite_eof", false);
				varLcBarChartDataPointsForSite.RestoreRecordListState(tmpcurrentrownumbervarLcBarChartDataPointsForSite, tmpeofvarLcBarChartDataPointsForSite);

				#endregion

				varLcClusterGraphVisible = (bool) ViewStateAttributes.GetFromViewState("varLcClusterGraphVisible", false);
				varLcSelectedTeam = (string) ViewStateAttributes.GetFromViewState("varLcSelectedTeam", "");
				varLcSelectedCurriculumLead = (string) ViewStateAttributes.GetFromViewState("varLcSelectedCurriculumLead", "");
				varLcSiteGraphVisible = (bool) ViewStateAttributes.GetFromViewState("varLcSiteGraphVisible", false);
				varLcSelectedSite = (string) ViewStateAttributes.GetFromViewState("varLcSelectedSite", "");
				varLcClusterGraphSubTitleText = (string) ViewStateAttributes.GetFromViewState("varLcClusterGraphSubTitleText", "");
				recListListRecords1_Restore();
				recListListRecords2_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.Kg7tM0LMER0qLhWf3tHRLTQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_Charts.Flows.FlowCharts.WBlkColumnChart.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("g7tM0LMER0qLhWf3tHRLTQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvOnColumnClusterChartClick: VarsBag {
			public string inParamDrilldownLevel;
			public bool inParamDrillDownClicked;
			public bool inParamBackToBegin;
			/// <summary>
			/// Variable <code>varLcGetNulls</code> that represents the Service Studio local variable
			///  <code>GetNulls</code> <p>Description: </p>
			/// </summary>
			public bool varLcGetNulls = false;

			public Actions.lcoGetRAGs_LastUpdatedByCluster resGetRAGs_LastUpdatedByCluster2 = new Actions.lcoGetRAGs_LastUpdatedByCluster();
			public lcvOnColumnClusterChartClick(string inParamDrilldownLevel, bool inParamDrillDownClicked, bool inParamBackToBegin) {
				this.inParamDrilldownLevel = inParamDrilldownLevel;
				this.inParamDrillDownClicked = inParamDrillDownClicked;
				this.inParamBackToBegin = inParamBackToBegin;
			}
		}
		/// <summary>
		/// Action <code>CommandOnColumnClusterChartClick</code> that represents the Service Studio screen
		///  action <code>OnColumnClusterChartClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnColumnClusterChartClick(HeContext heContext, string inParamDrilldownLevel, bool inParamDrillDownClicked, bool inParamBackToBegin) {
			CheckPermissions(heContext);
			lcvOnColumnClusterChartClick localVars = new lcvOnColumnClusterChartClick(inParamDrilldownLevel, inParamDrillDownClicked, inParamBackToBegin);
			try {
				if (localVars.inParamDrillDownClicked) {
					if (((varLcCurrentLevel== "Team") && (!localVars.inParamBackToBegin))) {
						varLcSelectedTeam = Functions.rssespacecharts_ActionDataPoint_GetClicked(heContext).ssSTDataPoint.ssLabel; // SelectedTeam = DataPoint_GetClicked().DataPoint.Label
						// List_Navigation_ResetStartIndex
						Actions.ActionList_Navigation_ResetStartIndex(heContext, wtListRecords1.ClientID);
						varLcClusterGraphVisible = false; // ClusterGraphVisible = False

					} else {
						if ((varLcCurrentLevel== "CurriculumLead")) {
							varLcSelectedCurriculumLead = Functions.rssespacecharts_ActionDataPoint_GetClicked(heContext).ssSTDataPoint.ssLabel; // SelectedCurriculumLead = DataPoint_GetClicked().DataPoint.Label

						}
						// GetRAGs_LastUpdatedByCluster2
						Actions.ActionGetRAGs_LastUpdatedByCluster(heContext, varLcNumberOfDays, localVars.inParamDrilldownLevel, ((localVars.inParamBackToBegin) ?(""):(Functions.rssespacecharts_ActionDataPoint_GetClicked(heContext).ssSTDataPoint.ssLabel)), out localVars.resGetRAGs_LastUpdatedByCluster2.outParamDataPointRecordList, out localVars.resGetRAGs_LastUpdatedByCluster2.outParamSelectedArea);
						varLcBarChartDataPointsForCluster = localVars.resGetRAGs_LastUpdatedByCluster2.outParamDataPointRecordList; // BarChartDataPointsForCluster = GetRAGs_LastUpdatedByCluster2.DataPointRecordList
						varLcCurrentLevel = localVars.inParamDrilldownLevel; // CurrentLevel = DrilldownLevel
						varLcClusterGraphVisible = true; // ClusterGraphVisible = True
						varLcClusterGraphSubTitleText = localVars.resGetRAGs_LastUpdatedByCluster2.outParamSelectedArea; // ClusterGraphSubTitleText = GetRAGs_LastUpdatedByCluster2.SelectedArea
						// Refresh Widget (wtByCluster)
						ssListRecords1ListDoDataBind = true;
						((OSPageViewState) Page).AjaxRefresh(wtByCluster, "None", StoreViewState);
						// Update Screen
						return true;

					}

				}
				localVars.varLcGetNulls = (((varLcSelectedTeam== "Team not set")) ?(true):(false)); // GetNulls = internalIf
				// Query QueryGetStudentsRAGsNotUpdatedByTeam
				{
					int QueryGetStudentsRAGsNotUpdatedByTeam_maxRecords = Math.Max(wtListRecords1.StartIndex + wtListRecords1.LineCount + 1, 0);
					queryResGetStudentsRAGsNotUpdatedByTeam_outParamList = FuncssPreparation.QueryGetStudentsRAGsNotUpdatedByTeam(heContext, QueryGetStudentsRAGsNotUpdatedByTeam_maxRecords, IterationMultiplicity.Multiple, out queryResGetStudentsRAGsNotUpdatedByTeam_outParamCount, varLcNumberOfDays
					, varLcSelectedTeam
					, varLcSelectedCurriculumLead
					, localVars.varLcGetNulls
					);
				}
				// Refresh Widget (wtByCluster)
				ssListRecords1ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtByCluster, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnColumnSiteChartClick: VarsBag {
			public bool inParamBackToBegin;
			public bool inParamPagingClicked;
			/// <summary>
			/// Variable <code>varLcGetNulls</code> that represents the Service Studio local variable
			///  <code>GetNulls</code> <p>Description: </p>
			/// </summary>
			public bool varLcGetNulls = false;

			public Actions.lcoGetRAGs_LastUpdatedBySite resGetRAGs_LastUpdatedBySite2 = new Actions.lcoGetRAGs_LastUpdatedBySite();
			public RCDataPointRecord resDataPoint_GetClicked_outParamDataPoint = new RCDataPointRecord(null);

			public lcvOnColumnSiteChartClick(bool inParamBackToBegin, bool inParamPagingClicked) {
				this.inParamBackToBegin = inParamBackToBegin;
				this.inParamPagingClicked = inParamPagingClicked;
			}
		}
		/// <summary>
		/// Action <code>CommandOnColumnSiteChartClick</code> that represents the Service Studio screen action
		///  <code>OnColumnSiteChartClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnColumnSiteChartClick(HeContext heContext, bool inParamBackToBegin, bool inParamPagingClicked) {
			CheckPermissions(heContext);
			lcvOnColumnSiteChartClick localVars = new lcvOnColumnSiteChartClick(inParamBackToBegin, inParamPagingClicked);
			try {
				if (localVars.inParamBackToBegin) {
					// GetRAGs_LastUpdatedBySite2
					Actions.ActionGetRAGs_LastUpdatedBySite(heContext, varLcNumberOfDays, out localVars.resGetRAGs_LastUpdatedBySite2.outParamDataPointRecordList);
					varLcSiteGraphVisible = true; // SiteGraphVisible = True
					varLcBarChartDataPointsForSite = localVars.resGetRAGs_LastUpdatedBySite2.outParamDataPointRecordList; // BarChartDataPointsForSite = GetRAGs_LastUpdatedBySite2.DataPointRecordList
					// Refresh Widget (wtBySite)
					ssListRecords2ListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtBySite, "None", StoreViewState);

				} else {
					if (!(localVars.inParamPagingClicked)) {
						// DataPoint_GetClicked
						Actions.ActionDataPoint_GetClicked(heContext, out localVars.resDataPoint_GetClicked_outParamDataPoint);
						// List_Navigation_ResetStartIndex
						Actions.ActionList_Navigation_ResetStartIndex(heContext, wtListRecords2.ClientID);
						varLcSelectedSite = (((localVars.resDataPoint_GetClicked_outParamDataPoint.ssSTDataPoint.ssLabel== "Unknown")) ?(""):(localVars.resDataPoint_GetClicked_outParamDataPoint.ssSTDataPoint.ssLabel)); // SelectedSite = internalIf
						localVars.varLcGetNulls = (((localVars.resDataPoint_GetClicked_outParamDataPoint.ssSTDataPoint.ssLabel== "Unknown")) ?(true):(false)); // GetNulls = internalIf

					}
					// Query QueryGetStudentsRAGsNotUpdatedBySite
					{
						int QueryGetStudentsRAGsNotUpdatedBySite_maxRecords = Math.Max(wtListRecords2.StartIndex + wtListRecords2.LineCount + 1, 0);
						queryResGetStudentsRAGsNotUpdatedBySite_outParamList = FuncssPreparation.QueryGetStudentsRAGsNotUpdatedBySite(heContext, QueryGetStudentsRAGsNotUpdatedBySite_maxRecords, IterationMultiplicity.Multiple, out queryResGetStudentsRAGsNotUpdatedBySite_outParamCount, varLcNumberOfDays
						, varLcSelectedSite
						, localVars.varLcGetNulls
						);
					}
					varLcSiteGraphVisible = false; // SiteGraphVisible = False
					// Refresh Widget (wtBySite)
					ssListRecords2ListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtBySite, "None", StoreViewState);

				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSelectTab: VarsBag {
			public int inParamTab;
			public lcvSelectTab(int inParamTab) {
				this.inParamTab = inParamTab;
			}
		}
		/// <summary>
		/// Action <code>CommandSelectTab</code> that represents the Service Studio screen action
		///  <code>SelectTab</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelectTab(HeContext heContext, int inParamTab) {
			CheckPermissions(heContext);
			lcvSelectTab localVars = new lcvSelectTab(inParamTab);
			try {
				varLcSelectedTab = localVars.inParamTab; // SelectedTab = Tab
				// Refresh Widget (wtMenuTab)
				((OSPageViewState) Page).AjaxRefresh(wtMenuTab, "None", StoreViewState);
				// Refresh Widget (wtContentArea)
				ssListRecords1ListDoDataBind = true;
				ssListRecords2ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtContentArea, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container47_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container47_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container8_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container8_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container62_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container62_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container62_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container62_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container62)
		/// </summary>
		/// <returns>The Visible State of wt_Container62</returns>
		public bool cnt_Container62_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntMenuTab_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntMenuTab_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntMenuTab_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntMenuTab_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMenuTab)
		/// </summary>
		/// <returns>The Visible State of wtMenuTab</returns>
		public bool cntMenuTab_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntByClusterContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntByClusterContainer_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntByClusterContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==1)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==1)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem"));
				if (!cntByClusterContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtByClusterContainer
		/// </summary>
		public void cntByClusterContainer_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 1)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtByClusterContainer)
		/// </summary>
		/// <returns>The Visible State of wtByClusterContainer</returns>
		public bool cntByClusterContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container85_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container85_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container85_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container85_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container85)
		/// </summary>
		/// <returns>The Visible State of wt_Container85</returns>
		public bool cnt_Container85_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 89SpEKnEiUOe3m0nqB3tTw) Expression: "By Cluster"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression7() {
			return "By Cluster";
		}
		public void cntBySiteContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntBySiteContainer_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntBySiteContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==2)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==2)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntBySiteContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtBySiteContainer
		/// </summary>
		public void cntBySiteContainer_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 2)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtBySiteContainer)
		/// </summary>
		/// <returns>The Visible State of wtBySiteContainer</returns>
		public bool cntBySiteContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container57_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container57_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container57_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container57_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container57)
		/// </summary>
		/// <returns>The Visible State of wt_Container57</returns>
		public bool cnt_Container57_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = WuWBZsMgVke7_q9YsT5bKw) Expression: "By Site"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression37() {
			return "By Site";
		}
		public void cntContentArea_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentArea_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentArea_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntContentArea_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentArea)
		/// </summary>
		/// <returns>The Visible State of wtContentArea</returns>
		public bool cntContentArea_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container75_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container75_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container75_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container75_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container75)
		/// </summary>
		/// <returns>The Visible State of wt_Container75</returns>
		public bool cnt_Container75_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If91_hasRun=false;
		bool if_wt_If91_evalResult;
		public bool if_wt_If91() {
			if (if_wt_If91_hasRun) {
				if_wt_If91_hasRun = false;
				return if_wt_If91_evalResult;
			}
			if_wt_If91_hasRun = true;
			if_wt_If91_evalResult = (varLcSelectedTab==1);
			return if_wt_If91_evalResult;
		}

		public void cntByCluster_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntByCluster_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntByCluster_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntByCluster_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtByCluster)
		/// </summary>
		/// <returns>The Visible State of wtByCluster</returns>
		public bool cntByCluster_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If83_hasRun=false;
		bool if_wt_If83_evalResult;
		public bool if_wt_If83() {
			if (if_wt_If83_hasRun) {
				if_wt_If83_hasRun = false;
				return if_wt_If83_evalResult;
			}
			if_wt_If83_hasRun = true;
			if_wt_If83_evalResult = varLcClusterGraphVisible;
			return if_wt_If83_evalResult;
		}

		public void Charts_webBlckColumnChart_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_Charts.Flows.FlowCharts.WBlkColumnChart widget = (proxy_CaseConferencing_Charts.Flows.FlowCharts.WBlkColumnChart) sender;
				widget.inParamSourceDataPointList = varLcBarChartDataPointsForCluster;
				widget.inParamStackingType = ENStackingTypeEntity.GetRecordByKey(ObjectKey.Parse("gPWeCCFj5UaUu874L8aivw")).ssId;
				widget.inParamHeight = 400;
				widget.inParamLegendPosition = ENLegendPositionEntity.GetRecordByKey(ObjectKey.Parse("8M37pD4z5kK0Vi5nR45B8g")).ssId;
				widget.inParamXAxisFormat = new RCXAxisFormatRecord(null);
				widget.inParamYAxisFormat = new RCYAxisFormatRecord(null);
				widget.inParamChartFormat = resChartFormat_Init_outParamChartFormat;
				widget.inParamClickable = true;
				widget.inParamAdvancedFormat = Functions.rssespacecharts_ActionAdvancedFormat_Init(heContext, new RLAdvancedDataPointFormatRecordList(), new RLAdvancedDataSeriesFormatRecordList(), "", "", (((("title: {text: \'RAG Ratings not updated in the past 30 days by " +varLcCurrentLevel) + "\'},subtitle:{text:\'") +varLcClusterGraphSubTitleText) + "\'}"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget Charts_wtColumnChart
		/// </summary>
		public void Charts_webBlckColumnChart_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnColumnClusterChartClick(heContext
				, (((varLcCurrentLevel== "Cluster")) ?("CurriculumLead"):((((varLcCurrentLevel== "CurriculumLead")) ?("Team"):("Cluster")))), true, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntListContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntListContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntListContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntListContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtListContainer)
		/// </summary>
		/// <returns>The Visible State of wtListContainer</returns>
		public bool cntListContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords1
				ssListRecords1List = queryResGetStudentsRAGsNotUpdatedByTeam_outParamList;
				ssListRecords1ListDoDataBind = false;
				ssListRecords1ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords1_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords1List.Length > 0) {
					ssListRecords1List.CurrentRec = ssListRecords1List[ssListRecords1List.CurrentRowNumber];
				}
				if (ssListRecords1List.Length > e.SelectedIndex) {
					ssListRecords1List.CurrentRec = ssListRecords1List[e.SelectedIndex];
					ssListRecords1List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords1_Store(object dataItem, int index) {
			return "";
		}
		public void recListListRecords1_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords1_Clear(object sender, EventArgs e) {
			wtListRecords1_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords1_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords1List.Length != -1) {
				wtListRecords1_storage.Clear();
				for (int i=startIndex; i<ssListRecords1List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords1_Store(ssListRecords1List.Data[i], wtListRecords1_storage.Count);
				}
			}
		}
		public void recListListRecords1_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords1 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLStudentRecordList getWtListRecords1List() {
			if (ssListRecords1ListDoDataBind) {
				recListListRecords1_onDataBinding(this, null);
			}

			return ssListRecords1List;
		}
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container27_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "border-left: solid 1px #DADADA;position:relative";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container27_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container63_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container63_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container63_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container63_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container63)
		/// </summary>
		/// <returns>The Visible State of wt_Container63</returns>
		public bool cnt_Container63_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container70_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container70_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container70_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container70_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container70)
		/// </summary>
		/// <returns>The Visible State of wt_Container70</returns>
		public bool cnt_Container70_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void img_Image33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				img_Image33_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string img_Image33_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
				((WebControl) sender).CssClass = ((queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?("StudentPhoto SilverBorder"):("StudentPhoto SilverBorder BlackAndWhiteFilter"));
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image33)
		/// </summary>
		/// <returns>URL of the Image (wt_Image33)</returns>
		public string img_Image33_getURL() {
			string url = queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			// remove ascx path from image src
			if (url != null && !url.Contains(":") && !url.StartsWith("/") && !url.StartsWith("\\")) {
				url = "../../../" + url;
			}
			return url; 
		}
		public void cnt_Container58_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container58_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container58_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container58_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container58)
		/// </summary>
		/// <returns>The Visible State of wt_Container58</returns>
		public bool cnt_Container58_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container9_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container9_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = wXr38yLsw0iPIqTatAM1EQ) Expression: ToUpper + ", " +
		///  GetStudentsRAGsNotUpdatedByTeam.List.Current.Student.Forenames + "("
		/// + GetStudentsRAGsNotUpdatedByTeam.List.Current.Student.StudentReference + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression90() {
			return (((((BuiltInFunction.ToUpper(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssSurname) + ", ") +queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssForenames) + "(") +queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssStudentReference) + ")");
		}
		public void cnt_Container54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container54_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container54_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container54_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container54)
		/// </summary>
		/// <returns>The Visible State of wt_Container54</returns>
		public bool cnt_Container54_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void expression_InlineExpression26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = ((queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?("height:45px;display:block;"):("height:45px;display:block;color:red"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = RUfAP2U1o0Wo45W3rPQG4g) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression26() {
			return ((queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?((((queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMainOfferingName+ " [") +queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMainOfferingCode) + "]")):("Learner has no active enrolments"));
		}
		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container10_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("CzktVEoQIUavNdPuJna99w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void expression_InlineExpression34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression34_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression34_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = trCJXB47rk+MUJ7ejtafQg) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression34() {
			return (((queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHomeTelephone!= "")) ?(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssHomeTelephone):("(no telephone)"));
		}
		public void RichWidgets_webBlck_WebBlockInstance45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cAxZk7J+AEu6LHunYrmadQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void expression_InlineExpression65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression65_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression65_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = cvpJuZUV1Ua2j1DH4i2cGA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression65() {
			return (((queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMobilePhone!= "")) ?(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssMobilePhone):("(no mobile)"));
		}
		bool if_wt_If48_hasRun=false;
		bool if_wt_If48_evalResult;
		public bool if_wt_If48() {
			if (if_wt_If48_hasRun) {
				if_wt_If48_hasRun = false;
				return if_wt_If48_evalResult;
			}
			if_wt_If48_hasRun = true;
			if_wt_If48_evalResult = (queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssEmailAddress!= "");
			return if_wt_If48_evalResult;
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link64)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link64)</returns>
		public string lnk_Link64_NavigateUrl() {
			String varLcinParamURL = "";
			varLcinParamURL = ("mailto:" +queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssEmailAddress);
			string sURL = varLcinParamURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link64)
		/// </summary>
		/// <returns>title of the Link (wt_Link64)</returns>
		public string
		lnk_Link64_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link64)
		/// </summary>
		/// <returns>The Visible State of wt_Link64</returns>
		public bool lnk_Link64_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssEmailAddress!= "");
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link64)
		/// </summary>
		/// <returns>The Enabled State of wt_Link64</returns>
		public bool lnk_Link64_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 6zsESIjZb0qTI_F3HVi3mQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression28() {
			return (((queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssEmailAddress== "")) ?("(no email)"):(queryResGetStudentsRAGsNotUpdatedByTeam_outParamList.CurrentRec.ssENStudent.ssEmailAddress));
		}
		public void wt_Text11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Text11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Text11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:4px;color:#666;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container61_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container61_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtUpdateRAGButton)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtUpdateRAGButton)</returns>
		public string btnUpdateRAGButton_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || ((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(false) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtListRecords1List().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_UpdateRAG", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the label of the button (wtUpdateRAGButton)
		/// </summary>
		/// <returns>Label of the Button (wtUpdateRAGButton)</returns>
		public string
		btnUpdateRAGButton_getLabel() {
			return "Update RAG";
		}
		/// <summary>
		/// Gets the visible state of component (wtUpdateRAGButton)
		/// </summary>
		/// <returns>The Visible State of wtUpdateRAGButton</returns>
		public bool btnUpdateRAGButton_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtUpdateRAGButton)
		/// </summary>
		/// <returns>The Enabled State of wtUpdateRAGButton</returns>
		public bool btnUpdateRAGButton_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance94_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtListRecords1, "wtUpdateRAGButton").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance94
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance94_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnColumnClusterChartClick(heContext
				, "Team", false, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container24_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container84_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container84_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container84_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container84_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container84)
		/// </summary>
		/// <returns>The Visible State of wt_Container84</returns>
		public bool cnt_Container84_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void btn_Button14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button14_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
				if (CommandOnColumnClusterChartClick(heContext, "Cluster", true, true)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button14)
		/// </summary>
		/// <returns>Label of the Button (wt_Button14)</returns>
		public string
		btn_Button14_getLabel() {
			return "Back to Graph";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button14)
		/// </summary>
		/// <returns>The Visible State of wt_Button14</returns>
		public bool btn_Button14_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button14)
		/// </summary>
		/// <returns>The Enabled State of wt_Button14</returns>
		public bool btn_Button14_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container56_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container56_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container56_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container56_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container56)
		/// </summary>
		/// <returns>The Visible State of wt_Container56</returns>
		public bool cnt_Container56_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance82_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
				widget.inParamListWidgetId = wtListRecords1.ClientID;
				widget.inParamLineCount = wtListRecords1.RtWidget.LineCount;
				widget.inParamTotalRowCount = queryResGetStudentsRAGsNotUpdatedByTeam_outParamCount;
				widget.inParamMaxPageNumbers = 5;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance82
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance82_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnColumnClusterChartClick(heContext
				, "Team", false, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		bool if_wt_If38_hasRun=false;
		bool if_wt_If38_evalResult;
		public bool if_wt_If38() {
			if (if_wt_If38_hasRun) {
				if_wt_If38_hasRun = false;
				return if_wt_If38_evalResult;
			}
			if_wt_If38_hasRun = true;
			if_wt_If38_evalResult = (varLcSelectedTab==2);
			return if_wt_If38_evalResult;
		}

		public void cntBySite_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntBySite_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntBySite_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntBySite_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtBySite)
		/// </summary>
		/// <returns>The Visible State of wtBySite</returns>
		public bool cntBySite_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If16_hasRun=false;
		bool if_wt_If16_evalResult;
		public bool if_wt_If16() {
			if (if_wt_If16_hasRun) {
				if_wt_If16_hasRun = false;
				return if_wt_If16_evalResult;
			}
			if_wt_If16_hasRun = true;
			if_wt_If16_evalResult = varLcSiteGraphVisible;
			return if_wt_If16_evalResult;
		}

		public void Charts_webBlck_WebBlockInstance68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_Charts.Flows.FlowCharts.WBlkColumnChart widget = (proxy_CaseConferencing_Charts.Flows.FlowCharts.WBlkColumnChart) sender;
				widget.inParamSourceDataPointList = varLcBarChartDataPointsForSite;
				widget.inParamStackingType = RsseSpaceCharts.DefaultValues.ReferenceWebFlow_Charts_ReferenceWebBlock_ColumnChart_Variables_ReferenceSerializableInputParameter_StackingType;
				widget.inParamHeight = 400;
				widget.inParamLegendPosition = RsseSpaceCharts.DefaultValues.ReferenceWebFlow_Charts_ReferenceWebBlock_ColumnChart_Variables_ReferenceSerializableInputParameter_LegendPosition;
				widget.inParamXAxisFormat = new RCXAxisFormatRecord(null);
				widget.inParamYAxisFormat = new RCYAxisFormatRecord(null);
				widget.inParamChartFormat = resChartFormat_Init_outParamChartFormat;
				widget.inParamClickable = true;
				widget.inParamAdvancedFormat = Functions.rssespacecharts_ActionAdvancedFormat_Init(heContext, new RLAdvancedDataPointFormatRecordList(), new RLAdvancedDataSeriesFormatRecordList(), "", "", "title: {text: \'RAG Ratings not updated in the past 30 days by Site \'},");
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget Charts_wt_WebBlockInstance68
		/// </summary>
		public void Charts_webBlck_WebBlockInstance68_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnColumnSiteChartClick(heContext
				, false, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntListContainer2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntListContainer2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntListContainer2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntListContainer2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtListContainer2)
		/// </summary>
		/// <returns>The Visible State of wtListContainer2</returns>
		public bool cntListContainer2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords2
				ssListRecords2List = queryResGetStudentsRAGsNotUpdatedBySite_outParamList;
				ssListRecords2ListDoDataBind = false;
				ssListRecords2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords2List.Length > 0) {
					ssListRecords2List.CurrentRec = ssListRecords2List[ssListRecords2List.CurrentRowNumber];
				}
				if (ssListRecords2List.Length > e.SelectedIndex) {
					ssListRecords2List.CurrentRec = ssListRecords2List[e.SelectedIndex];
					ssListRecords2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords2_Store(object dataItem, int index) {
			return "";
		}
		public void recListListRecords2_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords2_Clear(object sender, EventArgs e) {
			wtListRecords2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords2_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords2List.Length != -1) {
				wtListRecords2_storage.Clear();
				for (int i=startIndex; i<ssListRecords2List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords2_Store(ssListRecords2List.Data[i], wtListRecords2_storage.Count);
				}
			}
		}
		public void recListListRecords2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLStudentRecordList getWtListRecords2List() {
			if (ssListRecords2ListDoDataBind) {
				recListListRecords2_onDataBinding(this, null);
			}

			return ssListRecords2List;
		}
		public void cnt_Container71_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container71_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container71_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "border-left: solid 1px #DADADA;position:relative";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container71_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container71)
		/// </summary>
		/// <returns>The Visible State of wt_Container71</returns>
		public bool cnt_Container71_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container13_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container13_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void img_Image42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				img_Image42_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string img_Image42_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
				((WebControl) sender).CssClass = ((queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?("StudentPhoto SilverBorder"):("StudentPhoto SilverBorder BlackAndWhiteFilter"));
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image42)
		/// </summary>
		/// <returns>URL of the Image (wt_Image42)</returns>
		public string img_Image42_getURL() {
			string url = queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			// remove ascx path from image src
			if (url != null && !url.Contains(":") && !url.StartsWith("/") && !url.StartsWith("\\")) {
				url = "../../../" + url;
			}
			return url; 
		}
		public void cnt_Container93_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container93_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container93_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-left:10px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container93_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container93)
		/// </summary>
		/// <returns>The Visible State of wt_Container93</returns>
		public bool cnt_Container93_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container29_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = SsXMGaPaIESK_V2IARa0Bg) Expression: ToUpper + ", " +
		///  GetStudentsRAGsNotUpdatedBySite.List.Current.Student.Forenames + "("
		/// + GetStudentsRAGsNotUpdatedBySite.List.Current.Student.StudentReference + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression15() {
			return (((((BuiltInFunction.ToUpper(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssSurname) + ", ") +queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssForenames) + "(") +queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssStudentReference) + ")");
		}
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void expression_InlineExpression12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = ((queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?("height:45px;display:block;"):("height:45px;display:block;color:red"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = JuI1F5VenUS+bbyUe3+dUg) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression12() {
			return ((queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?((((queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMainOfferingName+ " [") +queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMainOfferingCode) + "]")):("Learner has no active enrolments"));
		}
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance60_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("CzktVEoQIUavNdPuJna99w")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void expression_InlineExpression77_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression77_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression77_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 1gBI2HFwhUaTQ5kbqzyQOw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression77() {
			return (((queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHomeTelephone!= "")) ?(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssHomeTelephone):("(no telephone)"));
		}
		public void RichWidgets_webBlck_WebBlockInstance59_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cAxZk7J+AEu6LHunYrmadQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void expression_InlineExpression88_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression88_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression88_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:4px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = +R0S7I_DZkObPwLINFrq4Q) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression88() {
			return (((queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMobilePhone!= "")) ?(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssMobilePhone):("(no mobile)"));
		}
		bool if_wt_If35_hasRun=false;
		bool if_wt_If35_evalResult;
		public bool if_wt_If35() {
			if (if_wt_If35_hasRun) {
				if_wt_If35_hasRun = false;
				return if_wt_If35_evalResult;
			}
			if_wt_If35_hasRun = true;
			if_wt_If35_evalResult = (queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssEmailAddress!= "");
			return if_wt_If35_evalResult;
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link86)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link86)</returns>
		public string lnk_Link86_NavigateUrl() {
			String varLcinParamURL = "";
			varLcinParamURL = ("mailto:" +queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssEmailAddress);
			string sURL = varLcinParamURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link86)
		/// </summary>
		/// <returns>title of the Link (wt_Link86)</returns>
		public string
		lnk_Link86_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link86)
		/// </summary>
		/// <returns>The Visible State of wt_Link86</returns>
		public bool lnk_Link86_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssEmailAddress!= "");
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link86)
		/// </summary>
		/// <returns>The Enabled State of wt_Link86</returns>
		public bool lnk_Link86_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 0+voHyqno0O1R6wUoWkhuA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression17() {
			return (((queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssEmailAddress== "")) ?("(no email)"):(queryResGetStudentsRAGsNotUpdatedBySite_outParamList.CurrentRec.ssENStudent.ssEmailAddress));
		}
		public void wt_Text51_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_Text51_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_Text51_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:4px;color:#666;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container50_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtUpdateRAGButton2)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtUpdateRAGButton2)</returns>
		public string btnUpdateRAGButton2_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || ((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(false) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtListRecords2List().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_UpdateRAG", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the label of the button (wtUpdateRAGButton2)
		/// </summary>
		/// <returns>Label of the Button (wtUpdateRAGButton2)</returns>
		public string
		btnUpdateRAGButton2_getLabel() {
			return "Update RAG";
		}
		/// <summary>
		/// Gets the visible state of component (wtUpdateRAGButton2)
		/// </summary>
		/// <returns>The Visible State of wtUpdateRAGButton2</returns>
		public bool btnUpdateRAGButton2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtUpdateRAGButton2)
		/// </summary>
		/// <returns>The Enabled State of wtUpdateRAGButton2</returns>
		public bool btnUpdateRAGButton2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance66_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtListRecords2, "wtUpdateRAGButton2").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance66
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance66_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnColumnSiteChartClick(heContext
				, false, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container32_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container32_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container53_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container53_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container53_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container53_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container53)
		/// </summary>
		/// <returns>The Visible State of wt_Container53</returns>
		public bool cnt_Container53_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void btn_Button81_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button81_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
				if (CommandOnColumnSiteChartClick(heContext, true, false)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button81)
		/// </summary>
		/// <returns>Label of the Button (wt_Button81)</returns>
		public string
		btn_Button81_getLabel() {
			return "Back to Graph";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button81)
		/// </summary>
		/// <returns>The Visible State of wt_Button81</returns>
		public bool btn_Button81_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button81)
		/// </summary>
		/// <returns>The Enabled State of wt_Button81</returns>
		public bool btn_Button81_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container39_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container39_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container39_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container39_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container39)
		/// </summary>
		/// <returns>The Visible State of wt_Container39</returns>
		public bool cnt_Container39_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance80_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
				widget.inParamListWidgetId = wtListRecords2.ClientID;
				widget.inParamLineCount = wtListRecords2.RtWidget.LineCount;
				widget.inParamTotalRowCount = queryResGetStudentsRAGsNotUpdatedBySite_outParamCount;
				widget.inParamMaxPageNumbers = 5;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance80
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance80_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnColumnSiteChartClick(heContext
				, false, true)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandOnColumnClusterChartClick {
		}
		public static class FuncCommandOnColumnSiteChartClick {
		}
		public static class FuncCommandSelectTab {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetStudentsRAGsNotUpdatedBySite" of Action "Preparation"
			/// </summary>
			public static RLStudentRecordList QueryGetStudentsRAGsNotUpdatedBySite(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinNumberOfDays, string qpstSite2, bool qpboGetNulls) {
				// Query Iterations: Multiple {ListRecords2}
				// Refresh Query ZIuW7eFe_Uy3SEz_82QMZw Iterations: Multiple {ListRecords2}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				sqlCountCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				sqlCmd.CreateParameter("@qpstSite2", DbType.String, qpstSite2);
				sqlCountCmd.CreateParameter("@qpstSite2", DbType.String, qpstSite2);
				sqlCmd.CreateParameter("@qpboGetNulls", DbType.Boolean, qpboGetNulls);
				sqlCountCmd.CreateParameter("@qpboGetNulls", DbType.Boolean, qpboGetNulls);
				string advSql = "SELECT  {Student}.[STUDENTREFERENCE], {Student}.[FORENAMES], {Student}.[SURNAME], {Student}.[DATEOFBIRTH], {Student}.[GENDER], {Student}.[MAINOFFERINGCODE], {Student}.[MAINOFFERINGNAME], {Student}.[STUDENTPHOTOURL], {Student}.[HOMEADDRESS], {Student}.[HOMEADDRESSPOSTCODE], {Student}.[CURRENTADDRESS], {Student}.[CURRENTADDRESSPOSTCODE], {Student}.[EMAILADDRESS], {Student}.[HOMETELEPHONE], {Student}.[MOBILEPHONE], {Student}.[NEXTOFKINNAME], {Student}.[NEXTOFKINRELATIONSHIP], {Student}.[NEXTOFKINADDRESS], {Student}.[NEXTOFKINPOSTCODE], {Student}.[NEXTOFKINPHONE], {Student}.[PERSONALTUTOR], {Student}.[NEXTOFKINEMAIL], {Student}.[HASCURRENTACTIVEENROLMENT], {Student}.[NETWORKLOGIN], {Student}.[NINUMBER], {Student}.[RESIDENTIALSTATUS], {Student}.[PREVIOUSSCHOOL]  " +
				 "FROM   " +
				 "     {Student}   " +
				 "Inner JOIN  {Group} ON  {Student}.[MAINOFFERINGCODE] =  {Group}.[GROUPNAME]  " +
				 "Left JOIN  {StudentRAG} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE ((DateDiff( dd,  {StudentRAG}.[UPDATEDAT], convert(datetime, GetDate(), 120)) > @qpinNumberOfDays) OR ( {StudentRAG}.[STUDENTREFERENCE] IS NULL))  " +
				 "AND  {Student}.[HASCURRENTACTIVEENROLMENT] = 1  " +
				 "AND (  " +
				 "        (  " +
				 "             {Group}.[SITE] = @qpstSite2  " +
				 "        )  " +
				 "        OR  " +
				 "        (  " +
				 "            @qpboGetNulls = 1 AND (ISNULL( {Group}.[SITE],'Unknown') LIKE 'Unknown' )  " +
				 "        )  " +
				 ")  " +
				 "      " +
				 "ORDER BY  {Student}.[SURNAME], {Student}.[FORENAMES]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLStudentRecordList outParamList = new RLStudentRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentRecordList _tmp = new RLStudentRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedBySite.List");
							outParamList = (RLStudentRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedBySite.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedBySite.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedBySite.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedBySite.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedBySite.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudentsRAGsNotUpdatedBySite in Preparation in RAGNotUpdatedIn30 in Reporting in CaseConferencing (SELECT {Student}.*  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  AND (          (              {Group}.[Site] = @Site2          )          OR          (              @GetNulls = 1 AND (ISNULL({Group}.[Site],'Unknown') LIKE 'Unknown' )          )  )        ORDER BY {Student}.[Surname],{Student}.[Forenames]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudentsRAGsNotUpdatedBySite in Preparation in RAGNotUpdatedIn30 in Reporting in CaseConferencing (SELECT {Student}.*  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  AND (          (              {Group}.[Site] = @Site2          )          OR          (              @GetNulls = 1 AND (ISNULL({Group}.[Site],'Unknown') LIKE 'Unknown' )          )  )        ORDER BY {Student}.[Surname],{Student}.[Forenames]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudentsRAGsNotUpdatedBySite in Preparation in RAGNotUpdatedIn30 in Reporting in CaseConferencing (SELECT {Student}.*  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  AND (          (              {Group}.[Site] = @Site2          )          OR          (              @GetNulls = 1 AND (ISNULL({Group}.[Site],'Unknown') LIKE 'Unknown' )          )  )        ORDER BY {Student}.[Surname],{Student}.[Forenames]): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetStudentsRAGsNotUpdatedByTeam" of Action "Preparation"
			/// </summary>
			public static RLStudentRecordList QueryGetStudentsRAGsNotUpdatedByTeam(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinNumberOfDays, string qpstIDClicked, string qpstSelectedCurriculumLead, bool qpboGetNulls) {
				// Query Iterations: Multiple {ListRecords1}
				// Refresh Query _jqunF+DbkK_Ej7vC9Rt1w Iterations: Multiple {ListRecords1}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				sqlCountCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				sqlCmd.CreateParameter("@qpstIDClicked", DbType.String, qpstIDClicked);
				sqlCountCmd.CreateParameter("@qpstIDClicked", DbType.String, qpstIDClicked);
				sqlCmd.CreateParameter("@qpstSelectedCurriculumLead", DbType.String, qpstSelectedCurriculumLead);
				sqlCountCmd.CreateParameter("@qpstSelectedCurriculumLead", DbType.String, qpstSelectedCurriculumLead);
				sqlCmd.CreateParameter("@qpboGetNulls", DbType.Boolean, qpboGetNulls);
				sqlCountCmd.CreateParameter("@qpboGetNulls", DbType.Boolean, qpboGetNulls);
				string advSql = "SELECT  {Student}.[STUDENTREFERENCE], {Student}.[FORENAMES], {Student}.[SURNAME], {Student}.[DATEOFBIRTH], {Student}.[GENDER], {Student}.[MAINOFFERINGCODE], {Student}.[MAINOFFERINGNAME], {Student}.[STUDENTPHOTOURL], {Student}.[HOMEADDRESS], {Student}.[HOMEADDRESSPOSTCODE], {Student}.[CURRENTADDRESS], {Student}.[CURRENTADDRESSPOSTCODE], {Student}.[EMAILADDRESS], {Student}.[HOMETELEPHONE], {Student}.[MOBILEPHONE], {Student}.[NEXTOFKINNAME], {Student}.[NEXTOFKINRELATIONSHIP], {Student}.[NEXTOFKINADDRESS], {Student}.[NEXTOFKINPOSTCODE], {Student}.[NEXTOFKINPHONE], {Student}.[PERSONALTUTOR], {Student}.[NEXTOFKINEMAIL], {Student}.[HASCURRENTACTIVEENROLMENT], {Student}.[NETWORKLOGIN], {Student}.[NINUMBER], {Student}.[RESIDENTIALSTATUS], {Student}.[PREVIOUSSCHOOL]  " +
				 "FROM   " +
				 "     {Student}   " +
				 "Inner JOIN  {Group} ON  {Student}.[MAINOFFERINGCODE] =  {Group}.[GROUPNAME]  " +
				 "Left JOIN  {StudentRAG} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "Left JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "Left JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "WHERE ((DateDiff( dd,  {StudentRAG}.[UPDATEDAT], convert(datetime, GetDate(), 120)) > @qpinNumberOfDays) OR ( {StudentRAG}.[STUDENTREFERENCE] IS NULL))  " +
				 "AND (  " +
				 "        (  " +
				 "             {Team}.[DESCRIPTION] = @qpstIDClicked AND  {CurriculumLead}.[DESCRIPTION] = @qpstSelectedCurriculumLead  " +
				 "        )  " +
				 "    OR   " +
				 "        (  " +
				 "            @qpboGetNulls = 1 AND  {Team}.[DESCRIPTION] IS NULL  " +
				 "        )  " +
				 "    )  " +
				 "AND  {Student}.[HASCURRENTACTIVEENROLMENT] = 1  " +
				 "ORDER BY  {Student}.[SURNAME], {Student}.[FORENAMES]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLStudentRecordList outParamList = new RLStudentRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentRecordList _tmp = new RLStudentRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedByTeam.List");
							outParamList = (RLStudentRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedByTeam.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedByTeam.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedByTeam.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedByTeam.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.RAGNotUpdatedIn30.Preparation.GetStudentsRAGsNotUpdatedByTeam.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudentsRAGsNotUpdatedByTeam in Preparation in RAGNotUpdatedIn30 in Reporting in CaseConferencing (SELECT {Student}.*  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (          (              {Team}.[Description] = @IDClicked AND {CurriculumLead}.[Description] = @SelectedCurriculumLead          )      OR           (              @GetNulls = 1 AND {Team}.[Description] IS NULL          )      )  AND {Student}.[HasCurrentActiveEnrolment] = 1  ORDER BY {Student}.[Surname],{Student}.[Forenames]  ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudentsRAGsNotUpdatedByTeam in Preparation in RAGNotUpdatedIn30 in Reporting in CaseConferencing (SELECT {Student}.*  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (          (              {Team}.[Description] = @IDClicked AND {CurriculumLead}.[Description] = @SelectedCurriculumLead          )      OR           (              @GetNulls = 1 AND {Team}.[Description] IS NULL          )      )  AND {Student}.[HasCurrentActiveEnrolment] = 1  ORDER BY {Student}.[Surname],{Student}.[Forenames]  ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudentsRAGsNotUpdatedByTeam in Preparation in RAGNotUpdatedIn30 in Reporting in CaseConferencing (SELECT {Student}.*  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (          (              {Team}.[Description] = @IDClicked AND {CurriculumLead}.[Description] = @SelectedCurriculumLead          )      OR           (              @GetNulls = 1 AND {Team}.[Description] IS NULL          )      )  AND {Student}.[HasCurrentActiveEnrolment] = 1  ORDER BY {Student}.[Surname],{Student}.[Forenames]  ): " + aqExcep.Message);
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.Kg7tM0LMER0qLhWf3tHRLTQ";
			}
		}
	}

}
