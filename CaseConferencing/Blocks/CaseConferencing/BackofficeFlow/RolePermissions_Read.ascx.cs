/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowBackofficeFlow {
	public abstract class WBlkRolePermissions_Read: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamPermissionType. Description:
		/// </summary>
		public int inParamPermissionType = 0;
		/// <summary>
		/// Screen Input Parameter inParamApplicationSectionId. Description:
		/// </summary>
		public int inParamApplicationSectionId = 0;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		private RLRoleBooleanRecordList _ssRolePermissionsList = new RLRoleBooleanRecordList();
		public RLRoleBooleanRecordList ssRolePermissionsList {
			get {
				return _ssRolePermissionsList; 
			}
			set {
				_ssRolePermissionsList = value;
				wtRolePermissions.DataSource = value;
				ssRolePermissionsListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtRolePermissions;
		public ArrayList wtRolePermissions_storage = new ArrayList();
		protected bool ssRolePermissionsList_notUsedYet = true;
		protected bool ssRolePermissionsListDoDataBind;
		protected bool ssRolePermissionsListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLRoleBooleanRecordList queryResGetRoles_outParamList = new RLRoleBooleanRecordList();
		int queryResGetRoles_outParamCount = 0;
		RLEspaceRecordList queryResGetRoleProviderEspaces_outParamList = new RLEspaceRecordList();
		int queryResGetRoleProviderEspaces_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetRoleProviderEspaces
			int datasetGetRoleProviderEspaces_maxRecords = 0;
			queryResGetRoleProviderEspaces_outParamList = FuncssPreparation.datasetGetRoleProviderEspaces(heContext, datasetGetRoleProviderEspaces_maxRecords, IterationMultiplicity.Never, out queryResGetRoleProviderEspaces_outParamCount);
			// Query QueryGetRoles
			int QueryGetRoles_maxRecords = Math.Max(wtRolePermissions.StartIndex + wtRolePermissions.LineCount + 1, 0);
			queryResGetRoles_outParamList = FuncssPreparation.QueryGetRoles(heContext, QueryGetRoles_maxRecords, IterationMultiplicity.Single, out queryResGetRoles_outParamCount, inParamPermissionType
			, inParamApplicationSectionId
			, queryResGetRoleProviderEspaces_outParamList.CurrentRec.ssENEspace.ssId
			);
		}
		static WBlkRolePermissions_Read() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtRolePermissions.StartIndexExpression = () => 0;
			wtRolePermissions.LineCountExpression = () => 50;
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssRolePermissionsListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamPermissionType", inParamPermissionType, 0);
			ViewStateAttributes.SetInViewState("inParamApplicationSectionId", inParamApplicationSectionId, 0);
			if (IsAjaxRequest) {
				recListRolePermissions_Rebuild((ssRolePermissionsListDataBound ? wtRolePermissions.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRolePermissions.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtRolePermissions_list", wtRolePermissions_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				inParamPermissionType = (int) ViewStateAttributes.GetFromViewState("inParamPermissionType", 0);
				inParamApplicationSectionId = (int) ViewStateAttributes.GetFromViewState("inParamApplicationSectionId", 0);
				recListRolePermissions_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.Kcn5cmzcLwE6tr9hSGFJ_ZQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/BackofficeFlow/RolePermissions_Read.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\BackofficeFlow\\RolePermissions_Read.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\BackofficeFlow\\RolePermissions_Read.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("cn5cmzcLwE6tr9hSGFJ_ZQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvOnChange: VarsBag {
			/// <summary>
			/// Variable <code>varLcGetRolePermissionsByRoleId_RoleId</code> that represents the Service Studio
			///  local variable <code>GetRolePermissionsByRoleId_RoleId</code> <p>Description: Created by th
			/// e upgrade of 'GetRolePermissionsByRoleId' to an Aggregate. Corresponds to the old query parameter
			///  'RoleId'.</p>
			/// </summary>
			public int varLcGetRolePermissionsByRoleId_RoleId = 0;

			public RLRolePermissionsRecordList queryResGetRolePermissionsByRoleId_outParamList = new RLRolePermissionsRecordList();
			public int queryResGetRolePermissionsByRoleId_outParamCount = 0;

			public int resCreateOrUpdateRolePermissions_outParamId = 0;

			public lcvOnChange() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnChange localVars = new lcvOnChange();
			try {
				// Created by the upgrade of 'GetRolePermissionsByRoleId' to an Aggregate.
				localVars.varLcGetRolePermissionsByRoleId_RoleId = getWtRolePermissionsList().CurrentRec.ssENRole.ssId; // GetRolePermissionsByRoleId_RoleId = RolePermissions.List.Current.Role.Id
				// Query datasetGetRolePermissionsByRoleId
				int datasetGetRolePermissionsByRoleId_maxRecords = 0;
				localVars.queryResGetRolePermissionsByRoleId_outParamList = FuncCommandOnChange.datasetGetRolePermissionsByRoleId(heContext, datasetGetRolePermissionsByRoleId_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetRolePermissionsByRoleId_outParamCount, inParamApplicationSectionId
				, localVars.varLcGetRolePermissionsByRoleId_RoleId
				, inParamPermissionType
				);
				// Add ?
				if (getWtRolePermissionsList().CurrentRec.ssSTBoolean.ssValue) {
					localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec.ssENRolePermissions.ssRoleId = getWtRolePermissionsList().CurrentRec.ssENRole.ssId; // GetRolePermissionsByRoleId.List.Current.RolePermissions.RoleId = RolePermissions.List.Current.Role.Id
					localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec.ssENRolePermissions.ssApplicationSection = inParamApplicationSectionId; // GetRolePermissionsByRoleId.List.Current.RolePermissions.ApplicationSection = ApplicationSectionId
					localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec.ssENRolePermissions.ssPermissionType = inParamPermissionType; // GetRolePermissionsByRoleId.List.Current.RolePermissions.PermissionType = PermissionType
					localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec.ssENRolePermissions.ssCreatedAt = BuiltInFunction.CurrDateTime().ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo); // GetRolePermissionsByRoleId.List.Current.RolePermissions.CreatedAt = CurrDateTime
					localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec.ssENRolePermissions.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // GetRolePermissionsByRoleId.List.Current.RolePermissions.CreatedBy = UserID
					// CreateOrUpdateRolePermissions
					ExtendedActions.CreateOrUpdateRolePermissions(heContext, localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec, out localVars.resCreateOrUpdateRolePermissions_outParamId);

				} else {
					// Empty
					if (!(localVars.queryResGetRolePermissionsByRoleId_outParamList.Empty)) {
						// DeleteRolePermissions
						ExtendedActions.DeleteRolePermissions(heContext, localVars.queryResGetRolePermissionsByRoleId_outParamList.CurrentRec.ssENRolePermissions.ssId);

					}

				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListRolePermissions_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtRolePermissions
				ssRolePermissionsList = queryResGetRoles_outParamList;
				ssRolePermissionsListDoDataBind = false;
				ssRolePermissionsListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListRolePermissions_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssRolePermissionsList.Length > 0) {
					ssRolePermissionsList.CurrentRec = ssRolePermissionsList[ssRolePermissionsList.CurrentRowNumber];
				}
				if (ssRolePermissionsList.Length > e.SelectedIndex) {
					ssRolePermissionsList.CurrentRec = ssRolePermissionsList[e.SelectedIndex];
					ssRolePermissionsList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListRolePermissions_Store(object dataItem, int index) {
			RCRoleBooleanRecord tmprec = (RCRoleBooleanRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENRole.ssId == 0?(object) null: tmprec.ssENRole.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRole.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRole.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssSTBoolean.ssValue == false?(object) null: tmprec.ssSTBoolean.ssValue);
			if (index < wtRolePermissions_storage.Count) {
				wtRolePermissions_storage[index] = tmpFields;
			} else {
				wtRolePermissions_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListRolePermissions_Restore() {

			#region fetch ssRolePermissionsList.

			// Read the needed fields of ssRolePermissionsList from storewtRolePermissions_list
			ssRolePermissionsList = new RLRoleBooleanRecordList();
			ArrayList storewtRolePermissions_list;
			storewtRolePermissions_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtRolePermissions_list", null);
			if (storewtRolePermissions_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtRolePermissions_list in storewtRolePermissions_list) {
					if (tmpFieldswtRolePermissions_list != null) {
						// Aux current record variable
						RCRoleBooleanRecord tmpAuxCurrentRecordwtRolePermissions_list = new RCRoleBooleanRecord(null);
						tmpAuxCurrentRecordwtRolePermissions_list.ssENRole.ssId = (int) (tmpFieldswtRolePermissions_list[0] == null ? 0: tmpFieldswtRolePermissions_list[0]);

						tmpAuxCurrentRecordwtRolePermissions_list.ssENRole.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRolePermissions_list[1]);

						tmpAuxCurrentRecordwtRolePermissions_list.ssENRole.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRolePermissions_list[2]);

						tmpAuxCurrentRecordwtRolePermissions_list.ssSTBoolean.ssValue = (bool) (tmpFieldswtRolePermissions_list[3] == null ? false: tmpFieldswtRolePermissions_list[3]);

						ssRolePermissionsList.Append(tmpAuxCurrentRecordwtRolePermissions_list);
					}
				}
			}
			ssRolePermissionsList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssRolePermissionsList runtime properties state.


			if (storewtRolePermissions_list.Count > 0) {
				ssRolePermissionsList.RestoreRecordListState(storewtRolePermissions_list.Count - 1, false);
			} else {
				ssRolePermissionsList.CurrentRowNumber = 0;
			}

			#endregion

			wtRolePermissions_storage = storewtRolePermissions_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListRolePermissions_Clear(object sender, EventArgs e) {
			wtRolePermissions_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListRolePermissions_Rebuild(int startIndex, int lineCount) {
			if (ssRolePermissionsList.Length != -1) {
				wtRolePermissions_storage.Clear();
				for (int i=startIndex; i<ssRolePermissionsList.Data.Count && i<startIndex+lineCount; i++) {
					recListRolePermissions_Store(ssRolePermissionsList.Data[i], wtRolePermissions_storage.Count);
				}
			}
		}
		public void recListRolePermissions_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtRolePermissions widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRoleBooleanRecordList getWtRolePermissionsList() {
			if (ssRolePermissionsListDoDataBind) {
				recListRolePermissions_onDataBinding(this, null);
			}

			return ssRolePermissionsList;
		}
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void chk_CheckBox2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox2
		/// </summary>
		public void chk_CheckBox2_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 4uZSwQ8jb0+mQMr32Cn3qg
		/// </summary>
		/// <returns>The Value of the Check Box 4uZSwQ8jb0+mQMr32Cn3qg</returns>
		public bool chk_CheckBox2_checked_value() {
			return getWtRolePermissionsList().CurrentRec.ssSTBoolean.ssValue;
		}
		public void chk_CheckBox2_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssRolePermissionsList.Length > parentControlIndex && parentControlIndex > -1) {
					ssRolePermissionsList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtRolePermissionsList().CurrentRec.ssSTBoolean.ssValue = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox2)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox2</returns>
		public bool chk_CheckBox2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox2)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox2</returns>
		public bool chk_CheckBox2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = OoAE809CDUCXzvkmf8miHg) Expression:
		///  RolePermissions.List.Current.Role.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return getWtRolePermissionsList().CurrentRec.ssENRole.ssName;
		}
		public static class FuncCommandOnChange {

			/// <summary>
			/// Query Function "GetRolePermissionsByRoleId" of Action "OnChange"
			/// </summary>
			public static RLRolePermissionsRecordList datasetGetRolePermissionsByRoleId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1, int qpinP2) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRolePermissions.[ID] o1, ENRolePermissions.[ROLEID] o2, ENRolePermissions.[APPLICATIONSECTION] o3, ENRolePermissions.[PERMISSIONTYPE] o4, ENRolePermissions.[CREATEDAT] o5, ENRolePermissions.[CREATEDBY] o6");
				fromBuilder.Append(" FROM {RolePermissions} ENRolePermissions");
				whereBuilder.Append(" WHERE ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENRolePermissions.[ROLEID] = @qpinP1) AND (ENRolePermissions.[ROLEID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENRolePermissions.[ROLEID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRolePermissions.[APPLICATIONSECTION] = @qpinP) AND (ENRolePermissions.[APPLICATIONSECTION] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRolePermissions.[APPLICATIONSECTION] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP2 != 0) {
					whereBuilder.Append("((ENRolePermissions.[PERMISSIONTYPE] = @qpinP2) AND (ENRolePermissions.[PERMISSIONTYPE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP2", DbType.Int32, qpinP2);
				} else {
					whereBuilder.Append("(ENRolePermissions.[PERMISSIONTYPE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRolePermissionsRecordList outParamList = new RLRolePermissionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRolePermissionsRecordList _tmp = new RLRolePermissionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions_Read.OnChange.GetRolePermissionsByRoleId.List");
						outParamList = (RLRolePermissionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions_Read.OnChange.GetRolePermissionsByRoleId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRolePermissionsRecordList _tmp = new RLRolePermissionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions_Read.OnChange.GetRolePermissionsByRoleId.List");
							outParamList = (RLRolePermissionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions_Read.OnChange.GetRolePermissionsByRoleId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncssPreparation {

			private static void QueryGetRolesReadDB(ref RCRoleBooleanRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRole.Read(r, ref index);
				rec.ssSTBoolean.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRoles" of Action "Preparation"
			/// </summary>
			public static RLRoleBooleanRecordList QueryGetRoles(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinPermissionType, int qpinApplicationSectionId, int qpineSpaceRoleProvider) {
				// Query Iterations: Single {RolePermissions}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinApplicationSectionId", DbType.Int32, qpinApplicationSectionId);
				sqlCmd.CreateParameter("@qpinPermissionType", DbType.Int32, qpinPermissionType);
				sqlCmd.CreateParameter("@qpineSpaceRoleProvider", DbType.Int32, qpineSpaceRoleProvider);
				string advSql = "SELECT   " +
				 "     {Role}.[ID], {Role}.[NAME], {Role}.[PERSISTENT], {Role}.[SS_KEY], {Role}.[ESPACE_ID], {Role}.[IS_ACTIVE], {Role}.[DESCRIPTION],   " +
				 "    (case when  {RolePermissions}.[ID] is null then 0 else 1 END)  as Access  " +
				 "FROM  {Role}  " +
				 "LEFT JOIN  {RolePermissions}   " +
				 "ON  {Role}.[ID] =  {RolePermissions}.[ROLEID] AND  {RolePermissions}.[APPLICATIONSECTION] = @qpinApplicationSectionId AND  {RolePermissions}.[PERMISSIONTYPE] = @qpinPermissionType   " +
				 "WHERE  " +
				 "     {Role}.[ESPACE_ID] = @qpineSpaceRoleProvider";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLRoleBooleanRecordList outParamList = new RLRoleBooleanRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetRolesReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[2];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLRoleBooleanRecordList _tmp = new RLRoleBooleanRecordList();
						_tmp.AlternateReadDBMethod = QueryGetRolesReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions_Read.Preparation.GetRoles.List");
							outParamList = (RLRoleBooleanRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions_Read.Preparation.GetRoles.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions_Read.Preparation.GetRoles.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetRoles in Preparation in RolePermissions_Read in BackofficeFlow in CaseConferencing (SELECT       {Role}.*,       (case when {RolePermissions}.[Id] is null then 0 else 1 END)  as Access  FROM {Role}  LEFT JOIN {RolePermissions}   ON {Role}.[Id] = {RolePermissions}.[RoleId] AND {RolePermissions}.[ApplicationSection] = @ApplicationSectionId AND {RolePermissions}.[PermissionType] = @PermissionType   WHERE      {Role}.[Espace_Id] = @eSpaceRoleProvider ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetRoles in Preparation in RolePermissions_Read in BackofficeFlow in CaseConferencing (SELECT       {Role}.*,       (case when {RolePermissions}.[Id] is null then 0 else 1 END)  as Access  FROM {Role}  LEFT JOIN {RolePermissions}   ON {Role}.[Id] = {RolePermissions}.[RoleId] AND {RolePermissions}.[ApplicationSection] = @ApplicationSectionId AND {RolePermissions}.[PermissionType] = @PermissionType   WHERE      {Role}.[Espace_Id] = @eSpaceRoleProvider ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetRoles in Preparation in RolePermissions_Read in BackofficeFlow in CaseConferencing (SELECT       {Role}.*,       (case when {RolePermissions}.[Id] is null then 0 else 1 END)  as Access  FROM {Role}  LEFT JOIN {RolePermissions}   ON {Role}.[Id] = {RolePermissions}.[RoleId] AND {RolePermissions}.[ApplicationSection] = @ApplicationSectionId AND {RolePermissions}.[PermissionType] = @PermissionType   WHERE      {Role}.[Espace_Id] = @eSpaceRoleProvider ): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetRoleProviderEspaces" of Action "Preparation"
			/// </summary>
			public static RLEspaceRecordList datasetGetRoleProviderEspaces(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENEspace.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18");
				fromBuilder.Append(" FROM {Espace} ENEspace");
				whereBuilder.Append(" WHERE (ENEspace.[IS_ACTIVE] = 1) AND (ENEspace.[NAME] = N'UserPermissions')");
				orderByBuilder.Append(" ORDER BY ENEspace.[NAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLEspaceRecordList outParamList = new RLEspaceRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLEspaceRecordList _tmp = new RLEspaceRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions_Read.Preparation.GetRoleProviderEspaces.List");
						outParamList = (RLEspaceRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions_Read.Preparation.GetRoleProviderEspaces.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLEspaceRecordList _tmp = new RLEspaceRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions_Read.Preparation.GetRoleProviderEspaces.List");
							outParamList = (RLEspaceRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions_Read.Preparation.GetRoleProviderEspaces.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.Kcn5cmzcLwE6tr9hSGFJ_ZQ";
			}
		}
	}

}
