/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowAutoComplete_Bank {
	public abstract class WBlkAutoComplete_Block: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamAutoCompleteType. Description:
		/// </summary>
		public int inParamAutoCompleteType = 0;
		/// <summary>
		/// Screen Input Parameter inParamIsPopup. Description:
		/// </summary>
		public bool inParamIsPopup = false;
		/// <summary>
		/// Screen Input Parameter inParamTextInputId. Description:
		/// </summary>
		public string inParamTextInputId = "";
		/// <summary>
		/// Variable <code>varLcSelectedText</code> that represents the Service Studio local variable
		///  <code>SelectedText</code> <p>Description: </p>
		/// </summary>
		int varLcSelectedText = 0;

		/// <summary>
		/// Variable <code>varLcCategorySelected1</code> that represents the Service Studio local variable
		///  <code>CategorySelected1</code> <p>Description: </p>
		/// </summary>
		string varLcCategorySelected1 = "";

		/// <summary>
		/// Variable <code>varLcCategorySelected2</code> that represents the Service Studio local variable
		///  <code>CategorySelected2</code> <p>Description: </p>
		/// </summary>
		string varLcCategorySelected2 = "";

		/// <summary>
		/// Variable <code>varLcCategorySelected3</code> that represents the Service Studio local variable
		///  <code>CategorySelected3</code> <p>Description: </p>
		/// </summary>
		string varLcCategorySelected3 = "";

		/// <summary>
		/// Variable <code>varLcCategorySelected4</code> that represents the Service Studio local variable
		///  <code>CategorySelected4</code> <p>Description: </p>
		/// </summary>
		string varLcCategorySelected4 = "";

		/// <summary>
		/// Variable <code>varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty</code> that represents the
		///  Service Studio local variable <code>GetAutoCompleteBanksByTypeId_Category1_IsEmpty</code
		/// > <p>Description: Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
		///  Required to ensure the "search parameter" behavior of the old query parameter 'Category1' in Oracl
		/// e databases.</p>
		/// </summary>
		bool varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty = false;

		/// <summary>
		/// Variable <code>varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty</code> that represents the
		///  Service Studio local variable <code>GetAutoCompleteBanksByTypeId_Category2_IsEmpty</code
		/// > <p>Description: Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
		///  Required to ensure the "search parameter" behavior of the old query parameter 'Category2' in Oracl
		/// e databases.</p>
		/// </summary>
		bool varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty = false;

		/// <summary>
		/// Variable <code>varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty</code> that represents the
		///  Service Studio local variable <code>GetAutoCompleteBanksByTypeId_Category3_IsEmpty</code
		/// > <p>Description: Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
		///  Required to ensure the "search parameter" behavior of the old query parameter 'Category3' in Oracl
		/// e databases.</p>
		/// </summary>
		bool varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty = false;

		/// <summary>
		/// Variable <code>varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty</code> that represents the
		///  Service Studio local variable <code>GetAutoCompleteBanksByTypeId_Category4_IsEmpty</code
		/// > <p>Description: Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
		///  Required to ensure the "search parameter" behavior of the old query parameter 'Category4' in Oracl
		/// e databases.</p>
		/// </summary>
		bool varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty = false;

		protected OutSystems.HubEdition.WebWidgets.Container wtWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		private RLTextRecordList _ssListRecords1List = new RLTextRecordList();
		public RLTextRecordList ssListRecords1List {
			get {
				return _ssListRecords1List; 
			}
			set {
				_ssListRecords1List = value;
				wtListRecords1.DataSource = value;
				ssListRecords1ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords1;
		public ArrayList wtListRecords1_storage = new ArrayList();
		protected bool ssListRecords1List_notUsedYet = true;
		protected bool ssListRecords1ListDoDataBind;
		protected bool ssListRecords1ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container25;
		private RLTextRecordList _ssListRecords2List = new RLTextRecordList();
		public RLTextRecordList ssListRecords2List {
			get {
				return _ssListRecords2List; 
			}
			set {
				_ssListRecords2List = value;
				wtListRecords2.DataSource = value;
				ssListRecords2ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords2;
		public ArrayList wtListRecords2_storage = new ArrayList();
		protected bool ssListRecords2List_notUsedYet = true;
		protected bool ssListRecords2ListDoDataBind;
		protected bool ssListRecords2ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		private RLTextRecordList _ssListRecords3List = new RLTextRecordList();
		public RLTextRecordList ssListRecords3List {
			get {
				return _ssListRecords3List; 
			}
			set {
				_ssListRecords3List = value;
				wtListRecords3.DataSource = value;
				ssListRecords3ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords3;
		public ArrayList wtListRecords3_storage = new ArrayList();
		protected bool ssListRecords3List_notUsedYet = true;
		protected bool ssListRecords3ListDoDataBind;
		protected bool ssListRecords3ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		private RLTextRecordList _ssListRecords4List = new RLTextRecordList();
		public RLTextRecordList ssListRecords4List {
			get {
				return _ssListRecords4List; 
			}
			set {
				_ssListRecords4List = value;
				wtListRecords4.DataSource = value;
				ssListRecords4ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecords4;
		public ArrayList wtListRecords4_storage = new ArrayList();
		protected bool ssListRecords4List_notUsedYet = true;
		protected bool ssListRecords4ListDoDataBind;
		protected bool ssListRecords4ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wtAutoCompleteDrop;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutocompleteDrop2ValidatorRequired;
		protected SelectRtWidget Rt_wtAutocompleteDrop2 = new SelectRtWidget();
		RLBooleanAutoComplete_BankRecordList Rt_wtAutocompleteDrop2_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		/// <summary>
		/// Variable (wtEditLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEditLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		/// <summary>
		/// Variable (wtEditLink2) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtEditLink2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLTextRecordList queryResGEtCategory4_outParamList = new RLTextRecordList();
		int queryResGEtCategory4_outParamCount = 0;
		RLTextRecordList queryResGEtCategory1_outParamList = new RLTextRecordList();
		int queryResGEtCategory1_outParamCount = 0;
		RLTextRecordList queryResGEtCategory2_outParamList = new RLTextRecordList();
		int queryResGEtCategory2_outParamCount = 0;
		RLBooleanAutoComplete_BankRecordList queryResGetAutoCompleteBanksByTypeId_outParamList = new RLBooleanAutoComplete_BankRecordList();
		int queryResGetAutoCompleteBanksByTypeId_outParamCount = 0;
		RLTextRecordList queryResGEtCategory3_outParamList = new RLTextRecordList();
		int queryResGEtCategory3_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query QueryGEtCategory1
			int QueryGEtCategory1_maxRecords = Math.Max(wtListRecords1.StartIndex + wtListRecords1.LineCount + 1, 0);
			queryResGEtCategory1_outParamList = FuncssPreparation.QueryGEtCategory1(heContext, QueryGEtCategory1_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory1_outParamCount, inParamAutoCompleteType
			);
			// Default - English
			varLcCategorySelected1 = (((inParamAutoCompleteType==ENAutoCompleteBankTypeEntity.GetRecordByKey(ObjectKey.Parse("TXgF3mr6BkiKrq5gpMS8sw")).ssId)) ?("ENGLISH"):("")); // CategorySelected1 = internalIf
			varLcCategorySelected2 = ""; // CategorySelected2 = ""
			varLcCategorySelected3 = ""; // CategorySelected3 = ""
			varLcCategorySelected4 = ""; // CategorySelected4 = ""
			// Query QueryGEtCategory2
			int QueryGEtCategory2_maxRecords = Math.Max(wtListRecords2.StartIndex + wtListRecords2.LineCount + 1, 0);
			queryResGEtCategory2_outParamList = FuncssPreparation.QueryGEtCategory2(heContext, QueryGEtCategory2_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory2_outParamCount, varLcCategorySelected1
			, varLcCategorySelected2
			, varLcCategorySelected3
			, varLcCategorySelected4
			, inParamAutoCompleteType
			);
			// Query QueryGEtCategory3
			int QueryGEtCategory3_maxRecords = Math.Max(wtListRecords3.StartIndex + wtListRecords3.LineCount + 1, 0);
			queryResGEtCategory3_outParamList = FuncssPreparation.QueryGEtCategory3(heContext, QueryGEtCategory3_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory3_outParamCount, varLcCategorySelected1
			, varLcCategorySelected2
			, varLcCategorySelected3
			, varLcCategorySelected4
			, inParamAutoCompleteType
			);
			// Query QueryGEtCategory4
			int QueryGEtCategory4_maxRecords = Math.Max(wtListRecords4.StartIndex + wtListRecords4.LineCount + 1, 0);
			queryResGEtCategory4_outParamList = FuncssPreparation.QueryGEtCategory4(heContext, QueryGEtCategory4_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory4_outParamCount, varLcCategorySelected1
			, varLcCategorySelected2
			, varLcCategorySelected3
			, varLcCategorySelected4
			, inParamAutoCompleteType
			);
			// Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
			varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty = (varLcCategorySelected1== ""); // GetAutoCompleteBanksByTypeId_Category1_IsEmpty = CategorySelected1 = ""
			varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty = (varLcCategorySelected2== ""); // GetAutoCompleteBanksByTypeId_Category2_IsEmpty = CategorySelected2 = ""
			varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty = (varLcCategorySelected3== ""); // GetAutoCompleteBanksByTypeId_Category3_IsEmpty = CategorySelected3 = ""
			varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty = (varLcCategorySelected4== ""); // GetAutoCompleteBanksByTypeId_Category4_IsEmpty = CategorySelected4 = ""
			// Query datasetGetAutoCompleteBanksByTypeId
			int datasetGetAutoCompleteBanksByTypeId_maxRecords = 0;
			queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, inParamAutoCompleteType
			, varLcCategorySelected1
			, varLcCategorySelected2
			, varLcCategorySelected3
			, varLcCategorySelected4
			, varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty
			, varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty
			, varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty
			, varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty
			);
		}
		static WBlkAutoComplete_Block() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtListRecords1.StartIndexExpression = () => 0;
			wtListRecords1.LineCountExpression = () => 50;
			wtListRecords2.StartIndexExpression = () => 0;
			wtListRecords2.LineCountExpression = () => 50;
			wtListRecords3.StartIndexExpression = () => 0;
			wtListRecords3.LineCountExpression = () => 50;
			wtListRecords4.StartIndexExpression = () => 0;
			wtListRecords4.LineCountExpression = () => 50;
			if (this.wtEditLink != null) {
				this.wtEditLink.Click += new System.EventHandler(this.wtEditLink_Click);
			}
			if (this.wtEditLink2 != null) {
				this.wtEditLink2.Click += new System.EventHandler(this.wtEditLink2_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssListRecords1ListDoDataBind = true;
					ssListRecords2ListDoDataBind = true;
					ssListRecords3ListDoDataBind = true;
					ssListRecords4ListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(this, "wtAutocompleteDrop2", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGEtCategory4_outParamList.

			int tmpcurrentrownumberqueryResGEtCategory4_outParamList = queryResGEtCategory4_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGEtCategory4_outParamList = queryResGEtCategory4_outParamList.Eof;
			ArrayList storequeryResGEtCategory4_outParamList = new ArrayList();

			// Write the needed fields of queryResGEtCategory4_outParamList to the storequeryResGEtCategory4_outParamList
			if (!queryResGEtCategory4_outParamList.Empty) {
				try {
					queryResGEtCategory4_outParamList.StartIteration();

					while (!queryResGEtCategory4_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGEtCategory4_outParamList = new ArrayList();
						tmpFieldsqueryResGEtCategory4_outParamList.Add(queryResGEtCategory4_outParamList.CurrentRec.ssSTText.ssValue == "" ?(object) null: queryResGEtCategory4_outParamList.CurrentRec.ssSTText.ssValue);
						storequeryResGEtCategory4_outParamList.Add(tmpFieldsqueryResGEtCategory4_outParamList);
						queryResGEtCategory4_outParamList.Advance();
					}
				} finally {
					queryResGEtCategory4_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGEtCategory4_outParamList", storequeryResGEtCategory4_outParamList, null);

			#endregion


			#region store queryResGEtCategory4_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGEtCategory4_outParamList_currentrownumber", tmpcurrentrownumberqueryResGEtCategory4_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGEtCategory4_outParamList_eof", tmpeofqueryResGEtCategory4_outParamList, false);
			queryResGEtCategory4_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory4_outParamList, tmpeofqueryResGEtCategory4_outParamList);

			#endregion


			#region store queryResGEtCategory1_outParamList.

			int tmpcurrentrownumberqueryResGEtCategory1_outParamList = queryResGEtCategory1_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGEtCategory1_outParamList = queryResGEtCategory1_outParamList.Eof;
			ArrayList storequeryResGEtCategory1_outParamList = new ArrayList();

			// Write the needed fields of queryResGEtCategory1_outParamList to the storequeryResGEtCategory1_outParamList
			if (!queryResGEtCategory1_outParamList.Empty) {
				try {
					queryResGEtCategory1_outParamList.StartIteration();

					while (!queryResGEtCategory1_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGEtCategory1_outParamList = new ArrayList();
						tmpFieldsqueryResGEtCategory1_outParamList.Add(queryResGEtCategory1_outParamList.CurrentRec.ssSTText.ssValue == "" ?(object) null: queryResGEtCategory1_outParamList.CurrentRec.ssSTText.ssValue);
						storequeryResGEtCategory1_outParamList.Add(tmpFieldsqueryResGEtCategory1_outParamList);
						queryResGEtCategory1_outParamList.Advance();
					}
				} finally {
					queryResGEtCategory1_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGEtCategory1_outParamList", storequeryResGEtCategory1_outParamList, null);

			#endregion


			#region store queryResGEtCategory1_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGEtCategory1_outParamList_currentrownumber", tmpcurrentrownumberqueryResGEtCategory1_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGEtCategory1_outParamList_eof", tmpeofqueryResGEtCategory1_outParamList, false);
			queryResGEtCategory1_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory1_outParamList, tmpeofqueryResGEtCategory1_outParamList);

			#endregion


			#region store queryResGEtCategory2_outParamList.

			int tmpcurrentrownumberqueryResGEtCategory2_outParamList = queryResGEtCategory2_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGEtCategory2_outParamList = queryResGEtCategory2_outParamList.Eof;
			ArrayList storequeryResGEtCategory2_outParamList = new ArrayList();

			// Write the needed fields of queryResGEtCategory2_outParamList to the storequeryResGEtCategory2_outParamList
			if (!queryResGEtCategory2_outParamList.Empty) {
				try {
					queryResGEtCategory2_outParamList.StartIteration();

					while (!queryResGEtCategory2_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGEtCategory2_outParamList = new ArrayList();
						tmpFieldsqueryResGEtCategory2_outParamList.Add(queryResGEtCategory2_outParamList.CurrentRec.ssSTText.ssValue == "" ?(object) null: queryResGEtCategory2_outParamList.CurrentRec.ssSTText.ssValue);
						storequeryResGEtCategory2_outParamList.Add(tmpFieldsqueryResGEtCategory2_outParamList);
						queryResGEtCategory2_outParamList.Advance();
					}
				} finally {
					queryResGEtCategory2_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGEtCategory2_outParamList", storequeryResGEtCategory2_outParamList, null);

			#endregion


			#region store queryResGEtCategory2_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGEtCategory2_outParamList_currentrownumber", tmpcurrentrownumberqueryResGEtCategory2_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGEtCategory2_outParamList_eof", tmpeofqueryResGEtCategory2_outParamList, false);
			queryResGEtCategory2_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory2_outParamList, tmpeofqueryResGEtCategory2_outParamList);

			#endregion


			#region store queryResGEtCategory3_outParamList.

			int tmpcurrentrownumberqueryResGEtCategory3_outParamList = queryResGEtCategory3_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGEtCategory3_outParamList = queryResGEtCategory3_outParamList.Eof;
			ArrayList storequeryResGEtCategory3_outParamList = new ArrayList();

			// Write the needed fields of queryResGEtCategory3_outParamList to the storequeryResGEtCategory3_outParamList
			if (!queryResGEtCategory3_outParamList.Empty) {
				try {
					queryResGEtCategory3_outParamList.StartIteration();

					while (!queryResGEtCategory3_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGEtCategory3_outParamList = new ArrayList();
						tmpFieldsqueryResGEtCategory3_outParamList.Add(queryResGEtCategory3_outParamList.CurrentRec.ssSTText.ssValue == "" ?(object) null: queryResGEtCategory3_outParamList.CurrentRec.ssSTText.ssValue);
						storequeryResGEtCategory3_outParamList.Add(tmpFieldsqueryResGEtCategory3_outParamList);
						queryResGEtCategory3_outParamList.Advance();
					}
				} finally {
					queryResGEtCategory3_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGEtCategory3_outParamList", storequeryResGEtCategory3_outParamList, null);

			#endregion


			#region store queryResGEtCategory3_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGEtCategory3_outParamList_currentrownumber", tmpcurrentrownumberqueryResGEtCategory3_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGEtCategory3_outParamList_eof", tmpeofqueryResGEtCategory3_outParamList, false);
			queryResGEtCategory3_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory3_outParamList, tmpeofqueryResGEtCategory3_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamAutoCompleteType", inParamAutoCompleteType, 0);
			ViewStateAttributes.SetInViewState("inParamIsPopup", inParamIsPopup, false);
			ViewStateAttributes.SetInViewState("inParamTextInputId", inParamTextInputId, "");
			ViewStateAttributes.SetInViewState("varLcSelectedText", varLcSelectedText, 0);
			ViewStateAttributes.SetInViewState("varLcCategorySelected1", varLcCategorySelected1, "");
			ViewStateAttributes.SetInViewState("varLcCategorySelected2", varLcCategorySelected2, "");
			ViewStateAttributes.SetInViewState("varLcCategorySelected3", varLcCategorySelected3, "");
			ViewStateAttributes.SetInViewState("varLcCategorySelected4", varLcCategorySelected4, "");
			if (IsAjaxRequest) {
				recListListRecords1_Rebuild((ssListRecords1ListDataBound ? wtListRecords1.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords1.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecords1_list", wtListRecords1_storage, null);
			if (IsAjaxRequest) {
				recListListRecords2_Rebuild((ssListRecords2ListDataBound ? wtListRecords2.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords2.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecords2_list", wtListRecords2_storage, null);
			if (IsAjaxRequest) {
				recListListRecords3_Rebuild((ssListRecords3ListDataBound ? wtListRecords3.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords3.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecords3_list", wtListRecords3_storage, null);
			if (IsAjaxRequest) {
				recListListRecords4_Rebuild((ssListRecords4ListDataBound ? wtListRecords4.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecords4.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecords4_list", wtListRecords4_storage, null);
			ViewStateAttributes.SetInViewState("wtAutocompleteDrop2_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutocompleteDrop2")).Mandatory, false);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGEtCategory4_outParamList.

				// Read the needed fields of queryResGEtCategory4_outParamList from storequeryResGEtCategory4_outParamList
				queryResGEtCategory4_outParamList = new RLTextRecordList();
				ArrayList storequeryResGEtCategory4_outParamList;
				storequeryResGEtCategory4_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGEtCategory4_outParamList", null);
				if (storequeryResGEtCategory4_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGEtCategory4_outParamList in storequeryResGEtCategory4_outParamList) {
						if (tmpFieldsqueryResGEtCategory4_outParamList != null) {
							// Aux current record variable
							RCTextRecord tmpAuxCurrentRecordqueryResGEtCategory4_outParamList = new RCTextRecord(null);
							tmpAuxCurrentRecordqueryResGEtCategory4_outParamList.ssSTText.ssValue = (string) (tmpFieldsqueryResGEtCategory4_outParamList[0] == null ? "": tmpFieldsqueryResGEtCategory4_outParamList[0]);

							queryResGEtCategory4_outParamList.Append(tmpAuxCurrentRecordqueryResGEtCategory4_outParamList);
						}
					}
				}
				queryResGEtCategory4_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGEtCategory4_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGEtCategory4_outParamList;
				tmpcurrentrownumberqueryResGEtCategory4_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGEtCategory4_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGEtCategory4_outParamList;
				tmpeofqueryResGEtCategory4_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGEtCategory4_outParamList_eof", false);
				queryResGEtCategory4_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory4_outParamList, tmpeofqueryResGEtCategory4_outParamList);

				#endregion


				#region fetch queryResGEtCategory1_outParamList.

				// Read the needed fields of queryResGEtCategory1_outParamList from storequeryResGEtCategory1_outParamList
				queryResGEtCategory1_outParamList = new RLTextRecordList();
				ArrayList storequeryResGEtCategory1_outParamList;
				storequeryResGEtCategory1_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGEtCategory1_outParamList", null);
				if (storequeryResGEtCategory1_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGEtCategory1_outParamList in storequeryResGEtCategory1_outParamList) {
						if (tmpFieldsqueryResGEtCategory1_outParamList != null) {
							// Aux current record variable
							RCTextRecord tmpAuxCurrentRecordqueryResGEtCategory1_outParamList = new RCTextRecord(null);
							tmpAuxCurrentRecordqueryResGEtCategory1_outParamList.ssSTText.ssValue = (string) (tmpFieldsqueryResGEtCategory1_outParamList[0] == null ? "": tmpFieldsqueryResGEtCategory1_outParamList[0]);

							queryResGEtCategory1_outParamList.Append(tmpAuxCurrentRecordqueryResGEtCategory1_outParamList);
						}
					}
				}
				queryResGEtCategory1_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGEtCategory1_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGEtCategory1_outParamList;
				tmpcurrentrownumberqueryResGEtCategory1_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGEtCategory1_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGEtCategory1_outParamList;
				tmpeofqueryResGEtCategory1_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGEtCategory1_outParamList_eof", false);
				queryResGEtCategory1_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory1_outParamList, tmpeofqueryResGEtCategory1_outParamList);

				#endregion


				#region fetch queryResGEtCategory2_outParamList.

				// Read the needed fields of queryResGEtCategory2_outParamList from storequeryResGEtCategory2_outParamList
				queryResGEtCategory2_outParamList = new RLTextRecordList();
				ArrayList storequeryResGEtCategory2_outParamList;
				storequeryResGEtCategory2_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGEtCategory2_outParamList", null);
				if (storequeryResGEtCategory2_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGEtCategory2_outParamList in storequeryResGEtCategory2_outParamList) {
						if (tmpFieldsqueryResGEtCategory2_outParamList != null) {
							// Aux current record variable
							RCTextRecord tmpAuxCurrentRecordqueryResGEtCategory2_outParamList = new RCTextRecord(null);
							tmpAuxCurrentRecordqueryResGEtCategory2_outParamList.ssSTText.ssValue = (string) (tmpFieldsqueryResGEtCategory2_outParamList[0] == null ? "": tmpFieldsqueryResGEtCategory2_outParamList[0]);

							queryResGEtCategory2_outParamList.Append(tmpAuxCurrentRecordqueryResGEtCategory2_outParamList);
						}
					}
				}
				queryResGEtCategory2_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGEtCategory2_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGEtCategory2_outParamList;
				tmpcurrentrownumberqueryResGEtCategory2_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGEtCategory2_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGEtCategory2_outParamList;
				tmpeofqueryResGEtCategory2_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGEtCategory2_outParamList_eof", false);
				queryResGEtCategory2_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory2_outParamList, tmpeofqueryResGEtCategory2_outParamList);

				#endregion


				#region fetch queryResGEtCategory3_outParamList.

				// Read the needed fields of queryResGEtCategory3_outParamList from storequeryResGEtCategory3_outParamList
				queryResGEtCategory3_outParamList = new RLTextRecordList();
				ArrayList storequeryResGEtCategory3_outParamList;
				storequeryResGEtCategory3_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGEtCategory3_outParamList", null);
				if (storequeryResGEtCategory3_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGEtCategory3_outParamList in storequeryResGEtCategory3_outParamList) {
						if (tmpFieldsqueryResGEtCategory3_outParamList != null) {
							// Aux current record variable
							RCTextRecord tmpAuxCurrentRecordqueryResGEtCategory3_outParamList = new RCTextRecord(null);
							tmpAuxCurrentRecordqueryResGEtCategory3_outParamList.ssSTText.ssValue = (string) (tmpFieldsqueryResGEtCategory3_outParamList[0] == null ? "": tmpFieldsqueryResGEtCategory3_outParamList[0]);

							queryResGEtCategory3_outParamList.Append(tmpAuxCurrentRecordqueryResGEtCategory3_outParamList);
						}
					}
				}
				queryResGEtCategory3_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGEtCategory3_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGEtCategory3_outParamList;
				tmpcurrentrownumberqueryResGEtCategory3_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGEtCategory3_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGEtCategory3_outParamList;
				tmpeofqueryResGEtCategory3_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGEtCategory3_outParamList_eof", false);
				queryResGEtCategory3_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGEtCategory3_outParamList, tmpeofqueryResGEtCategory3_outParamList);

				#endregion

				inParamAutoCompleteType = (int) ViewStateAttributes.GetFromViewState("inParamAutoCompleteType", 0);
				inParamIsPopup = (bool) ViewStateAttributes.GetFromViewState("inParamIsPopup", false);
				inParamTextInputId = (string) ViewStateAttributes.GetFromViewState("inParamTextInputId", "");
				varLcSelectedText = (int) ViewStateAttributes.GetFromViewState("varLcSelectedText", 0);
				varLcCategorySelected1 = (string) ViewStateAttributes.GetFromViewState("varLcCategorySelected1", "");
				varLcCategorySelected2 = (string) ViewStateAttributes.GetFromViewState("varLcCategorySelected2", "");
				varLcCategorySelected3 = (string) ViewStateAttributes.GetFromViewState("varLcCategorySelected3", "");
				varLcCategorySelected4 = (string) ViewStateAttributes.GetFromViewState("varLcCategorySelected4", "");
				recListListRecords1_Restore();
				recListListRecords2_Restore();
				recListListRecords3_Restore();
				recListListRecords4_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wtAutocompleteDrop2")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutocompleteDrop2_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KAdvKSEx3s0aJUy0tyTUzfg";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/AutoComplete_Bank/AutoComplete_Block.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\AutoComplete_Bank\\AutoComplete_Block.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\AutoComplete_Bank\\AutoComplete_Block.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_Chosen.Flows.FlowChosenCommon.WBlkchosenWebBlock.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("AdvKSEx3s0aJUy0tyTUzfg"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvSelect: VarsBag {
			public RLAutoComplete_BankRecordList queryResGetAutoCompleteBanks2_outParamList = new RLAutoComplete_BankRecordList();
			public int queryResGetAutoCompleteBanks2_outParamCount = 0;

			public lcvSelect() {
			}
		}
		/// <summary>
		/// Action <code>CommandSelect</code> that represents the Service Studio screen action
		///  <code>Select</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelect(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSelect localVars = new lcvSelect();
			try {
				if (inParamIsPopup) {
					// Query datasetGetAutoCompleteBanks2
					int datasetGetAutoCompleteBanks2_maxRecords = 0;
					localVars.queryResGetAutoCompleteBanks2_outParamList = FuncCommandSelect.datasetGetAutoCompleteBanks2(heContext, datasetGetAutoCompleteBanks2_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetAutoCompleteBanks2_outParamCount, varLcSelectedText
					);
					// RunJavaScript
					Actions.ActionRunJavaScript(heContext, (((((("\r\nvar valueFinal  = opener.document.getElementById(\'" +inParamTextInputId) + "\').value + \'") +localVars.queryResGetAutoCompleteBanks2_outParamList.CurrentRec.ssENAutoComplete_Bank.ssDescription) + "\';\r\n\r\n\r\nopener.document.getElementById(\'") +inParamTextInputId) + "\').value= valueFinal ;self.close();"));

				} else {
					// NotifyWidget
					ExtendedActions.NotifyWidget(heContext, RuntimeID, Convert.ToString(varLcSelectedText));

				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick</code> that represents the Service Studio screen action
		///  <code>OnClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcCategorySelected1 = (((varLcCategorySelected1==getWtListRecords1List().CurrentRec.ssSTText.ssValue)) ?(""):(getWtListRecords1List().CurrentRec.ssSTText.ssValue)); // CategorySelected1 = internalIf
				varLcCategorySelected2 = ""; // CategorySelected2 = ""
				varLcCategorySelected3 = ""; // CategorySelected3 = ""
				varLcCategorySelected4 = ""; // CategorySelected4 = ""
				// Query QueryGEtCategory1
				{
					int QueryGEtCategory1_maxRecords = Math.Max(wtListRecords1.StartIndex + wtListRecords1.LineCount + 1, 0);
					queryResGEtCategory1_outParamList = FuncssPreparation.QueryGEtCategory1(heContext, QueryGEtCategory1_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory1_outParamCount, inParamAutoCompleteType
					);
				}
				// Query QueryGEtCategory2
				{
					int QueryGEtCategory2_maxRecords = Math.Max(wtListRecords2.StartIndex + wtListRecords2.LineCount + 1, 0);
					queryResGEtCategory2_outParamList = FuncssPreparation.QueryGEtCategory2(heContext, QueryGEtCategory2_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory2_outParamCount, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, inParamAutoCompleteType
					);
				}
				// Query QueryGEtCategory3
				{
					int QueryGEtCategory3_maxRecords = Math.Max(wtListRecords3.StartIndex + wtListRecords3.LineCount + 1, 0);
					queryResGEtCategory3_outParamList = FuncssPreparation.QueryGEtCategory3(heContext, QueryGEtCategory3_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory3_outParamCount, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, inParamAutoCompleteType
					);
				}
				// Query QueryGEtCategory4
				{
					int QueryGEtCategory4_maxRecords = Math.Max(wtListRecords4.StartIndex + wtListRecords4.LineCount + 1, 0);
					queryResGEtCategory4_outParamList = FuncssPreparation.QueryGEtCategory4(heContext, QueryGEtCategory4_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory4_outParamCount, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, inParamAutoCompleteType
					);
				}
				// Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
				varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty = (varLcCategorySelected1== ""); // GetAutoCompleteBanksByTypeId_Category1_IsEmpty = CategorySelected1 = ""
				varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty = (varLcCategorySelected2== ""); // GetAutoCompleteBanksByTypeId_Category2_IsEmpty = CategorySelected2 = ""
				varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty = (varLcCategorySelected3== ""); // GetAutoCompleteBanksByTypeId_Category3_IsEmpty = CategorySelected3 = ""
				varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty = (varLcCategorySelected4== ""); // GetAutoCompleteBanksByTypeId_Category4_IsEmpty = CategorySelected4 = ""
				// Query datasetGetAutoCompleteBanksByTypeId
				{
					int datasetGetAutoCompleteBanksByTypeId_maxRecords = 0;
					queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, inParamAutoCompleteType
					, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty
					);
				}
				// Refresh Widget (wtWrapper)
				ssListRecords1ListDoDataBind = true;
				ssListRecords2ListDoDataBind = true;
				ssListRecords3ListDoDataBind = true;
				ssListRecords4ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick2</code> that represents the Service Studio screen action
		///  <code>OnClick2</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick2(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcCategorySelected2 = (((getWtListRecords2List().CurrentRec.ssSTText.ssValue==varLcCategorySelected2)) ?(""):(getWtListRecords2List().CurrentRec.ssSTText.ssValue)); // CategorySelected2 = internalIf
				varLcCategorySelected3 = ""; // CategorySelected3 = ""
				varLcCategorySelected4 = ""; // CategorySelected4 = ""
				// Query QueryGEtCategory3
				{
					int QueryGEtCategory3_maxRecords = Math.Max(wtListRecords3.StartIndex + wtListRecords3.LineCount + 1, 0);
					queryResGEtCategory3_outParamList = FuncssPreparation.QueryGEtCategory3(heContext, QueryGEtCategory3_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory3_outParamCount, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, inParamAutoCompleteType
					);
				}
				// Query QueryGEtCategory4
				{
					int QueryGEtCategory4_maxRecords = Math.Max(wtListRecords4.StartIndex + wtListRecords4.LineCount + 1, 0);
					queryResGEtCategory4_outParamList = FuncssPreparation.QueryGEtCategory4(heContext, QueryGEtCategory4_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory4_outParamCount, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, inParamAutoCompleteType
					);
				}
				// Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
				varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty = (varLcCategorySelected1== ""); // GetAutoCompleteBanksByTypeId_Category1_IsEmpty = CategorySelected1 = ""
				varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty = (varLcCategorySelected2== ""); // GetAutoCompleteBanksByTypeId_Category2_IsEmpty = CategorySelected2 = ""
				varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty = (varLcCategorySelected3== ""); // GetAutoCompleteBanksByTypeId_Category3_IsEmpty = CategorySelected3 = ""
				varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty = (varLcCategorySelected4== ""); // GetAutoCompleteBanksByTypeId_Category4_IsEmpty = CategorySelected4 = ""
				// Query datasetGetAutoCompleteBanksByTypeId
				{
					int datasetGetAutoCompleteBanksByTypeId_maxRecords = 0;
					queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, inParamAutoCompleteType
					, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty
					);
				}
				// Refresh Widget (wtWrapper)
				ssListRecords1ListDoDataBind = true;
				ssListRecords2ListDoDataBind = true;
				ssListRecords3ListDoDataBind = true;
				ssListRecords4ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick4</code> that represents the Service Studio screen action
		///  <code>OnClick4</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick4(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcCategorySelected4 = (((getWtListRecords4List().CurrentRec.ssSTText.ssValue==varLcCategorySelected4)) ?(""):(getWtListRecords4List().CurrentRec.ssSTText.ssValue)); // CategorySelected4 = internalIf
				// Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
				varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty = (varLcCategorySelected1== ""); // GetAutoCompleteBanksByTypeId_Category1_IsEmpty = CategorySelected1 = ""
				varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty = (varLcCategorySelected2== ""); // GetAutoCompleteBanksByTypeId_Category2_IsEmpty = CategorySelected2 = ""
				varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty = (varLcCategorySelected3== ""); // GetAutoCompleteBanksByTypeId_Category3_IsEmpty = CategorySelected3 = ""
				varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty = (varLcCategorySelected4== ""); // GetAutoCompleteBanksByTypeId_Category4_IsEmpty = CategorySelected4 = ""
				// Query datasetGetAutoCompleteBanksByTypeId
				{
					int datasetGetAutoCompleteBanksByTypeId_maxRecords = 0;
					queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, inParamAutoCompleteType
					, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty
					);
				}
				// Refresh Widget (wtWrapper)
				ssListRecords1ListDoDataBind = true;
				ssListRecords2ListDoDataBind = true;
				ssListRecords3ListDoDataBind = true;
				ssListRecords4ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClick3</code> that represents the Service Studio screen action
		///  <code>OnClick3</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick3(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcCategorySelected3 = (((getWtListRecords3List().CurrentRec.ssSTText.ssValue==varLcCategorySelected3)) ?(""):(getWtListRecords3List().CurrentRec.ssSTText.ssValue)); // CategorySelected3 = internalIf
				varLcCategorySelected4 = ""; // CategorySelected4 = ""
				// Query QueryGEtCategory4
				{
					int QueryGEtCategory4_maxRecords = Math.Max(wtListRecords4.StartIndex + wtListRecords4.LineCount + 1, 0);
					queryResGEtCategory4_outParamList = FuncssPreparation.QueryGEtCategory4(heContext, QueryGEtCategory4_maxRecords, IterationMultiplicity.Multiple, out queryResGEtCategory4_outParamCount, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, inParamAutoCompleteType
					);
				}
				// Created by the upgrade of 'GetAutoCompleteBanksByTypeId' to an Aggregate.
				varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty = (varLcCategorySelected1== ""); // GetAutoCompleteBanksByTypeId_Category1_IsEmpty = CategorySelected1 = ""
				varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty = (varLcCategorySelected2== ""); // GetAutoCompleteBanksByTypeId_Category2_IsEmpty = CategorySelected2 = ""
				varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty = (varLcCategorySelected3== ""); // GetAutoCompleteBanksByTypeId_Category3_IsEmpty = CategorySelected3 = ""
				varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty = (varLcCategorySelected4== ""); // GetAutoCompleteBanksByTypeId_Category4_IsEmpty = CategorySelected4 = ""
				// Query datasetGetAutoCompleteBanksByTypeId
				{
					int datasetGetAutoCompleteBanksByTypeId_maxRecords = 0;
					queryResGetAutoCompleteBanksByTypeId_outParamList = FuncssPreparation.datasetGetAutoCompleteBanksByTypeId(heContext, datasetGetAutoCompleteBanksByTypeId_maxRecords, IterationMultiplicity.Single, out queryResGetAutoCompleteBanksByTypeId_outParamCount, inParamAutoCompleteType
					, varLcCategorySelected1
					, varLcCategorySelected2
					, varLcCategorySelected3
					, varLcCategorySelected4
					, varLcGetAutoCompleteBanksByTypeId_Category1_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category2_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category3_IsEmpty
					, varLcGetAutoCompleteBanksByTypeId_Category4_IsEmpty
					);
				}
				// Refresh Widget (wtWrapper)
				ssListRecords1ListDoDataBind = true;
				ssListRecords2ListDoDataBind = true;
				ssListRecords3ListDoDataBind = true;
				ssListRecords4ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cntWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapper)
		/// </summary>
		/// <returns>The Visible State of wtWrapper</returns>
		public bool cntWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void expression_InlineExpression4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-size:11px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = rJfJNLdnt0uU4l_o_URJgg) Expression: " (Filter by category)"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return " (Filter by category)";
		}
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container28_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container28_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords1
				ssListRecords1List = queryResGEtCategory1_outParamList;
				ssListRecords1ListDoDataBind = false;
				ssListRecords1ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords1_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords1List.Length > 0) {
					ssListRecords1List.CurrentRec = ssListRecords1List[ssListRecords1List.CurrentRowNumber];
				}
				if (ssListRecords1List.Length > e.SelectedIndex) {
					ssListRecords1List.CurrentRec = ssListRecords1List[e.SelectedIndex];
					ssListRecords1List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords1_Store(object dataItem, int index) {
			RCTextRecord tmprec = (RCTextRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTText.ssValue == "" ?(object) null: tmprec.ssSTText.ssValue);
			if (index < wtListRecords1_storage.Count) {
				wtListRecords1_storage[index] = tmpFields;
			} else {
				wtListRecords1_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecords1_Restore() {

			#region fetch ssListRecords1List.

			// Read the needed fields of ssListRecords1List from storewtListRecords1_list
			ssListRecords1List = new RLTextRecordList();
			ArrayList storewtListRecords1_list;
			storewtListRecords1_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecords1_list", null);
			if (storewtListRecords1_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecords1_list in storewtListRecords1_list) {
					if (tmpFieldswtListRecords1_list != null) {
						// Aux current record variable
						RCTextRecord tmpAuxCurrentRecordwtListRecords1_list = new RCTextRecord(null);
						tmpAuxCurrentRecordwtListRecords1_list.ssSTText.ssValue = (string) (tmpFieldswtListRecords1_list[0] == null ? "": tmpFieldswtListRecords1_list[0]);

						ssListRecords1List.Append(tmpAuxCurrentRecordwtListRecords1_list);
					}
				}
			}
			ssListRecords1List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecords1List runtime properties state.


			if (storewtListRecords1_list.Count > 0) {
				ssListRecords1List.RestoreRecordListState(storewtListRecords1_list.Count - 1, false);
			} else {
				ssListRecords1List.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecords1_storage = storewtListRecords1_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords1_Clear(object sender, EventArgs e) {
			wtListRecords1_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords1_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords1List.Length != -1) {
				wtListRecords1_storage.Clear();
				for (int i=startIndex; i<ssListRecords1List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords1_Store(ssListRecords1List.Data[i], wtListRecords1_storage.Count);
				}
			}
		}
		public void recListListRecords1_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords1 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLTextRecordList getWtListRecords1List() {
			if (ssListRecords1ListDoDataBind) {
				recListListRecords1_onDataBinding(this, null);
			}

			return ssListRecords1List;
		}
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container5_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcCategorySelected1==getWtListRecords1List().CurrentRec.ssSTText.ssValue)) ?("background:white ;color:#1F3D60;"):("background: #1F3D60;color:white;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container5_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container5
		/// </summary>
		public void cnt_Container5_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = Jc3VQtUj7kGVzkxP4frmmA) Expression:
		///  ListRecords1.List.Current.Text.Value
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return getWtListRecords1List().CurrentRec.ssSTText.ssValue;
		}
		public void cnt_Container25_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container25_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container25_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container25_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container25)
		/// </summary>
		/// <returns>The Visible State of wt_Container25</returns>
		public bool cnt_Container25_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords2
				ssListRecords2List = queryResGEtCategory2_outParamList;
				ssListRecords2ListDoDataBind = false;
				ssListRecords2ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords2_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords2List.Length > 0) {
					ssListRecords2List.CurrentRec = ssListRecords2List[ssListRecords2List.CurrentRowNumber];
				}
				if (ssListRecords2List.Length > e.SelectedIndex) {
					ssListRecords2List.CurrentRec = ssListRecords2List[e.SelectedIndex];
					ssListRecords2List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords2_Store(object dataItem, int index) {
			RCTextRecord tmprec = (RCTextRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTText.ssValue == "" ?(object) null: tmprec.ssSTText.ssValue);
			if (index < wtListRecords2_storage.Count) {
				wtListRecords2_storage[index] = tmpFields;
			} else {
				wtListRecords2_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecords2_Restore() {

			#region fetch ssListRecords2List.

			// Read the needed fields of ssListRecords2List from storewtListRecords2_list
			ssListRecords2List = new RLTextRecordList();
			ArrayList storewtListRecords2_list;
			storewtListRecords2_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecords2_list", null);
			if (storewtListRecords2_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecords2_list in storewtListRecords2_list) {
					if (tmpFieldswtListRecords2_list != null) {
						// Aux current record variable
						RCTextRecord tmpAuxCurrentRecordwtListRecords2_list = new RCTextRecord(null);
						tmpAuxCurrentRecordwtListRecords2_list.ssSTText.ssValue = (string) (tmpFieldswtListRecords2_list[0] == null ? "": tmpFieldswtListRecords2_list[0]);

						ssListRecords2List.Append(tmpAuxCurrentRecordwtListRecords2_list);
					}
				}
			}
			ssListRecords2List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecords2List runtime properties state.


			if (storewtListRecords2_list.Count > 0) {
				ssListRecords2List.RestoreRecordListState(storewtListRecords2_list.Count - 1, false);
			} else {
				ssListRecords2List.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecords2_storage = storewtListRecords2_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords2_Clear(object sender, EventArgs e) {
			wtListRecords2_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords2_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords2List.Length != -1) {
				wtListRecords2_storage.Clear();
				for (int i=startIndex; i<ssListRecords2List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords2_Store(ssListRecords2List.Data[i], wtListRecords2_storage.Count);
				}
			}
		}
		public void recListListRecords2_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords2 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLTextRecordList getWtListRecords2List() {
			if (ssListRecords2ListDoDataBind) {
				recListListRecords2_onDataBinding(this, null);
			}

			return ssListRecords2List;
		}
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container8_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcCategorySelected2==getWtListRecords2List().CurrentRec.ssSTText.ssValue)) ?("background:white ;color:#1F3D60;"):("background: #366CAB;color:white;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container8_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container8
		/// </summary>
		public void cnt_Container8_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick2(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = LDf5jz5sQE+sl971hoJHbg) Expression:
		///  ListRecords2.List.Current.Text.Value
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression21() {
			return getWtListRecords2List().CurrentRec.ssSTText.ssValue;
		}
		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container32_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container32_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords3
				ssListRecords3List = queryResGEtCategory3_outParamList;
				ssListRecords3ListDoDataBind = false;
				ssListRecords3ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords3_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords3List.Length > 0) {
					ssListRecords3List.CurrentRec = ssListRecords3List[ssListRecords3List.CurrentRowNumber];
				}
				if (ssListRecords3List.Length > e.SelectedIndex) {
					ssListRecords3List.CurrentRec = ssListRecords3List[e.SelectedIndex];
					ssListRecords3List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords3_Store(object dataItem, int index) {
			RCTextRecord tmprec = (RCTextRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTText.ssValue == "" ?(object) null: tmprec.ssSTText.ssValue);
			if (index < wtListRecords3_storage.Count) {
				wtListRecords3_storage[index] = tmpFields;
			} else {
				wtListRecords3_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecords3_Restore() {

			#region fetch ssListRecords3List.

			// Read the needed fields of ssListRecords3List from storewtListRecords3_list
			ssListRecords3List = new RLTextRecordList();
			ArrayList storewtListRecords3_list;
			storewtListRecords3_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecords3_list", null);
			if (storewtListRecords3_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecords3_list in storewtListRecords3_list) {
					if (tmpFieldswtListRecords3_list != null) {
						// Aux current record variable
						RCTextRecord tmpAuxCurrentRecordwtListRecords3_list = new RCTextRecord(null);
						tmpAuxCurrentRecordwtListRecords3_list.ssSTText.ssValue = (string) (tmpFieldswtListRecords3_list[0] == null ? "": tmpFieldswtListRecords3_list[0]);

						ssListRecords3List.Append(tmpAuxCurrentRecordwtListRecords3_list);
					}
				}
			}
			ssListRecords3List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecords3List runtime properties state.


			if (storewtListRecords3_list.Count > 0) {
				ssListRecords3List.RestoreRecordListState(storewtListRecords3_list.Count - 1, false);
			} else {
				ssListRecords3List.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecords3_storage = storewtListRecords3_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords3_Clear(object sender, EventArgs e) {
			wtListRecords3_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords3_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords3List.Length != -1) {
				wtListRecords3_storage.Clear();
				for (int i=startIndex; i<ssListRecords3List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords3_Store(ssListRecords3List.Data[i], wtListRecords3_storage.Count);
				}
			}
		}
		public void recListListRecords3_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords3 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLTextRecordList getWtListRecords3List() {
			if (ssListRecords3ListDoDataBind) {
				recListListRecords3_onDataBinding(this, null);
			}

			return ssListRecords3List;
		}
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container9_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcCategorySelected3==getWtListRecords3List().CurrentRec.ssSTText.ssValue)) ?("background:white ;color:#1F3D60;"):("background: #00A8C4;color:white;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container9_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container9
		/// </summary>
		public void cnt_Container9_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick3(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = o35Ly_Qj20Wp_TUhXtFnRQ) Expression:
		///  ListRecords3.List.Current.Text.Value
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression27() {
			return getWtListRecords3List().CurrentRec.ssSTText.ssValue;
		}
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListRecords4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListRecords4
				ssListRecords4List = queryResGEtCategory4_outParamList;
				ssListRecords4ListDoDataBind = false;
				ssListRecords4ListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListRecords4_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecords4List.Length > 0) {
					ssListRecords4List.CurrentRec = ssListRecords4List[ssListRecords4List.CurrentRowNumber];
				}
				if (ssListRecords4List.Length > e.SelectedIndex) {
					ssListRecords4List.CurrentRec = ssListRecords4List[e.SelectedIndex];
					ssListRecords4List.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecords4_Store(object dataItem, int index) {
			RCTextRecord tmprec = (RCTextRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTText.ssValue == "" ?(object) null: tmprec.ssSTText.ssValue);
			if (index < wtListRecords4_storage.Count) {
				wtListRecords4_storage[index] = tmpFields;
			} else {
				wtListRecords4_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecords4_Restore() {

			#region fetch ssListRecords4List.

			// Read the needed fields of ssListRecords4List from storewtListRecords4_list
			ssListRecords4List = new RLTextRecordList();
			ArrayList storewtListRecords4_list;
			storewtListRecords4_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecords4_list", null);
			if (storewtListRecords4_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecords4_list in storewtListRecords4_list) {
					if (tmpFieldswtListRecords4_list != null) {
						// Aux current record variable
						RCTextRecord tmpAuxCurrentRecordwtListRecords4_list = new RCTextRecord(null);
						tmpAuxCurrentRecordwtListRecords4_list.ssSTText.ssValue = (string) (tmpFieldswtListRecords4_list[0] == null ? "": tmpFieldswtListRecords4_list[0]);

						ssListRecords4List.Append(tmpAuxCurrentRecordwtListRecords4_list);
					}
				}
			}
			ssListRecords4List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecords4List runtime properties state.


			if (storewtListRecords4_list.Count > 0) {
				ssListRecords4List.RestoreRecordListState(storewtListRecords4_list.Count - 1, false);
			} else {
				ssListRecords4List.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecords4_storage = storewtListRecords4_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecords4_Clear(object sender, EventArgs e) {
			wtListRecords4_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecords4_Rebuild(int startIndex, int lineCount) {
			if (ssListRecords4List.Length != -1) {
				wtListRecords4_storage.Clear();
				for (int i=startIndex; i<ssListRecords4List.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecords4_Store(ssListRecords4List.Data[i], wtListRecords4_storage.Count);
				}
			}
		}
		public void recListListRecords4_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecords4 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLTextRecordList getWtListRecords4List() {
			if (ssListRecords4ListDoDataBind) {
				recListListRecords4_onDataBinding(this, null);
			}

			return ssListRecords4List;
		}
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((WebControl) sender).CssClass = (((varLcCategorySelected4==getWtListRecords4List().CurrentRec.ssSTText.ssValue)) ?("AutoComplete_CardSelected"):("AutoComplete_Card")) + " OSInline";
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container11
		/// </summary>
		public void cnt_Container11_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnClick4(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 34FnVmSEyUeNnOiUhqVtIA) Expression:
		///  ListRecords4.List.Current.Text.Value
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression13() {
			return getWtListRecords4List().CurrentRec.ssSTText.ssValue;
		}
		public void cntAutoCompleteDrop_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntAutoCompleteDrop_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntAutoCompleteDrop_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntAutoCompleteDrop_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteDrop)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteDrop</returns>
		public bool cntAutoCompleteDrop_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void selAutocompleteDrop2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				RLBooleanAutoComplete_BankRecordList Rt_wtAutocompleteDrop2_reclist = queryResGetAutoCompleteBanksByTypeId_outParamList;
				Rt_wtAutocompleteDrop2_reclist.StartIteration();
				try {
					while (!Rt_wtAutocompleteDrop2_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtAutocompleteDrop2_reclist.CurrentRec.ssENAutoComplete_Bank.ssDescription, Convert.ToString(Rt_wtAutocompleteDrop2_reclist.CurrentRec.ssENAutoComplete_Bank.ssId)));
						if (varLcSelectedText == Convert.ToInt32(Convert.ToString(Rt_wtAutocompleteDrop2_reclist.CurrentRec.ssENAutoComplete_Bank.ssId))) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wtAutocompleteDrop2_reclist.Advance();
					}
				} finally {
					Rt_wtAutocompleteDrop2_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void selAutocompleteDrop2_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtAutocompleteDrop2.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcSelectedText = 0;
			}
			else {
				Rt_wtAutocompleteDrop2.SpecialListVal = "";
				try {
					varLcSelectedText = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAutocompleteDrop2)
		/// </summary>
		/// <returns>The Visible State of wtAutocompleteDrop2</returns>
		public bool selAutocompleteDrop2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutocompleteDrop2)
		/// </summary>
		/// <returns>The Enabled State of wtAutocompleteDrop2</returns>
		public bool selAutocompleteDrop2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (selAutocompleteDrop2)
		/// </summary>
		/// <returns>The Mandatory Value of selAutocompleteDrop2</returns>
		public bool selAutocompleteDrop2_isMandatory() {
			return false;
		}

		public void Chosen_webBlck_WebBlockInstance16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_Chosen.Flows.FlowChosenCommon.WBlkchosenWebBlock widget = (proxy_CaseConferencing_Chosen.Flows.FlowChosenCommon.WBlkchosenWebBlock) sender;
				widget.inParamElementId = this.FindControl("wtAutocompleteDrop2").ClientID;
				widget.inParamClass = "chzn-select";
				widget.inParamNoResultsText = "No results matched";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "min-height:35px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!inParamIsPopup);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkEditLink_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEditLink_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandSelect(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEditLink)
		/// </summary>
		/// <returns>title of the Link (wtEditLink)</returns>
		public string
		lnkEditLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditLink)
		/// </summary>
		/// <returns>The Visible State of wtEditLink</returns>
		public bool lnkEditLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditLink)
		/// </summary>
		/// <returns>The Enabled State of wtEditLink</returns>
		public bool lnkEditLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container30_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container30_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("zfnZK3Pdj0iMy0K+h_wZGQ")).ssClass;
				widget.inParamSize = ENIconSizeEntity.GetRecordByKey(ObjectKey.Parse("6oPVMfH6+E+NJCPFdfegMQ")).ssClass;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "min-height:35px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return inParamIsPopup;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkEditLink2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtEditLink2_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandSelect(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtEditLink2)
		/// </summary>
		/// <returns>title of the Link (wtEditLink2)</returns>
		public string
		lnkEditLink2_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditLink2)
		/// </summary>
		/// <returns>The Visible State of wtEditLink2</returns>
		public bool lnkEditLink2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditLink2)
		/// </summary>
		/// <returns>The Enabled State of wtEditLink2</returns>
		public bool lnkEditLink2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container6_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container6_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public static class FuncCommandSelect {

			/// <summary>
			/// Query Function "GetAutoCompleteBanks2" of Action "Select"
			/// </summary>
			public static RLAutoComplete_BankRecordList datasetGetAutoCompleteBanks2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, ENAutoComplete_Bank.[DESCRIPTION] o7");
				fromBuilder.Append(" FROM {AutoComplete_Bank} ENAutoComplete_Bank");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENAutoComplete_Bank.[ID] = @qpinP) AND (ENAutoComplete_Bank.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENAutoComplete_Bank.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENAutoComplete_Bank.[CATEGORY_1] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLAutoComplete_BankRecordList outParamList = new RLAutoComplete_BankRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLAutoComplete_BankRecordList _tmp = new RLAutoComplete_BankRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Select.GetAutoCompleteBanks2.List");
						outParamList = (RLAutoComplete_BankRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Select.GetAutoCompleteBanks2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLAutoComplete_BankRecordList _tmp = new RLAutoComplete_BankRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Select.GetAutoCompleteBanks2.List");
							outParamList = (RLAutoComplete_BankRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Select.GetAutoCompleteBanks2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnClick {
		}
		public static class FuncCommandOnClick2 {
		}
		public static class FuncCommandOnClick4 {
		}
		public static class FuncCommandOnClick3 {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GEtCategory4" of Action "Preparation"
			/// </summary>
			public static RLTextRecordList QueryGEtCategory4(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstCategory1, string qpstCategory2, string qpstCategory3, string qpstCategory4, int qpinAutoCompleteTypeId) {
				// Query Iterations: Multiple {ListRecords4}
				// Refresh Query T1qqqAPY+kSj63uRo3jWhw Iterations: Multiple {ListRecords4}
				// Refresh Query GhkrpcEQ1EOkSWM0cphNlQ Iterations: Multiple {ListRecords4}
				// Refresh Query D1Jpws7oVk+C_94klsPHwA Iterations: Multiple {ListRecords4}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstCategory1", DbType.String, qpstCategory1);
				sqlCmd.CreateParameter("@qpstCategory2", DbType.String, qpstCategory2);
				sqlCmd.CreateParameter("@qpstCategory3", DbType.String, qpstCategory3);
				sqlCmd.CreateParameter("@qpstCategory4", DbType.String, qpstCategory4);
				sqlCmd.CreateParameter("@qpinAutoCompleteTypeId", DbType.Int32, qpinAutoCompleteTypeId);
				string advSql = "SELECT distinct ( {AutoComplete_Bank}.[CATEGORY_4]) From  {AutoComplete_Bank}  " +
				 "WHERE   " +
				 "    (@qpstCategory1  = '' OR  {AutoComplete_Bank}.[CATEGORY_1] = @qpstCategory1)  " +
				 "    AND (@qpstCategory2  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory2)  " +
				 "    AND (@qpstCategory3  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory3)  " +
				 "    AND (@qpstCategory4  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory4)  " +
				 "    AND  {AutoComplete_Bank}.[TYPEID] = @qpinAutoCompleteTypeId   " +
				 "    AND  {AutoComplete_Bank}.[CATEGORY_4] <> ''";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLTextRecordList outParamList = new RLTextRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLTextRecordList _tmp = new RLTextRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory4.List");
							outParamList = (RLTextRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory4.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory4.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtCategory4 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_4]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_4] <> ''): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtCategory4 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_4]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_4] <> ''): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtCategory4 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_4]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_4] <> ''): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GEtCategory1" of Action "Preparation"
			/// </summary>
			public static RLTextRecordList QueryGEtCategory1(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinAutoCompleteTypeId) {
				// Query Iterations: Multiple {ListRecords1}
				// Refresh Query XgqCvGEGlk+Nk5QalFtgfg Iterations: Multiple {ListRecords1}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinAutoCompleteTypeId", DbType.Int32, qpinAutoCompleteTypeId);
				string advSql = "SELECT distinct ( {AutoComplete_Bank}.[CATEGORY_1]) From  {AutoComplete_Bank}  " +
				 "WHERE  {AutoComplete_Bank}.[TYPEID] = @qpinAutoCompleteTypeId   " +
				 "AND  {AutoComplete_Bank}.[CATEGORY_1] <> ''";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLTextRecordList outParamList = new RLTextRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLTextRecordList _tmp = new RLTextRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory1.List");
							outParamList = (RLTextRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory1.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory1.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtCategory1 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_1]) From {AutoComplete_Bank}  WHERE {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId   AND {AutoComplete_Bank}.[Category_1] <> ''): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtCategory1 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_1]) From {AutoComplete_Bank}  WHERE {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId   AND {AutoComplete_Bank}.[Category_1] <> ''): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtCategory1 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_1]) From {AutoComplete_Bank}  WHERE {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId   AND {AutoComplete_Bank}.[Category_1] <> ''): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GEtCategory2" of Action "Preparation"
			/// </summary>
			public static RLTextRecordList QueryGEtCategory2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstCategory1, string qpstCategory2, string qpstCategory3, string qpstCategory4, int qpinAutoCompleteTypeId) {
				// Query Iterations: Multiple {ListRecords2}
				// Refresh Query 2NAv16lOUE+ny0rqn31BFg Iterations: Multiple {ListRecords2}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstCategory1", DbType.String, qpstCategory1);
				sqlCmd.CreateParameter("@qpstCategory2", DbType.String, qpstCategory2);
				sqlCmd.CreateParameter("@qpstCategory3", DbType.String, qpstCategory3);
				sqlCmd.CreateParameter("@qpstCategory4", DbType.String, qpstCategory4);
				sqlCmd.CreateParameter("@qpinAutoCompleteTypeId", DbType.Int32, qpinAutoCompleteTypeId);
				string advSql = "SELECT distinct ( {AutoComplete_Bank}.[CATEGORY_2]) From  {AutoComplete_Bank}  " +
				 "WHERE   " +
				 "    (@qpstCategory1  = '' OR  {AutoComplete_Bank}.[CATEGORY_1] = @qpstCategory1)  " +
				 "    AND (@qpstCategory2  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory2)  " +
				 "    AND (@qpstCategory3  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory3)  " +
				 "    AND (@qpstCategory4  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory4)  " +
				 "    AND  {AutoComplete_Bank}.[TYPEID] = @qpinAutoCompleteTypeId   " +
				 "    AND  {AutoComplete_Bank}.[CATEGORY_2] <> ''";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLTextRecordList outParamList = new RLTextRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLTextRecordList _tmp = new RLTextRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory2.List");
							outParamList = (RLTextRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtCategory2 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_2]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_2] <> ''): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtCategory2 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_2]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_2] <> ''): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtCategory2 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_2]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_2] <> ''): " + aqExcep.Message);
				}
			}

			private static void datasetGetAutoCompleteBanksByTypeIdReadDB(ref RCBooleanAutoComplete_BankRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENAutoComplete_Bank.Read(r, ref index);
				rec.ssSTBoolean.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetAutoCompleteBanksByTypeId" of Action "Preparation"
			/// </summary>
			public static RLBooleanAutoComplete_BankRecordList datasetGetAutoCompleteBanksByTypeId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, string qpstP1, string qpstP2, string qpstP3, string qpstP4, bool qpboP5, bool qpboP6, bool qpboP7, bool qpboP8) {
				// Query Iterations: Single {-unbound-}
				// Refresh Query UjhRhExdtUeUwDM5WYZMaw Iterations: Single {-unbound-}
				// Refresh Query zi9sUnvJ506hX3dtukAZSw Iterations: Single {-unbound-}
				// Refresh Query UtdETjonzU+59kP_ikVXlw Iterations: Single {-unbound-}
				// Refresh Query zs5ZHaHaL0GhsSPEu18QXg Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENAutoComplete_Bank.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, ENAutoComplete_Bank.[DESCRIPTION] o7, NULL o8");
				fromBuilder.Append(" FROM {AutoComplete_Bank} ENAutoComplete_Bank");
				whereBuilder.Append(" WHERE ");
				if (!qpboP5) {
					whereBuilder.Append("(ENAutoComplete_Bank.[CATEGORY_1] = @qpstP1) AND ");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				}
				if (!qpboP6) {
					whereBuilder.Append("(ENAutoComplete_Bank.[CATEGORY_2] = @qpstP2) AND ");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP2", DbType.String, qpstP2);
				}
				if (!qpboP7) {
					whereBuilder.Append("(ENAutoComplete_Bank.[CATEGORY_3] = @qpstP3) AND ");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP3", DbType.String, qpstP3);
				}
				if (!qpboP8) {
					whereBuilder.Append("(ENAutoComplete_Bank.[CATEGORY_4] = @qpstP4) AND ");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP4", DbType.String, qpstP4);
				}
				if (qpinP != 0) {
					whereBuilder.Append("((ENAutoComplete_Bank.[TYPEID] = @qpinP) AND (ENAutoComplete_Bank.[TYPEID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENAutoComplete_Bank.[TYPEID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENAutoComplete_Bank.[TYPEID] = @qpinP) AND (ENAutoComplete_Bank.[TYPEID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENAutoComplete_Bank.[TYPEID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENAutoComplete_Bank.[CATEGORY_1] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLBooleanAutoComplete_BankRecordList outParamList = new RLBooleanAutoComplete_BankRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetAutoCompleteBanksByTypeIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, true, true, true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLBooleanAutoComplete_BankRecordList _tmp = new RLBooleanAutoComplete_BankRecordList();
					_tmp.AlternateReadDBMethod = datasetGetAutoCompleteBanksByTypeIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GetAutoCompleteBanksByTypeId.List");
						outParamList = (RLBooleanAutoComplete_BankRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GetAutoCompleteBanksByTypeId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLBooleanAutoComplete_BankRecordList _tmp = new RLBooleanAutoComplete_BankRecordList();
						_tmp.AlternateReadDBMethod = datasetGetAutoCompleteBanksByTypeIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GetAutoCompleteBanksByTypeId.List");
							outParamList = (RLBooleanAutoComplete_BankRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GetAutoCompleteBanksByTypeId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GEtCategory3" of Action "Preparation"
			/// </summary>
			public static RLTextRecordList QueryGEtCategory3(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstCategory1, string qpstCategory2, string qpstCategory3, string qpstCategory4, int qpinAutoCompleteTypeId) {
				// Query Iterations: Multiple {ListRecords3}
				// Refresh Query 11xLMsdAp0SFayQA9T5FAg Iterations: Multiple {ListRecords3}
				// Refresh Query iOITj1fv0EqzOfg_E4ec_Q Iterations: Multiple {ListRecords3}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstCategory1", DbType.String, qpstCategory1);
				sqlCmd.CreateParameter("@qpstCategory2", DbType.String, qpstCategory2);
				sqlCmd.CreateParameter("@qpstCategory3", DbType.String, qpstCategory3);
				sqlCmd.CreateParameter("@qpstCategory4", DbType.String, qpstCategory4);
				sqlCmd.CreateParameter("@qpinAutoCompleteTypeId", DbType.Int32, qpinAutoCompleteTypeId);
				string advSql = "SELECT distinct ( {AutoComplete_Bank}.[CATEGORY_3]) From  {AutoComplete_Bank}  " +
				 "WHERE   " +
				 "    (@qpstCategory1  = '' OR  {AutoComplete_Bank}.[CATEGORY_1] = @qpstCategory1)  " +
				 "    AND (@qpstCategory2  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory2)  " +
				 "    AND (@qpstCategory3  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory3)  " +
				 "    AND (@qpstCategory4  = '' OR  {AutoComplete_Bank}.[CATEGORY_2] = @qpstCategory4)  " +
				 "    AND  {AutoComplete_Bank}.[TYPEID] = @qpinAutoCompleteTypeId   " +
				 "    AND  {AutoComplete_Bank}.[CATEGORY_3] <> ''";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLTextRecordList outParamList = new RLTextRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLTextRecordList _tmp = new RLTextRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory3.List");
							outParamList = (RLTextRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory3.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AutoComplete_Bank.AutoComplete_Block.Preparation.GEtCategory3.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtCategory3 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_3]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_3] <> ''): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtCategory3 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_3]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_3] <> ''): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtCategory3 in Preparation in AutoComplete_Block in AutoComplete_Bank in CaseConferencing (SELECT distinct ({AutoComplete_Bank}.[Category_3]) From {AutoComplete_Bank}  WHERE       (@Category1  = '' OR {AutoComplete_Bank}.[Category_1] = @Category1)      AND (@Category2  = '' OR {AutoComplete_Bank}.[Category_2] = @Category2)      AND (@Category3  = '' OR {AutoComplete_Bank}.[Category_2] = @Category3)      AND (@Category4  = '' OR {AutoComplete_Bank}.[Category_2] = @Category4)      AND {AutoComplete_Bank}.[TypeId] = @AutoCompleteTypeId       AND {AutoComplete_Bank}.[Category_3] <> ''): " + aqExcep.Message);
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KAdvKSEx3s0aJUy0tyTUzfg";
			}
		}
	}

}
