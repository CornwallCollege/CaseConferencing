/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowSafeguarding {
	public abstract class WBlkSafeguarding_Tab: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcSafeguardingIssueId</code> that represents the Service Studio local variable
		///  <code>SafeguardingIssueId</code> <p>Description: </p>
		/// </summary>
		int varLcSafeguardingIssueId = 0;

		/// <summary>
		/// Variable <code>varLcIsNew</code> that represents the Service Studio local variable
		///  <code>IsNew</code> <p>Description: </p>
		/// </summary>
		bool varLcIsNew = false;

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wtSafeguardingReportMenu;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		/// <summary>
		/// Variable (wtCreateLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtCreateLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		private RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList _ssListMenuList = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
		public RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList ssListMenuList {
			get {
				return _ssListMenuList; 
			}
			set {
				_ssListMenuList = value;
				wtListMenu.DataSource = value;
				ssListMenuListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListMenu;
		public ArrayList wtListMenu_storage = new ArrayList();
		protected bool ssListMenuList_notUsedYet = true;
		protected bool ssListMenuListDoDataBind;
		protected bool ssListMenuListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container35;
		/// <summary>
		/// Variable (wtDeleteSafeguardingIssue) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtDeleteSafeguardingIssue;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container34;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		/// <summary>
		/// Variable (wt_Link24) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		/// <summary>
		/// Variable (wtHiddenPrintButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtHiddenPrintButton;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList queryResGetSafeguardingIssuesByStudent_outParamList = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
		int queryResGetSafeguardingIssuesByStudent_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetSafeguardingIssuesByStudent
			int datasetGetSafeguardingIssuesByStudent_maxRecords = Math.Max(wtListMenu.StartIndex + wtListMenu.LineCount + 1, 0);
			queryResGetSafeguardingIssuesByStudent_outParamList = FuncssPreparation.datasetGetSafeguardingIssuesByStudent(heContext, datasetGetSafeguardingIssuesByStudent_maxRecords, IterationMultiplicity.Multiple, out queryResGetSafeguardingIssuesByStudent_outParamCount, inParamStudentReference
			);
			varLcSafeguardingIssueId = queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssId; // SafeguardingIssueId = GetSafeguardingIssuesByStudent.List.Current.SafeguardingIssue.Id
		}
		static WBlkSafeguarding_Tab() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wtCreateLink != null) {
				this.wtCreateLink.Click += new System.EventHandler(this.wtCreateLink_Click);
			}
			wtListMenu.StartIndexExpression = () => 0;
			wtListMenu.LineCountExpression = () => 50;
			if (this.wt_Link24 != null) {
				this.wt_Link24.Click += new System.EventHandler(this.wt_Link24_Click);
			}
			if (this.wtHiddenPrintButton != null) {
				this.wtHiddenPrintButton.Click += new System.EventHandler(this.wtHiddenPrintButton_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssListMenuListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetSafeguardingIssuesByStudent_outParamList.

			int tmpcurrentrownumberqueryResGetSafeguardingIssuesByStudent_outParamList = queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSafeguardingIssuesByStudent_outParamList = queryResGetSafeguardingIssuesByStudent_outParamList.Eof;
			ArrayList storequeryResGetSafeguardingIssuesByStudent_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSafeguardingIssuesByStudent_outParamList to the storequeryResGetSafeguardingIssuesByStudent_outParamList
			if (!queryResGetSafeguardingIssuesByStudent_outParamList.Empty) {
				try {
					queryResGetSafeguardingIssuesByStudent_outParamList.StartIteration();

					while (!queryResGetSafeguardingIssuesByStudent_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList = new ArrayList();
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENRAGStatus.ssHexColor == "" ?(object) null: queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENRAGStatus.ssHexColor);
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENRAGStatus.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, true
						}
						))));
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENRAGStatus.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, false
						}
						))));
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssId == 0?(object) null: queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssId);
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssDateOfRefferal == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssDateOfRefferal);
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssUpdatedOn);
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssUpdatedBy == 0?(object) null: queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssUpdatedBy);
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ChangedAttributes, new BitArray(new bool[] {
							true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true
						}
						))));
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.OptimizedAttributes, new BitArray(new bool[] {
							false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false
						}
						))));
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssueType.ssLabel == "" ?(object) null: queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssueType.ssLabel);
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssueType.ChangedAttributes, new BitArray(new bool[] {
							false, true, false, false
						}
						))));
						tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssueType.OptimizedAttributes, new BitArray(new bool[] {
							true, false, true, true
						}
						))));
						storequeryResGetSafeguardingIssuesByStudent_outParamList.Add(tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList);
						queryResGetSafeguardingIssuesByStudent_outParamList.Advance();
					}
				} finally {
					queryResGetSafeguardingIssuesByStudent_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSafeguardingIssuesByStudent_outParamList", storequeryResGetSafeguardingIssuesByStudent_outParamList, null);

			#endregion


			#region store queryResGetSafeguardingIssuesByStudent_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSafeguardingIssuesByStudent_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSafeguardingIssuesByStudent_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSafeguardingIssuesByStudent_outParamList_eof", tmpeofqueryResGetSafeguardingIssuesByStudent_outParamList, false);
			queryResGetSafeguardingIssuesByStudent_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSafeguardingIssuesByStudent_outParamList, tmpeofqueryResGetSafeguardingIssuesByStudent_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcSafeguardingIssueId", varLcSafeguardingIssueId, 0);
			ViewStateAttributes.SetInViewState("varLcIsNew", varLcIsNew, false);
			if (IsAjaxRequest) {
				recListListMenu_Rebuild((ssListMenuListDataBound ? wtListMenu.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListMenu.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListMenu_list", wtListMenu_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetSafeguardingIssuesByStudent_outParamList.

				// Read the needed fields of queryResGetSafeguardingIssuesByStudent_outParamList from storequeryResGetSafeguardingIssuesByStudent_outParamList
				queryResGetSafeguardingIssuesByStudent_outParamList = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
				ArrayList storequeryResGetSafeguardingIssuesByStudent_outParamList;
				storequeryResGetSafeguardingIssuesByStudent_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSafeguardingIssuesByStudent_outParamList", null);
				if (storequeryResGetSafeguardingIssuesByStudent_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList in storequeryResGetSafeguardingIssuesByStudent_outParamList) {
						if (tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList != null) {
							// Aux current record variable
							RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList = new RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord(null);
							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENRAGStatus.ssHexColor = (string) (tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[0] == null ? "": tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENRAGStatus.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENRAGStatus.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssue.ssId = (int) (tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[3] == null ? 0: tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssue.ssDateOfRefferal = (DateTime) (tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[4] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssue.ssUpdatedOn = (DateTime) (tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssue.ssUpdatedBy = (int) (tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[6] == null ? 0: tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssue.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssue.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[8]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssueType.ssLabel = (string) (tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[9] == null ? "": tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[9]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssueType.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[10]);

							tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList.ssENSafeguardingIssueType.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetSafeguardingIssuesByStudent_outParamList[11]);

							queryResGetSafeguardingIssuesByStudent_outParamList.Append(tmpAuxCurrentRecordqueryResGetSafeguardingIssuesByStudent_outParamList);
						}
					}
				}
				queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSafeguardingIssuesByStudent_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSafeguardingIssuesByStudent_outParamList;
				tmpcurrentrownumberqueryResGetSafeguardingIssuesByStudent_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSafeguardingIssuesByStudent_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSafeguardingIssuesByStudent_outParamList;
				tmpeofqueryResGetSafeguardingIssuesByStudent_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSafeguardingIssuesByStudent_outParamList_eof", false);
				queryResGetSafeguardingIssuesByStudent_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSafeguardingIssuesByStudent_outParamList, tmpeofqueryResGetSafeguardingIssuesByStudent_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcSafeguardingIssueId = (int) ViewStateAttributes.GetFromViewState("varLcSafeguardingIssueId", 0);
				varLcIsNew = (bool) ViewStateAttributes.GetFromViewState("varLcIsNew", false);
				recListListMenu_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KkTnvZt_YJUO6ntlvJHbw4A";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowSafeguarding.WBlkSafeguardingIssue.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("kTnvZt_YJUO6ntlvJHbw4A"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandAddNew</code> that represents the Service Studio screen action
		///  <code>AddNew</code> <p> Description: </p>
		/// </summary>
		private bool CommandAddNew(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcSafeguardingIssueId = BuiltInFunction.NullIdentifier(); // SafeguardingIssueId = NullIdentifier
				varLcIsNew = true; // IsNew = True
				// Refresh Widget (wtListMenu)
				ssListMenuListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListMenu, "None", StoreViewState);
				// Refresh Widget (wtSafeguardingIssue_Item)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtSafeguardingIssue_Item"), "None", StoreViewState);
				varLcIsNew = false; // IsNew = False
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvPrintLink: VarsBag {
			public int inParamSafeguardingIssueID2;
			public lcvPrintLink(int inParamSafeguardingIssueID2) {
				this.inParamSafeguardingIssueID2 = inParamSafeguardingIssueID2;
			}
		}
		/// <summary>
		/// Action <code>CommandPrintLink</code> that represents the Service Studio screen action
		///  <code>PrintLink</code> <p> Description: </p>
		/// </summary>
		private bool CommandPrintLink(HeContext heContext, int inParamSafeguardingIssueID2) {
			CheckPermissions(heContext);
			lcvPrintLink localVars = new lcvPrintLink(inParamSafeguardingIssueID2);
			try {
				varLcSafeguardingIssueId = localVars.inParamSafeguardingIssueID2; // SafeguardingIssueId = SafeguardingIssueID2
				if ((varLcSafeguardingIssueId==BuiltInFunction.NullIdentifier())) {
					// Update Screen
					return true;

				} else {
					// Widget_Click
					Actions.ActionWidget_Click(heContext, wtHiddenPrintButton.ClientID);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandSelectReportId</code> that represents the Service Studio screen action
		///  <code>SelectReportId</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelectReportId(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcSafeguardingIssueId = getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssId; // SafeguardingIssueId = ListMenu.List.Current.SafeguardingIssue.Id
				// Refresh Widget (wtListMenu)
				ssListMenuListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListMenu, "None", StoreViewState);
				// Refresh Widget (wtSafeguardingIssue_Item)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtSafeguardingIssue_Item"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvActualDelete: VarsBag {
			public string inParamStudentId;
			public int inParamSafeguardingIssueId2;
			public RLSafeguardingDocumentsBinaryRecordList queryResGetSafeguardingDocumentsBinaryById_outParamList = new RLSafeguardingDocumentsBinaryRecordList();
			public int queryResGetSafeguardingDocumentsBinaryById_outParamCount = 0;

			public RLSafeguardingDocumentsRecordList queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList = new RLSafeguardingDocumentsRecordList();
			public int queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamCount = 0;

			public RLSafeguardingPersonsInvolvedRecordList queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamList = new RLSafeguardingPersonsInvolvedRecordList();
			public int queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamCount = 0;

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public RLSafeguardingAgenciesInvolvedRecordList queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamList = new RLSafeguardingAgenciesInvolvedRecordList();
			public int queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamCount = 0;

			public lcvActualDelete(string inParamStudentId, int inParamSafeguardingIssueId2) {
				this.inParamStudentId = inParamStudentId;
				this.inParamSafeguardingIssueId2 = inParamSafeguardingIssueId2;
			}
		}
		/// <summary>
		/// Action <code>CommandActualDelete</code> that represents the Service Studio screen action
		///  <code>ActualDelete</code> <p> Description: </p>
		/// </summary>
		private bool CommandActualDelete(HeContext heContext, string inParamStudentId, int inParamSafeguardingIssueId2) {
			CheckPermissions(heContext);
			lcvActualDelete localVars = new lcvActualDelete(inParamStudentId, inParamSafeguardingIssueId2);
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)) ==ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("tEyHYiOBgEe6CLwwmz5WoQ")).ssId)) {
					// Query datasetGetSafeguardingPersonsInvolvedsBySafeguardingIssue
					int datasetGetSafeguardingPersonsInvolvedsBySafeguardingIssue_maxRecords = 0;
					localVars.queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamList = FuncCommandActualDelete.datasetGetSafeguardingPersonsInvolvedsBySafeguardingIssue(heContext, datasetGetSafeguardingPersonsInvolvedsBySafeguardingIssue_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamCount, localVars.inParamSafeguardingIssueId2
					);
					// Foreach GetSafeguardingPersonsInvolvedsBySafeguardingIssue.List
					localVars.queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamList.StartIteration();
					try {
						while (!localVars.queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamList.Eof) {
							// DeleteSafeguardingPersonsInvolved
							ExtendedActions.DeleteSafeguardingPersonsInvolved(heContext, localVars.queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamList.CurrentRec.ssENSafeguardingPersonsInvolved.ssId);
							localVars.queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamList.Advance();
						}
					} finally {
						localVars.queryResGetSafeguardingPersonsInvolvedsBySafeguardingIssue_outParamList.EndIteration();
					}
					// Query datasetGetSafeguardingAgenciesInvolvedsBySafeguardingIssu
					int datasetGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_maxRecords = 0;
					localVars.queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamList = FuncCommandActualDelete.datasetGetSafeguardingAgenciesInvolvedsBySafeguardingIssu(heContext, datasetGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamCount, localVars.inParamSafeguardingIssueId2
					);
					// Foreach GetSafeguardingAgenciesInvolvedsBySafeguardingIssu.List
					localVars.queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamList.StartIteration();
					try {
						while (!localVars.queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamList.Eof) {
							// DeleteSafeguardingAgenciesInvolved
							ExtendedActions.DeleteSafeguardingAgenciesInvolved(heContext, localVars.queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamList.CurrentRec.ssENSafeguardingAgenciesInvolved.ssId);
							localVars.queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamList.Advance();
						}
					} finally {
						localVars.queryResGetSafeguardingAgenciesInvolvedsBySafeguardingIssu_outParamList.EndIteration();
					}
					// Query datasetGetSafeguardingDocumentsBySafeguardingIssue
					int datasetGetSafeguardingDocumentsBySafeguardingIssue_maxRecords = 0;
					localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList = FuncCommandActualDelete.datasetGetSafeguardingDocumentsBySafeguardingIssue(heContext, datasetGetSafeguardingDocumentsBySafeguardingIssue_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamCount, localVars.inParamSafeguardingIssueId2
					);
					// Foreach GetSafeguardingDocumentsBySafeguardingIssue.List
					localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList.StartIteration();
					try {
						while (!localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList.Eof) {
							// Query datasetGetSafeguardingDocumentsBinaryById
							int datasetGetSafeguardingDocumentsBinaryById_maxRecords = 0;
							localVars.queryResGetSafeguardingDocumentsBinaryById_outParamList = FuncCommandActualDelete.datasetGetSafeguardingDocumentsBinaryById(heContext, datasetGetSafeguardingDocumentsBinaryById_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetSafeguardingDocumentsBinaryById_outParamCount, localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList.CurrentRec.ssENSafeguardingDocuments.ssId
							);
							// Foreach GetSafeguardingDocumentsBinaryById.List
							localVars.queryResGetSafeguardingDocumentsBinaryById_outParamList.StartIteration();
							try {
								while (!localVars.queryResGetSafeguardingDocumentsBinaryById_outParamList.Eof) {
									// DeleteSafeguardingDocumentsBinary
									ExtendedActions.DeleteSafeguardingDocumentsBinary(heContext, localVars.queryResGetSafeguardingDocumentsBinaryById_outParamList.CurrentRec.ssENSafeguardingDocumentsBinary.ssId);
									localVars.queryResGetSafeguardingDocumentsBinaryById_outParamList.Advance();
								}
							} finally {
								localVars.queryResGetSafeguardingDocumentsBinaryById_outParamList.EndIteration();
							}
							// DeleteSafeguardingDocuments
							ExtendedActions.DeleteSafeguardingDocuments(heContext, localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList.CurrentRec.ssENSafeguardingDocuments.ssId);
							localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList.Advance();
						}
					} finally {
						localVars.queryResGetSafeguardingDocumentsBySafeguardingIssue_outParamList.EndIteration();
					}
					// DeleteSafeguardingIssue2
					ExtendedActions.DeleteSafeguardingIssue(heContext, localVars.inParamSafeguardingIssueId2);
					// Refresh Me
					ssListMenuListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);
					// Update Screen
					return true;

				} else {
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvPrintableversion: VarsBag {
			public int inParamSafeguardingIssueID2;
			public byte[] resHtmlToPdfConverter_outParamBinary = new byte[] {};
			public bool resHtmlToPdfConverter_outParamError = true;

			public lcvPrintableversion(int inParamSafeguardingIssueID2) {
				this.inParamSafeguardingIssueID2 = inParamSafeguardingIssueID2;
			}
		}
		/// <summary>
		/// Action <code>CommandPrintableversion</code> that represents the Service Studio screen action
		///  <code>Printableversion</code> <p> Description: </p>
		/// </summary>
		private bool CommandPrintableversion(HeContext heContext, int inParamSafeguardingIssueID2) {
			CheckPermissions(heContext);
			lcvPrintableversion localVars = new lcvPrintableversion(inParamSafeguardingIssueID2);
			try {
				// HtmlToPdfConverter
				Actions.ActionHtmlToPdfConverter(heContext, (Functions.ssGetPDFReportType(heContext, ENPDFReportTypeEntity.GetRecordByKey(ObjectKey.Parse("La_OAT+kPkqRd+2dVfpW4A")).ssId).ssENPDFReportType.ssURL+Convert.ToString(varLcSafeguardingIssueId)), "", out localVars.resHtmlToPdfConverter_outParamBinary, out localVars.resHtmlToPdfConverter_outParamError);
				// Download Download3
				Response.ClearContent();
				string md5Hash_Download3;
				md5Hash_Download3 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.resHtmlToPdfConverter_outParamBinary);
				Response.ContentType = "application/pdf";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download3 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download3);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload3 = RuntimePlatformUtils.EscapeFilenameForDownload("SafeguardingFile.pdf");
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload3 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload3);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload3+ "\"");
				byte[] downloadDownload3FileContent = localVars.resHtmlToPdfConverter_outParamBinary;

				if (downloadDownload3FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/pdf";
						file_info.Second = localVars.resHtmlToPdfConverter_outParamBinary;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload("SafeguardingFile.pdf"));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload3FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload3FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Safeguarding_Tab", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnNotify: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvOnNotify() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotify localVars = new lcvOnNotify();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				// Query datasetGetSafeguardingIssuesByStudent
				{
					int datasetGetSafeguardingIssuesByStudent_maxRecords = Math.Max(wtListMenu.StartIndex + wtListMenu.LineCount + 1, 0);
					queryResGetSafeguardingIssuesByStudent_outParamList = FuncssPreparation.datasetGetSafeguardingIssuesByStudent(heContext, datasetGetSafeguardingIssuesByStudent_maxRecords, IterationMultiplicity.Multiple, out queryResGetSafeguardingIssuesByStudent_outParamCount, inParamStudentReference
					);
				}
				if ((localVars.resNotifyWidgetGetMessage_outParamMessage== "Delete")) {
					if (queryResGetSafeguardingIssuesByStudent_outParamList.Empty) {
						varLcSafeguardingIssueId = BuiltInFunction.NullIdentifier(); // SafeguardingIssueId = NullIdentifier

					} else {
						varLcSafeguardingIssueId = queryResGetSafeguardingIssuesByStudent_outParamList.CurrentRec.ssENSafeguardingIssue.ssId; // SafeguardingIssueId = GetSafeguardingIssuesByStudent.List.Current.SafeguardingIssue.Id

					}
					// Refresh Widget (wtSafeguardingIssue_Item)
					((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtSafeguardingIssue_Item"), "None", StoreViewState);

				}
				// Refresh Widget (wtSafeguardingReportMenu)
				ssListMenuListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtSafeguardingReportMenu, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container8_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container8_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntSafeguardingReportMenu_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSafeguardingReportMenu_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSafeguardingReportMenu_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSafeguardingReportMenu_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSafeguardingReportMenu)
		/// </summary>
		/// <returns>The Visible State of wtSafeguardingReportMenu</returns>
		public bool cntSafeguardingReportMenu_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container30_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container30_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container10_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container32_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container32_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container11_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container11_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 6JwW34okoUOmOCOfHzoXsQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression28() {
			return ((getWtListMenuList().Empty) ?("No Safeguarding Issues"):((Convert.ToString(getWtListMenuList().Length) + " Safeguarding Issues")));
		}
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnkCreateLink_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnkCreateLink_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnkCreateLink_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtCreateLink_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandAddNew(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtCreateLink)
		/// </summary>
		/// <returns>title of the Link (wtCreateLink)</returns>
		public string
		lnkCreateLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCreateLink)
		/// </summary>
		/// <returns>The Visible State of wtCreateLink</returns>
		public bool lnkCreateLink_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtCreateLink)
		/// </summary>
		/// <returns>The Enabled State of wtCreateLink</returns>
		public bool lnkCreateLink_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container27_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top: -30px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container27_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (Functions.rssespaceuserpermissions_ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("58QulFjuCkeyZloWLgduIw")).ssId) ==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance37_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("AKN6u1xOiEiC455XrqaERw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container36_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListListMenu_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtListMenu
				ssListMenuList = queryResGetSafeguardingIssuesByStudent_outParamList;
				ssListMenuListDoDataBind = false;
				ssListMenuListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListListMenu_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListMenuList.Length > 0) {
					ssListMenuList.CurrentRec = ssListMenuList[ssListMenuList.CurrentRowNumber];
				}
				if (ssListMenuList.Length > e.SelectedIndex) {
					ssListMenuList.CurrentRec = ssListMenuList[e.SelectedIndex];
					ssListMenuList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListMenu_Store(object dataItem, int index) {
			RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord tmprec = (RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENSafeguardingIssue.ssId == 0?(object) null: tmprec.ssENSafeguardingIssue.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENSafeguardingIssue.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENSafeguardingIssue.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			if (index < wtListMenu_storage.Count) {
				wtListMenu_storage[index] = tmpFields;
			} else {
				wtListMenu_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListMenu_Restore() {

			#region fetch ssListMenuList.

			// Read the needed fields of ssListMenuList from storewtListMenu_list
			ssListMenuList = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
			ArrayList storewtListMenu_list;
			storewtListMenu_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListMenu_list", null);
			if (storewtListMenu_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListMenu_list in storewtListMenu_list) {
					if (tmpFieldswtListMenu_list != null) {
						// Aux current record variable
						RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord tmpAuxCurrentRecordwtListMenu_list = new RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord(null);
						tmpAuxCurrentRecordwtListMenu_list.ssENSafeguardingIssue.ssId = (int) (tmpFieldswtListMenu_list[0] == null ? 0: tmpFieldswtListMenu_list[0]);

						tmpAuxCurrentRecordwtListMenu_list.ssENSafeguardingIssue.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListMenu_list[1]);

						tmpAuxCurrentRecordwtListMenu_list.ssENSafeguardingIssue.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListMenu_list[2]);

						ssListMenuList.Append(tmpAuxCurrentRecordwtListMenu_list);
					}
				}
			}
			ssListMenuList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListMenuList runtime properties state.


			if (storewtListMenu_list.Count > 0) {
				ssListMenuList.RestoreRecordListState(storewtListMenu_list.Count - 1, false);
			} else {
				ssListMenuList.CurrentRowNumber = 0;
			}

			#endregion

			wtListMenu_storage = storewtListMenu_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListMenu_Clear(object sender, EventArgs e) {
			wtListMenu_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListMenu_Rebuild(int startIndex, int lineCount) {
			if (ssListMenuList.Length != -1) {
				wtListMenu_storage.Clear();
				for (int i=startIndex; i<ssListMenuList.Data.Count && i<startIndex+lineCount; i++) {
					recListListMenu_Store(ssListMenuList.Data[i], wtListMenu_storage.Count);
				}
			}
		}
		public void recListListMenu_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListMenu widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList getWtListMenuList() {
			if (ssListMenuListDoDataBind) {
				recListListMenu_onDataBinding(this, null);
			}

			return ssListMenuList;
		}
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container22_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssId==varLcSafeguardingIssueId)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssId==varLcSafeguardingIssueId)) ?("SafeguardingReportMenuItemSelectedCard"):("SafeguardingReportMenuItem"));
				if (!cnt_Container22_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container22
		/// </summary>
		public void cnt_Container22_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectReportId(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container31_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container31_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (("color:" +getWtListMenuList().CurrentRec.ssENRAGStatus.ssHexColor) + ";");
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance21_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("TdLOWtVwZUaoIuVq+LcKbQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = yHJoBdllzk2ZVr2iOjtzkw) Expression:
		///  ListMenu.List.Current.SafeguardingIssueType.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression2() {
			return getWtListMenuList().CurrentRec.ssENSafeguardingIssueType.ssLabel;
		}
		public void cnt_Container35_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container35_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container35_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container35_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container35)
		/// </summary>
		/// <returns>The Visible State of wt_Container35</returns>
		public bool cnt_Container35_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtDeleteSafeguardingIssue)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtDeleteSafeguardingIssue)</returns>
		public string lnkDeleteSafeguardingIssue_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("Title", System.Web.HttpUtility.UrlEncode("Delete Safeguarding Issue?", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("MessageText", System.Web.HttpUtility.UrlEncode("Are you sure you wish to delete this safeguarding issue?", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("ConfirmationMessageButtons", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ConfirmationMessage", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtDeleteSafeguardingIssue)
		/// </summary>
		/// <returns>title of the Link (wtDeleteSafeguardingIssue)</returns>
		public string
		lnkDeleteSafeguardingIssue_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDeleteSafeguardingIssue)
		/// </summary>
		/// <returns>The Visible State of wtDeleteSafeguardingIssue</returns>
		public bool lnkDeleteSafeguardingIssue_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssId==varLcSafeguardingIssueId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtDeleteSafeguardingIssue)
		/// </summary>
		/// <returns>The Enabled State of wtDeleteSafeguardingIssue</returns>
		public bool lnkDeleteSafeguardingIssue_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance6_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtListMenu, "wtDeleteSafeguardingIssue").ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance6
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance6_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandActualDelete(heContext
				, getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssStudentReference, getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container34_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container34_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container34_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container34)
		/// </summary>
		/// <returns>The Visible State of wt_Container34</returns>
		public bool cnt_Container34_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = AGJUJ2opoEOoX8yQdcdAlg) Expression: "Date Of Referral : " +
		///  Format_DateTime(ListMenu.List.Current.SafeguardingIssue.DateOfRefferal, "dd MMM yyyy")
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return ("Date Of Referral : " +Functions.rssextensiontext_ActionFormat_DateTime(heContext, getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssDateOfRefferal, "dd MMM yyyy"));
		}
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = CvPVhAoMxkCmXrcz53p9Lw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression13() {
			return (((getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssUpdatedBy!=BuiltInFunction.NullIdentifier())) ?(((("Last Updated by : " +Functions.ssGetUser(heContext, getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssUpdatedBy).ssENUser.ssName) + " on ") +Functions.rssextensiontext_ActionFormat_DateTime(heContext, getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssUpdatedOn, "dd MMM yyyy"))):(""));
		}
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link24_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
				if (CommandPrintLink(heContext, getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link24)
		/// </summary>
		/// <returns>title of the Link (wt_Link24)</returns>
		public string
		lnk_Link24_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link24)
		/// </summary>
		/// <returns>The Visible State of wt_Link24</returns>
		public bool lnk_Link24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (((getWtListMenuList().CurrentRec.ssENSafeguardingIssue.ssId==varLcSafeguardingIssueId)) ?(true):(false));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link24)
		/// </summary>
		/// <returns>The Enabled State of wt_Link24</returns>
		public bool lnk_Link24_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("FAYqYa1mFUizlhFReuRckQ")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container17_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container17_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlckSafeguardingIssue_Item_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssCaseConferencing.Flows.FlowSafeguarding.WBlkSafeguardingIssue widget = (ssCaseConferencing.Flows.FlowSafeguarding.WBlkSafeguardingIssue) sender;
				widget.inParamSafeguardingIssueId = varLcSafeguardingIssueId;
				widget.inParamStudentId2 = inParamStudentReference;
				widget.inParamIsNew = varLcIsNew;
				widget.inParamActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("avXIv1WG4UWcoRPTcOjaOw")).ssId;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget wtSafeguardingIssue_Item
		/// </summary>
		public void webBlckSafeguardingIssue_Item_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container29_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void btnHiddenPrintButton_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				btnHiddenPrintButton_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string btnHiddenPrintButton_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:none";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtHiddenPrintButton_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
				if (CommandPrintableversion(heContext, varLcSafeguardingIssueId)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the label of the button (wtHiddenPrintButton)
		/// </summary>
		/// <returns>Label of the Button (wtHiddenPrintButton)</returns>
		public string
		btnHiddenPrintButton_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wtHiddenPrintButton)
		/// </summary>
		/// <returns>The Visible State of wtHiddenPrintButton</returns>
		public bool btnHiddenPrintButton_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtHiddenPrintButton)
		/// </summary>
		/// <returns>The Enabled State of wtHiddenPrintButton</returns>
		public bool btnHiddenPrintButton_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandAddNew {
		}
		public static class FuncCommandPrintLink {
		}
		public static class FuncCommandSelectReportId {
		}
		public static class FuncCommandActualDelete {

			/// <summary>
			/// Query Function "GetSafeguardingDocumentsBinaryById" of Action "ActualDelete"
			/// </summary>
			public static RLSafeguardingDocumentsBinaryRecordList datasetGetSafeguardingDocumentsBinaryById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSafeguardingDocumentsBinary.[ID] o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {SafeguardingDocumentsBinary} ENSafeguardingDocumentsBinary");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENSafeguardingDocumentsBinary.[SAFEGUARDINGDOCUMENTS] = @qpinP) AND (ENSafeguardingDocumentsBinary.[SAFEGUARDINGDOCUMENTS] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENSafeguardingDocumentsBinary.[SAFEGUARDINGDOCUMENTS] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSafeguardingDocumentsBinaryRecordList outParamList = new RLSafeguardingDocumentsBinaryRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSafeguardingDocumentsBinaryRecordList _tmp = new RLSafeguardingDocumentsBinaryRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBinaryById.List");
						outParamList = (RLSafeguardingDocumentsBinaryRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBinaryById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSafeguardingDocumentsBinaryRecordList _tmp = new RLSafeguardingDocumentsBinaryRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBinaryById.List");
							outParamList = (RLSafeguardingDocumentsBinaryRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBinaryById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSafeguardingDocumentsBySafeguardingIssue" of Action "ActualDelete"
			/// </summary>
			public static RLSafeguardingDocumentsRecordList datasetGetSafeguardingDocumentsBySafeguardingIssue(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSafeguardingDocuments.[ID] o1, NULL o2, NULL o3, NULL o4");
				fromBuilder.Append(" FROM {SafeguardingDocuments} ENSafeguardingDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENSafeguardingDocuments.[SAFEGUARDINGISSUE] = @qpinP) AND (ENSafeguardingDocuments.[SAFEGUARDINGISSUE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENSafeguardingDocuments.[SAFEGUARDINGISSUE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSafeguardingDocumentsRecordList outParamList = new RLSafeguardingDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSafeguardingDocumentsRecordList _tmp = new RLSafeguardingDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBySafeguardingIssue.List");
						outParamList = (RLSafeguardingDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBySafeguardingIssue.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSafeguardingDocumentsRecordList _tmp = new RLSafeguardingDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBySafeguardingIssue.List");
							outParamList = (RLSafeguardingDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingDocumentsBySafeguardingIssue.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSafeguardingPersonsInvolvedsBySafeguardingIssue" of Action "ActualDelete"
			/// </summary>
			public static RLSafeguardingPersonsInvolvedRecordList datasetGetSafeguardingPersonsInvolvedsBySafeguardingIssue(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSafeguardingPersonsInvolved.[ID] o1, NULL o2, NULL o3, NULL o4");
				fromBuilder.Append(" FROM {SafeguardingPersonsInvolved} ENSafeguardingPersonsInvolved");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENSafeguardingPersonsInvolved.[SAFEGUARDINGISSUE] = @qpinP) AND (ENSafeguardingPersonsInvolved.[SAFEGUARDINGISSUE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENSafeguardingPersonsInvolved.[SAFEGUARDINGISSUE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSafeguardingPersonsInvolvedRecordList outParamList = new RLSafeguardingPersonsInvolvedRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSafeguardingPersonsInvolvedRecordList _tmp = new RLSafeguardingPersonsInvolvedRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingPersonsInvolvedsBySafeguardingIssue.List");
						outParamList = (RLSafeguardingPersonsInvolvedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingPersonsInvolvedsBySafeguardingIssue.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSafeguardingPersonsInvolvedRecordList _tmp = new RLSafeguardingPersonsInvolvedRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingPersonsInvolvedsBySafeguardingIssue.List");
							outParamList = (RLSafeguardingPersonsInvolvedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingPersonsInvolvedsBySafeguardingIssue.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSafeguardingAgenciesInvolvedsBySafeguardingIssu" of Action "ActualDelete"
			/// </summary>
			public static RLSafeguardingAgenciesInvolvedRecordList datasetGetSafeguardingAgenciesInvolvedsBySafeguardingIssu(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSafeguardingAgenciesInvolved.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6");
				fromBuilder.Append(" FROM {SafeguardingAgenciesInvolved} ENSafeguardingAgenciesInvolved");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENSafeguardingAgenciesInvolved.[SAFEGUARDINGISSUE] = @qpinP) AND (ENSafeguardingAgenciesInvolved.[SAFEGUARDINGISSUE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENSafeguardingAgenciesInvolved.[SAFEGUARDINGISSUE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSafeguardingAgenciesInvolvedRecordList outParamList = new RLSafeguardingAgenciesInvolvedRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSafeguardingAgenciesInvolvedRecordList _tmp = new RLSafeguardingAgenciesInvolvedRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingAgenciesInvolvedsBySafeguardingIssu.List");
						outParamList = (RLSafeguardingAgenciesInvolvedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingAgenciesInvolvedsBySafeguardingIssu.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSafeguardingAgenciesInvolvedRecordList _tmp = new RLSafeguardingAgenciesInvolvedRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingAgenciesInvolvedsBySafeguardingIssu.List");
							outParamList = (RLSafeguardingAgenciesInvolvedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.ActualDelete.GetSafeguardingAgenciesInvolvedsBySafeguardingIssu.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandPrintableversion {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncssPreparation {

			private static void datasetGetSafeguardingIssuesByStudentReadDB(ref RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRAGStatus.Read(r, ref index);
				rec.ssENSafeguardingIssue.Read(r, ref index);
				rec.ssENSafeguardingIssueType.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetSafeguardingIssuesByStudent" of Action "Preparation"
			/// </summary>
			public static RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList datasetGetSafeguardingIssuesByStudent(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Multiple {ListMenu}
				// Refresh Query Ko6H0EKNgE2NOEOvMpw4_w Iterations: Multiple {ListMenu}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, ENRAGStatus.[HEXCOLOR] o5, ENSafeguardingIssue.[ID] o6, NULL o7, NULL o8, ENSafeguardingIssue.[DATEOFREFFERAL] o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, ENSafeguardingIssue.[UPDATEDON] o22, ENSafeguardingIssue.[UPDATEDBY] o23, NULL o24, ENSafeguardingIssueType.[LABEL] o25, NULL o26, NULL o27");
				fromBuilder.Append(" FROM (({SafeguardingIssue} ENSafeguardingIssue Left JOIN {RAGStatus} ENRAGStatus ON (ENSafeguardingIssue.[RAGSTATUS] = ENRAGStatus.[ID]))  Left JOIN {SafeguardingIssueType} ENSafeguardingIssueType ON (ENSafeguardingIssue.[SAFEGUARDINGISSUETYPE] = ENSafeguardingIssueType.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENSafeguardingIssue.[STUDENTREFERENCE] = @qpstP) AND (ENSafeguardingIssue.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENSafeguardingIssue.[STUDENTREFERENCE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList outParamList = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetSafeguardingIssuesByStudentReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList _tmp = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
					_tmp.AlternateReadDBMethod = datasetGetSafeguardingIssuesByStudentReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.Preparation.GetSafeguardingIssuesByStudent.List");
						outParamList = (RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.Preparation.GetSafeguardingIssuesByStudent.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList _tmp = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
						_tmp.AlternateReadDBMethod = datasetGetSafeguardingIssuesByStudentReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.Safeguarding_Tab.Preparation.GetSafeguardingIssuesByStudent.List");
							outParamList = (RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.Safeguarding_Tab.Preparation.GetSafeguardingIssuesByStudent.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KkTnvZt_YJUO6ntlvJHbw4A";
			}
		}
	}

}
