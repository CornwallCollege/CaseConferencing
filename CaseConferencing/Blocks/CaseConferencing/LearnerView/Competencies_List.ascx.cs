/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearnerView {
	public abstract class WBlkCompetencies_List: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcStageId</code> that represents the Service Studio local variable
		///  <code>StageId</code> <p>Description: </p>
		/// </summary>
		string varLcStageId = "";

		/// <summary>
		/// Variable <code>varLcvarRadio_stg1</code> that represents the Service Studio local variable
		///  <code>varRadio_stg1</code> <p>Description: </p>
		/// </summary>
		string varLcvarRadio_stg1 = "";

		/// <summary>
		/// Variable <code>varLcisEditMode</code> that represents the Service Studio local variable
		///  <code>isEditMode</code> <p>Description: </p>
		/// </summary>
		bool varLcisEditMode = false;

		/// <summary>
		/// Variable <code>varLcChart_LabelsList</code> that represents the Service Studio local variable
		///  <code>Chart_LabelsList</code> <p>Description: </p>
		/// </summary>
		string varLcChart_LabelsList = "";

		/// <summary>
		/// Variable <code>varLcChart_LabelsValues</code> that represents the Service Studio local variable
		///  <code>Chart_LabelsValues</code> <p>Description: </p>
		/// </summary>
		string varLcChart_LabelsValues = "";

		protected OutSystems.HubEdition.WebWidgets.Container wtLogContent2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container67;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		/// <summary>
		/// Variable wtWrapperButtons
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkButtonGroup3_SILK wtWrapperButtons;
		protected OutSystems.HubEdition.WebWidgets.Container wtDivBottom;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container38;
		private RLLearnerDetail_ComponentStructRecordList _ssCompetencesListList = new RLLearnerDetail_ComponentStructRecordList();
		public RLLearnerDetail_ComponentStructRecordList ssCompetencesListList {
			get {
				return _ssCompetencesListList; 
			}
			set {
				_ssCompetencesListList = value;
				wtCompetencesList.DataSource = value;
				ssCompetencesListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtCompetencesList;
		public ArrayList wtCompetencesList_storage = new ArrayList();
		protected bool ssCompetencesListList_notUsedYet = true;
		protected bool ssCompetencesListListDoDataBind;
		protected bool ssCompetencesListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperList2;
		/// <summary>
		/// Variable "True" if the Widget wt_If61
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If61T;

		/// <summary>
		/// Variable "True" if the Widget wt_If61
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If61F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container63;
		/// <summary>
		/// Variable "True" if the Widget wt_If64
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If64T;

		/// <summary>
		/// Variable "True" if the Widget wt_If64
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If64F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wtSliderLegendAbove;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtInput4ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtInput4ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container34;
		/// <summary>
		/// Variable "True" if the Widget wtif_edit
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wtif_editT;

		/// <summary>
		/// Variable "True" if the Widget wtif_edit
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wtif_editF;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container65;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		/// <summary>
		/// Variable (wt_Link72) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link72;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wtSpiderWebChart;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container70;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		protected OutSystems.HubEdition.WebWidgets.Container wtLineChart;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container57;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		int resUserCheck_outParamPermissionType = 0;
		RLLearnerDetail_ComponentStructRecordList queryResGetCompetenciesByStage2_outParamList = new RLLearnerDetail_ComponentStructRecordList();
		int queryResGetCompetenciesByStage2_outParamCount = 0;
		RLStudentStudentMLWProcessMLWStagesRecordList queryResGetCurrStage_outParamList = new RLStudentStudentMLWProcessMLWStagesRecordList();
		int queryResGetCurrStage_outParamCount = 0;
		RLUserStudentLogRecordList queryResGetStudentLogsByStudentReference_outParamList = new RLUserStudentLogRecordList();
		int queryResGetStudentLogsByStudentReference_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Reset
			varLcChart_LabelsList = ""; // Chart_LabelsList = ""
			varLcChart_LabelsValues = ""; // Chart_LabelsValues = ""
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("oDZDk7vbjky0HYuBDlfjVg")).ssId, out resUserCheck_outParamPermissionType);
			// Query datasetGetCurrStage
			int datasetGetCurrStage_maxRecords = 0;
			queryResGetCurrStage_outParamList = FuncssPreparation.datasetGetCurrStage(heContext, datasetGetCurrStage_maxRecords, IterationMultiplicity.Never, out queryResGetCurrStage_outParamCount, inParamStudentReference
			);
			// Empty?
			if (queryResGetCurrStage_outParamList.Empty) {
				varLcStageId = ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("4UtQeZsXLE+loQtCc6xR5A")).ssId; // StageId = Stage_1

			} else {
				varLcStageId = queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssCurrentStageId; // StageId = GetCurrStage.List.Current.StudentMLWProcess.CurrentStageId
				varLcvarRadio_stg1 = varLcStageId; // varRadio_stg1 = StageId

			}
			// Query QueryGetCompetenciesByStage2
			int QueryGetCompetenciesByStage2_maxRecords = 0;
			queryResGetCompetenciesByStage2_outParamList = FuncssPreparation.QueryGetCompetenciesByStage2(heContext, QueryGetCompetenciesByStage2_maxRecords, IterationMultiplicity.Multiple, out queryResGetCompetenciesByStage2_outParamCount, inParamStudentReference
			, varLcStageId
			);
			// Foreach GetCompetenciesByStage2.List
			queryResGetCompetenciesByStage2_outParamList.StartIteration();
			try {
				while (! queryResGetCompetenciesByStage2_outParamList.Eof) {
					varLcChart_LabelsList = ((((varLcChart_LabelsList+(((varLcChart_LabelsList== "")) ?(""):(","))) + "\'") +queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName) + "\'"); // Chart_LabelsList = Chart_LabelsList + internalIf + "'" +
					// GetCompetenciesByStage2.List.Current.LearnerDetail_ComponentStruct.ComponentName + "'"
					varLcChart_LabelsValues = ((varLcChart_LabelsValues+(((varLcChart_LabelsValues== "")) ?(""):(","))) +Convert.ToString(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)); // Chart_LabelsValues = Chart_LabelsValues + internalIf +
					// GetCompetenciesByStage2.List.Current.LearnerDetail_ComponentStruct.CompetenciesLevel
					queryResGetCompetenciesByStage2_outParamList.Advance();
				}
			} finally {
				queryResGetCompetenciesByStage2_outParamList.EndIteration();
			}
			// Query datasetGetStudentLogsByStudentReference
			int datasetGetStudentLogsByStudentReference_maxRecords = 5;
			if (datasetGetStudentLogsByStudentReference_maxRecords < 1) datasetGetStudentLogsByStudentReference_maxRecords = 1;
			queryResGetStudentLogsByStudentReference_outParamList = FuncssPreparation.datasetGetStudentLogsByStudentReference(heContext, datasetGetStudentLogsByStudentReference_maxRecords, IterationMultiplicity.Never, out queryResGetStudentLogsByStudentReference_outParamCount, inParamStudentReference
			);
		}
		static WBlkCompetencies_List() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtWrapperButtons = (ssCaseConferencing.Flows.FlowCommon.WBlkButtonGroup3_SILK) FindControl("wtWrapperButtons");
			wtCompetencesList.StartIndexExpression = () => 0;
			wtCompetencesList.LineCountExpression = () => 50;
			wtCompetencesList.EmptyMessageExpression = () => "No items to show...";
			if (this.wt_Link72 != null) {
				this.wt_Link72.Click += new System.EventHandler(this.wt_Link72_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssCompetencesListListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateInput(FindControl("wtCompetencesList"), "wtInput4", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToIntegerInputValidate, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetCompetenciesByStage2_outParamList.

			int tmpcurrentrownumberqueryResGetCompetenciesByStage2_outParamList = queryResGetCompetenciesByStage2_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCompetenciesByStage2_outParamList = queryResGetCompetenciesByStage2_outParamList.Eof;
			ArrayList storequeryResGetCompetenciesByStage2_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCompetenciesByStage2_outParamList to the storequeryResGetCompetenciesByStage2_outParamList
			if (!queryResGetCompetenciesByStage2_outParamList.Empty) {
				try {
					queryResGetCompetenciesByStage2_outParamList.StartIteration();

					while (!queryResGetCompetenciesByStage2_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCompetenciesByStage2_outParamList = new ArrayList();
						tmpFieldsqueryResGetCompetenciesByStage2_outParamList.Add(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName == "" ?(object) null: queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName);
						tmpFieldsqueryResGetCompetenciesByStage2_outParamList.Add(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId == "" ?(object) null: queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId);
						tmpFieldsqueryResGetCompetenciesByStage2_outParamList.Add(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssProcessCompetenciesId == 0?(object) null: queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssProcessCompetenciesId);
						tmpFieldsqueryResGetCompetenciesByStage2_outParamList.Add(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel == 0?(object) null: queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel);
						tmpFieldsqueryResGetCompetenciesByStage2_outParamList.Add(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateBy == "" ?(object) null: queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateBy);
						tmpFieldsqueryResGetCompetenciesByStage2_outParamList.Add(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateOn);
						storequeryResGetCompetenciesByStage2_outParamList.Add(tmpFieldsqueryResGetCompetenciesByStage2_outParamList);
						queryResGetCompetenciesByStage2_outParamList.Advance();
					}
				} finally {
					queryResGetCompetenciesByStage2_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCompetenciesByStage2_outParamList", storequeryResGetCompetenciesByStage2_outParamList, null);

			#endregion


			#region store queryResGetCompetenciesByStage2_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCompetenciesByStage2_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCompetenciesByStage2_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCompetenciesByStage2_outParamList_eof", tmpeofqueryResGetCompetenciesByStage2_outParamList, false);
			queryResGetCompetenciesByStage2_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCompetenciesByStage2_outParamList, tmpeofqueryResGetCompetenciesByStage2_outParamList);

			#endregion


			#region store queryResGetCurrStage_outParamList.

			int tmpcurrentrownumberqueryResGetCurrStage_outParamList = queryResGetCurrStage_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCurrStage_outParamList = queryResGetCurrStage_outParamList.Eof;
			ArrayList storequeryResGetCurrStage_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCurrStage_outParamList to the storequeryResGetCurrStage_outParamList
			if (!queryResGetCurrStage_outParamList.Empty) {
				try {
					queryResGetCurrStage_outParamList.StartIteration();

					while (!queryResGetCurrStage_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCurrStage_outParamList = new ArrayList();
						tmpFieldsqueryResGetCurrStage_outParamList.Add(queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssId == 0?(object) null: queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssId);
						tmpFieldsqueryResGetCurrStage_outParamList.Add(queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssStudentId == "" ?(object) null: queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssStudentId);
						tmpFieldsqueryResGetCurrStage_outParamList.Add(queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssCurrentStageId == "" ?(object) null: queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssCurrentStageId);
						tmpFieldsqueryResGetCurrStage_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, false, false, false, false, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetCurrStage_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, true, true, true, true, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetCurrStage_outParamList.Add(queryResGetCurrStage_outParamList.CurrentRec.ssENMLWStages.ssOrder == 0?(object) null: queryResGetCurrStage_outParamList.CurrentRec.ssENMLWStages.ssOrder);
						tmpFieldsqueryResGetCurrStage_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetCurrStage_outParamList.CurrentRec.ssENMLWStages.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, true, false
						}
						))));
						tmpFieldsqueryResGetCurrStage_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetCurrStage_outParamList.CurrentRec.ssENMLWStages.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, false, true
						}
						))));
						storequeryResGetCurrStage_outParamList.Add(tmpFieldsqueryResGetCurrStage_outParamList);
						queryResGetCurrStage_outParamList.Advance();
					}
				} finally {
					queryResGetCurrStage_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCurrStage_outParamList", storequeryResGetCurrStage_outParamList, null);

			#endregion


			#region store queryResGetCurrStage_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCurrStage_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCurrStage_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCurrStage_outParamList_eof", tmpeofqueryResGetCurrStage_outParamList, false);
			queryResGetCurrStage_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCurrStage_outParamList, tmpeofqueryResGetCurrStage_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcStageId", varLcStageId, "");
			ViewStateAttributes.SetInViewState("varLcvarRadio_stg1", varLcvarRadio_stg1, "");
			ViewStateAttributes.SetInViewState("varLcisEditMode", varLcisEditMode, false);
			if (IsAjaxRequest) {
				recListCompetencesList_Rebuild((ssCompetencesListListDataBound ? wtCompetencesList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtCompetencesList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtCompetencesList_list", wtCompetencesList_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetCompetenciesByStage2_outParamList.

				// Read the needed fields of queryResGetCompetenciesByStage2_outParamList from storequeryResGetCompetenciesByStage2_outParamList
				queryResGetCompetenciesByStage2_outParamList = new RLLearnerDetail_ComponentStructRecordList();
				ArrayList storequeryResGetCompetenciesByStage2_outParamList;
				storequeryResGetCompetenciesByStage2_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCompetenciesByStage2_outParamList", null);
				if (storequeryResGetCompetenciesByStage2_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCompetenciesByStage2_outParamList in storequeryResGetCompetenciesByStage2_outParamList) {
						if (tmpFieldsqueryResGetCompetenciesByStage2_outParamList != null) {
							// Aux current record variable
							RCLearnerDetail_ComponentStructRecord tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList = new RCLearnerDetail_ComponentStructRecord(null);
							tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList.ssSTLearnerDetail_ComponentStruct.ssComponentName = (string) (tmpFieldsqueryResGetCompetenciesByStage2_outParamList[0] == null ? "": tmpFieldsqueryResGetCompetenciesByStage2_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId = (string) (tmpFieldsqueryResGetCompetenciesByStage2_outParamList[1] == null ? "": tmpFieldsqueryResGetCompetenciesByStage2_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList.ssSTLearnerDetail_ComponentStruct.ssProcessCompetenciesId = (int) (tmpFieldsqueryResGetCompetenciesByStage2_outParamList[2] == null ? 0: tmpFieldsqueryResGetCompetenciesByStage2_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel = (int) (tmpFieldsqueryResGetCompetenciesByStage2_outParamList[3] == null ? 0: tmpFieldsqueryResGetCompetenciesByStage2_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateBy = (string) (tmpFieldsqueryResGetCompetenciesByStage2_outParamList[4] == null ? "": tmpFieldsqueryResGetCompetenciesByStage2_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateOn = (DateTime) (tmpFieldsqueryResGetCompetenciesByStage2_outParamList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetCompetenciesByStage2_outParamList[5]);

							queryResGetCompetenciesByStage2_outParamList.Append(tmpAuxCurrentRecordqueryResGetCompetenciesByStage2_outParamList);
						}
					}
				}
				queryResGetCompetenciesByStage2_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCompetenciesByStage2_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCompetenciesByStage2_outParamList;
				tmpcurrentrownumberqueryResGetCompetenciesByStage2_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCompetenciesByStage2_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCompetenciesByStage2_outParamList;
				tmpeofqueryResGetCompetenciesByStage2_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCompetenciesByStage2_outParamList_eof", false);
				queryResGetCompetenciesByStage2_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCompetenciesByStage2_outParamList, tmpeofqueryResGetCompetenciesByStage2_outParamList);

				#endregion


				#region fetch queryResGetCurrStage_outParamList.

				// Read the needed fields of queryResGetCurrStage_outParamList from storequeryResGetCurrStage_outParamList
				queryResGetCurrStage_outParamList = new RLStudentStudentMLWProcessMLWStagesRecordList();
				ArrayList storequeryResGetCurrStage_outParamList;
				storequeryResGetCurrStage_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCurrStage_outParamList", null);
				if (storequeryResGetCurrStage_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCurrStage_outParamList in storequeryResGetCurrStage_outParamList) {
						if (tmpFieldsqueryResGetCurrStage_outParamList != null) {
							// Aux current record variable
							RCStudentStudentMLWProcessMLWStagesRecord tmpAuxCurrentRecordqueryResGetCurrStage_outParamList = new RCStudentStudentMLWProcessMLWStagesRecord(null);
							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENStudentMLWProcess.ssId = (int) (tmpFieldsqueryResGetCurrStage_outParamList[0] == null ? 0: tmpFieldsqueryResGetCurrStage_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENStudentMLWProcess.ssStudentId = (string) (tmpFieldsqueryResGetCurrStage_outParamList[1] == null ? "": tmpFieldsqueryResGetCurrStage_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENStudentMLWProcess.ssCurrentStageId = (string) (tmpFieldsqueryResGetCurrStage_outParamList[2] == null ? "": tmpFieldsqueryResGetCurrStage_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENStudentMLWProcess.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCurrStage_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENStudentMLWProcess.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCurrStage_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENMLWStages.ssOrder = (int) (tmpFieldsqueryResGetCurrStage_outParamList[5] == null ? 0: tmpFieldsqueryResGetCurrStage_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENMLWStages.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCurrStage_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetCurrStage_outParamList.ssENMLWStages.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCurrStage_outParamList[7]);

							queryResGetCurrStage_outParamList.Append(tmpAuxCurrentRecordqueryResGetCurrStage_outParamList);
						}
					}
				}
				queryResGetCurrStage_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCurrStage_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCurrStage_outParamList;
				tmpcurrentrownumberqueryResGetCurrStage_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCurrStage_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCurrStage_outParamList;
				tmpeofqueryResGetCurrStage_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCurrStage_outParamList_eof", false);
				queryResGetCurrStage_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCurrStage_outParamList, tmpeofqueryResGetCurrStage_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcStageId = (string) ViewStateAttributes.GetFromViewState("varLcStageId", "");
				varLcvarRadio_stg1 = (string) ViewStateAttributes.GetFromViewState("varLcvarRadio_stg1", "");
				varLcisEditMode = (bool) ViewStateAttributes.GetFromViewState("varLcisEditMode", false);
				recListCompetencesList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ControlVisibility.StoreChildControlVisibility("wtInput4");
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
			ControlVisibility.RestoreChildControlVisibility("wtInput4");
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KVyPDvhUlgUuFcBT9_lJCSA";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/CaseConferencing/LearnerView/Competencies_List.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\CaseConferencing\\LearnerView\\Competencies_List.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\CaseConferencing\\LearnerView\\Competencies_List.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkButtonGroup3_SILK.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_NumberSlider.Flows.FlowNumberSlider.WBlkNumberSlider.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_BaseTheme.Flows.FlowCommon_Webblocks.WBlkMLW_PSR_SpiderChart.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearnerView.WBlkMLW_Notes.GetCss(writer, inline, visited);
			proxy_CaseConferencing_CornwallCollegeFunct.Flows.FlowCommon_WB.WBlkMLW_PSR_Competencies_Progression_Chart.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("VyPDvhUlgUuFcBT9_lJCSA"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandOnSliderNotify</code> that represents the Service Studio screen action
		///  <code>OnSliderNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSliderNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcChart_LabelsList = ""; // Chart_LabelsList = ""
				varLcChart_LabelsValues = ""; // Chart_LabelsValues = ""
				// Foreach CompetencesList.List
				getWtCompetencesListList().StartIteration();
				try {
					while (! getWtCompetencesListList().Eof) {
						varLcChart_LabelsList = ((((varLcChart_LabelsList+(((varLcChart_LabelsList== "")) ?(""):(","))) + "\'") +getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName) + "\'"); // Chart_LabelsList = Chart_LabelsList + internalIf + "'" +
						// CompetencesList.List.Current.LearnerDetail_ComponentStruct.ComponentName + "'"
						varLcChart_LabelsValues = ((varLcChart_LabelsValues+(((varLcChart_LabelsValues== "")) ?(""):(","))) +Convert.ToString(getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)); // Chart_LabelsValues = Chart_LabelsValues + internalIf +
						// CompetencesList.List.Current.LearnerDetail_ComponentStruct.CompetenciesLevel
						getWtCompetencesListList().Advance();
					}
				} finally {
					getWtCompetencesListList().EndIteration();
				}
				// Refresh Widget (wtSpiderWebChart)
				((OSPageViewState) Page).AjaxRefresh(wtSpiderWebChart, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvRefreshList: VarsBag {
			public string inParamMLWStagesId;
			public lcvRefreshList(string inParamMLWStagesId) {
				this.inParamMLWStagesId = inParamMLWStagesId;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshList</code> that represents the Service Studio screen action
		///  <code>RefreshList</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshList(HeContext heContext, string inParamMLWStagesId) {
			CheckPermissions(heContext);
			lcvRefreshList localVars = new lcvRefreshList(inParamMLWStagesId);
			try {
				varLcStageId = localVars.inParamMLWStagesId; // StageId = MLWStagesId
				// Query QueryGetCompetenciesByStage2
				{
					int QueryGetCompetenciesByStage2_maxRecords = 0;
					queryResGetCompetenciesByStage2_outParamList = FuncssPreparation.QueryGetCompetenciesByStage2(heContext, QueryGetCompetenciesByStage2_maxRecords, IterationMultiplicity.Multiple, out queryResGetCompetenciesByStage2_outParamCount, inParamStudentReference
					, varLcStageId
					);
				}
				varLcChart_LabelsList = ""; // Chart_LabelsList = ""
				varLcChart_LabelsValues = ""; // Chart_LabelsValues = ""
				// Foreach GetCompetenciesByStage2.List
				queryResGetCompetenciesByStage2_outParamList.StartIteration();
				try {
					while (! queryResGetCompetenciesByStage2_outParamList.Eof) {
						varLcChart_LabelsList = ((((varLcChart_LabelsList+(((varLcChart_LabelsList== "")) ?(""):(","))) + "\'") +queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName) + "\'"); // Chart_LabelsList = Chart_LabelsList + internalIf + "'" +
						// GetCompetenciesByStage2.List.Current.LearnerDetail_ComponentStruct.ComponentName + "'"
						varLcChart_LabelsValues = ((varLcChart_LabelsValues+(((varLcChart_LabelsValues== "")) ?(""):(","))) +Convert.ToString(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)); // Chart_LabelsValues = Chart_LabelsValues + internalIf +
						// GetCompetenciesByStage2.List.Current.LearnerDetail_ComponentStruct.CompetenciesLevel
						queryResGetCompetenciesByStage2_outParamList.Advance();
					}
				} finally {
					queryResGetCompetenciesByStage2_outParamList.EndIteration();
				}
				// Refresh Widget (wtDivBottom)
				ssCompetencesListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtDivBottom, "None", StoreViewState);
				// Refresh Widget (wtStageDescrip)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtStageDescrip"), "None", StoreViewState);
				// Refresh Widget (wtWrapperButtons)
				((OSPageViewState) Page).AjaxRefresh(wtWrapperButtons, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			/// <summary>
			/// Variable <code>varLcStudentMLWProcessId</code> that represents the Service Studio local variable
			///  <code>StudentMLWProcessId</code> <p>Description: </p>
			/// </summary>
			public int varLcStudentMLWProcessId = 0;

			public int resStudentLog2_outParamStudentLogId = 0;

			public int resCreateOrUpdateStudentMLWProcess_outParamId = 0;

			public int resCreateOrUpdateStudentMLWProcessCompetencies_outParamId = 0;

			public RLStudentMLWProcessCompetenciesRecordList queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList = new RLStudentMLWProcessCompetenciesRecordList();
			public int queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamCount = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				// Student Process Id
				localVars.varLcStudentMLWProcessId = queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssId; // StudentMLWProcessId = GetCurrStage.List.Current.StudentMLWProcess.Id
				// Current Stage <> Stage Edit
				if (((varLcStageId!=queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssCurrentStageId) && (Functions.ssGetMLWStages(heContext, varLcStageId).ssENMLWStages.ssOrder>queryResGetCurrStage_outParamList.CurrentRec.ssENMLWStages.ssOrder))) {
					// Set Stage
					queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssCurrentStageId = varLcStageId; // GetCurrStage.List.Current.StudentMLWProcess.CurrentStageId = StageId
					queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ssStudentId = inParamStudentReference; // GetCurrStage.List.Current.StudentMLWProcess.StudentId = StudentReference
					// CreateOrUpdateStudentMLWProcess
					ExtendedActions.CreateOrUpdateStudentMLWProcess(heContext, queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess.ChangedAttributes, ((RCStudentMLWProcessRecord) queryResGetCurrStage_outParamList.CurrentRec.ssENStudentMLWProcess), out localVars.resCreateOrUpdateStudentMLWProcess_outParamId);
					// Student Process Id
					localVars.varLcStudentMLWProcessId = localVars.resCreateOrUpdateStudentMLWProcess_outParamId; // StudentMLWProcessId = CreateOrUpdateStudentMLWProcess.Id

				}
				// Foreach CompetencesList.List
				getWtCompetencesListList().StartIteration();
				try {
					while (! getWtCompetencesListList().Eof) {
						// Updated?
						if ((getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel!=queryResGetCompetenciesByStage2_outParamList[getWtCompetencesListList().CurrentRowNumber] .ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)) {
							// Query datasetGetStudentMLWProcessCompetenciesByStudentMLWId
							int datasetGetStudentMLWProcessCompetenciesByStudentMLWId_maxRecords = 1;
							if (datasetGetStudentMLWProcessCompetenciesByStudentMLWId_maxRecords < 1) datasetGetStudentMLWProcessCompetenciesByStudentMLWId_maxRecords = 1;
							localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList = FuncCommandSave.datasetGetStudentMLWProcessCompetenciesByStudentMLWId(heContext, datasetGetStudentMLWProcessCompetenciesByStudentMLWId_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamCount, queryResGetCompetenciesByStage2_outParamList[getWtCompetencesListList().CurrentRowNumber] .ssSTLearnerDetail_ComponentStruct.ssProcessCompetenciesId
							);
							// set Competences
							localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList.CurrentRec.ssENStudentMLWProcessCompetencies.ssStudentMLWId = localVars.varLcStudentMLWProcessId; // GetStudentMLWProcessCompetenciesByStudentMLWId.List.Current.StudentMLWProcessCompetencies.StudentMLWId =
							// StudentMLWProcessId
							localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList.CurrentRec.ssENStudentMLWProcessCompetencies.ssUpdatedOn = BuiltInFunction.CurrDateTime(); // GetStudentMLWProcessCompetenciesByStudentMLWId.List.Current.StudentMLWProcessCompetencies.UpdatedOn = CurrDateTime
							localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList.CurrentRec.ssENStudentMLWProcessCompetencies.ssUpdatedBy = ((int) Global.App.OsContext.Session["UserID"]); // GetStudentMLWProcessCompetenciesByStudentMLWId.List.Current.StudentMLWProcessCompetencies.UpdatedBy = UserID
							localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList.CurrentRec.ssENStudentMLWProcessCompetencies.ssMLWCompetencieId = getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId; // GetStudentMLWProcessCompetenciesByStudentMLWId.List.Current.StudentMLWProcessCompetencies.MLWCompetencieId =
							// CompetencesList.List.Current.LearnerDetail_ComponentStruct.CompetenciesId
							localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList.CurrentRec.ssENStudentMLWProcessCompetencies.ssCurrentLevel = getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel; // GetStudentMLWProcessCompetenciesByStudentMLWId.List.Current.StudentMLWProcessCompetencies.CurrentLevel =
							// CompetencesList.List.Current.LearnerDetail_ComponentStruct.CompetenciesLevel
							// CreateOrUpdateStudentMLWProcessCompetencies
							ExtendedActions.CreateOrUpdateStudentMLWProcessCompetencies(heContext, localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetStudentMLWProcessCompetenciesByStudentMLWId_outParamList.CurrentRec, out localVars.resCreateOrUpdateStudentMLWProcessCompetencies_outParamId);
							// StudentLog2
							Actions.ActionStudentLog_Create(heContext, inParamStudentReference, ((int) Global.App.OsContext.Session["UserID"]), "Personal - MLW Employability competencies", ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("cJPAKGrQhU+6gMqlf9Tjlg")).ssLogType, (((((("Employability competencies " +getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName) + " changed from ") +Convert.ToString(queryResGetCompetenciesByStage2_outParamList[getWtCompetencesListList().CurrentRowNumber] .ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)) + " to ") +Convert.ToString(getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)) + "."), BuiltInFunction.NullTextIdentifier(), false, 0, "MLW Employability", "", 0, 0, getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId, getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel, out localVars.resStudentLog2_outParamStudentLogId);

						}
						getWtCompetencesListList().Advance();
					}
				} finally {
					getWtCompetencesListList().EndIteration();
				}
				// Query QueryGetCompetenciesByStage2
				{
					int QueryGetCompetenciesByStage2_maxRecords = 0;
					queryResGetCompetenciesByStage2_outParamList = FuncssPreparation.QueryGetCompetenciesByStage2(heContext, QueryGetCompetenciesByStage2_maxRecords, IterationMultiplicity.Multiple, out queryResGetCompetenciesByStage2_outParamCount, inParamStudentReference
					, varLcStageId
					);
				}
				// Reset
				varLcisEditMode = (!varLcisEditMode); // isEditMode = notisEditMode
				varLcChart_LabelsList = ""; // Chart_LabelsList = ""
				varLcChart_LabelsValues = ""; // Chart_LabelsValues = ""
				// Foreach GetCompetenciesByStage2.List
				queryResGetCompetenciesByStage2_outParamList.StartIteration();
				try {
					while (! queryResGetCompetenciesByStage2_outParamList.Eof) {
						// Set Chart_List and Chart_Values
						varLcChart_LabelsList = ((((varLcChart_LabelsList+(((varLcChart_LabelsList== "")) ?(""):(","))) + "\'") +getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName) + "\'"); // Chart_LabelsList = Chart_LabelsList + internalIf + "'" +
						// CompetencesList.List.Current.LearnerDetail_ComponentStruct.ComponentName + "'"
						varLcChart_LabelsValues = ((varLcChart_LabelsValues+(((varLcChart_LabelsValues== "")) ?(""):(","))) +Convert.ToString(queryResGetCompetenciesByStage2_outParamList.CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)); // Chart_LabelsValues = Chart_LabelsValues + internalIf +
						// GetCompetenciesByStage2.List.Current.LearnerDetail_ComponentStruct.CompetenciesLevel
						queryResGetCompetenciesByStage2_outParamList.Advance();
					}
				} finally {
					queryResGetCompetenciesByStage2_outParamList.EndIteration();
				}
				// Query datasetGetCurrStage
				{
					int datasetGetCurrStage_maxRecords = 0;
					queryResGetCurrStage_outParamList = FuncssPreparation.datasetGetCurrStage(heContext, datasetGetCurrStage_maxRecords, IterationMultiplicity.Never, out queryResGetCurrStage_outParamCount, inParamStudentReference
					);
				}
				// Query datasetGetStudentLogsByStudentReference
				{
					int datasetGetStudentLogsByStudentReference_maxRecords = 5;
					if (datasetGetStudentLogsByStudentReference_maxRecords < 1) datasetGetStudentLogsByStudentReference_maxRecords = 1;
					queryResGetStudentLogsByStudentReference_outParamList = FuncssPreparation.datasetGetStudentLogsByStudentReference(heContext, datasetGetStudentLogsByStudentReference_maxRecords, IterationMultiplicity.Never, out queryResGetStudentLogsByStudentReference_outParamCount, inParamStudentReference
					);
				}
				// NotifyWidget
				ExtendedActions.NotifyWidget(heContext, RuntimeID, "");
				// Feedback_Message
				Actions.ActionFeedback_Message(heContext, "Assessment updated with success.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandChangeMode</code> that represents the Service Studio screen action
		///  <code>ChangeMode</code> <p> Description: </p>
		/// </summary>
		private bool CommandChangeMode(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcisEditMode = (!varLcisEditMode); // isEditMode = notisEditMode
				// Refresh Widget (wtif_edit)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtif_edit"), "None", StoreViewState);
				// Refresh Widget (wtCompetencesList)
				ssCompetencesListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCompetencesList, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcisEditMode = (!varLcisEditMode); // isEditMode = notisEditMode
				// Refresh Widget (wtCompetencesList)
				ssCompetencesListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCompetencesList, "None", StoreViewState);
				// Refresh Widget (wtif_edit)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtif_edit"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cntLogContent2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLogContent2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLogContent2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLogContent2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLogContent2)
		/// </summary>
		/// <returns>The Visible State of wtLogContent2</returns>
		public bool cntLogContent2_isVisible() {
			return true;
		}

		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container41_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding: 5px 15px 5px 15px;font-size: 18px;text-shadow: 0px 1px 2px #dadada;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container41_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container67_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container67_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container67_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container67_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container67)
		/// </summary>
		/// <returns>The Visible State of wt_Container67</returns>
		public bool cnt_Container67_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void expressionStageDescrip_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expressionStageDescrip_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expressionStageDescrip_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-size:15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = aMnU5oVoFEy0hYwaVnqm6Q) Expression:
		///  GetMLWStages(StageId).MLWStages.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expressionStageDescrip() {
			return Functions.ssGetMLWStages(heContext, varLcStageId).ssENMLWStages.ssDescription;
		}
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container20_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container20_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlckWrapperButtons_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkButtonGroup3_SILK widget = (ssCaseConferencing.Flows.FlowCommon.WBlkButtonGroup3_SILK) sender;
				widget.inParamActive = (((varLcStageId==ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("4UtQeZsXLE+loQtCc6xR5A")).ssId)) ?(1):((((varLcStageId==ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("oSjGpeFpAkSUy1tEn+I7gA")).ssId)) ?(2):(3))));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void rad_RadioButton29_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_RadioButton29
		/// </summary>
		public void rad_RadioButton29_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandRefreshList(heContext
				, ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("4UtQeZsXLE+loQtCc6xR5A")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Value for the Radio buton
		/// </summary>
		/// <returns>The Radio Button Value</returns>
		public string rad_RadioButton29_getValue() {
			return ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("4UtQeZsXLE+loQtCc6xR5A")).ssId;
		}
		public string rad_RadioButton29_getGroupName(object sender) {
			((OutSystems.HubEdition.WebWidgets.RadioButton) sender).InsideIteration = false; return RuntimeID + "$" + "-148898432";
		}
		public void rad_RadioButton29_radiobutton_onCheckedChanged(object sender, EventArgs e) {
			try {
				if (((OutSystems.HubEdition.WebWidgets.RadioButton) sender).Checked) {
					varLcvarRadio_stg1 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.RadioButton) sender).GetValue());
				}

			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_RadioButton29)
		/// </summary>
		/// <returns>The Visible State of wt_RadioButton29</returns>
		public bool rad_RadioButton29_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_RadioButton29)
		/// </summary>
		/// <returns>The Enabled State of wt_RadioButton29</returns>
		public bool rad_RadioButton29_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public bool rad_RadioButton29_isChecked(object sender) {
			return (String.Compare(varLcvarRadio_stg1, ((OutSystems.HubEdition.WebWidgets.RadioButton) sender).GetValue()) == 0);
		}
		public void rad_RadioButton27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_RadioButton27
		/// </summary>
		public void rad_RadioButton27_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandRefreshList(heContext
				, ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("oSjGpeFpAkSUy1tEn+I7gA")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Value for the Radio buton
		/// </summary>
		/// <returns>The Radio Button Value</returns>
		public string rad_RadioButton27_getValue() {
			return ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("oSjGpeFpAkSUy1tEn+I7gA")).ssId;
		}
		public string rad_RadioButton27_getGroupName(object sender) {
			((OutSystems.HubEdition.WebWidgets.RadioButton) sender).InsideIteration = false; return RuntimeID + "$" + "-148898432";
		}
		public void rad_RadioButton27_radiobutton_onCheckedChanged(object sender, EventArgs e) {
			try {
				if (((OutSystems.HubEdition.WebWidgets.RadioButton) sender).Checked) {
					varLcvarRadio_stg1 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.RadioButton) sender).GetValue());
				}

			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_RadioButton27)
		/// </summary>
		/// <returns>The Visible State of wt_RadioButton27</returns>
		public bool rad_RadioButton27_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_RadioButton27)
		/// </summary>
		/// <returns>The Enabled State of wt_RadioButton27</returns>
		public bool rad_RadioButton27_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public bool rad_RadioButton27_isChecked(object sender) {
			return (String.Compare(varLcvarRadio_stg1, ((OutSystems.HubEdition.WebWidgets.RadioButton) sender).GetValue()) == 0);
		}
		public void rad_RadioButton21_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_RadioButton21
		/// </summary>
		public void rad_RadioButton21_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandRefreshList(heContext
				, ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("zfcearitj022BeKnF4WTFw")).ssId)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Value for the Radio buton
		/// </summary>
		/// <returns>The Radio Button Value</returns>
		public string rad_RadioButton21_getValue() {
			return ENMLWStagesEntity.GetRecordByKey(ObjectKey.Parse("zfcearitj022BeKnF4WTFw")).ssId;
		}
		public string rad_RadioButton21_getGroupName(object sender) {
			((OutSystems.HubEdition.WebWidgets.RadioButton) sender).InsideIteration = false; return RuntimeID + "$" + "-148898432";
		}
		public void rad_RadioButton21_radiobutton_onCheckedChanged(object sender, EventArgs e) {
			try {
				if (((OutSystems.HubEdition.WebWidgets.RadioButton) sender).Checked) {
					varLcvarRadio_stg1 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.RadioButton) sender).GetValue());
				}

			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_RadioButton21)
		/// </summary>
		/// <returns>The Visible State of wt_RadioButton21</returns>
		public bool rad_RadioButton21_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_RadioButton21)
		/// </summary>
		/// <returns>The Enabled State of wt_RadioButton21</returns>
		public bool rad_RadioButton21_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public bool rad_RadioButton21_isChecked(object sender) {
			return (String.Compare(varLcvarRadio_stg1, ((OutSystems.HubEdition.WebWidgets.RadioButton) sender).GetValue()) == 0);
		}
		public void cntDivBottom_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntDivBottom_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntDivBottom_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "border-top: solid 1px #dadada; background-color:rgba(248, 248, 248, 0.66);";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntDivBottom_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtDivBottom)
		/// </summary>
		/// <returns>The Visible State of wtDivBottom</returns>
		public bool cntDivBottom_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container38_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container38_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container38_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container38_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container38)
		/// </summary>
		/// <returns>The Visible State of wt_Container38</returns>
		public bool cnt_Container38_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void recListCompetencesList_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// widget wtCompetencesList
				ssCompetencesListList = queryResGetCompetenciesByStage2_outParamList;
				ssCompetencesListListDoDataBind = false;
				ssCompetencesListListDataBound = true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void recListCompetencesList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssCompetencesListList.Length > 0) {
					ssCompetencesListList.CurrentRec = ssCompetencesListList[ssCompetencesListList.CurrentRowNumber];
				}
				if (ssCompetencesListList.Length > e.SelectedIndex) {
					ssCompetencesListList.CurrentRec = ssCompetencesListList[e.SelectedIndex];
					ssCompetencesListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListCompetencesList_Store(object dataItem, int index) {
			RCLearnerDetail_ComponentStructRecord tmprec = (RCLearnerDetail_ComponentStructRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTLearnerDetail_ComponentStruct.ssComponentName == "" ?(object) null: tmprec.ssSTLearnerDetail_ComponentStruct.ssComponentName);
			tmpFields.Add(tmprec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId == "" ?(object) null: tmprec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId);
			tmpFields.Add(tmprec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel == 0?(object) null: tmprec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel);
			if (index < wtCompetencesList_storage.Count) {
				wtCompetencesList_storage[index] = tmpFields;
			} else {
				wtCompetencesList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListCompetencesList_Restore() {

			#region fetch ssCompetencesListList.

			// Read the needed fields of ssCompetencesListList from storewtCompetencesList_list
			ssCompetencesListList = new RLLearnerDetail_ComponentStructRecordList();
			ArrayList storewtCompetencesList_list;
			storewtCompetencesList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtCompetencesList_list", null);
			if (storewtCompetencesList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtCompetencesList_list in storewtCompetencesList_list) {
					if (tmpFieldswtCompetencesList_list != null) {
						// Aux current record variable
						RCLearnerDetail_ComponentStructRecord tmpAuxCurrentRecordwtCompetencesList_list = new RCLearnerDetail_ComponentStructRecord(null);
						tmpAuxCurrentRecordwtCompetencesList_list.ssSTLearnerDetail_ComponentStruct.ssComponentName = (string) (tmpFieldswtCompetencesList_list[0] == null ? "": tmpFieldswtCompetencesList_list[0]);

						tmpAuxCurrentRecordwtCompetencesList_list.ssSTLearnerDetail_ComponentStruct.ssCompetenciesId = (string) (tmpFieldswtCompetencesList_list[1] == null ? "": tmpFieldswtCompetencesList_list[1]);

						tmpAuxCurrentRecordwtCompetencesList_list.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel = (int) (tmpFieldswtCompetencesList_list[2] == null ? 0: tmpFieldswtCompetencesList_list[2]);

						ssCompetencesListList.Append(tmpAuxCurrentRecordwtCompetencesList_list);
					}
				}
			}
			ssCompetencesListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssCompetencesListList runtime properties state.


			if (storewtCompetencesList_list.Count > 0) {
				ssCompetencesListList.RestoreRecordListState(storewtCompetencesList_list.Count - 1, false);
			} else {
				ssCompetencesListList.CurrentRowNumber = 0;
			}

			#endregion

			wtCompetencesList_storage = storewtCompetencesList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListCompetencesList_Clear(object sender, EventArgs e) {
			wtCompetencesList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListCompetencesList_Rebuild(int startIndex, int lineCount) {
			if (ssCompetencesListList.Length != -1) {
				wtCompetencesList_storage.Clear();
				for (int i=startIndex; i<ssCompetencesListList.Data.Count && i<startIndex+lineCount; i++) {
					recListCompetencesList_Store(ssCompetencesListList.Data[i], wtCompetencesList_storage.Count);
				}
			}
		}
		public void recListCompetencesList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtCompetencesList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLLearnerDetail_ComponentStructRecordList getWtCompetencesListList() {
			if (ssCompetencesListListDoDataBind) {
				recListCompetencesList_onDataBinding(this, null);
			}

			return ssCompetencesListList;
		}
		public void cntWrapperList2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWrapperList2_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWrapperList2_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntWrapperList2_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperList2)
		/// </summary>
		/// <returns>The Visible State of wtWrapperList2</returns>
		public bool cntWrapperList2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void wt_TableCell18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void expression_InlineExpression42_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				expression_InlineExpression42_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string expression_InlineExpression42_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-size:15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = TnjErLZmbkajwApAGCaScw) Expression:
		///  CompetencesList.List.Current.LearnerDetail_ComponentStruct.ComponentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression42() {
			return getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssComponentName;
		}
		bool if_wt_If61_hasRun=false;
		bool if_wt_If61_evalResult;
		public bool if_wt_If61() {
			if (if_wt_If61_hasRun) {
				if_wt_If61_hasRun = false;
				return if_wt_If61_evalResult;
			}
			if_wt_If61_hasRun = true;
			if_wt_If61_evalResult = ((getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateBy!= "") && (!varLcisEditMode));
			return if_wt_If61_evalResult;
		}

		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container16_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container16_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = SSZuyAP74EeA7xrYdLgRpg) Expression: "Updated by " +
		///  CompetencesList.List.Current.LearnerDetail_ComponentStruct.CompetenciesUpdateBy + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression53() {
			return (("Updated by " +getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateBy) + " on ");
		}
		public void webBlck_WebBlockInstance51_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesUpdateOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void wt_TableCell37_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wt_TableCell37_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wt_TableCell37_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container63_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container63_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container63_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container63_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container63)
		/// </summary>
		/// <returns>The Visible State of wt_Container63</returns>
		public bool cnt_Container63_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If64_hasRun=false;
		bool if_wt_If64_evalResult;
		public bool if_wt_If64() {
			if (if_wt_If64_hasRun) {
				if_wt_If64_hasRun = false;
				return if_wt_If64_evalResult;
			}
			if_wt_If64_hasRun = true;
			if_wt_If64_evalResult = (!varLcisEditMode);
			return if_wt_If64_evalResult;
		}

		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((WebControl) sender).CssClass = ((((getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel==1) || (getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel==2))) ?("Badge RagRed"):(((((getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel==3) || (getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel==4))) ?("Badge RagAmber"):(((((getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel==5) || (getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel==6))) ?("Badge RagGreen"):("Badge Silver")))))) + " OSInline";
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = 7xoh8YUkcki9tOfT89J0GQ) Expression:
		///  CompetencesList.List.Current.LearnerDetail_ComponentStruct.CompetenciesLevel
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression66() {
			return Convert.ToString(getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel);
		}
		public void cntSliderLegendAbove_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSliderLegendAbove_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSliderLegendAbove_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntSliderLegendAbove_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSliderLegendAbove)
		/// </summary>
		/// <returns>The Visible State of wtSliderLegendAbove</returns>
		public bool cntSliderLegendAbove_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container22_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container22_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void NumberSlider_webBlck_WebBlockInstance45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_NumberSlider.Flows.FlowNumberSlider.WBlkNumberSlider widget = (proxy_CaseConferencing_NumberSlider.Flows.FlowNumberSlider.WBlkNumberSlider) sender;
				widget.inParamInputId = Utils.getControlInRecordWidget(wtCompetencesList, "wtInput4").ClientID;
				widget.inParamMinValue = 0M;
				widget.inParamMaxValue = 6M;
				widget.inParamSliderStep = 1M;
				widget.inParamValues = "";
				widget.inParamUpdateOnMouseUpOnly = false;
				widget.inParamShowLegend = true;
				widget.inParamLegendStep = 1;
				widget.inParamLegendHasPips = false;
				widget.inParamLegendStyle = 1;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget NumberSlider_wt_WebBlockInstance45
		/// </summary>
		public void NumberSlider_webBlck_WebBlockInstance45_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSliderNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void inputwtInput4_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				inputwtInput4_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string inputwtInput4_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "display:none";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtInput4
		/// </summary>
		public void inputwtInput4_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnSliderNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtInput4_input_value() {
			if ((0!=getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel)) {
				return RuntimePlatformUtils.RemoveTrailingZeros(getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel.ToString("N", FormatInfo.InputNumber), FormatInfo.InputNumber);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) Utils.getSelectedControlInRecordWidget(wtCompetencesList, "wtInput4");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToIntegerInputValidate, validate)) {
					return RuntimePlatformUtils.RemoveTrailingZeros(getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel.ToString("N", FormatInfo.InputNumber), FormatInfo.InputNumber);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtInput4_input_onTextChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssCompetencesListList.Length > parentControlIndex && parentControlIndex > -1) {
					ssCompetencesListList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel = 0; 
				} else {
					getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToIntegerInput(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				getWtCompetencesListList().CurrentRec.ssSTLearnerDetail_ComponentStruct.ssCompetenciesLevel = 0; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtInput4)
		/// </summary>
		/// <returns>The Visible State of wtInput4</returns>
		public bool inputwtInput4_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtInput4)
		/// </summary>
		/// <returns>The Enabled State of wtInput4</returns>
		public bool inputwtInput4_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtInput4)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtInput4</returns>
		public bool inputwtInput4_isMandatory() {
			return false;
		}

		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container32_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container32_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container34_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container34_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container34_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container34_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container34)
		/// </summary>
		/// <returns>The Visible State of wt_Container34</returns>
		public bool cnt_Container34_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wtif_edit_hasRun=false;
		bool if_wtif_edit_evalResult;
		public bool if_wtif_edit() {
			if (if_wtif_edit_hasRun) {
				if_wtif_edit_hasRun = false;
				return if_wtif_edit_evalResult;
			}
			if_wtif_edit_hasRun = true;
			if_wtif_edit_evalResult = (!varLcisEditMode);
			return if_wtif_edit_evalResult;
		}

		public void cnt_Container65_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container65_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container65_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container65_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container65
		/// </summary>
		public void cnt_Container65_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandChangeMode(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container65)
		/// </summary>
		/// <returns>The Visible State of wt_Container65</returns>
		public bool cnt_Container65_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance54_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container19_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container19_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container19
		/// </summary>
		public void cnt_Container19_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSave(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance13_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("QLI1iYm44EaX7_+WllMSxw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "line-height:30px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container36_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void lnk_Link72_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				lnk_Link72_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string lnk_Link72_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "color:#666;";
					oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link72_Click(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandCancel(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link72)
		/// </summary>
		/// <returns>title of the Link (wt_Link72)</returns>
		public string
		lnk_Link72_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link72)
		/// </summary>
		/// <returns>The Visible State of wt_Link72</returns>
		public bool lnk_Link72_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link72)
		/// </summary>
		/// <returns>The Enabled State of wt_Link72</returns>
		public bool lnk_Link72_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance74_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BlsFgPV4B02JduD2ZSJkdw")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container7_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding:0px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container7_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntSpiderWebChart_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntSpiderWebChart_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntSpiderWebChart_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-top:20px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntSpiderWebChart_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtSpiderWebChart)
		/// </summary>
		/// <returns>The Visible State of wtSpiderWebChart</returns>
		public bool cntSpiderWebChart_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void BaseTheme_webBlck_WebBlockInstance39_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_BaseTheme.Flows.FlowCommon_Webblocks.WBlkMLW_PSR_SpiderChart widget = (proxy_CaseConferencing_BaseTheme.Flows.FlowCommon_Webblocks.WBlkMLW_PSR_SpiderChart) sender;
				widget.inParamChart_LabelsList = varLcChart_LabelsList;
				widget.inParamChart_LabelsValues = varLcChart_LabelsValues;
				widget.inParamTitleDescription = "";
				widget.inParamSeriesLabel = Functions.ssGetMLWStages(heContext, varLcStageId).ssENMLWStages.ssLabel;
				widget.inParamHeight = "350";
				widget.inParamPercentage = 75;
				widget.inParamLabelsFontSize = "10";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container70_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container70_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container70_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container70_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container70)
		/// </summary>
		/// <returns>The Visible State of wt_Container70</returns>
		public bool cnt_Container70_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearnerView.WBlkMLW_Notes widget = (ssCaseConferencing.Flows.FlowLearnerView.WBlkMLW_Notes) sender;
				widget.inParamMLWStageId = varLcStageId;
				widget.inParamStudentId = inParamStudentReference;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container47_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding: 0px 15px 15px 15px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container47_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntLineChart_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntLineChart_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntLineChart_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntLineChart_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLineChart)
		/// </summary>
		/// <returns>The Visible State of wtLineChart</returns>
		public bool cntLineChart_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container57_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container57_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container57_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container57_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container57)
		/// </summary>
		/// <returns>The Visible State of wt_Container57</returns>
		public bool cnt_Container57_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void CornwallCollegeFunct_webBlck_WebBlockInstance33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_CornwallCollegeFunct.Flows.FlowCommon_WB.WBlkMLW_PSR_Competencies_Progression_Chart widget = (proxy_CaseConferencing_CornwallCollegeFunct.Flows.FlowCommon_WB.WBlkMLW_PSR_Competencies_Progression_Chart) sender;
				widget.inParamSelected_StageId = varLcStageId;
				widget.inParamStudentId = inParamStudentReference;
				widget.inParamTitle = "Assessment History";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandOnSliderNotify {
		}
		public static class FuncCommandRefreshList {
		}
		public static class FuncCommandSave {

			/// <summary>
			/// Query Function "GetStudentMLWProcessCompetenciesByStudentMLWId" of Action "Save"
			/// </summary>
			public static RLStudentMLWProcessCompetenciesRecordList datasetGetStudentMLWProcessCompetenciesByStudentMLWId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStudentMLWProcessCompetencies.[ID] o1, ENStudentMLWProcessCompetencies.[STUDENTMLWID] o2, ENStudentMLWProcessCompetencies.[MLWCOMPETENCIEID] o3, ENStudentMLWProcessCompetencies.[CURRENTLEVEL] o4, ENStudentMLWProcessCompetencies.[UPDATEDON] o5, ENStudentMLWProcessCompetencies.[UPDATEDBY] o6");
				fromBuilder.Append(" FROM {StudentMLWProcessCompetencies} ENStudentMLWProcessCompetencies");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENStudentMLWProcessCompetencies.[ID] = @qpinP) AND (ENStudentMLWProcessCompetencies.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENStudentMLWProcessCompetencies.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentMLWProcessCompetenciesRecordList outParamList = new RLStudentMLWProcessCompetenciesRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentMLWProcessCompetenciesRecordList _tmp = new RLStudentMLWProcessCompetenciesRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.Competencies_List.Save.GetStudentMLWProcessCompetenciesByStudentMLWId.List");
						outParamList = (RLStudentMLWProcessCompetenciesRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Save.GetStudentMLWProcessCompetenciesByStudentMLWId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentMLWProcessCompetenciesRecordList _tmp = new RLStudentMLWProcessCompetenciesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.Competencies_List.Save.GetStudentMLWProcessCompetenciesByStudentMLWId.List");
							outParamList = (RLStudentMLWProcessCompetenciesRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Save.GetStudentMLWProcessCompetenciesByStudentMLWId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandChangeMode {
		}
		public static class FuncCommandCancel {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetCompetenciesByStage2" of Action "Preparation"
			/// </summary>
			public static RLLearnerDetail_ComponentStructRecordList QueryGetCompetenciesByStage2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudent, string qpstStageId) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query 8iaWYZRZxE+ez2S_RxnbgA Iterations: Multiple {-unbound-}
				// Refresh Query scQjrT+cZEG281J3M1i0hw Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudent", DbType.String, qpstStudent);
				sqlCmd.CreateParameter("@qpstStageId", DbType.String, qpstStageId);
				string advSql = "SELECT  {MLWCompetencies}.[LABEL], {MLWCompetencies}.[ID], x.ID, x.[STUDENTMLWID], x.[CURRENTLEVEL], x.[NAME], x.[UPDATEDON]   " +
				 "FROM  {MLWCompetencies}  " +
				 "LEFT JOIN (select  {StudentMLWProcessCompetencies}.[MLWCOMPETENCIEID], {StudentMLWProcessCompetencies}.[ID] 'ID',  {StudentMLWProcessCompetencies}.[STUDENTMLWID],  {StudentMLWProcessCompetencies}.[CURRENTLEVEL],  {User}.[NAME], {StudentMLWProcessCompetencies}.[UPDATEDON]   " +
				 "            from  {StudentMLWProcessCompetencies}  " +
				 "            INNER JOIN  {StudentMLWProcess} ON  {StudentMLWProcess}.[ID] =  {StudentMLWProcessCompetencies}.[STUDENTMLWID]  " +
				 "                                            AND  {StudentMLWProcess}.[STUDENTID] = @qpstStudent   " +
				 "            INNER JOIN  {User} on  {StudentMLWProcessCompetencies}.[UPDATEDBY]=  {User}.[ID]) as x  " +
				 "ON x.[MLWCOMPETENCIEID]=  {MLWCompetencies}.[ID]   " +
				 "WHERE  " +
				 "     {MLWCompetencies}.[MLWSTAGEID] = @qpstStageId   " +
				 "ORDER BY  {MLWCompetencies}.[ORDER]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLLearnerDetail_ComponentStructRecordList outParamList = new RLLearnerDetail_ComponentStructRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerDetail_ComponentStructRecordList _tmp = new RLLearnerDetail_ComponentStructRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.Competencies_List.Preparation.GetCompetenciesByStage2.List");
							outParamList = (RLLearnerDetail_ComponentStructRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Preparation.GetCompetenciesByStage2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Preparation.GetCompetenciesByStage2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCompetenciesByStage2 in Preparation in Competencies_List in LearnerView in CaseConferencing (SELECT {MLWCompetencies}.[Label],{MLWCompetencies}.[Id], x.ID, x.[StudentMLWId], x.[CurrentLevel], x.[Name], x.[UpdatedOn]   FROM {MLWCompetencies}  LEFT JOIN (select {StudentMLWProcessCompetencies}.[MLWCompetencieId],{StudentMLWProcessCompetencies}.[Id] 'ID', {StudentMLWProcessCompetencies}.[StudentMLWId], {StudentMLWProcessCompetencies}.[CurrentLevel], {User}.[Name],{StudentMLWProcessCompetencies}.[UpdatedOn]               from {StudentMLWProcessCompetencies}              INNER JOIN {StudentMLWProcess} ON {StudentMLWProcess}.[Id] = {StudentMLWProcessCompetencies}.[StudentMLWId]                                              AND {StudentMLWProcess}.[StudentId] = @Student               INNER JOIN {User} on {StudentMLWProcessCompetencies}.[UpdatedBy]= {User}.[Id]) as x  ON x.[MLWCompetencieId]= {MLWCompetencies}.[Id]   WHERE      {MLWCompetencies}.[MLWStageId] = @StageId   ORDER BY {MLWCompetencies}.[Order]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCompetenciesByStage2 in Preparation in Competencies_List in LearnerView in CaseConferencing (SELECT {MLWCompetencies}.[Label],{MLWCompetencies}.[Id], x.ID, x.[StudentMLWId], x.[CurrentLevel], x.[Name], x.[UpdatedOn]   FROM {MLWCompetencies}  LEFT JOIN (select {StudentMLWProcessCompetencies}.[MLWCompetencieId],{StudentMLWProcessCompetencies}.[Id] 'ID', {StudentMLWProcessCompetencies}.[StudentMLWId], {StudentMLWProcessCompetencies}.[CurrentLevel], {User}.[Name],{StudentMLWProcessCompetencies}.[UpdatedOn]               from {StudentMLWProcessCompetencies}              INNER JOIN {StudentMLWProcess} ON {StudentMLWProcess}.[Id] = {StudentMLWProcessCompetencies}.[StudentMLWId]                                              AND {StudentMLWProcess}.[StudentId] = @Student               INNER JOIN {User} on {StudentMLWProcessCompetencies}.[UpdatedBy]= {User}.[Id]) as x  ON x.[MLWCompetencieId]= {MLWCompetencies}.[Id]   WHERE      {MLWCompetencies}.[MLWStageId] = @StageId   ORDER BY {MLWCompetencies}.[Order]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCompetenciesByStage2 in Preparation in Competencies_List in LearnerView in CaseConferencing (SELECT {MLWCompetencies}.[Label],{MLWCompetencies}.[Id], x.ID, x.[StudentMLWId], x.[CurrentLevel], x.[Name], x.[UpdatedOn]   FROM {MLWCompetencies}  LEFT JOIN (select {StudentMLWProcessCompetencies}.[MLWCompetencieId],{StudentMLWProcessCompetencies}.[Id] 'ID', {StudentMLWProcessCompetencies}.[StudentMLWId], {StudentMLWProcessCompetencies}.[CurrentLevel], {User}.[Name],{StudentMLWProcessCompetencies}.[UpdatedOn]               from {StudentMLWProcessCompetencies}              INNER JOIN {StudentMLWProcess} ON {StudentMLWProcess}.[Id] = {StudentMLWProcessCompetencies}.[StudentMLWId]                                              AND {StudentMLWProcess}.[StudentId] = @Student               INNER JOIN {User} on {StudentMLWProcessCompetencies}.[UpdatedBy]= {User}.[Id]) as x  ON x.[MLWCompetencieId]= {MLWCompetencies}.[Id]   WHERE      {MLWCompetencies}.[MLWStageId] = @StageId   ORDER BY {MLWCompetencies}.[Order]): " + aqExcep.Message);
				}
			}

			private static void datasetGetCurrStageReadDB(ref RCStudentStudentMLWProcessMLWStagesRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENMLWStages.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssENStudentMLWProcess.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetCurrStage" of Action "Preparation"
			/// </summary>
			public static RLStudentStudentMLWProcessMLWStagesRecordList datasetGetCurrStage(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query 4RKRPCr19kqd5E+iA_RMFQ Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, ENMLWStages.[ORDER] o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, ENStudentMLWProcess.[ID] o33, ENStudentMLWProcess.[STUDENTID] o34, ENStudentMLWProcess.[CURRENTSTAGEID] o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47");
				fromBuilder.Append(" FROM (({StudentMLWProcess} ENStudentMLWProcess Inner JOIN {MLWStages} ENMLWStages ON (ENStudentMLWProcess.[CURRENTSTAGEID] = ENMLWStages.[ID]))  Inner JOIN {Student} ENStudent ON (ENStudentMLWProcess.[STUDENTID] = ENStudent.[STUDENTREFERENCE])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENStudentMLWProcess.[STUDENTID] = @qpstP) AND (ENStudentMLWProcess.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENStudentMLWProcess.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentStudentMLWProcessMLWStagesRecordList outParamList = new RLStudentStudentMLWProcessMLWStagesRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetCurrStageReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, false, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, true, false, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentStudentMLWProcessMLWStagesRecordList _tmp = new RLStudentStudentMLWProcessMLWStagesRecordList();
					_tmp.AlternateReadDBMethod = datasetGetCurrStageReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.Competencies_List.Preparation.GetCurrStage.List");
						outParamList = (RLStudentStudentMLWProcessMLWStagesRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Preparation.GetCurrStage.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentStudentMLWProcessMLWStagesRecordList _tmp = new RLStudentStudentMLWProcessMLWStagesRecordList();
						_tmp.AlternateReadDBMethod = datasetGetCurrStageReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.Competencies_List.Preparation.GetCurrStage.List");
							outParamList = (RLStudentStudentMLWProcessMLWStagesRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Preparation.GetCurrStage.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetStudentLogsByStudentReferenceReadDB(ref RCUserStudentLogRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENStudentLog.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudentLogsByStudentReference" of Action "Preparation"
			/// </summary>
			public static RLUserStudentLogRecordList datasetGetStudentLogsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query _HsqzFnycEGdBwGDLCzg9w Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54");
				fromBuilder.Append(" FROM ({StudentLog} ENStudentLog Inner JOIN {User} ENUser ON (ENStudentLog.[EVENTBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENStudentLog.[STUDENTREFERENCE] = @qpstP) AND (ENStudentLog.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENStudentLog.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENStudentLog.[MLWCOMPETENCIEID] IS NOT NULL) AND (ENStudentLog.[STUDENTLOGTYPE] = ");
				whereBuilder.Append("'" + ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("cJPAKGrQhU+6gMqlf9Tjlg")).ssLogType.Replace("'", "''") + "'");
				whereBuilder.Append(")");
				orderByBuilder.Append(" ORDER BY ENStudentLog.[DATETIME] DESC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserStudentLogRecordList outParamList = new RLUserStudentLogRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentLogsByStudentReferenceReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserStudentLogRecordList _tmp = new RLUserStudentLogRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentLogsByStudentReferenceReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.Competencies_List.Preparation.GetStudentLogsByStudentReference.List");
						outParamList = (RLUserStudentLogRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Preparation.GetStudentLogsByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserStudentLogRecordList _tmp = new RLUserStudentLogRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentLogsByStudentReferenceReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.Competencies_List.Preparation.GetStudentLogsByStudentReference.List");
							outParamList = (RLUserStudentLogRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.Competencies_List.Preparation.GetStudentLogsByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			if (id == "wt_RadioButton29") {
				return wtWrapperButtons.wtRadioButtonText.FindControl("wt_RadioButton29");
			}
			if (id == "wt_Text14") {
				return wtWrapperButtons.wtRadioButtonText.FindControl("wt_Text14");
			}
			if (id == "wt_RadioButton27") {
				return wtWrapperButtons.wtRadioButtonText2.FindControl("wt_RadioButton27");
			}
			if (id == "wt_Text11") {
				return wtWrapperButtons.wtRadioButtonText2.FindControl("wt_Text11");
			}
			if (id == "wt_RadioButton21") {
				return wtWrapperButtons.wtRadioButtonText3.FindControl("wt_RadioButton21");
			}
			if (id == "wt_Text3") {
				return wtWrapperButtons.wtRadioButtonText3.FindControl("wt_Text3");
			}
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KVyPDvhUlgUuFcBT9_lJCSA";
			}
		}
	}

}
