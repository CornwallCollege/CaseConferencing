/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Web.Caching;
using System.Text;


namespace ssCaseConferencing.Flows.FlowLearner_Programme {
	public abstract class WBlkProgramme_Tab: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Custom Events Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable <code>varLcSelectedTab</code> that represents the Service Studio local variable
		///  <code>SelectedTab</code> <p>Description: 1 - Programme, 2- Quals On Entry</p>
		/// </summary>
		int varLcSelectedTab = 1;

		/// <summary>
		/// Variable <code>varLcAcademicYear</code> that represents the Service Studio local variable
		///  <code>AcademicYear</code> <p>Description: </p>
		/// </summary>
		string varLcAcademicYear = "";

		/// <summary>
		/// Variable <code>varLcGetStudents_AcademicYear</code> that represents the Service Studio local
		///  variable <code>GetStudents_AcademicYear</code> <p>Description: Created by the upgrade o
		/// f 'GetStudents' to an Aggregate. Corresponds to the old query parameter 'AcademicYear'.</p>
		/// </summary>
		string varLcGetStudents_AcademicYear = "";

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container51;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container53;
		protected OutSystems.HubEdition.WebWidgets.Container wtMenuTab;
		protected OutSystems.HubEdition.WebWidgets.Container wtProgramme;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wtExamEntry;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		/// <summary>
		/// Variable "True" if the Widget wt_If74
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If74T;

		/// <summary>
		/// Variable "True" if the Widget wt_If74
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If74F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		protected OutSystems.HubEdition.WebWidgets.Container wtContentArea;
		/// <summary>
		/// Variable "True" if the Widget wt_If6
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If6T;

		/// <summary>
		/// Variable "True" if the Widget wt_If6
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If6F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23T;

		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23F;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox2ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox2 = new SelectRtWidget();
		RLStringRecordList Rt_wt_ComboBox2_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtExemptionContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		/// <summary>
		/// Variable (wtEditExemptions) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtEditExemptions;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container62;
		protected OutSystems.HubEdition.WebWidgets.Container wtFullYearPlannedLearningHoursWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		protected OutSystems.HubEdition.WebWidgets.Container wtPlannedLearningHoursWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wtPlannedLearningHoursTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtPlannedLearningHoursValue;
		protected OutSystems.HubEdition.WebWidgets.Container wtPlannedEEPLearningHoursWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container68;
		protected OutSystems.HubEdition.WebWidgets.Container wtPlannedEEPLearningHoursValue;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container52;
		protected OutSystems.HubEdition.WebWidgets.Container wtEnrolmentsContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtActiveEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wtCompletedEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wtWithdrawnEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wtTransferredEnrolments;
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		RLUserStudentExemptionRecordList queryResGetStudentExemptionsByStudentId_outParamList = new RLUserStudentExemptionRecordList();
		int queryResGetStudentExemptionsByStudentId_outParamCount = 0;
		RLStringRecordList queryResGetAcademicYears_outParamList = new RLStringRecordList();
		int queryResGetAcademicYears_outParamCount = 0;
		RLGroupStudent_GroupRecordList queryResGetActiveStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
		int queryResGetActiveStudentGroups_outParamCount = 0;
		RCAcademicYear2Record resGetAcademicYearValues2_outParamAcademicYear = new RCAcademicYear2Record(null);
		int resUserCheck_outParamPermissionType = 0;
		RLGroupStudent_GroupRecordList queryResGetWithdrawnStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
		int queryResGetWithdrawnStudentGroups_outParamCount = 0;
		RLStudentAnnualValuesRecordList queryResGetStudents_outParamList = new RLStudentAnnualValuesRecordList();
		int queryResGetStudents_outParamCount = 0;
		RLGroupStudent_GroupRecordList queryResGetTransferredStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
		int queryResGetTransferredStudentGroups_outParamCount = 0;
		RLExamEntryRecordList queryResGetExamEntriesByStudentReference_outParamList = new RLExamEntryRecordList();
		int queryResGetExamEntriesByStudentReference_outParamCount = 0;
		RLGroupStudent_GroupRecordList queryResGetCompletedStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
		int queryResGetCompletedStudentGroups_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("gX1uWQRPF0OdhW_TC7mxQA")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType==BuiltInFunction.NullIdentifier())) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							if (OSPage.IsAjaxRequest) {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								Response.BufferOutput = true;
								Response.Redirect(sURL, true);
							}
							return;

						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return;

						}
					}
				} else {
					// go to target page
					{

						if ((((IWebScreen) Page).isSecure || RuntimePlatformUtils.RequestIsSecure(Request)) && (heContext.AppInfo.eSpaceId == Global.eSpaceId)) {
							((OSPage) Page).ClearErrorHandler();
							if (OSPage.IsAjaxRequest) {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
								sURL = sURL.Replace("&amp;", "&");
								sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
								Response.BufferOutput = true;
								Response.Redirect(sURL, true);
							}
							return;

						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPage) Page).ClearErrorHandler();
							Response.BufferOutput = true;
							if (!OSPage.IsAjaxRequest) {
								Response.Redirect(sURL);
							} else {
								((OSPageViewState) Page).RedirectLocation = sURL;
							}
							return;

						}
					}
				}

			} else {
				// GetAcademicYearValues2
				Actions.ActionGetAcademicYearValues2(heContext, ENAcademicYearType2Entity.GetRecordByKey(ObjectKey.Parse("8ZDe8cEZhk2DF16FIzuk9A")).ssId, "", out resGetAcademicYearValues2_outParamAcademicYear);
				// Query QueryGetAcademicYears
				int QueryGetAcademicYears_maxRecords = 0;
				queryResGetAcademicYears_outParamList = FuncssPreparation.QueryGetAcademicYears(heContext, QueryGetAcademicYears_maxRecords, IterationMultiplicity.Multiple, out queryResGetAcademicYears_outParamCount, inParamStudentReference
				);
				varLcAcademicYear = resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYYYY_Academic; // AcademicYear = GetAcademicYearValues2.AcademicYear.AcademicYear2.YYYY_Academic
				// Query datasetGetActiveStudentGroups
				int datasetGetActiveStudentGroups_maxRecords = 0;
				queryResGetActiveStudentGroups_outParamList = FuncssPreparation.datasetGetActiveStudentGroups(heContext, datasetGetActiveStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetActiveStudentGroups_outParamCount, varLcAcademicYear
				, inParamStudentReference
				);
				// Query datasetGetCompletedStudentGroups
				int datasetGetCompletedStudentGroups_maxRecords = 0;
				queryResGetCompletedStudentGroups_outParamList = FuncssPreparation.datasetGetCompletedStudentGroups(heContext, datasetGetCompletedStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetCompletedStudentGroups_outParamCount, varLcAcademicYear
				, inParamStudentReference
				);
				// Query datasetGetWithdrawnStudentGroups
				int datasetGetWithdrawnStudentGroups_maxRecords = 0;
				queryResGetWithdrawnStudentGroups_outParamList = FuncssPreparation.datasetGetWithdrawnStudentGroups(heContext, datasetGetWithdrawnStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetWithdrawnStudentGroups_outParamCount, varLcAcademicYear
				, inParamStudentReference
				);
				// Query datasetGetTransferredStudentGroups
				int datasetGetTransferredStudentGroups_maxRecords = 0;
				queryResGetTransferredStudentGroups_outParamList = FuncssPreparation.datasetGetTransferredStudentGroups(heContext, datasetGetTransferredStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetTransferredStudentGroups_outParamCount, varLcAcademicYear
				, inParamStudentReference
				);
				// Created by the upgrade of 'GetStudents' to an Aggregate.
				varLcGetStudents_AcademicYear = resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYYYY_Academic; // GetStudents_AcademicYear = GetAcademicYearValues2.AcademicYear.AcademicYear2.YYYY_Academic
				// Query datasetGetStudents
				int datasetGetStudents_maxRecords = 0;
				queryResGetStudents_outParamList = FuncssPreparation.datasetGetStudents(heContext, datasetGetStudents_maxRecords, IterationMultiplicity.Never, out queryResGetStudents_outParamCount, resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYY_YY
				, inParamStudentReference
				);
				// Query datasetGetExamEntriesByStudentReference
				int datasetGetExamEntriesByStudentReference_maxRecords = 0;
				queryResGetExamEntriesByStudentReference_outParamList = FuncssPreparation.datasetGetExamEntriesByStudentReference(heContext, datasetGetExamEntriesByStudentReference_maxRecords, IterationMultiplicity.Multiple, out queryResGetExamEntriesByStudentReference_outParamCount, inParamStudentReference
				);
				// Query datasetGetStudentExemptionsByStudentId
				int datasetGetStudentExemptionsByStudentId_maxRecords = 0;
				queryResGetStudentExemptionsByStudentId_outParamList = FuncssPreparation.datasetGetStudentExemptionsByStudentId(heContext, datasetGetStudentExemptionsByStudentId_maxRecords, IterationMultiplicity.Never, out queryResGetStudentExemptionsByStudentId_outParamCount, inParamStudentReference
				);

			}
		}
		static WBlkProgramme_Tab() {
		}
		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox2", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetStudentExemptionsByStudentId_outParamList.

			int tmpcurrentrownumberqueryResGetStudentExemptionsByStudentId_outParamList = queryResGetStudentExemptionsByStudentId_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentExemptionsByStudentId_outParamList = queryResGetStudentExemptionsByStudentId_outParamList.Eof;
			ArrayList storequeryResGetStudentExemptionsByStudentId_outParamList = new ArrayList();

			// Write the needed fields of queryResGetStudentExemptionsByStudentId_outParamList to the storequeryResGetStudentExemptionsByStudentId_outParamList
			if (!queryResGetStudentExemptionsByStudentId_outParamList.Empty) {
				try {
					queryResGetStudentExemptionsByStudentId_outParamList.StartIteration();

					while (!queryResGetStudentExemptionsByStudentId_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList = new ArrayList();
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsMathExemption == false?(object) null: queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsMathExemption);
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsEnglishExemption == false?(object) null: queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsEnglishExemption);
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssLastUpdateOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssLastUpdateOn);
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssExemptionReason == "" ?(object) null: queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssExemptionReason);
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, true, true, false, true
						}
						))));
						tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, false, false, true, false
						}
						))));
						storequeryResGetStudentExemptionsByStudentId_outParamList.Add(tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList);
						queryResGetStudentExemptionsByStudentId_outParamList.Advance();
					}
				} finally {
					queryResGetStudentExemptionsByStudentId_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetStudentExemptionsByStudentId_outParamList", storequeryResGetStudentExemptionsByStudentId_outParamList, null);

			#endregion


			#region store queryResGetStudentExemptionsByStudentId_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetStudentExemptionsByStudentId_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentExemptionsByStudentId_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentExemptionsByStudentId_outParamList_eof", tmpeofqueryResGetStudentExemptionsByStudentId_outParamList, false);
			queryResGetStudentExemptionsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentExemptionsByStudentId_outParamList, tmpeofqueryResGetStudentExemptionsByStudentId_outParamList);

			#endregion


			#region store queryResGetAcademicYears_outParamList.

			int tmpcurrentrownumberqueryResGetAcademicYears_outParamList = queryResGetAcademicYears_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetAcademicYears_outParamList = queryResGetAcademicYears_outParamList.Eof;
			ArrayList storequeryResGetAcademicYears_outParamList = new ArrayList();

			// Write the needed fields of queryResGetAcademicYears_outParamList to the storequeryResGetAcademicYears_outParamList
			if (!queryResGetAcademicYears_outParamList.Empty) {
				try {
					queryResGetAcademicYears_outParamList.StartIteration();

					while (!queryResGetAcademicYears_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetAcademicYears_outParamList = new ArrayList();
						tmpFieldsqueryResGetAcademicYears_outParamList.Add(queryResGetAcademicYears_outParamList.CurrentRec.ssSTString.ssValue == "" ?(object) null: queryResGetAcademicYears_outParamList.CurrentRec.ssSTString.ssValue);
						storequeryResGetAcademicYears_outParamList.Add(tmpFieldsqueryResGetAcademicYears_outParamList);
						queryResGetAcademicYears_outParamList.Advance();
					}
				} finally {
					queryResGetAcademicYears_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetAcademicYears_outParamList", storequeryResGetAcademicYears_outParamList, null);

			#endregion


			#region store queryResGetAcademicYears_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetAcademicYears_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetAcademicYears_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetAcademicYears_outParamList_eof", tmpeofqueryResGetAcademicYears_outParamList, false);
			queryResGetAcademicYears_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetAcademicYears_outParamList, tmpeofqueryResGetAcademicYears_outParamList);

			#endregion


			#region store queryResGetActiveStudentGroups_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetActiveStudentGroups_outParamList = queryResGetActiveStudentGroups_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetActiveStudentGroups_outParamList = queryResGetActiveStudentGroups_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetActiveStudentGroups_outParamList_empty", queryResGetActiveStudentGroups_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetActiveStudentGroups_outParamList_length", queryResGetActiveStudentGroups_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetActiveStudentGroups_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetActiveStudentGroups_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetActiveStudentGroups_outParamList_eof", tmpeofqueryResGetActiveStudentGroups_outParamList, false);

			#endregion

			ViewStateAttributes.SetInViewState("resGetAcademicYearValues2_outParamAcademicYear_ssENAcademicYear2_ssYY_YY", resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYY_YY, "");
			ViewStateAttributes.SetInViewState("resGetAcademicYearValues2_outParamAcademicYear_ssENAcademicYear2_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ChangedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, true, false, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("resGetAcademicYearValues2_outParamAcademicYear_ssENAcademicYear2_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.OptimizedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, false, true, true, true, true, true
			}
			)))), null);

			#region store queryResGetWithdrawnStudentGroups_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetWithdrawnStudentGroups_outParamList = queryResGetWithdrawnStudentGroups_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetWithdrawnStudentGroups_outParamList = queryResGetWithdrawnStudentGroups_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetWithdrawnStudentGroups_outParamList_empty", queryResGetWithdrawnStudentGroups_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetWithdrawnStudentGroups_outParamList_length", queryResGetWithdrawnStudentGroups_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetWithdrawnStudentGroups_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetWithdrawnStudentGroups_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetWithdrawnStudentGroups_outParamList_eof", tmpeofqueryResGetWithdrawnStudentGroups_outParamList, false);

			#endregion


			#region store queryResGetStudents_outParamList.

			int tmpcurrentrownumberqueryResGetStudents_outParamList = queryResGetStudents_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudents_outParamList = queryResGetStudents_outParamList.Eof;
			ArrayList storequeryResGetStudents_outParamList = new ArrayList();

			// Write the needed fields of queryResGetStudents_outParamList to the storequeryResGetStudents_outParamList
			if (!queryResGetStudents_outParamList.Empty) {
				try {
					queryResGetStudents_outParamList.StartIteration();

					while (!queryResGetStudents_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetStudents_outParamList = new ArrayList();
						tmpFieldsqueryResGetStudents_outParamList.Add(queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.ssCurrentPlannedLearningHours == 0?(object) null: queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.ssCurrentPlannedLearningHours);
						tmpFieldsqueryResGetStudents_outParamList.Add(queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou == 0?(object) null: queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou);
						tmpFieldsqueryResGetStudents_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.ChangedAttributes, new BitArray(new bool[] {
							false, false, false, false, false, true, true
						}
						))));
						tmpFieldsqueryResGetStudents_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.OptimizedAttributes, new BitArray(new bool[] {
							true, true, true, true, true, false, false
						}
						))));
						storequeryResGetStudents_outParamList.Add(tmpFieldsqueryResGetStudents_outParamList);
						queryResGetStudents_outParamList.Advance();
					}
				} finally {
					queryResGetStudents_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetStudents_outParamList", storequeryResGetStudents_outParamList, null);

			#endregion


			#region store queryResGetStudents_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetStudents_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudents_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudents_outParamList_eof", tmpeofqueryResGetStudents_outParamList, false);
			queryResGetStudents_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudents_outParamList, tmpeofqueryResGetStudents_outParamList);

			#endregion


			#region store queryResGetTransferredStudentGroups_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetTransferredStudentGroups_outParamList = queryResGetTransferredStudentGroups_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetTransferredStudentGroups_outParamList = queryResGetTransferredStudentGroups_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetTransferredStudentGroups_outParamList_empty", queryResGetTransferredStudentGroups_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetTransferredStudentGroups_outParamList_length", queryResGetTransferredStudentGroups_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetTransferredStudentGroups_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetTransferredStudentGroups_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetTransferredStudentGroups_outParamList_eof", tmpeofqueryResGetTransferredStudentGroups_outParamList, false);

			#endregion


			#region store queryResGetExamEntriesByStudentReference_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetExamEntriesByStudentReference_outParamList = queryResGetExamEntriesByStudentReference_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetExamEntriesByStudentReference_outParamList = queryResGetExamEntriesByStudentReference_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetExamEntriesByStudentReference_outParamList_empty", queryResGetExamEntriesByStudentReference_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetExamEntriesByStudentReference_outParamList_length", queryResGetExamEntriesByStudentReference_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetExamEntriesByStudentReference_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetExamEntriesByStudentReference_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetExamEntriesByStudentReference_outParamList_eof", tmpeofqueryResGetExamEntriesByStudentReference_outParamList, false);

			#endregion


			#region store queryResGetCompletedStudentGroups_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetCompletedStudentGroups_outParamList = queryResGetCompletedStudentGroups_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCompletedStudentGroups_outParamList = queryResGetCompletedStudentGroups_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetCompletedStudentGroups_outParamList_empty", queryResGetCompletedStudentGroups_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetCompletedStudentGroups_outParamList_length", queryResGetCompletedStudentGroups_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetCompletedStudentGroups_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCompletedStudentGroups_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCompletedStudentGroups_outParamList_eof", tmpeofqueryResGetCompletedStudentGroups_outParamList, false);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("varLcSelectedTab", varLcSelectedTab, 0);
			ViewStateAttributes.SetInViewState("varLcAcademicYear", varLcAcademicYear, "");
			ViewStateAttributes.SetInViewState("wt_ComboBox2_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox2")).Mandatory, false);
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {

				#region fetch queryResGetStudentExemptionsByStudentId_outParamList.

				// Read the needed fields of queryResGetStudentExemptionsByStudentId_outParamList from storequeryResGetStudentExemptionsByStudentId_outParamList
				queryResGetStudentExemptionsByStudentId_outParamList = new RLUserStudentExemptionRecordList();
				ArrayList storequeryResGetStudentExemptionsByStudentId_outParamList;
				storequeryResGetStudentExemptionsByStudentId_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetStudentExemptionsByStudentId_outParamList", null);
				if (storequeryResGetStudentExemptionsByStudentId_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList in storequeryResGetStudentExemptionsByStudentId_outParamList) {
						if (tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList != null) {
							// Aux current record variable
							RCUserStudentExemptionRecord tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList = new RCUserStudentExemptionRecord(null);
							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[0] == null ? "": tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENStudentExemption.ssIsMathExemption = (bool) (tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[3] == null ? false: tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENStudentExemption.ssIsEnglishExemption = (bool) (tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[4] == null ? false: tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENStudentExemption.ssLastUpdateOn = (DateTime) (tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENStudentExemption.ssExemptionReason = (string) (tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[6] == null ? "": tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENStudentExemption.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList.ssENStudentExemption.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentExemptionsByStudentId_outParamList[8]);

							queryResGetStudentExemptionsByStudentId_outParamList.Append(tmpAuxCurrentRecordqueryResGetStudentExemptionsByStudentId_outParamList);
						}
					}
				}
				queryResGetStudentExemptionsByStudentId_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetStudentExemptionsByStudentId_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetStudentExemptionsByStudentId_outParamList;
				tmpcurrentrownumberqueryResGetStudentExemptionsByStudentId_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentExemptionsByStudentId_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentExemptionsByStudentId_outParamList;
				tmpeofqueryResGetStudentExemptionsByStudentId_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentExemptionsByStudentId_outParamList_eof", false);
				queryResGetStudentExemptionsByStudentId_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentExemptionsByStudentId_outParamList, tmpeofqueryResGetStudentExemptionsByStudentId_outParamList);

				#endregion


				#region fetch queryResGetAcademicYears_outParamList.

				// Read the needed fields of queryResGetAcademicYears_outParamList from storequeryResGetAcademicYears_outParamList
				queryResGetAcademicYears_outParamList = new RLStringRecordList();
				ArrayList storequeryResGetAcademicYears_outParamList;
				storequeryResGetAcademicYears_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetAcademicYears_outParamList", null);
				if (storequeryResGetAcademicYears_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetAcademicYears_outParamList in storequeryResGetAcademicYears_outParamList) {
						if (tmpFieldsqueryResGetAcademicYears_outParamList != null) {
							// Aux current record variable
							RCStringRecord tmpAuxCurrentRecordqueryResGetAcademicYears_outParamList = new RCStringRecord(null);
							tmpAuxCurrentRecordqueryResGetAcademicYears_outParamList.ssSTString.ssValue = (string) (tmpFieldsqueryResGetAcademicYears_outParamList[0] == null ? "": tmpFieldsqueryResGetAcademicYears_outParamList[0]);

							queryResGetAcademicYears_outParamList.Append(tmpAuxCurrentRecordqueryResGetAcademicYears_outParamList);
						}
					}
				}
				queryResGetAcademicYears_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetAcademicYears_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetAcademicYears_outParamList;
				tmpcurrentrownumberqueryResGetAcademicYears_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetAcademicYears_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetAcademicYears_outParamList;
				tmpeofqueryResGetAcademicYears_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetAcademicYears_outParamList_eof", false);
				queryResGetAcademicYears_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetAcademicYears_outParamList, tmpeofqueryResGetAcademicYears_outParamList);

				#endregion


				#region fetch queryResGetActiveStudentGroups_outParamList runtime properties state.

				queryResGetActiveStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
				bool tmpstorequeryResGetActiveStudentGroups_outParamList_empty;
				tmpstorequeryResGetActiveStudentGroups_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetActiveStudentGroups_outParamList_empty", false);
				int tmpstorequeryResGetActiveStudentGroups_outParamList_length;
				tmpstorequeryResGetActiveStudentGroups_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetActiveStudentGroups_outParamList_length", 0);
				while (tmpstorequeryResGetActiveStudentGroups_outParamList_length-- > 0) {
					queryResGetActiveStudentGroups_outParamList.Append(new RCGroupStudent_GroupRecord(null));
				}

				queryResGetActiveStudentGroups_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetActiveStudentGroups_outParamList;
				tmpcurrentrownumberqueryResGetActiveStudentGroups_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetActiveStudentGroups_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetActiveStudentGroups_outParamList;
				tmpeofqueryResGetActiveStudentGroups_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetActiveStudentGroups_outParamList_eof", false);
				queryResGetActiveStudentGroups_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetActiveStudentGroups_outParamList, tmpeofqueryResGetActiveStudentGroups_outParamList);
				queryResGetActiveStudentGroups_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetActiveStudentGroups_outParamList_empty);

				#endregion

				resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYY_YY = (string) ViewStateAttributes.GetFromViewState("resGetAcademicYearValues2_outParamAcademicYear_ssENAcademicYear2_ssYY_YY", "");
				resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("resGetAcademicYearValues2_outParamAcademicYear_ssENAcademicYear2_ChangedAttributes", null));
				resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("resGetAcademicYearValues2_outParamAcademicYear_ssENAcademicYear2_OptimizedAttributes", null));

				#region fetch queryResGetWithdrawnStudentGroups_outParamList runtime properties state.

				queryResGetWithdrawnStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
				bool tmpstorequeryResGetWithdrawnStudentGroups_outParamList_empty;
				tmpstorequeryResGetWithdrawnStudentGroups_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetWithdrawnStudentGroups_outParamList_empty", false);
				int tmpstorequeryResGetWithdrawnStudentGroups_outParamList_length;
				tmpstorequeryResGetWithdrawnStudentGroups_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetWithdrawnStudentGroups_outParamList_length", 0);
				while (tmpstorequeryResGetWithdrawnStudentGroups_outParamList_length-- > 0) {
					queryResGetWithdrawnStudentGroups_outParamList.Append(new RCGroupStudent_GroupRecord(null));
				}

				queryResGetWithdrawnStudentGroups_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetWithdrawnStudentGroups_outParamList;
				tmpcurrentrownumberqueryResGetWithdrawnStudentGroups_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetWithdrawnStudentGroups_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetWithdrawnStudentGroups_outParamList;
				tmpeofqueryResGetWithdrawnStudentGroups_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetWithdrawnStudentGroups_outParamList_eof", false);
				queryResGetWithdrawnStudentGroups_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetWithdrawnStudentGroups_outParamList, tmpeofqueryResGetWithdrawnStudentGroups_outParamList);
				queryResGetWithdrawnStudentGroups_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetWithdrawnStudentGroups_outParamList_empty);

				#endregion


				#region fetch queryResGetStudents_outParamList.

				// Read the needed fields of queryResGetStudents_outParamList from storequeryResGetStudents_outParamList
				queryResGetStudents_outParamList = new RLStudentAnnualValuesRecordList();
				ArrayList storequeryResGetStudents_outParamList;
				storequeryResGetStudents_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetStudents_outParamList", null);
				if (storequeryResGetStudents_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetStudents_outParamList in storequeryResGetStudents_outParamList) {
						if (tmpFieldsqueryResGetStudents_outParamList != null) {
							// Aux current record variable
							RCStudentAnnualValuesRecord tmpAuxCurrentRecordqueryResGetStudents_outParamList = new RCStudentAnnualValuesRecord(null);
							tmpAuxCurrentRecordqueryResGetStudents_outParamList.ssENStudentAnnualValues.ssCurrentPlannedLearningHours = (int) (tmpFieldsqueryResGetStudents_outParamList[0] == null ? 0: tmpFieldsqueryResGetStudents_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetStudents_outParamList.ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou = (int) (tmpFieldsqueryResGetStudents_outParamList[1] == null ? 0: tmpFieldsqueryResGetStudents_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetStudents_outParamList.ssENStudentAnnualValues.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudents_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetStudents_outParamList.ssENStudentAnnualValues.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudents_outParamList[3]);

							queryResGetStudents_outParamList.Append(tmpAuxCurrentRecordqueryResGetStudents_outParamList);
						}
					}
				}
				queryResGetStudents_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetStudents_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetStudents_outParamList;
				tmpcurrentrownumberqueryResGetStudents_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudents_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudents_outParamList;
				tmpeofqueryResGetStudents_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudents_outParamList_eof", false);
				queryResGetStudents_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudents_outParamList, tmpeofqueryResGetStudents_outParamList);

				#endregion


				#region fetch queryResGetTransferredStudentGroups_outParamList runtime properties state.

				queryResGetTransferredStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
				bool tmpstorequeryResGetTransferredStudentGroups_outParamList_empty;
				tmpstorequeryResGetTransferredStudentGroups_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetTransferredStudentGroups_outParamList_empty", false);
				int tmpstorequeryResGetTransferredStudentGroups_outParamList_length;
				tmpstorequeryResGetTransferredStudentGroups_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetTransferredStudentGroups_outParamList_length", 0);
				while (tmpstorequeryResGetTransferredStudentGroups_outParamList_length-- > 0) {
					queryResGetTransferredStudentGroups_outParamList.Append(new RCGroupStudent_GroupRecord(null));
				}

				queryResGetTransferredStudentGroups_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetTransferredStudentGroups_outParamList;
				tmpcurrentrownumberqueryResGetTransferredStudentGroups_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetTransferredStudentGroups_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetTransferredStudentGroups_outParamList;
				tmpeofqueryResGetTransferredStudentGroups_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetTransferredStudentGroups_outParamList_eof", false);
				queryResGetTransferredStudentGroups_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetTransferredStudentGroups_outParamList, tmpeofqueryResGetTransferredStudentGroups_outParamList);
				queryResGetTransferredStudentGroups_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetTransferredStudentGroups_outParamList_empty);

				#endregion


				#region fetch queryResGetExamEntriesByStudentReference_outParamList runtime properties state.

				queryResGetExamEntriesByStudentReference_outParamList = new RLExamEntryRecordList();
				bool tmpstorequeryResGetExamEntriesByStudentReference_outParamList_empty;
				tmpstorequeryResGetExamEntriesByStudentReference_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetExamEntriesByStudentReference_outParamList_empty", false);
				int tmpstorequeryResGetExamEntriesByStudentReference_outParamList_length;
				tmpstorequeryResGetExamEntriesByStudentReference_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetExamEntriesByStudentReference_outParamList_length", 0);
				while (tmpstorequeryResGetExamEntriesByStudentReference_outParamList_length-- > 0) {
					queryResGetExamEntriesByStudentReference_outParamList.Append(new RCExamEntryRecord(null));
				}

				queryResGetExamEntriesByStudentReference_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetExamEntriesByStudentReference_outParamList;
				tmpcurrentrownumberqueryResGetExamEntriesByStudentReference_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetExamEntriesByStudentReference_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetExamEntriesByStudentReference_outParamList;
				tmpeofqueryResGetExamEntriesByStudentReference_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetExamEntriesByStudentReference_outParamList_eof", false);
				queryResGetExamEntriesByStudentReference_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetExamEntriesByStudentReference_outParamList, tmpeofqueryResGetExamEntriesByStudentReference_outParamList);
				queryResGetExamEntriesByStudentReference_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetExamEntriesByStudentReference_outParamList_empty);

				#endregion


				#region fetch queryResGetCompletedStudentGroups_outParamList runtime properties state.

				queryResGetCompletedStudentGroups_outParamList = new RLGroupStudent_GroupRecordList();
				bool tmpstorequeryResGetCompletedStudentGroups_outParamList_empty;
				tmpstorequeryResGetCompletedStudentGroups_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetCompletedStudentGroups_outParamList_empty", false);
				int tmpstorequeryResGetCompletedStudentGroups_outParamList_length;
				tmpstorequeryResGetCompletedStudentGroups_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetCompletedStudentGroups_outParamList_length", 0);
				while (tmpstorequeryResGetCompletedStudentGroups_outParamList_length-- > 0) {
					queryResGetCompletedStudentGroups_outParamList.Append(new RCGroupStudent_GroupRecord(null));
				}

				queryResGetCompletedStudentGroups_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetCompletedStudentGroups_outParamList;
				tmpcurrentrownumberqueryResGetCompletedStudentGroups_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCompletedStudentGroups_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCompletedStudentGroups_outParamList;
				tmpeofqueryResGetCompletedStudentGroups_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCompletedStudentGroups_outParamList_eof", false);
				queryResGetCompletedStudentGroups_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCompletedStudentGroups_outParamList, tmpeofqueryResGetCompletedStudentGroups_outParamList);
				queryResGetCompletedStudentGroups_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetCompletedStudentGroups_outParamList_empty);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				varLcSelectedTab = (int) ViewStateAttributes.GetFromViewState("varLcSelectedTab", 0);
				varLcAcademicYear = (string) ViewStateAttributes.GetFromViewState("varLcAcademicYear", "");
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox2")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox2_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Parent.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Parent.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "CaseConferencing.KWDkkgrr900uymjDZ716diQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("WDkkgrr900uymjDZ716diQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		public class lcvSelectTab: VarsBag {
			public int inParamTab;
			public lcvSelectTab(int inParamTab) {
				this.inParamTab = inParamTab;
			}
		}
		/// <summary>
		/// Action <code>CommandSelectTab</code> that represents the Service Studio screen action
		///  <code>SelectTab</code> <p> Description: </p>
		/// </summary>
		private bool CommandSelectTab(HeContext heContext, int inParamTab) {
			CheckPermissions(heContext);
			lcvSelectTab localVars = new lcvSelectTab(inParamTab);
			try {
				varLcSelectedTab = localVars.inParamTab; // SelectedTab = Tab
				// Refresh Widget (wtMenuTab)
				((OSPageViewState) Page).AjaxRefresh(wtMenuTab, "None", StoreViewState);
				// Refresh Widget (wtContentArea)
				((OSPageViewState) Page).AjaxRefresh(wtContentArea, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((BuiltInFunction.Index(varLcAcademicYear, "/", 0, false, false) >(-1))) {
					varLcAcademicYear = BuiltInFunction.Replace(varLcAcademicYear, "/", ""); // AcademicYear = Replace

				}
				// Query datasetGetActiveStudentGroups
				{
					int datasetGetActiveStudentGroups_maxRecords = 0;
					queryResGetActiveStudentGroups_outParamList = FuncssPreparation.datasetGetActiveStudentGroups(heContext, datasetGetActiveStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetActiveStudentGroups_outParamCount, varLcAcademicYear
					, inParamStudentReference
					);
				}
				// Query datasetGetCompletedStudentGroups
				{
					int datasetGetCompletedStudentGroups_maxRecords = 0;
					queryResGetCompletedStudentGroups_outParamList = FuncssPreparation.datasetGetCompletedStudentGroups(heContext, datasetGetCompletedStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetCompletedStudentGroups_outParamCount, varLcAcademicYear
					, inParamStudentReference
					);
				}
				// Query datasetGetWithdrawnStudentGroups
				{
					int datasetGetWithdrawnStudentGroups_maxRecords = 0;
					queryResGetWithdrawnStudentGroups_outParamList = FuncssPreparation.datasetGetWithdrawnStudentGroups(heContext, datasetGetWithdrawnStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetWithdrawnStudentGroups_outParamCount, varLcAcademicYear
					, inParamStudentReference
					);
				}
				// Query datasetGetTransferredStudentGroups
				{
					int datasetGetTransferredStudentGroups_maxRecords = 0;
					queryResGetTransferredStudentGroups_outParamList = FuncssPreparation.datasetGetTransferredStudentGroups(heContext, datasetGetTransferredStudentGroups_maxRecords, IterationMultiplicity.Never, out queryResGetTransferredStudentGroups_outParamCount, varLcAcademicYear
					, inParamStudentReference
					);
				}
				// Created by the upgrade of 'GetStudents' to an Aggregate.
				varLcGetStudents_AcademicYear = varLcAcademicYear; // GetStudents_AcademicYear = AcademicYear
				// Query datasetGetStudents
				{
					int datasetGetStudents_maxRecords = 0;
					queryResGetStudents_outParamList = FuncssPreparation.datasetGetStudents(heContext, datasetGetStudents_maxRecords, IterationMultiplicity.Never, out queryResGetStudents_outParamCount, resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYY_YY
					, inParamStudentReference
					);
				}
				// Refresh Widget (wtFullYearPlannedLearningHoursWrapper)
				((OSPageViewState) Page).AjaxRefresh(wtFullYearPlannedLearningHoursWrapper, "None", StoreViewState);
				// Refresh Widget (wtEnrolmentsContainer)
				((OSPageViewState) Page).AjaxRefresh(wtEnrolmentsContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetStudentExemptionsByStudentId
				{
					int datasetGetStudentExemptionsByStudentId_maxRecords = 0;
					queryResGetStudentExemptionsByStudentId_outParamList = FuncssPreparation.datasetGetStudentExemptionsByStudentId(heContext, datasetGetStudentExemptionsByStudentId_maxRecords, IterationMultiplicity.Never, out queryResGetStudentExemptionsByStudentId_outParamCount, inParamStudentReference
					);
				}
				// Refresh Widget (wtExemptionContainer)
				((OSPageViewState) Page).AjaxRefresh(wtExemptionContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container43_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container43_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container51_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container51_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container51_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container51_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container51)
		/// </summary>
		/// <returns>The Visible State of wt_Container51</returns>
		public bool cnt_Container51_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container53_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container53_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container53_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container53_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container53)
		/// </summary>
		/// <returns>The Visible State of wt_Container53</returns>
		public bool cnt_Container53_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntMenuTab_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntMenuTab_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntMenuTab_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntMenuTab_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtMenuTab)
		/// </summary>
		/// <returns>The Visible State of wtMenuTab</returns>
		public bool cntMenuTab_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntProgramme_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntProgramme_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntProgramme_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==1)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==1)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem"));
				if (!cntProgramme_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtProgramme
		/// </summary>
		public void cntProgramme_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 1)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtProgramme)
		/// </summary>
		/// <returns>The Visible State of wtProgramme</returns>
		public bool cntProgramme_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container1_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container1_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = p+8ehWEskEeKRdT8jBwvIg) Expression: "Programme"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression30() {
			return "Programme";
		}
		public void cntExamEntry_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntExamEntry_setInlineAttributes(sender, e);
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntExamEntry_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = (((varLcSelectedTab==4)) ?("opacity:1;"):("opacity:0.6;"));
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				((WebControl) sender).CssClass = (((varLcSelectedTab==4)) ?("ProgressReportMenuItemSelectedCard"):("ProgressReportMenuItem")) + " OSAutoMarginTop";
				if (!cntExamEntry_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxClick event handler for widget wtExamEntry
		/// </summary>
		public void cntExamEntry_AjaxClick(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandSelectTab(heContext
				, 4)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtExamEntry)
		/// </summary>
		/// <returns>The Visible State of wtExamEntry</returns>
		public bool cntExamEntry_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container26_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container26_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = occ7xRfEm0KX_Gz930Et9g) Expression: "Exam Entries"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression57() {
			return "Exam Entries";
		}
		bool if_wt_If74_hasRun=false;
		bool if_wt_If74_evalResult;
		public bool if_wt_If74() {
			if (if_wt_If74_hasRun) {
				if_wt_If74_hasRun = false;
				return if_wt_If74_evalResult;
			}
			if_wt_If74_hasRun = true;
			if_wt_If74_evalResult = (!queryResGetExamEntriesByStudentReference_outParamList.Empty);
			return if_wt_If74_evalResult;
		}

		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container10_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container10_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = _8NplE3cIUSlwR2PCjpREA) Expression:
		///  GetExamEntriesByStudentReference.List.Length + " exams"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression35() {
			return (Convert.ToString(queryResGetExamEntriesByStudentReference_outParamList.Length) + " exams");
		}
		public void cntContentArea_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntContentArea_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntContentArea_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntContentArea_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtContentArea)
		/// </summary>
		/// <returns>The Visible State of wtContentArea</returns>
		public bool cntContentArea_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If6_hasRun=false;
		bool if_wt_If6_evalResult;
		public bool if_wt_If6() {
			if (if_wt_If6_hasRun) {
				if_wt_If6_hasRun = false;
				return if_wt_If6_evalResult;
			}
			if_wt_If6_hasRun = true;
			if_wt_If6_evalResult = (varLcSelectedTab==1);
			return if_wt_If6_evalResult;
		}

		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container18_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container18_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container45_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container45_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		bool if_wt_If23_hasRun=false;
		bool if_wt_If23_evalResult;
		public bool if_wt_If23() {
			if (if_wt_If23_hasRun) {
				if_wt_If23_hasRun = false;
				return if_wt_If23_evalResult;
			}
			if_wt_If23_hasRun = true;
			if_wt_If23_evalResult = (queryResGetAcademicYears_outParamList.Length>1);
			return if_wt_If23_evalResult;
		}

		public void sel_ComboBox2_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
				if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

				RLStringRecordList Rt_wt_ComboBox2_reclist = queryResGetAcademicYears_outParamList;
				Rt_wt_ComboBox2_reclist.StartIteration();
				try {
					while (!Rt_wt_ComboBox2_reclist.Eof) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox2_reclist.CurrentRec.ssSTString.ssValue, Rt_wt_ComboBox2_reclist.CurrentRec.ssSTString.ssValue));
						if (varLcAcademicYear == Convert.ToString(Rt_wt_ComboBox2_reclist.CurrentRec.ssSTString.ssValue)) {
							((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
						}
						Rt_wt_ComboBox2_reclist.Advance();
					}
				} finally {
					Rt_wt_ComboBox2_reclist.EndIteration();
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox2
		/// </summary>
		public void sel_ComboBox2_AjaxChange(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnChange(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void sel_ComboBox2_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox2.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcAcademicYear = "";
			}
			else {
				Rt_wt_ComboBox2.SpecialListVal = "";
				try {
					varLcAcademicYear = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox2)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox2</returns>
		public bool sel_ComboBox2_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox2)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox2</returns>
		public bool sel_ComboBox2_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox2)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox2</returns>
		public bool sel_ComboBox2_isMandatory() {
			return false;
		}

		/// <summary>
		/// Function to dump expression (Key = g64Ly36am0KrpODByBk0dQ) Expression: Substr + "/" + Substr
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression59() {
			return ((BuiltInFunction.Substr(varLcAcademicYear, 0, 2) + "/") +BuiltInFunction.Substr(varLcAcademicYear, 2, 2));
		}
		public void wtCellExemp_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				wtCellExemp_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string wtCellExemp_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "vertical-align: middle";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntExemptionContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntExemptionContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntExemptionContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntExemptionContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtExemptionContainer)
		/// </summary>
		/// <returns>The Visible State of wtExemptionContainer</returns>
		public bool cntExemptionContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container61_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container61_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the "Checked" Value of the Check Box x9qTyCXhVkugNdLeTUqSrQ
		/// </summary>
		/// <returns>The Value of the Check Box x9qTyCXhVkugNdLeTUqSrQ</returns>
		public bool chk_CheckBox58_checked_value() {
			return queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsMathExemption;
		}
		public void chk_CheckBox58_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsMathExemption = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox58)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox58</returns>
		public bool chk_CheckBox58_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox58)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox58</returns>
		public bool chk_CheckBox58_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container50_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container50_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (Functions.rssespaceuserpermissions_ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("zeGoE7VBVE+WRow3d0jncw")).ssId) ==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void RichWidgets_webBlck_WebBlockInstance28_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
				widget.inParamLinkOrButtonWidgetId = wtEditExemptions.ClientID;
				widget.inParamTitle = " ";
				widget.inParamWidthPx = -1;
				widget.inParamHeightPx = -1;
				widget.inParamAutoResize = true;
				widget.inParamRecenterOnResize = false;
				widget.inParamHideCloseButton = false;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance28
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance28_AjaxNotify(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (CommandOnNotify(heContext
				)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtEditExemptions)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtEditExemptions)</returns>
		public string lnkEditExemptions_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId || (this.Page is IEmailScreen) || !((IWebScreen) Page).isSecure) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "PopupExemption", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtEditExemptions)
		/// </summary>
		/// <returns>title of the Link (wtEditExemptions)</returns>
		public string
		lnkEditExemptions_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtEditExemptions)
		/// </summary>
		/// <returns>The Visible State of wtEditExemptions</returns>
		public bool lnkEditExemptions_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtEditExemptions)
		/// </summary>
		/// <returns>The Enabled State of wtEditExemptions</returns>
		public bool lnkEditExemptions_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void RichWidgets_webBlck_WebBlockInstance33_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
				widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
				widget.inParamSize = "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container24_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container24_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Gets the "Checked" Value of the Check Box jTT9_d_B5kSbjxadm1Tb5w
		/// </summary>
		/// <returns>The Value of the Check Box jTT9_d_B5kSbjxadm1Tb5w</returns>
		public bool chk_CheckBox75_checked_value() {
			return queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsEnglishExemption;
		}
		public void chk_CheckBox75_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssIsEnglishExemption = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox75)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox75</returns>
		public bool chk_CheckBox75_isEnabled() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return false; 
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox75)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox75</returns>
		public bool chk_CheckBox75_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container41_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container41_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = pQ7eC+YkUEGdHUQ1bJ_QJg) Expression:
		///  GetStudentExemptionsByStudentId.List.Current.StudentExemption.ExemptionReason
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssExemptionReason;
		}
		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container44_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container44_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = depFpdiF4UiI4+Zlq1dypQ) Expression: "Last updated by : " +
		///  GetStudentExemptionsByStudentId.List.Current.User.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression42() {
			return (("Last updated by : " +queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENUser.ssName) + " on ");
		}
		public void cnt_Container62_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container62_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container62_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "font-size: 12px;color: #888;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container62_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container62)
		/// </summary>
		/// <returns>The Visible State of wt_Container62</returns>
		public bool cnt_Container62_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance55_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
				widget.inParamDate = Convert.ToDateTime(queryResGetStudentExemptionsByStudentId_outParamList.CurrentRec.ssENStudentExemption.ssLastUpdateOn.ToString("yyyy-M-d"));
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntFullYearPlannedLearningHoursWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntFullYearPlannedLearningHoursWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntFullYearPlannedLearningHoursWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntFullYearPlannedLearningHoursWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtFullYearPlannedLearningHoursWrapper)
		/// </summary>
		/// <returns>The Visible State of wtFullYearPlannedLearningHoursWrapper</returns>
		public bool cntFullYearPlannedLearningHoursWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container36_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container36_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntPlannedLearningHoursWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntPlannedLearningHoursWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntPlannedLearningHoursWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntPlannedLearningHoursWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPlannedLearningHoursWrapper)
		/// </summary>
		/// <returns>The Visible State of wtPlannedLearningHoursWrapper</returns>
		public bool cntPlannedLearningHoursWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntPlannedLearningHoursTitle_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntPlannedLearningHoursTitle_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntPlannedLearningHoursTitle_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntPlannedLearningHoursTitle_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPlannedLearningHoursTitle)
		/// </summary>
		/// <returns>The Visible State of wtPlannedLearningHoursTitle</returns>
		public bool cntPlannedLearningHoursTitle_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntPlannedLearningHoursValue_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntPlannedLearningHoursValue_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntPlannedLearningHoursValue_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntPlannedLearningHoursValue_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPlannedLearningHoursValue)
		/// </summary>
		/// <returns>The Visible State of wtPlannedLearningHoursValue</returns>
		public bool cntPlannedLearningHoursValue_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = OaVBIC_Q3kOpQ0AYa40wWA) Expression:
		///  GetStudents.List.Current.StudentAnnualValues.CurrentPlannedLearningHours
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression13() {
			return Convert.ToString(queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.ssCurrentPlannedLearningHours);
		}
		public void cntPlannedEEPLearningHoursWrapper_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntPlannedEEPLearningHoursWrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntPlannedEEPLearningHoursWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "float:right;margin-right:0px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntPlannedEEPLearningHoursWrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPlannedEEPLearningHoursWrapper)
		/// </summary>
		/// <returns>The Visible State of wtPlannedEEPLearningHoursWrapper</returns>
		public bool cntPlannedEEPLearningHoursWrapper_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cnt_Container68_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container68_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container68_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cnt_Container68_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container68)
		/// </summary>
		/// <returns>The Visible State of wt_Container68</returns>
		public bool cnt_Container68_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntPlannedEEPLearningHoursValue_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntPlannedEEPLearningHoursValue_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntPlannedEEPLearningHoursValue_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntPlannedEEPLearningHoursValue_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPlannedEEPLearningHoursValue)
		/// </summary>
		/// <returns>The Visible State of wtPlannedEEPLearningHoursValue</returns>
		public bool cntPlannedEEPLearningHoursValue_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Function to dump expression (Key = J2J_8SxUEkGT0_a0M7TR7Q) Expression:
		///  GetStudents.List.Current.StudentAnnualValues.CurrentPlannedEEPLearningHou
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression70() {
			return Convert.ToString(queryResGetStudents_outParamList.CurrentRec.ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou);
		}
		public void cnt_Container52_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cnt_Container52_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cnt_Container52_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "margin-left:0px;margin-right:0px";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cnt_Container52_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container52)
		/// </summary>
		/// <returns>The Visible State of wt_Container52</returns>
		public bool cnt_Container52_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntEnrolmentsContainer_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntEnrolmentsContainer_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntEnrolmentsContainer_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				if (!cntEnrolmentsContainer_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtEnrolmentsContainer)
		/// </summary>
		/// <returns>The Visible State of wtEnrolmentsContainer</returns>
		public bool cntEnrolmentsContainer_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return true;
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void cntActiveEnrolments_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntActiveEnrolments_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntActiveEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-top:20px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntActiveEnrolments_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtActiveEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtActiveEnrolments</returns>
		public bool cntActiveEnrolments_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetActiveStudentGroups_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance46_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo widget = (ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamAcademicYear = BuiltInFunction.Replace(varLcAcademicYear, "/", "");
				widget.inParamVisible = true;
				widget.inParamEnrolmentStatus = "Active";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntCompletedEnrolments_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntCompletedEnrolments_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntCompletedEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-top:20px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntCompletedEnrolments_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtCompletedEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtCompletedEnrolments</returns>
		public bool cntCompletedEnrolments_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetCompletedStudentGroups_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance69_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo widget = (ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamAcademicYear = varLcAcademicYear;
				widget.inParamVisible = false;
				widget.inParamEnrolmentStatus = "Completed";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntWithdrawnEnrolments_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntWithdrawnEnrolments_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntWithdrawnEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-top:20px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntWithdrawnEnrolments_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtWithdrawnEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtWithdrawnEnrolments</returns>
		public bool cntWithdrawnEnrolments_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetWithdrawnStudentGroups_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance71_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo widget = (ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamAcademicYear = varLcAcademicYear;
				widget.inParamVisible = false;
				widget.inParamEnrolmentStatus = "Withdrawn";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public void cntTransferredEnrolments_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				cntTransferredEnrolments_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public string cntTransferredEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = "padding-top:20px;";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
				if (!cntTransferredEnrolments_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTransferredEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtTransferredEnrolments</returns>
		public bool cntTransferredEnrolments_isVisible() {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				return (!queryResGetTransferredStudentGroups_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void webBlck_WebBlockInstance8_onDataBinding(object sender, System.EventArgs e) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo widget = (ssCaseConferencing.Flows.FlowLearner_Programme.WBlkLearnerDetails_ProgrammeInfo) sender;
				widget.inParamStudentReference = inParamStudentReference;
				widget.inParamAcademicYear = varLcAcademicYear;
				widget.inParamVisible = false;
				widget.inParamEnrolmentStatus = "Transferred";
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}
		public static class FuncCommandSelectTab {
		}
		public static class FuncCommandOnChange {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncssPreparation {

			private static void datasetGetStudentExemptionsByStudentIdReadDB(ref RCUserStudentExemptionRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENStudentExemption.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudentExemptionsByStudentId" of Action "Preparation"
			/// </summary>
			public static RLUserStudentExemptionRecordList datasetGetStudentExemptionsByStudentId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query APrqagplVES_zjnwEnVqbw Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENStudentExemption.[ISMATHEXEMPTION] o3, ENStudentExemption.[ISENGLISHEXEMPTION] o4, ENStudentExemption.[LASTUPDATEON] o5, NULL o6, ENStudentExemption.[EXEMPTIONREASON] o7, NULL o8, ENUser.[NAME] o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17");
				fromBuilder.Append(" FROM ({StudentExemption} ENStudentExemption Left JOIN {User} ENUser ON (ENStudentExemption.[LASTUPDATEBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENStudentExemption.[STUDENTID] = @qpstP) AND (ENStudentExemption.[STUDENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENStudentExemption.[STUDENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserStudentExemptionRecordList outParamList = new RLUserStudentExemptionRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentExemptionsByStudentIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, false, false, false, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserStudentExemptionRecordList _tmp = new RLUserStudentExemptionRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentExemptionsByStudentIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetStudentExemptionsByStudentId.List");
						outParamList = (RLUserStudentExemptionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetStudentExemptionsByStudentId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserStudentExemptionRecordList _tmp = new RLUserStudentExemptionRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentExemptionsByStudentIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetStudentExemptionsByStudentId.List");
							outParamList = (RLUserStudentExemptionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetStudentExemptionsByStudentId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetAcademicYears" of Action "Preparation"
			/// </summary>
			public static RLStringRecordList QueryGetAcademicYears(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT DISTINCT LEFT( {Student_Group}.[ACADEMICYEAR],2) + '/' + RIGHT( {Student_Group}.[ACADEMICYEAR],2) FROM  {Student_Group}  " +
				 "WHERE  {Student_Group}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "ORDER BY LEFT( {Student_Group}.[ACADEMICYEAR],2) + '/' + RIGHT( {Student_Group}.[ACADEMICYEAR],2) DESC";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringRecordList outParamList = new RLStringRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringRecordList _tmp = new RLStringRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetAcademicYears.List");
							outParamList = (RLStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetAcademicYears.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetAcademicYears.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetAcademicYears in Preparation in Programme_Tab in Learner_Programme in CaseConferencing (SELECT DISTINCT LEFT({Student_Group}.[AcademicYear],2) + '/' + RIGHT({Student_Group}.[AcademicYear],2) FROM {Student_Group}  WHERE {Student_Group}.[StudentReference] = @StudentReference  ORDER BY LEFT({Student_Group}.[AcademicYear],2) + '/' + RIGHT({Student_Group}.[AcademicYear],2) DESC ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetAcademicYears in Preparation in Programme_Tab in Learner_Programme in CaseConferencing (SELECT DISTINCT LEFT({Student_Group}.[AcademicYear],2) + '/' + RIGHT({Student_Group}.[AcademicYear],2) FROM {Student_Group}  WHERE {Student_Group}.[StudentReference] = @StudentReference  ORDER BY LEFT({Student_Group}.[AcademicYear],2) + '/' + RIGHT({Student_Group}.[AcademicYear],2) DESC ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetAcademicYears in Preparation in Programme_Tab in Learner_Programme in CaseConferencing (SELECT DISTINCT LEFT({Student_Group}.[AcademicYear],2) + '/' + RIGHT({Student_Group}.[AcademicYear],2) FROM {Student_Group}  WHERE {Student_Group}.[StudentReference] = @StudentReference  ORDER BY LEFT({Student_Group}.[AcademicYear],2) + '/' + RIGHT({Student_Group}.[AcademicYear],2) DESC ): " + aqExcep.Message);
				}
			}

			private static void datasetGetActiveStudentGroupsReadDB(ref RCGroupStudent_GroupRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssENStudent_Group.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetActiveStudentGroups" of Action "Preparation"
			/// </summary>
			public static RLGroupStudent_GroupRecordList datasetGetActiveStudentGroups(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query RBhbxOY+Rk+l3tG9xw4rEw Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18");
				fromBuilder.Append(" FROM ({Student_Group} ENStudent_Group Left JOIN {Group} ENGroup ON (ENStudent_Group.[GROUPID] = ENGroup.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudent_Group.[STUDENTREFERENCE] = @qpstP1) AND (ENStudent_Group.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudent_Group.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENStudent_Group.[ACADEMICYEAR] = @qpstP) AND (ENStudent_Group.[ENROLMENTSTATUS] = N'Active') AND ((ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("bv9oNr5fcEeiTTOayxItRA")).ssId);
				whereBuilder.Append(") AND (ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("Cp7zhw6zqku08n27eJqK7A")).ssId);
				whereBuilder.Append("))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupStudent_GroupRecordList outParamList = new RLGroupStudent_GroupRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetActiveStudentGroupsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
					_tmp.AlternateReadDBMethod = datasetGetActiveStudentGroupsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetActiveStudentGroups.List");
						outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetActiveStudentGroups.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
						_tmp.AlternateReadDBMethod = datasetGetActiveStudentGroupsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetActiveStudentGroups.List");
							outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetActiveStudentGroups.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetWithdrawnStudentGroupsReadDB(ref RCGroupStudent_GroupRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssENStudent_Group.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetWithdrawnStudentGroups" of Action "Preparation"
			/// </summary>
			public static RLGroupStudent_GroupRecordList datasetGetWithdrawnStudentGroups(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query jy1Eehl73EmVS3orLnQ2Vg Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18");
				fromBuilder.Append(" FROM ({Student_Group} ENStudent_Group Left JOIN {Group} ENGroup ON (ENStudent_Group.[GROUPID] = ENGroup.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudent_Group.[STUDENTREFERENCE] = @qpstP1) AND (ENStudent_Group.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudent_Group.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENStudent_Group.[ACADEMICYEAR] = @qpstP) AND (ENStudent_Group.[ENROLMENTSTATUS] = N'Withdrawn') AND ((ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("bv9oNr5fcEeiTTOayxItRA")).ssId);
				whereBuilder.Append(") AND (ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("Cp7zhw6zqku08n27eJqK7A")).ssId);
				whereBuilder.Append("))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupStudent_GroupRecordList outParamList = new RLGroupStudent_GroupRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetWithdrawnStudentGroupsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
					_tmp.AlternateReadDBMethod = datasetGetWithdrawnStudentGroupsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetWithdrawnStudentGroups.List");
						outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetWithdrawnStudentGroups.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
						_tmp.AlternateReadDBMethod = datasetGetWithdrawnStudentGroupsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetWithdrawnStudentGroups.List");
							outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetWithdrawnStudentGroups.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetStudents" of Action "Preparation"
			/// </summary>
			public static RLStudentAnnualValuesRecordList datasetGetStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query BjwPDYUqV0G83Kn3tZ+URQ Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, ENStudentAnnualValues.[CURRENTPLANNEDLEARNINGHOURS] o6, ENStudentAnnualValues.[CURRENTPLANNEDEEPLEARNINGHOU] o7");
				fromBuilder.Append(" FROM {StudentAnnualValues} ENStudentAnnualValues");
				whereBuilder.Append(" WHERE ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudentAnnualValues.[STUDENTREFERENCE] = @qpstP1) AND (ENStudentAnnualValues.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudentAnnualValues.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENStudentAnnualValues.[ACADEMICYEAR] = @qpstP)");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentAnnualValuesRecordList outParamList = new RLStudentAnnualValuesRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentAnnualValuesRecordList _tmp = new RLStudentAnnualValuesRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetStudents.List");
						outParamList = (RLStudentAnnualValuesRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetStudents.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentAnnualValuesRecordList _tmp = new RLStudentAnnualValuesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetStudents.List");
							outParamList = (RLStudentAnnualValuesRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetTransferredStudentGroupsReadDB(ref RCGroupStudent_GroupRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssENStudent_Group.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetTransferredStudentGroups" of Action "Preparation"
			/// </summary>
			public static RLGroupStudent_GroupRecordList datasetGetTransferredStudentGroups(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query Gcq8_1fFi02cKNYgKDkSuA Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18");
				fromBuilder.Append(" FROM ({Student_Group} ENStudent_Group Left JOIN {Group} ENGroup ON (ENStudent_Group.[GROUPID] = ENGroup.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudent_Group.[STUDENTREFERENCE] = @qpstP1) AND (ENStudent_Group.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudent_Group.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENStudent_Group.[ACADEMICYEAR] = @qpstP) AND (ENStudent_Group.[ENROLMENTSTATUS] = N'Transferred') AND ((ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("bv9oNr5fcEeiTTOayxItRA")).ssId);
				whereBuilder.Append(") AND (ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("Cp7zhw6zqku08n27eJqK7A")).ssId);
				whereBuilder.Append("))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupStudent_GroupRecordList outParamList = new RLGroupStudent_GroupRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetTransferredStudentGroupsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
					_tmp.AlternateReadDBMethod = datasetGetTransferredStudentGroupsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetTransferredStudentGroups.List");
						outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetTransferredStudentGroups.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
						_tmp.AlternateReadDBMethod = datasetGetTransferredStudentGroupsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetTransferredStudentGroups.List");
							outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetTransferredStudentGroups.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetExamEntriesByStudentReference" of Action "Preparation"
			/// </summary>
			public static RLExamEntryRecordList datasetGetExamEntriesByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17");
				fromBuilder.Append(" FROM {ExamEntry} ENExamEntry");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENExamEntry.[STUDENTREFERENCE] = @qpstP) AND (ENExamEntry.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENExamEntry.[STUDENTREFERENCE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLExamEntryRecordList outParamList = new RLExamEntryRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLExamEntryRecordList _tmp = new RLExamEntryRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetExamEntriesByStudentReference.List");
						outParamList = (RLExamEntryRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetExamEntriesByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLExamEntryRecordList _tmp = new RLExamEntryRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetExamEntriesByStudentReference.List");
							outParamList = (RLExamEntryRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetExamEntriesByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetCompletedStudentGroupsReadDB(ref RCGroupStudent_GroupRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssENStudent_Group.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetCompletedStudentGroups" of Action "Preparation"
			/// </summary>
			public static RLGroupStudent_GroupRecordList datasetGetCompletedStudentGroups(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query oc9E1SNdd0a5UomKzAdoCg Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18");
				fromBuilder.Append(" FROM ({Student_Group} ENStudent_Group Left JOIN {Group} ENGroup ON (ENStudent_Group.[GROUPID] = ENGroup.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudent_Group.[STUDENTREFERENCE] = @qpstP1) AND (ENStudent_Group.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudent_Group.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENStudent_Group.[ACADEMICYEAR] = @qpstP) AND (ENStudent_Group.[ENROLMENTSTATUS] = N'Completed') AND ((ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("bv9oNr5fcEeiTTOayxItRA")).ssId);
				whereBuilder.Append(") AND (ENGroup.[GROUPTYPEID] <> ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("Cp7zhw6zqku08n27eJqK7A")).ssId);
				whereBuilder.Append("))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupStudent_GroupRecordList outParamList = new RLGroupStudent_GroupRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetCompletedStudentGroupsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
					_tmp.AlternateReadDBMethod = datasetGetCompletedStudentGroupsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetCompletedStudentGroups.List");
						outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetCompletedStudentGroups.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupStudent_GroupRecordList _tmp = new RLGroupStudent_GroupRecordList();
						_tmp.AlternateReadDBMethod = datasetGetCompletedStudentGroupsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.Programme_Tab.Preparation.GetCompletedStudentGroups.List");
							outParamList = (RLGroupStudent_GroupRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.Programme_Tab.Preparation.GetCompletedStudentGroups.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "CaseConferencing.KWDkkgrr900uymjDZ716diQ";
			}
		}
	}

}
